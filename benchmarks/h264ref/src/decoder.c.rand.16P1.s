	.text
	.file	"decoder.c"
	.globl	decode_one_b8block      # -- Begin function decode_one_b8block
	.p2align	4, 0x90
	.type	decode_one_b8block,@function
decode_one_b8block:                     # @decode_one_b8block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB0_17
# %bb.1:                                # %func_decode_one_b8block.8
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.8
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_decode_one_b8block.13
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.13
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_decode_one_b8block.27
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.27
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_decode_one_b8block.28
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.28
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_decode_one_b8block.29
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.29
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_decode_one_b8block.32
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.32
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_decode_one_b8block.34
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.34
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_decode_one_b8block.35
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.35
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %func_decode_one_b8block.83
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.83
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %func_decode_one_b8block.86
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.86
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_11:                               # %func_decode_one_b8block.90
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.90
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_12:                               # %func_decode_one_b8block.92
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.92
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_13:                               # %func_decode_one_b8block.96
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.96
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_14:                               # %func_decode_one_b8block.98
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.98
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_15:                               # %func_decode_one_b8block.106
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.106
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_16:                               # %func_decode_one_b8block.108
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.108
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB0_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB0_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB0_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB0_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB0_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB0_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB0_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB0_15
	jmp	.LBB0_16
.Lfunc_end0:
	.size	decode_one_b8block, .Lfunc_end0-decode_one_b8block
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block     # -- Begin function Get_Reference_Block
	.p2align	4, 0x90
	.type	Get_Reference_Block,@function
Get_Reference_Block:                    # @Get_Reference_Block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB1_17
# %bb.1:                                # %func_Get_Reference_Block.3
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	Get_Reference_Block.3
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_Get_Reference_Block.12
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movq	%r10, %r9
	callq	Get_Reference_Block.12
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_Get_Reference_Block.15
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.15
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_Get_Reference_Block.25
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.25
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %func_Get_Reference_Block.33
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.33
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_6:                                # %func_Get_Reference_Block.46
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.46
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_7:                                # %func_Get_Reference_Block.48
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.48
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_8:                                # %func_Get_Reference_Block.53
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.53
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_9:                                # %func_Get_Reference_Block.63
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.63
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_10:                               # %func_Get_Reference_Block.70
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.70
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_11:                               # %func_Get_Reference_Block.94
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.94
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_12:                               # %func_Get_Reference_Block.103
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.103
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_13:                               # %func_Get_Reference_Block.112
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.112
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_14:                               # %func_Get_Reference_Block.114
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.114
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_15:                               # %func_Get_Reference_Block.119
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movq	%r10, %r9
	callq	Get_Reference_Block.119
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_16:                               # %func_Get_Reference_Block.120
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movq	%r10, %r9
	callq	Get_Reference_Block.120
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %r11d
	movq	-48(%rbp), %r10         # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	movq	%r10, %r9
	movl	%r11d, %r8d
	movl	%r13d, %r15d
	movl	%edx, %r12d
	movl	%esi, %r14d
	movq	%rdi, %rbx
	je	.LBB1_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB1_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB1_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB1_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB1_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB1_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB1_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB1_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB1_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB1_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB1_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB1_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB1_15
	jmp	.LBB1_16
.Lfunc_end1:
	.size	Get_Reference_Block, .Lfunc_end1-Get_Reference_Block
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb           # -- Begin function decode_one_mb
	.p2align	4, 0x90
	.type	decode_one_mb,@function
decode_one_mb:                          # @decode_one_mb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_2
# %bb.1:                                # %func_decode_one_mb.6
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	decode_one_mb.6
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_decode_one_mb.10
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	decode_one_mb.10
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	decode_one_mb, .Lfunc_end2-decode_one_mb
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel     # -- Begin function Get_Reference_Pixel
	.p2align	4, 0x90
	.type	Get_Reference_Pixel,@function
Get_Reference_Pixel:                    # @Get_Reference_Pixel
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_17
# %bb.1:                                # %func_Get_Reference_Pixel.2
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.2
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_Get_Reference_Pixel.7
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.7
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_Get_Reference_Pixel.9
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.9
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_Get_Reference_Pixel.23
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.23
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_Get_Reference_Pixel.31
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.31
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_Get_Reference_Pixel.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.44
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_Get_Reference_Pixel.57
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.57
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_Get_Reference_Pixel.62
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.62
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %func_Get_Reference_Pixel.65
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.65
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_10:                               # %func_Get_Reference_Pixel.75
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.75
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_11:                               # %func_Get_Reference_Pixel.78
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.78
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_12:                               # %func_Get_Reference_Pixel.79
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.79
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_13:                               # %func_Get_Reference_Pixel.85
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.85
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_14:                               # %func_Get_Reference_Pixel.87
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.87
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_15:                               # %func_Get_Reference_Pixel.99
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.99
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_16:                               # %func_Get_Reference_Pixel.102
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.102
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB3_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB3_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB3_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB3_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB3_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB3_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB3_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB3_15
	jmp	.LBB3_16
.Lfunc_end3:
	.size	Get_Reference_Pixel, .Lfunc_end3-Get_Reference_Pixel
	.cfi_endproc
                                        # -- End function
	.globl	UpdateDecoders          # -- Begin function UpdateDecoders
	.p2align	4, 0x90
	.type	UpdateDecoders,@function
UpdateDecoders:                         # @UpdateDecoders
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
.LBB4_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB4_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	decs, %rax
	movq	40(%rax), %rdi
	callq	Build_Status_Map
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	decs, %rax
	movq	40(%rax), %rsi
	movq	decs, %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	callq	Error_Concealment
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	decs, %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	DecOneForthPix
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB4_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_1
.LBB4_4:                                # %for.end
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end4:
	.size	UpdateDecoders, .Lfunc_end4-UpdateDecoders
	.cfi_endproc
                                        # -- End function
	.globl	Build_Status_Map        # -- Begin function Build_Status_Map
	.p2align	4, 0x90
	.type	Build_Status_Map,@function
Build_Status_Map:                       # @Build_Status_Map
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB5_17
# %bb.1:                                # %func_Build_Status_Map.22
	movq	%rbx, %rdi
	callq	Build_Status_Map.22
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_Build_Status_Map.24
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.24
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_Build_Status_Map.36
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.36
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_Build_Status_Map.38
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.38
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_Build_Status_Map.67
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.67
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_Build_Status_Map.73
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.73
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_Build_Status_Map.77
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.77
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_Build_Status_Map.100
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.100
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %func_Build_Status_Map.105
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.105
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_10:                               # %func_Build_Status_Map.115
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.115
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_11:                               # %func_Build_Status_Map.117
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.117
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_12:                               # %func_Build_Status_Map.121
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.121
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_13:                               # %func_Build_Status_Map.125
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.125
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_14:                               # %func_Build_Status_Map.128
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.128
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_15:                               # %func_Build_Status_Map.129
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.129
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_16:                               # %func_Build_Status_Map.130
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.130
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB5_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB5_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB5_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB5_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB5_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB5_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB5_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB5_15
	jmp	.LBB5_16
.Lfunc_end5:
	.size	Build_Status_Map, .Lfunc_end5-Build_Status_Map
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment       # -- Begin function Error_Concealment
	.p2align	4, 0x90
	.type	Error_Concealment,@function
Error_Concealment:                      # @Error_Concealment
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB6_17
# %bb.1:                                # %func_Error_Concealment.4
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.4
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_Error_Concealment.17
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.17
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_Error_Concealment.39
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.39
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_Error_Concealment.40
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.40
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_Error_Concealment.43
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.43
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_Error_Concealment.45
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.45
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %func_Error_Concealment.54
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.54
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_8:                                # %func_Error_Concealment.59
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.59
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_9:                                # %func_Error_Concealment.66
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.66
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_10:                               # %func_Error_Concealment.71
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.71
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_11:                               # %func_Error_Concealment.101
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.101
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_12:                               # %func_Error_Concealment.111
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.111
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_13:                               # %func_Error_Concealment.113
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.113
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_14:                               # %func_Error_Concealment.116
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.116
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_15:                               # %func_Error_Concealment.118
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.118
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_16:                               # %func_Error_Concealment.123
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.123
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB6_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB6_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB6_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB6_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB6_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB6_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB6_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB6_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB6_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB6_15
	jmp	.LBB6_16
.Lfunc_end6:
	.size	Error_Concealment, .Lfunc_end6-Error_Concealment
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix          # -- Begin function DecOneForthPix
	.p2align	4, 0x90
	.type	DecOneForthPix,@function
DecOneForthPix:                         # @DecOneForthPix
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB7_17
# %bb.1:                                # %func_DecOneForthPix.11
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.11
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_DecOneForthPix.16
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.16
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_DecOneForthPix.18
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.18
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_DecOneForthPix.20
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.20
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_DecOneForthPix.26
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.26
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_DecOneForthPix.41
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.41
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %func_DecOneForthPix.42
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.42
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_8:                                # %func_DecOneForthPix.50
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.50
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_9:                                # %func_DecOneForthPix.58
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.58
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_10:                               # %func_DecOneForthPix.68
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.68
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_11:                               # %func_DecOneForthPix.74
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.74
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_12:                               # %func_DecOneForthPix.76
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.76
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_13:                               # %func_DecOneForthPix.84
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.84
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_14:                               # %func_DecOneForthPix.88
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.88
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_15:                               # %func_DecOneForthPix.91
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.91
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_16:                               # %func_DecOneForthPix.93
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.93
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB7_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB7_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB7_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB7_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB7_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB7_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB7_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB7_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB7_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB7_15
	jmp	.LBB7_16
.Lfunc_end7:
	.size	DecOneForthPix, .Lfunc_end7-DecOneForthPix
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block # -- Begin function compute_residue_b8block
	.p2align	4, 0x90
	.type	compute_residue_b8block,@function
compute_residue_b8block:                # @compute_residue_b8block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB8_17
# %bb.1:                                # %func_compute_residue_b8block.1
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.1
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_compute_residue_b8block.30
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.30
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_compute_residue_b8block.49
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.49
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_compute_residue_b8block.51
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.51
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %func_compute_residue_b8block.52
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.52
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_6:                                # %func_compute_residue_b8block.56
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.56
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_7:                                # %func_compute_residue_b8block.72
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.72
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_8:                                # %func_compute_residue_b8block.95
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.95
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_9:                                # %func_compute_residue_b8block.104
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.104
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_10:                               # %func_compute_residue_b8block.107
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.107
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_11:                               # %func_compute_residue_b8block.109
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.109
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_12:                               # %func_compute_residue_b8block.110
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.110
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_13:                               # %func_compute_residue_b8block.122
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.122
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_14:                               # %func_compute_residue_b8block.124
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.124
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_15:                               # %func_compute_residue_b8block.126
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.126
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_16:                               # %func_compute_residue_b8block.127
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.127
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB8_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB8_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB8_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB8_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB8_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB8_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB8_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB8_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB8_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB8_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB8_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB8_15
	jmp	.LBB8_16
.Lfunc_end8:
	.size	compute_residue_b8block, .Lfunc_end8-compute_residue_b8block
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_mb      # -- Begin function compute_residue_mb
	.p2align	4, 0x90
	.type	compute_residue_mb,@function
compute_residue_mb:                     # @compute_residue_mb
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %esi
	xorl	%edi, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$1, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$2, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$3, %edi
	callq	compute_residue_b8block
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end9:
	.size	compute_residue_mb, .Lfunc_end9-compute_residue_mb
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error           # -- Begin function Conceal_Error
	.p2align	4, 0x90
	.type	Conceal_Error,@function
Conceal_Error:                          # @Conceal_Error
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r8, %r14
	movq	%rcx, %r15
	movl	%edx, %r12d
	movl	%esi, %r13d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB10_17
# %bb.1:                                # %func_Conceal_Error.5
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.5
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_Conceal_Error.14
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.14
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_Conceal_Error.19
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.19
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_Conceal_Error.21
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.21
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_Conceal_Error.37
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.37
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_Conceal_Error.47
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.47
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_7:                               # %func_Conceal_Error.55
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.55
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_8:                               # %func_Conceal_Error.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.60
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_9:                               # %func_Conceal_Error.61
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.61
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_10:                              # %func_Conceal_Error.64
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.64
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_11:                              # %func_Conceal_Error.69
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.69
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_12:                              # %func_Conceal_Error.80
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.80
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_13:                              # %func_Conceal_Error.81
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.81
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_14:                              # %func_Conceal_Error.82
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.82
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_15:                              # %func_Conceal_Error.89
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.89
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_16:                              # %func_Conceal_Error.97
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.97
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB10_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB10_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB10_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB10_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB10_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB10_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB10_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB10_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB10_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB10_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB10_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB10_15
	jmp	.LBB10_16
.Lfunc_end10:
	.size	Conceal_Error, .Lfunc_end10-Conceal_Error
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.1 # -- Begin function compute_residue_b8block.1
	.p2align	4, 0x90
	.type	compute_residue_b8block.1,@function
compute_residue_b8block.1:              # @compute_residue_b8block.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$730422888, -36(%rbp)   # imm = 0x2B895E68
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB11_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB11_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB11_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB11_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB11_4:                               # %for.cond4
                                        #   Parent Loop BB11_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB11_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB11_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB11_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_4
.LBB11_7:                               # %for.end
                                        #   in Loop: Header=BB11_2 Depth=1
	jmp	.LBB11_8
.LBB11_8:                               # %for.inc22
                                        #   in Loop: Header=BB11_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_2
.LBB11_9:                               # %for.end24
	jmp	.LBB11_19
.LBB11_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB11_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB11_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB11_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB11_13:                              # %for.cond29
                                        #   Parent Loop BB11_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB11_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB11_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB11_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_13
.LBB11_16:                              # %for.end56
                                        #   in Loop: Header=BB11_11 Depth=1
	jmp	.LBB11_17
.LBB11_17:                              # %for.inc57
                                        #   in Loop: Header=BB11_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_11
.LBB11_18:                              # %for.end59
	jmp	.LBB11_19
.LBB11_19:                              # %if.end
	cmpl	$730422888, -36(%rbp)   # imm = 0x2B895E68
	jne	.LBB11_21
.LBB11_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_20
.Lfunc_end11:
	.size	compute_residue_b8block.1, .Lfunc_end11-compute_residue_b8block.1
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.2   # -- Begin function Get_Reference_Pixel.2
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.2,@function
Get_Reference_Pixel.2:                  # @Get_Reference_Pixel.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1514386452, -100(%rbp) # imm = 0x5A43B414
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB12_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB12_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB12_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB12_5
.LBB12_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB12_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB12_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB12_11
.LBB12_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB12_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB12_10
.LBB12_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB12_10:                              # %cond.end14
.LBB12_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB12_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB12_14
.LBB12_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB12_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB12_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB12_20
.LBB12_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB12_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB12_19
.LBB12_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB12_19:                              # %cond.end29
.LBB12_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_332
.LBB12_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB12_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB12_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB12_25
.LBB12_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB12_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB12_31
.LBB12_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB12_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB12_30
.LBB12_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB12_30:                              # %cond.end52
.LBB12_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB12_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB12_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB12_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB12_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB12_36
.LBB12_35:                              # %cond.false61
                                        #   in Loop: Header=BB12_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB12_36:                              # %cond.end63
                                        #   in Loop: Header=BB12_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB12_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB12_42
.LBB12_38:                              # %cond.false68
                                        #   in Loop: Header=BB12_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB12_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB12_41
.LBB12_40:                              # %cond.false73
                                        #   in Loop: Header=BB12_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB12_41:                              # %cond.end75
                                        #   in Loop: Header=BB12_32 Depth=1
.LBB12_42:                              # %cond.end77
                                        #   in Loop: Header=BB12_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB12_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_32
.LBB12_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_47
.LBB12_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB12_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB12_53
.LBB12_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_52
.LBB12_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB12_52:                              # %cond.end113
.LBB12_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB12_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB12_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB12_57
.LBB12_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB12_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB12_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB12_63
.LBB12_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB12_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB12_62
.LBB12_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB12_62:                              # %cond.end136
.LBB12_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB12_76
.LBB12_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB12_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB12_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB12_68
.LBB12_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB12_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB12_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB12_74
.LBB12_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB12_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB12_73
.LBB12_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB12_73:                              # %cond.end169
.LBB12_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB12_75:                              # %if.end
	jmp	.LBB12_76
.LBB12_76:                              # %if.end178
	jmp	.LBB12_331
.LBB12_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB12_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB12_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB12_81
.LBB12_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB12_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB12_87
.LBB12_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB12_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB12_86
.LBB12_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB12_86:                              # %cond.end197
.LBB12_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB12_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB12_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB12_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB12_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB12_92
.LBB12_91:                              # %cond.false209
                                        #   in Loop: Header=BB12_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB12_92:                              # %cond.end211
                                        #   in Loop: Header=BB12_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB12_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB12_98
.LBB12_94:                              # %cond.false216
                                        #   in Loop: Header=BB12_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB12_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB12_97
.LBB12_96:                              # %cond.false221
                                        #   in Loop: Header=BB12_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB12_97:                              # %cond.end223
                                        #   in Loop: Header=BB12_88 Depth=1
.LBB12_98:                              # %cond.end225
                                        #   in Loop: Header=BB12_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB12_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB12_88
.LBB12_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_103
.LBB12_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB12_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB12_109
.LBB12_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_108
.LBB12_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB12_108:                             # %cond.end266
.LBB12_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB12_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB12_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB12_113
.LBB12_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB12_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB12_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB12_119
.LBB12_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB12_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB12_118
.LBB12_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB12_118:                             # %cond.end287
.LBB12_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB12_132
.LBB12_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB12_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB12_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB12_124
.LBB12_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB12_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB12_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB12_130
.LBB12_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB12_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB12_129
.LBB12_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB12_129:                             # %cond.end320
.LBB12_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB12_131:                             # %if.end331
	jmp	.LBB12_132
.LBB12_132:                             # %if.end332
	jmp	.LBB12_330
.LBB12_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB12_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB12_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB12_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB12_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB12_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB12_139
.LBB12_138:                             # %cond.false345
                                        #   in Loop: Header=BB12_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB12_139:                             # %cond.end347
                                        #   in Loop: Header=BB12_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB12_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB12_145
.LBB12_141:                             # %cond.false352
                                        #   in Loop: Header=BB12_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB12_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB12_144
.LBB12_143:                             # %cond.false357
                                        #   in Loop: Header=BB12_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB12_144:                             # %cond.end359
                                        #   in Loop: Header=BB12_135 Depth=1
.LBB12_145:                             # %cond.end361
                                        #   in Loop: Header=BB12_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB12_146:                             # %for.cond363
                                        #   Parent Loop BB12_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB12_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB12_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB12_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB12_150
.LBB12_149:                             # %cond.false371
                                        #   in Loop: Header=BB12_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB12_150:                             # %cond.end373
                                        #   in Loop: Header=BB12_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB12_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB12_156
.LBB12_152:                             # %cond.false378
                                        #   in Loop: Header=BB12_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB12_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB12_155
.LBB12_154:                             # %cond.false383
                                        #   in Loop: Header=BB12_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB12_155:                             # %cond.end385
                                        #   in Loop: Header=BB12_146 Depth=2
.LBB12_156:                             # %cond.end387
                                        #   in Loop: Header=BB12_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB12_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_146
.LBB12_158:                             # %for.end401
                                        #   in Loop: Header=BB12_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB12_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB12_135
.LBB12_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB12_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB12_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB12_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB12_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB12_161
.LBB12_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_167
.LBB12_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB12_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB12_173
.LBB12_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_172
.LBB12_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB12_172:                             # %cond.end449
.LBB12_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB12_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB12_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_177
.LBB12_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB12_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB12_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB12_183
.LBB12_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB12_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_182
.LBB12_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB12_182:                             # %cond.end486
.LBB12_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB12_196
.LBB12_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB12_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB12_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_188
.LBB12_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB12_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB12_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB12_194
.LBB12_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB12_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_193
.LBB12_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB12_193:                             # %cond.end526
.LBB12_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB12_195:                             # %if.end532
	jmp	.LBB12_196
.LBB12_196:                             # %if.end533
	jmp	.LBB12_329
.LBB12_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB12_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB12_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB12_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB12_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB12_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB12_203
.LBB12_202:                             # %cond.false546
                                        #   in Loop: Header=BB12_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB12_203:                             # %cond.end548
                                        #   in Loop: Header=BB12_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB12_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB12_209
.LBB12_205:                             # %cond.false553
                                        #   in Loop: Header=BB12_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB12_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB12_208
.LBB12_207:                             # %cond.false558
                                        #   in Loop: Header=BB12_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB12_208:                             # %cond.end560
                                        #   in Loop: Header=BB12_199 Depth=1
.LBB12_209:                             # %cond.end562
                                        #   in Loop: Header=BB12_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB12_210:                             # %for.cond564
                                        #   Parent Loop BB12_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB12_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB12_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB12_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB12_214
.LBB12_213:                             # %cond.false572
                                        #   in Loop: Header=BB12_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB12_214:                             # %cond.end574
                                        #   in Loop: Header=BB12_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB12_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB12_220
.LBB12_216:                             # %cond.false579
                                        #   in Loop: Header=BB12_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB12_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB12_219
.LBB12_218:                             # %cond.false584
                                        #   in Loop: Header=BB12_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB12_219:                             # %cond.end586
                                        #   in Loop: Header=BB12_210 Depth=2
.LBB12_220:                             # %cond.end588
                                        #   in Loop: Header=BB12_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB12_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB12_210
.LBB12_222:                             # %for.end602
                                        #   in Loop: Header=BB12_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB12_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_199
.LBB12_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB12_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB12_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB12_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB12_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_225
.LBB12_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_231
.LBB12_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB12_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB12_237
.LBB12_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_236
.LBB12_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB12_236:                             # %cond.end650
.LBB12_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB12_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB12_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_241
.LBB12_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB12_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB12_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB12_247
.LBB12_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB12_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_246
.LBB12_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB12_246:                             # %cond.end687
.LBB12_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB12_258
.LBB12_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB12_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_251
.LBB12_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB12_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB12_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB12_257
.LBB12_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB12_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_256
.LBB12_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB12_256:                             # %cond.end724
.LBB12_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB12_258:                             # %if.end730
	jmp	.LBB12_328
.LBB12_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB12_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB12_262
.LBB12_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB12_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB12_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB12_265
.LBB12_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB12_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB12_271
.LBB12_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB12_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB12_270
.LBB12_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB12_270:                             # %cond.end753
.LBB12_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB12_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB12_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB12_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB12_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB12_276
.LBB12_275:                             # %cond.false765
                                        #   in Loop: Header=BB12_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB12_276:                             # %cond.end767
                                        #   in Loop: Header=BB12_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB12_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB12_282
.LBB12_278:                             # %cond.false772
                                        #   in Loop: Header=BB12_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB12_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB12_281
.LBB12_280:                             # %cond.false777
                                        #   in Loop: Header=BB12_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB12_281:                             # %cond.end779
                                        #   in Loop: Header=BB12_272 Depth=1
.LBB12_282:                             # %cond.end781
                                        #   in Loop: Header=BB12_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB12_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_272
.LBB12_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_287
.LBB12_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB12_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB12_293
.LBB12_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_292
.LBB12_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB12_292:                             # %cond.end822
.LBB12_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB12_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB12_296
.LBB12_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB12_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB12_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB12_299
.LBB12_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB12_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB12_305
.LBB12_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB12_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB12_304
.LBB12_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB12_304:                             # %cond.end847
.LBB12_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB12_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB12_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB12_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB12_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB12_310
.LBB12_309:                             # %cond.false859
                                        #   in Loop: Header=BB12_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB12_310:                             # %cond.end861
                                        #   in Loop: Header=BB12_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB12_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB12_316
.LBB12_312:                             # %cond.false866
                                        #   in Loop: Header=BB12_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB12_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB12_315
.LBB12_314:                             # %cond.false871
                                        #   in Loop: Header=BB12_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB12_315:                             # %cond.end873
                                        #   in Loop: Header=BB12_306 Depth=1
.LBB12_316:                             # %cond.end875
                                        #   in Loop: Header=BB12_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB12_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB12_306
.LBB12_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_321
.LBB12_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB12_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB12_327
.LBB12_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_326
.LBB12_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB12_326:                             # %cond.end916
.LBB12_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-104(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB12_328:                             # %if.end922
	jmp	.LBB12_329
.LBB12_329:                             # %if.end923
	jmp	.LBB12_330
.LBB12_330:                             # %if.end924
	jmp	.LBB12_331
.LBB12_331:                             # %if.end925
	jmp	.LBB12_332
.LBB12_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1514386452, -100(%rbp) # imm = 0x5A43B414
	jne	.LBB12_334
.LBB12_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_333
.Lfunc_end12:
	.size	Get_Reference_Pixel.2, .Lfunc_end12-Get_Reference_Pixel.2
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.3   # -- Begin function Get_Reference_Block.3
	.p2align	4, 0x90
	.type	Get_Reference_Block.3,@function
Get_Reference_Block.3:                  # @Get_Reference_Block.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$445162073, -32(%rbp)   # imm = 0x1A88A259
	movq	%rdi, -56(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -12(%rbp)
	movq	%r9, -48(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB13_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB13_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -4(%rbp)
.LBB13_3:                               # %for.cond5
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB13_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB13_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB13_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_3
.LBB13_6:                               # %for.end
                                        #   in Loop: Header=BB13_1 Depth=1
	jmp	.LBB13_7
.LBB13_7:                               # %for.inc14
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_1
.LBB13_8:                               # %for.end16
	cmpl	$445162073, -32(%rbp)   # imm = 0x1A88A259
	jne	.LBB13_10
.LBB13_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_9
.Lfunc_end13:
	.size	Get_Reference_Block.3, .Lfunc_end13-Get_Reference_Block.3
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.4     # -- Begin function Error_Concealment.4
	.p2align	4, 0x90
	.type	Error_Concealment.4,@function
Error_Concealment.4:                    # @Error_Concealment.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1684440239, -20(%rbp)  # imm = 0x646684AF
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB14_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB14_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	$0, -8(%rbp)
.LBB14_3:                               # %for.cond2
                                        #   Parent Loop BB14_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB14_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB14_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB14_6:                               # %if.end
                                        #   in Loop: Header=BB14_3 Depth=2
	jmp	.LBB14_7
.LBB14_7:                               # %for.inc
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_3
.LBB14_8:                               # %for.end
                                        #   in Loop: Header=BB14_1 Depth=1
	jmp	.LBB14_9
.LBB14_9:                               # %for.inc7
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_1
.LBB14_10:                              # %for.end9
	cmpl	$1684440239, -20(%rbp)  # imm = 0x646684AF
	jne	.LBB14_12
.LBB14_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_11
.Lfunc_end14:
	.size	Error_Concealment.4, .Lfunc_end14-Error_Concealment.4
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.5         # -- Begin function Conceal_Error.5
	.p2align	4, 0x90
	.type	Conceal_Error.5,@function
Conceal_Error.5:                        # @Conceal_Error.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$882632465, -68(%rbp)   # imm = 0x349BE711
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB15_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB15_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB15_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB15_4:                               # %land.end
.LBB15_5:                               # %lor.end
.LBB15_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB15_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB15_9
.LBB15_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB15_14
.LBB15_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB15_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB15_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB15_12:                              # %land.end51
.LBB15_13:                              # %lor.end53
.LBB15_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB15_180
# %bb.15:                               # %land.end54
	movq	.LJTI15_0(,%rax,8), %rax
	jmpq	*%rax
.LBB15_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB15_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB15_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB15_18 Depth=1
	movl	$0, -4(%rbp)
.LBB15_20:                              # %for.cond68
                                        #   Parent Loop BB15_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB15_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB15_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_20
.LBB15_23:                              # %for.end
                                        #   in Loop: Header=BB15_18 Depth=1
	jmp	.LBB15_24
.LBB15_24:                              # %for.inc85
                                        #   in Loop: Header=BB15_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_18
.LBB15_25:                              # %for.end87
	jmp	.LBB15_35
.LBB15_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB15_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB15_27 Depth=1
	movl	$0, -4(%rbp)
.LBB15_29:                              # %for.cond92
                                        #   Parent Loop BB15_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB15_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB15_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_29
.LBB15_32:                              # %for.end104
                                        #   in Loop: Header=BB15_27 Depth=1
	jmp	.LBB15_33
.LBB15_33:                              # %for.inc105
                                        #   in Loop: Header=BB15_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_27
.LBB15_34:                              # %for.end107
	jmp	.LBB15_35
.LBB15_35:                              # %if.end
	jmp	.LBB15_180
.LBB15_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB15_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_39 Depth 2
                                        #       Child Loop BB15_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB15_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB15_37 Depth=1
	movl	$0, -12(%rbp)
.LBB15_39:                              # %for.cond113
                                        #   Parent Loop BB15_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB15_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB15_39 Depth=2
	movl	$0, -4(%rbp)
.LBB15_41:                              # %for.cond117
                                        #   Parent Loop BB15_37 Depth=1
                                        #     Parent Loop BB15_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB15_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB15_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB15_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_41
.LBB15_44:                              # %for.end141
                                        #   in Loop: Header=BB15_39 Depth=2
	jmp	.LBB15_45
.LBB15_45:                              # %for.inc142
                                        #   in Loop: Header=BB15_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_39
.LBB15_46:                              # %for.end144
                                        #   in Loop: Header=BB15_37 Depth=1
	jmp	.LBB15_47
.LBB15_47:                              # %for.inc145
                                        #   in Loop: Header=BB15_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_37
.LBB15_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB15_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB15_49 Depth=1
	movl	$0, -8(%rbp)
.LBB15_51:                              # %for.cond152
                                        #   Parent Loop BB15_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB15_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB15_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_51
.LBB15_54:                              # %for.end162
                                        #   in Loop: Header=BB15_49 Depth=1
	jmp	.LBB15_55
.LBB15_55:                              # %for.inc163
                                        #   in Loop: Header=BB15_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_49
.LBB15_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB15_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB15_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB15_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB15_59 Depth=1
	movl	$0, -4(%rbp)
.LBB15_61:                              # %for.cond175
                                        #   Parent Loop BB15_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB15_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB15_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_61
.LBB15_64:                              # %for.end195
                                        #   in Loop: Header=BB15_59 Depth=1
	jmp	.LBB15_65
.LBB15_65:                              # %for.inc196
                                        #   in Loop: Header=BB15_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_59
.LBB15_66:                              # %for.end198
	jmp	.LBB15_95
.LBB15_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB15_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB15_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_71 Depth 2
                                        #       Child Loop BB15_73 Depth 3
                                        #         Child Loop BB15_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB15_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB15_71:                              # %for.cond210
                                        #   Parent Loop BB15_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_73 Depth 3
                                        #         Child Loop BB15_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB15_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB15_73:                              # %for.cond236
                                        #   Parent Loop BB15_69 Depth=1
                                        #     Parent Loop BB15_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB15_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB15_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB15_73 Depth=3
	movl	$0, -4(%rbp)
.LBB15_75:                              # %for.cond240
                                        #   Parent Loop BB15_69 Depth=1
                                        #     Parent Loop BB15_71 Depth=2
                                        #       Parent Loop BB15_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB15_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB15_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB15_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_75
.LBB15_78:                              # %for.end259
                                        #   in Loop: Header=BB15_73 Depth=3
	jmp	.LBB15_79
.LBB15_79:                              # %for.inc260
                                        #   in Loop: Header=BB15_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_73
.LBB15_80:                              # %for.end262
                                        #   in Loop: Header=BB15_71 Depth=2
	jmp	.LBB15_81
.LBB15_81:                              # %for.inc263
                                        #   in Loop: Header=BB15_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_71
.LBB15_82:                              # %for.end265
                                        #   in Loop: Header=BB15_69 Depth=1
	jmp	.LBB15_83
.LBB15_83:                              # %for.inc266
                                        #   in Loop: Header=BB15_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_69
.LBB15_84:                              # %for.end268
	jmp	.LBB15_94
.LBB15_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB15_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB15_86 Depth=1
	movl	$0, -4(%rbp)
.LBB15_88:                              # %for.cond274
                                        #   Parent Loop BB15_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB15_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB15_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_88
.LBB15_91:                              # %for.end294
                                        #   in Loop: Header=BB15_86 Depth=1
	jmp	.LBB15_92
.LBB15_92:                              # %for.inc295
                                        #   in Loop: Header=BB15_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_86
.LBB15_93:                              # %for.end297
	jmp	.LBB15_94
.LBB15_94:                              # %if.end298
	jmp	.LBB15_95
.LBB15_95:                              # %if.end299
	jmp	.LBB15_105
.LBB15_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB15_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB15_97 Depth=1
	movl	$0, -4(%rbp)
.LBB15_99:                              # %for.cond305
                                        #   Parent Loop BB15_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB15_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB15_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_99
.LBB15_102:                             # %for.end317
                                        #   in Loop: Header=BB15_97 Depth=1
	jmp	.LBB15_103
.LBB15_103:                             # %for.inc318
                                        #   in Loop: Header=BB15_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_97
.LBB15_104:                             # %for.end320
	jmp	.LBB15_105
.LBB15_105:                             # %if.end321
	jmp	.LBB15_180
.LBB15_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB15_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB15_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_110 Depth 2
                                        #       Child Loop BB15_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB15_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB15_108 Depth=1
	movl	$0, -12(%rbp)
.LBB15_110:                             # %for.cond331
                                        #   Parent Loop BB15_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB15_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB15_110 Depth=2
	movl	$0, -4(%rbp)
.LBB15_112:                             # %for.cond335
                                        #   Parent Loop BB15_108 Depth=1
                                        #     Parent Loop BB15_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB15_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB15_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB15_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_112
.LBB15_115:                             # %for.end359
                                        #   in Loop: Header=BB15_110 Depth=2
	jmp	.LBB15_116
.LBB15_116:                             # %for.inc360
                                        #   in Loop: Header=BB15_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_110
.LBB15_117:                             # %for.end362
                                        #   in Loop: Header=BB15_108 Depth=1
	jmp	.LBB15_118
.LBB15_118:                             # %for.inc363
                                        #   in Loop: Header=BB15_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_108
.LBB15_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB15_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB15_120 Depth=1
	movl	$0, -8(%rbp)
.LBB15_122:                             # %for.cond370
                                        #   Parent Loop BB15_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB15_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB15_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_122
.LBB15_125:                             # %for.end380
                                        #   in Loop: Header=BB15_120 Depth=1
	jmp	.LBB15_126
.LBB15_126:                             # %for.inc381
                                        #   in Loop: Header=BB15_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_120
.LBB15_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB15_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB15_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB15_129 Depth=1
	movl	$0, -4(%rbp)
.LBB15_131:                             # %for.cond390
                                        #   Parent Loop BB15_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB15_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB15_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_131
.LBB15_134:                             # %for.end410
                                        #   in Loop: Header=BB15_129 Depth=1
	jmp	.LBB15_135
.LBB15_135:                             # %for.inc411
                                        #   in Loop: Header=BB15_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_129
.LBB15_136:                             # %for.end413
	jmp	.LBB15_156
.LBB15_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB15_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB15_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_141 Depth 2
                                        #       Child Loop BB15_143 Depth 3
                                        #         Child Loop BB15_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB15_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB15_141:                             # %for.cond425
                                        #   Parent Loop BB15_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_143 Depth 3
                                        #         Child Loop BB15_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB15_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB15_143:                             # %for.cond452
                                        #   Parent Loop BB15_139 Depth=1
                                        #     Parent Loop BB15_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB15_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB15_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB15_143 Depth=3
	movl	$0, -4(%rbp)
.LBB15_145:                             # %for.cond456
                                        #   Parent Loop BB15_139 Depth=1
                                        #     Parent Loop BB15_141 Depth=2
                                        #       Parent Loop BB15_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB15_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB15_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB15_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_145
.LBB15_148:                             # %for.end475
                                        #   in Loop: Header=BB15_143 Depth=3
	jmp	.LBB15_149
.LBB15_149:                             # %for.inc476
                                        #   in Loop: Header=BB15_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_143
.LBB15_150:                             # %for.end478
                                        #   in Loop: Header=BB15_141 Depth=2
	jmp	.LBB15_151
.LBB15_151:                             # %for.inc479
                                        #   in Loop: Header=BB15_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_141
.LBB15_152:                             # %for.end481
                                        #   in Loop: Header=BB15_139 Depth=1
	jmp	.LBB15_153
.LBB15_153:                             # %for.inc482
                                        #   in Loop: Header=BB15_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_139
.LBB15_154:                             # %for.end484
	jmp	.LBB15_155
.LBB15_155:                             # %if.end485
	jmp	.LBB15_156
.LBB15_156:                             # %if.end486
	jmp	.LBB15_157
.LBB15_157:                             # %if.end487
	jmp	.LBB15_180
.LBB15_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB15_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB15_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB15_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB15_161 Depth=1
	movl	$0, -4(%rbp)
.LBB15_163:                             # %for.cond499
                                        #   Parent Loop BB15_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB15_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB15_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_163
.LBB15_166:                             # %for.end519
                                        #   in Loop: Header=BB15_161 Depth=1
	jmp	.LBB15_167
.LBB15_167:                             # %for.inc520
                                        #   in Loop: Header=BB15_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_161
.LBB15_168:                             # %for.end522
	jmp	.LBB15_169
.LBB15_169:                             # %if.end523
	jmp	.LBB15_179
.LBB15_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB15_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB15_171 Depth=1
	movl	$0, -4(%rbp)
.LBB15_173:                             # %for.cond529
                                        #   Parent Loop BB15_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB15_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB15_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_173
.LBB15_176:                             # %for.end541
                                        #   in Loop: Header=BB15_171 Depth=1
	jmp	.LBB15_177
.LBB15_177:                             # %for.inc542
                                        #   in Loop: Header=BB15_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_171
.LBB15_178:                             # %for.end544
	jmp	.LBB15_179
.LBB15_179:                             # %if.end545
	jmp	.LBB15_180
.LBB15_180:                             # %sw.epilog
	cmpl	$882632465, -68(%rbp)   # imm = 0x349BE711
	jne	.LBB15_182
.LBB15_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_181
.Lfunc_end15:
	.size	Conceal_Error.5, .Lfunc_end15-Conceal_Error.5
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI15_0:
	.quad	.LBB15_16
	.quad	.LBB15_158
	.quad	.LBB15_106
	.quad	.LBB15_180
	.quad	.LBB15_36
                                        # -- End function
	.text
	.globl	decode_one_mb.6         # -- Begin function decode_one_mb.6
	.p2align	4, 0x90
	.type	decode_one_mb.6,@function
decode_one_mb.6:                        # @decode_one_mb.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1457565629, -4(%rbp)   # imm = 0x56E0AFBD
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpl	$1457565629, -4(%rbp)   # imm = 0x56E0AFBD
	jne	.LBB16_2
.LBB16_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_1
.Lfunc_end16:
	.size	decode_one_mb.6, .Lfunc_end16-decode_one_mb.6
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.7   # -- Begin function Get_Reference_Pixel.7
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.7,@function
Get_Reference_Pixel.7:                  # @Get_Reference_Pixel.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$176688465, -108(%rbp)  # imm = 0xA880D51
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB17_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB17_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB17_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB17_5
.LBB17_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB17_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB17_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB17_11
.LBB17_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB17_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB17_10
.LBB17_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB17_10:                              # %cond.end14
.LBB17_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB17_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB17_14
.LBB17_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB17_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB17_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB17_20
.LBB17_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB17_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB17_19
.LBB17_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB17_19:                              # %cond.end29
.LBB17_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_332
.LBB17_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB17_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB17_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB17_25
.LBB17_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB17_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB17_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB17_31
.LBB17_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB17_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB17_30
.LBB17_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB17_30:                              # %cond.end52
.LBB17_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB17_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB17_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB17_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB17_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB17_36
.LBB17_35:                              # %cond.false61
                                        #   in Loop: Header=BB17_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB17_36:                              # %cond.end63
                                        #   in Loop: Header=BB17_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB17_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB17_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB17_42
.LBB17_38:                              # %cond.false68
                                        #   in Loop: Header=BB17_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB17_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB17_41
.LBB17_40:                              # %cond.false73
                                        #   in Loop: Header=BB17_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB17_41:                              # %cond.end75
                                        #   in Loop: Header=BB17_32 Depth=1
.LBB17_42:                              # %cond.end77
                                        #   in Loop: Header=BB17_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB17_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_32
.LBB17_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB17_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_47
.LBB17_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB17_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB17_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB17_53
.LBB17_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB17_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_52
.LBB17_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB17_52:                              # %cond.end113
.LBB17_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB17_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB17_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB17_57
.LBB17_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB17_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB17_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB17_63
.LBB17_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB17_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB17_62
.LBB17_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB17_62:                              # %cond.end136
.LBB17_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB17_76
.LBB17_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB17_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB17_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB17_68
.LBB17_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB17_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB17_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB17_74
.LBB17_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB17_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB17_73
.LBB17_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB17_73:                              # %cond.end169
.LBB17_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB17_75:                              # %if.end
	jmp	.LBB17_76
.LBB17_76:                              # %if.end178
	jmp	.LBB17_331
.LBB17_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB17_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB17_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB17_81
.LBB17_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB17_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB17_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB17_87
.LBB17_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB17_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB17_86
.LBB17_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB17_86:                              # %cond.end197
.LBB17_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB17_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB17_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB17_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB17_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB17_92
.LBB17_91:                              # %cond.false209
                                        #   in Loop: Header=BB17_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB17_92:                              # %cond.end211
                                        #   in Loop: Header=BB17_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB17_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB17_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB17_98
.LBB17_94:                              # %cond.false216
                                        #   in Loop: Header=BB17_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB17_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB17_97
.LBB17_96:                              # %cond.false221
                                        #   in Loop: Header=BB17_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB17_97:                              # %cond.end223
                                        #   in Loop: Header=BB17_88 Depth=1
.LBB17_98:                              # %cond.end225
                                        #   in Loop: Header=BB17_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB17_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB17_88
.LBB17_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB17_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_103
.LBB17_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB17_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB17_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB17_109
.LBB17_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB17_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_108
.LBB17_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB17_108:                             # %cond.end266
.LBB17_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB17_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB17_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB17_113
.LBB17_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB17_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB17_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB17_119
.LBB17_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB17_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB17_118
.LBB17_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB17_118:                             # %cond.end287
.LBB17_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB17_132
.LBB17_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB17_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB17_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB17_124
.LBB17_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB17_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB17_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB17_130
.LBB17_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB17_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB17_129
.LBB17_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB17_129:                             # %cond.end320
.LBB17_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB17_131:                             # %if.end331
	jmp	.LBB17_132
.LBB17_132:                             # %if.end332
	jmp	.LBB17_330
.LBB17_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB17_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB17_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB17_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB17_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB17_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB17_139
.LBB17_138:                             # %cond.false345
                                        #   in Loop: Header=BB17_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB17_139:                             # %cond.end347
                                        #   in Loop: Header=BB17_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB17_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB17_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB17_145
.LBB17_141:                             # %cond.false352
                                        #   in Loop: Header=BB17_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB17_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB17_144
.LBB17_143:                             # %cond.false357
                                        #   in Loop: Header=BB17_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB17_144:                             # %cond.end359
                                        #   in Loop: Header=BB17_135 Depth=1
.LBB17_145:                             # %cond.end361
                                        #   in Loop: Header=BB17_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB17_146:                             # %for.cond363
                                        #   Parent Loop BB17_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB17_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB17_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB17_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB17_150
.LBB17_149:                             # %cond.false371
                                        #   in Loop: Header=BB17_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB17_150:                             # %cond.end373
                                        #   in Loop: Header=BB17_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB17_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB17_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB17_156
.LBB17_152:                             # %cond.false378
                                        #   in Loop: Header=BB17_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB17_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB17_155
.LBB17_154:                             # %cond.false383
                                        #   in Loop: Header=BB17_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB17_155:                             # %cond.end385
                                        #   in Loop: Header=BB17_146 Depth=2
.LBB17_156:                             # %cond.end387
                                        #   in Loop: Header=BB17_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB17_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_146
.LBB17_158:                             # %for.end401
                                        #   in Loop: Header=BB17_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB17_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB17_135
.LBB17_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB17_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB17_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB17_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB17_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB17_161
.LBB17_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB17_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_167
.LBB17_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB17_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB17_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB17_173
.LBB17_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB17_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_172
.LBB17_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB17_172:                             # %cond.end449
.LBB17_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB17_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB17_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_177
.LBB17_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB17_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB17_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB17_183
.LBB17_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB17_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_182
.LBB17_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB17_182:                             # %cond.end486
.LBB17_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB17_196
.LBB17_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB17_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB17_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_188
.LBB17_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB17_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB17_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB17_194
.LBB17_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB17_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_193
.LBB17_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB17_193:                             # %cond.end526
.LBB17_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB17_195:                             # %if.end532
	jmp	.LBB17_196
.LBB17_196:                             # %if.end533
	jmp	.LBB17_329
.LBB17_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB17_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB17_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB17_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB17_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB17_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB17_203
.LBB17_202:                             # %cond.false546
                                        #   in Loop: Header=BB17_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB17_203:                             # %cond.end548
                                        #   in Loop: Header=BB17_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB17_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB17_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB17_209
.LBB17_205:                             # %cond.false553
                                        #   in Loop: Header=BB17_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB17_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB17_208
.LBB17_207:                             # %cond.false558
                                        #   in Loop: Header=BB17_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB17_208:                             # %cond.end560
                                        #   in Loop: Header=BB17_199 Depth=1
.LBB17_209:                             # %cond.end562
                                        #   in Loop: Header=BB17_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB17_210:                             # %for.cond564
                                        #   Parent Loop BB17_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB17_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB17_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB17_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB17_214
.LBB17_213:                             # %cond.false572
                                        #   in Loop: Header=BB17_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB17_214:                             # %cond.end574
                                        #   in Loop: Header=BB17_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB17_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB17_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB17_220
.LBB17_216:                             # %cond.false579
                                        #   in Loop: Header=BB17_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB17_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB17_219
.LBB17_218:                             # %cond.false584
                                        #   in Loop: Header=BB17_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB17_219:                             # %cond.end586
                                        #   in Loop: Header=BB17_210 Depth=2
.LBB17_220:                             # %cond.end588
                                        #   in Loop: Header=BB17_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB17_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB17_210
.LBB17_222:                             # %for.end602
                                        #   in Loop: Header=BB17_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB17_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_199
.LBB17_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB17_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB17_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB17_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB17_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_225
.LBB17_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB17_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_231
.LBB17_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB17_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB17_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB17_237
.LBB17_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB17_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_236
.LBB17_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB17_236:                             # %cond.end650
.LBB17_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB17_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB17_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_241
.LBB17_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB17_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB17_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB17_247
.LBB17_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB17_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_246
.LBB17_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB17_246:                             # %cond.end687
.LBB17_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB17_258
.LBB17_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB17_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_251
.LBB17_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB17_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB17_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB17_257
.LBB17_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB17_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_256
.LBB17_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB17_256:                             # %cond.end724
.LBB17_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB17_258:                             # %if.end730
	jmp	.LBB17_328
.LBB17_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB17_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB17_262
.LBB17_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB17_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB17_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB17_265
.LBB17_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB17_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB17_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB17_271
.LBB17_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB17_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB17_270
.LBB17_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB17_270:                             # %cond.end753
.LBB17_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB17_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB17_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB17_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB17_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB17_276
.LBB17_275:                             # %cond.false765
                                        #   in Loop: Header=BB17_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB17_276:                             # %cond.end767
                                        #   in Loop: Header=BB17_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB17_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB17_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB17_282
.LBB17_278:                             # %cond.false772
                                        #   in Loop: Header=BB17_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB17_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB17_281
.LBB17_280:                             # %cond.false777
                                        #   in Loop: Header=BB17_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB17_281:                             # %cond.end779
                                        #   in Loop: Header=BB17_272 Depth=1
.LBB17_282:                             # %cond.end781
                                        #   in Loop: Header=BB17_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB17_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_272
.LBB17_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB17_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_287
.LBB17_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB17_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB17_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB17_293
.LBB17_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB17_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_292
.LBB17_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB17_292:                             # %cond.end822
.LBB17_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB17_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB17_296
.LBB17_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB17_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB17_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB17_299
.LBB17_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB17_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB17_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB17_305
.LBB17_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB17_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB17_304
.LBB17_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB17_304:                             # %cond.end847
.LBB17_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB17_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB17_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB17_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB17_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB17_310
.LBB17_309:                             # %cond.false859
                                        #   in Loop: Header=BB17_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB17_310:                             # %cond.end861
                                        #   in Loop: Header=BB17_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB17_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB17_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB17_316
.LBB17_312:                             # %cond.false866
                                        #   in Loop: Header=BB17_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB17_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB17_315
.LBB17_314:                             # %cond.false871
                                        #   in Loop: Header=BB17_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB17_315:                             # %cond.end873
                                        #   in Loop: Header=BB17_306 Depth=1
.LBB17_316:                             # %cond.end875
                                        #   in Loop: Header=BB17_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB17_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB17_306
.LBB17_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB17_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_321
.LBB17_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB17_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB17_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB17_327
.LBB17_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB17_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_326
.LBB17_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB17_326:                             # %cond.end916
.LBB17_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB17_328:                             # %if.end922
	jmp	.LBB17_329
.LBB17_329:                             # %if.end923
	jmp	.LBB17_330
.LBB17_330:                             # %if.end924
	jmp	.LBB17_331
.LBB17_331:                             # %if.end925
	jmp	.LBB17_332
.LBB17_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$176688465, -108(%rbp)  # imm = 0xA880D51
	jne	.LBB17_334
.LBB17_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_333
.Lfunc_end17:
	.size	Get_Reference_Pixel.7, .Lfunc_end17-Get_Reference_Pixel.7
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.8    # -- Begin function decode_one_b8block.8
	.p2align	4, 0x90
	.type	decode_one_b8block.8,@function
decode_one_b8block.8:                   # @decode_one_b8block.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1481069862, -84(%rbp)  # imm = 0x58475526
	movl	%edi, -40(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB18_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB18_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB18_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB18_4:                               # %for.cond9
                                        #   Parent Loop BB18_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB18_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB18_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB18_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_4
.LBB18_7:                               # %for.end
                                        #   in Loop: Header=BB18_2 Depth=1
	jmp	.LBB18_8
.LBB18_8:                               # %for.inc26
                                        #   in Loop: Header=BB18_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_2
.LBB18_9:                               # %for.end28
	jmp	.LBB18_96
.LBB18_10:                              # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB18_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB18_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB18_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB18_31
.LBB18_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB18_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB18_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB18_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB18_17:                              # %for.cond40
                                        #   Parent Loop BB18_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB18_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB18_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB18_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_17
.LBB18_20:                              # %for.end49
                                        #   in Loop: Header=BB18_15 Depth=1
	jmp	.LBB18_21
.LBB18_21:                              # %for.inc50
                                        #   in Loop: Header=BB18_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_15
.LBB18_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB18_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB18_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB18_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB18_25:                              # %for.cond56
                                        #   Parent Loop BB18_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB18_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB18_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB18_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_25
.LBB18_28:                              # %for.end71
                                        #   in Loop: Header=BB18_23 Depth=1
	jmp	.LBB18_29
.LBB18_29:                              # %for.inc72
                                        #   in Loop: Header=BB18_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_23
.LBB18_30:                              # %for.end74
	jmp	.LBB18_60
.LBB18_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB18_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB18_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB18_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB18_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB18_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB18_36:                              # %for.cond83
                                        #   Parent Loop BB18_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB18_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB18_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB18_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_36
.LBB18_39:                              # %for.end120
                                        #   in Loop: Header=BB18_34 Depth=1
	jmp	.LBB18_40
.LBB18_40:                              # %for.inc121
                                        #   in Loop: Header=BB18_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_34
.LBB18_41:                              # %for.end123
	jmp	.LBB18_51
.LBB18_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB18_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB18_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB18_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB18_45:                              # %for.cond129
                                        #   Parent Loop BB18_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB18_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB18_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB18_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_45
.LBB18_48:                              # %for.end145
                                        #   in Loop: Header=BB18_43 Depth=1
	jmp	.LBB18_49
.LBB18_49:                              # %for.inc146
                                        #   in Loop: Header=BB18_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_43
.LBB18_50:                              # %for.end148
	jmp	.LBB18_51
.LBB18_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB18_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB18_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB18_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB18_54:                              # %for.cond153
                                        #   Parent Loop BB18_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB18_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB18_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB18_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_54
.LBB18_57:                              # %for.end167
                                        #   in Loop: Header=BB18_52 Depth=1
	jmp	.LBB18_58
.LBB18_58:                              # %for.inc168
                                        #   in Loop: Header=BB18_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_52
.LBB18_59:                              # %for.end170
	jmp	.LBB18_60
.LBB18_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB18_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB18_66
.LBB18_62:                              # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB18_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB18_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB18_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB18_86
.LBB18_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB18_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_69 Depth 2
                                        #       Child Loop BB18_74 Depth 3
                                        #         Child Loop BB18_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB18_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB18_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB18_69:                              # %for.cond197
                                        #   Parent Loop BB18_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_74 Depth 3
                                        #         Child Loop BB18_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB18_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB18_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB18_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB18_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB18_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB18_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB18_73:                              # %if.end218
                                        #   in Loop: Header=BB18_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB18_74:                              # %for.cond233
                                        #   Parent Loop BB18_67 Depth=1
                                        #     Parent Loop BB18_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB18_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB18_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB18_74 Depth=3
	movl	$0, -8(%rbp)
.LBB18_76:                              # %for.cond237
                                        #   Parent Loop BB18_67 Depth=1
                                        #     Parent Loop BB18_69 Depth=2
                                        #       Parent Loop BB18_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB18_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB18_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB18_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_76
.LBB18_79:                              # %for.end269
                                        #   in Loop: Header=BB18_74 Depth=3
	jmp	.LBB18_80
.LBB18_80:                              # %for.inc270
                                        #   in Loop: Header=BB18_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_74
.LBB18_81:                              # %for.end272
                                        #   in Loop: Header=BB18_69 Depth=2
	jmp	.LBB18_82
.LBB18_82:                              # %for.inc273
                                        #   in Loop: Header=BB18_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_69
.LBB18_83:                              # %for.end275
                                        #   in Loop: Header=BB18_67 Depth=1
	jmp	.LBB18_84
.LBB18_84:                              # %for.inc276
                                        #   in Loop: Header=BB18_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_67
.LBB18_85:                              # %for.end278
	jmp	.LBB18_95
.LBB18_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB18_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB18_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB18_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB18_89:                              # %for.cond284
                                        #   Parent Loop BB18_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB18_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB18_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB18_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_89
.LBB18_92:                              # %for.end310
                                        #   in Loop: Header=BB18_87 Depth=1
	jmp	.LBB18_93
.LBB18_93:                              # %for.inc311
                                        #   in Loop: Header=BB18_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_87
.LBB18_94:                              # %for.end313
	jmp	.LBB18_95
.LBB18_95:                              # %if.end314
	jmp	.LBB18_96
.LBB18_96:                              # %if.end315
	cmpl	$1481069862, -84(%rbp)  # imm = 0x58475526
	jne	.LBB18_98
.LBB18_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_97
.Lfunc_end18:
	.size	decode_one_b8block.8, .Lfunc_end18-decode_one_b8block.8
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.9   # -- Begin function Get_Reference_Pixel.9
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.9,@function
Get_Reference_Pixel.9:                  # @Get_Reference_Pixel.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1393518523, -104(%rbp) # imm = 0x530F67BB
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB19_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB19_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB19_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB19_5
.LBB19_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB19_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB19_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB19_11
.LBB19_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB19_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB19_10
.LBB19_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB19_10:                              # %cond.end14
.LBB19_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB19_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB19_14
.LBB19_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB19_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB19_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB19_20
.LBB19_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB19_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB19_19
.LBB19_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB19_19:                              # %cond.end29
.LBB19_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_332
.LBB19_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB19_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB19_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB19_25
.LBB19_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB19_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB19_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB19_31
.LBB19_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB19_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB19_30
.LBB19_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB19_30:                              # %cond.end52
.LBB19_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB19_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB19_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB19_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB19_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB19_36
.LBB19_35:                              # %cond.false61
                                        #   in Loop: Header=BB19_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB19_36:                              # %cond.end63
                                        #   in Loop: Header=BB19_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB19_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB19_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB19_42
.LBB19_38:                              # %cond.false68
                                        #   in Loop: Header=BB19_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB19_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB19_41
.LBB19_40:                              # %cond.false73
                                        #   in Loop: Header=BB19_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB19_41:                              # %cond.end75
                                        #   in Loop: Header=BB19_32 Depth=1
.LBB19_42:                              # %cond.end77
                                        #   in Loop: Header=BB19_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB19_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB19_32
.LBB19_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB19_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_47
.LBB19_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB19_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB19_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB19_53
.LBB19_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB19_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_52
.LBB19_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB19_52:                              # %cond.end113
.LBB19_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB19_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB19_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB19_57
.LBB19_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB19_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB19_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB19_63
.LBB19_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB19_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB19_62
.LBB19_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB19_62:                              # %cond.end136
.LBB19_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB19_76
.LBB19_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB19_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB19_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB19_68
.LBB19_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB19_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB19_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB19_74
.LBB19_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB19_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB19_73
.LBB19_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB19_73:                              # %cond.end169
.LBB19_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB19_75:                              # %if.end
	jmp	.LBB19_76
.LBB19_76:                              # %if.end178
	jmp	.LBB19_331
.LBB19_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB19_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB19_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB19_81
.LBB19_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB19_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB19_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB19_87
.LBB19_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB19_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB19_86
.LBB19_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB19_86:                              # %cond.end197
.LBB19_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB19_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB19_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB19_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB19_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB19_92
.LBB19_91:                              # %cond.false209
                                        #   in Loop: Header=BB19_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB19_92:                              # %cond.end211
                                        #   in Loop: Header=BB19_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB19_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB19_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB19_98
.LBB19_94:                              # %cond.false216
                                        #   in Loop: Header=BB19_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB19_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB19_97
.LBB19_96:                              # %cond.false221
                                        #   in Loop: Header=BB19_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB19_97:                              # %cond.end223
                                        #   in Loop: Header=BB19_88 Depth=1
.LBB19_98:                              # %cond.end225
                                        #   in Loop: Header=BB19_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB19_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_88
.LBB19_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB19_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_103
.LBB19_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB19_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB19_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB19_109
.LBB19_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB19_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_108
.LBB19_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB19_108:                             # %cond.end266
.LBB19_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB19_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB19_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB19_113
.LBB19_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB19_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB19_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB19_119
.LBB19_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB19_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB19_118
.LBB19_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB19_118:                             # %cond.end287
.LBB19_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB19_132
.LBB19_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB19_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB19_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB19_124
.LBB19_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB19_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB19_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB19_130
.LBB19_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB19_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB19_129
.LBB19_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB19_129:                             # %cond.end320
.LBB19_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB19_131:                             # %if.end331
	jmp	.LBB19_132
.LBB19_132:                             # %if.end332
	jmp	.LBB19_330
.LBB19_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB19_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB19_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB19_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB19_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB19_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB19_139
.LBB19_138:                             # %cond.false345
                                        #   in Loop: Header=BB19_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB19_139:                             # %cond.end347
                                        #   in Loop: Header=BB19_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB19_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB19_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB19_145
.LBB19_141:                             # %cond.false352
                                        #   in Loop: Header=BB19_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB19_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB19_144
.LBB19_143:                             # %cond.false357
                                        #   in Loop: Header=BB19_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB19_144:                             # %cond.end359
                                        #   in Loop: Header=BB19_135 Depth=1
.LBB19_145:                             # %cond.end361
                                        #   in Loop: Header=BB19_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB19_146:                             # %for.cond363
                                        #   Parent Loop BB19_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB19_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB19_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB19_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB19_150
.LBB19_149:                             # %cond.false371
                                        #   in Loop: Header=BB19_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB19_150:                             # %cond.end373
                                        #   in Loop: Header=BB19_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB19_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB19_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB19_156
.LBB19_152:                             # %cond.false378
                                        #   in Loop: Header=BB19_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB19_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB19_155
.LBB19_154:                             # %cond.false383
                                        #   in Loop: Header=BB19_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB19_155:                             # %cond.end385
                                        #   in Loop: Header=BB19_146 Depth=2
.LBB19_156:                             # %cond.end387
                                        #   in Loop: Header=BB19_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB19_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB19_146
.LBB19_158:                             # %for.end401
                                        #   in Loop: Header=BB19_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB19_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_135
.LBB19_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB19_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB19_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB19_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB19_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_161
.LBB19_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB19_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_167
.LBB19_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB19_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB19_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB19_173
.LBB19_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB19_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_172
.LBB19_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB19_172:                             # %cond.end449
.LBB19_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB19_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB19_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_177
.LBB19_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB19_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB19_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB19_183
.LBB19_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB19_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_182
.LBB19_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB19_182:                             # %cond.end486
.LBB19_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB19_196
.LBB19_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB19_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB19_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_188
.LBB19_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB19_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB19_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB19_194
.LBB19_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB19_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_193
.LBB19_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB19_193:                             # %cond.end526
.LBB19_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB19_195:                             # %if.end532
	jmp	.LBB19_196
.LBB19_196:                             # %if.end533
	jmp	.LBB19_329
.LBB19_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB19_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB19_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB19_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB19_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB19_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB19_203
.LBB19_202:                             # %cond.false546
                                        #   in Loop: Header=BB19_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB19_203:                             # %cond.end548
                                        #   in Loop: Header=BB19_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB19_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB19_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB19_209
.LBB19_205:                             # %cond.false553
                                        #   in Loop: Header=BB19_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB19_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB19_208
.LBB19_207:                             # %cond.false558
                                        #   in Loop: Header=BB19_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB19_208:                             # %cond.end560
                                        #   in Loop: Header=BB19_199 Depth=1
.LBB19_209:                             # %cond.end562
                                        #   in Loop: Header=BB19_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB19_210:                             # %for.cond564
                                        #   Parent Loop BB19_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB19_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB19_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB19_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB19_214
.LBB19_213:                             # %cond.false572
                                        #   in Loop: Header=BB19_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB19_214:                             # %cond.end574
                                        #   in Loop: Header=BB19_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB19_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB19_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB19_220
.LBB19_216:                             # %cond.false579
                                        #   in Loop: Header=BB19_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB19_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB19_219
.LBB19_218:                             # %cond.false584
                                        #   in Loop: Header=BB19_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB19_219:                             # %cond.end586
                                        #   in Loop: Header=BB19_210 Depth=2
.LBB19_220:                             # %cond.end588
                                        #   in Loop: Header=BB19_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB19_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_210
.LBB19_222:                             # %for.end602
                                        #   in Loop: Header=BB19_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB19_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB19_199
.LBB19_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB19_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB19_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB19_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB19_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB19_225
.LBB19_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB19_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_231
.LBB19_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB19_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB19_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB19_237
.LBB19_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB19_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_236
.LBB19_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB19_236:                             # %cond.end650
.LBB19_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB19_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB19_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_241
.LBB19_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB19_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB19_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB19_247
.LBB19_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB19_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_246
.LBB19_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB19_246:                             # %cond.end687
.LBB19_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB19_258
.LBB19_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB19_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_251
.LBB19_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB19_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB19_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB19_257
.LBB19_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB19_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_256
.LBB19_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB19_256:                             # %cond.end724
.LBB19_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB19_258:                             # %if.end730
	jmp	.LBB19_328
.LBB19_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB19_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB19_262
.LBB19_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB19_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB19_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB19_265
.LBB19_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB19_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB19_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB19_271
.LBB19_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB19_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB19_270
.LBB19_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB19_270:                             # %cond.end753
.LBB19_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB19_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB19_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB19_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB19_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB19_276
.LBB19_275:                             # %cond.false765
                                        #   in Loop: Header=BB19_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB19_276:                             # %cond.end767
                                        #   in Loop: Header=BB19_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB19_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB19_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB19_282
.LBB19_278:                             # %cond.false772
                                        #   in Loop: Header=BB19_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB19_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB19_281
.LBB19_280:                             # %cond.false777
                                        #   in Loop: Header=BB19_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB19_281:                             # %cond.end779
                                        #   in Loop: Header=BB19_272 Depth=1
.LBB19_282:                             # %cond.end781
                                        #   in Loop: Header=BB19_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB19_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB19_272
.LBB19_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB19_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_287
.LBB19_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB19_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB19_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB19_293
.LBB19_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB19_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_292
.LBB19_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB19_292:                             # %cond.end822
.LBB19_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB19_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB19_296
.LBB19_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB19_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB19_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB19_299
.LBB19_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB19_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB19_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB19_305
.LBB19_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB19_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB19_304
.LBB19_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB19_304:                             # %cond.end847
.LBB19_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB19_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB19_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB19_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB19_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB19_310
.LBB19_309:                             # %cond.false859
                                        #   in Loop: Header=BB19_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB19_310:                             # %cond.end861
                                        #   in Loop: Header=BB19_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB19_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB19_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB19_316
.LBB19_312:                             # %cond.false866
                                        #   in Loop: Header=BB19_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB19_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB19_315
.LBB19_314:                             # %cond.false871
                                        #   in Loop: Header=BB19_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB19_315:                             # %cond.end873
                                        #   in Loop: Header=BB19_306 Depth=1
.LBB19_316:                             # %cond.end875
                                        #   in Loop: Header=BB19_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB19_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_306
.LBB19_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB19_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_321
.LBB19_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB19_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB19_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB19_327
.LBB19_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB19_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_326
.LBB19_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB19_326:                             # %cond.end916
.LBB19_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB19_328:                             # %if.end922
	jmp	.LBB19_329
.LBB19_329:                             # %if.end923
	jmp	.LBB19_330
.LBB19_330:                             # %if.end924
	jmp	.LBB19_331
.LBB19_331:                             # %if.end925
	jmp	.LBB19_332
.LBB19_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1393518523, -104(%rbp) # imm = 0x530F67BB
	jne	.LBB19_334
.LBB19_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_333
.Lfunc_end19:
	.size	Get_Reference_Pixel.9, .Lfunc_end19-Get_Reference_Pixel.9
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb.10        # -- Begin function decode_one_mb.10
	.p2align	4, 0x90
	.type	decode_one_mb.10,@function
decode_one_mb.10:                       # @decode_one_mb.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$416828711, -4(%rbp)    # imm = 0x18D84D27
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpl	$416828711, -4(%rbp)    # imm = 0x18D84D27
	jne	.LBB20_2
.LBB20_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_1
.Lfunc_end20:
	.size	decode_one_mb.10, .Lfunc_end20-decode_one_mb.10
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.11       # -- Begin function DecOneForthPix.11
	.p2align	4, 0x90
	.type	DecOneForthPix.11,@function
DecOneForthPix.11:                      # @DecOneForthPix.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$492930794, -8(%rbp)    # imm = 0x1D6186EA
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB21_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB21_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_1
.LBB21_4:                               # %for.end
	cmpl	$492930794, -8(%rbp)    # imm = 0x1D6186EA
	jne	.LBB21_6
.LBB21_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_5
.Lfunc_end21:
	.size	DecOneForthPix.11, .Lfunc_end21-DecOneForthPix.11
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.12  # -- Begin function Get_Reference_Block.12
	.p2align	4, 0x90
	.type	Get_Reference_Block.12,@function
Get_Reference_Block.12:                 # @Get_Reference_Block.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1098901299, -28(%rbp)  # imm = 0x417FE733
	movq	%rdi, -48(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -56(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB22_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB22_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_3:                               # %for.cond5
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB22_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB22_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_3
.LBB22_6:                               # %for.end
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_7
.LBB22_7:                               # %for.inc14
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_1
.LBB22_8:                               # %for.end16
	cmpl	$1098901299, -28(%rbp)  # imm = 0x417FE733
	jne	.LBB22_10
.LBB22_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_9
.Lfunc_end22:
	.size	Get_Reference_Block.12, .Lfunc_end22-Get_Reference_Block.12
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.13   # -- Begin function decode_one_b8block.13
	.p2align	4, 0x90
	.type	decode_one_b8block.13,@function
decode_one_b8block.13:                  # @decode_one_b8block.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1990469182, -84(%rbp)  # imm = 0x76A4263E
	movl	%edi, -40(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB23_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB23_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB23_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB23_4:                               # %for.cond9
                                        #   Parent Loop BB23_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB23_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB23_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB23_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_4
.LBB23_7:                               # %for.end
                                        #   in Loop: Header=BB23_2 Depth=1
	jmp	.LBB23_8
.LBB23_8:                               # %for.inc26
                                        #   in Loop: Header=BB23_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_2
.LBB23_9:                               # %for.end28
	jmp	.LBB23_96
.LBB23_10:                              # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB23_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB23_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB23_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB23_31
.LBB23_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB23_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB23_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB23_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB23_17:                              # %for.cond40
                                        #   Parent Loop BB23_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB23_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB23_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB23_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_17
.LBB23_20:                              # %for.end49
                                        #   in Loop: Header=BB23_15 Depth=1
	jmp	.LBB23_21
.LBB23_21:                              # %for.inc50
                                        #   in Loop: Header=BB23_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_15
.LBB23_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB23_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB23_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB23_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB23_25:                              # %for.cond56
                                        #   Parent Loop BB23_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB23_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB23_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB23_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_25
.LBB23_28:                              # %for.end71
                                        #   in Loop: Header=BB23_23 Depth=1
	jmp	.LBB23_29
.LBB23_29:                              # %for.inc72
                                        #   in Loop: Header=BB23_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_23
.LBB23_30:                              # %for.end74
	jmp	.LBB23_60
.LBB23_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB23_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB23_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB23_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB23_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB23_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB23_36:                              # %for.cond83
                                        #   Parent Loop BB23_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB23_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB23_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB23_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_36
.LBB23_39:                              # %for.end120
                                        #   in Loop: Header=BB23_34 Depth=1
	jmp	.LBB23_40
.LBB23_40:                              # %for.inc121
                                        #   in Loop: Header=BB23_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_34
.LBB23_41:                              # %for.end123
	jmp	.LBB23_51
.LBB23_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB23_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB23_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB23_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB23_45:                              # %for.cond129
                                        #   Parent Loop BB23_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB23_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB23_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB23_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_45
.LBB23_48:                              # %for.end145
                                        #   in Loop: Header=BB23_43 Depth=1
	jmp	.LBB23_49
.LBB23_49:                              # %for.inc146
                                        #   in Loop: Header=BB23_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_43
.LBB23_50:                              # %for.end148
	jmp	.LBB23_51
.LBB23_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB23_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB23_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB23_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB23_54:                              # %for.cond153
                                        #   Parent Loop BB23_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB23_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB23_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB23_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_54
.LBB23_57:                              # %for.end167
                                        #   in Loop: Header=BB23_52 Depth=1
	jmp	.LBB23_58
.LBB23_58:                              # %for.inc168
                                        #   in Loop: Header=BB23_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_52
.LBB23_59:                              # %for.end170
	jmp	.LBB23_60
.LBB23_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB23_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB23_66
.LBB23_62:                              # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB23_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB23_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB23_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB23_86
.LBB23_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB23_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_69 Depth 2
                                        #       Child Loop BB23_74 Depth 3
                                        #         Child Loop BB23_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB23_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB23_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB23_69:                              # %for.cond197
                                        #   Parent Loop BB23_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_74 Depth 3
                                        #         Child Loop BB23_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB23_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB23_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB23_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB23_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB23_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB23_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB23_73:                              # %if.end218
                                        #   in Loop: Header=BB23_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB23_74:                              # %for.cond233
                                        #   Parent Loop BB23_67 Depth=1
                                        #     Parent Loop BB23_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB23_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB23_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB23_74 Depth=3
	movl	$0, -4(%rbp)
.LBB23_76:                              # %for.cond237
                                        #   Parent Loop BB23_67 Depth=1
                                        #     Parent Loop BB23_69 Depth=2
                                        #       Parent Loop BB23_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB23_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB23_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB23_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_76
.LBB23_79:                              # %for.end269
                                        #   in Loop: Header=BB23_74 Depth=3
	jmp	.LBB23_80
.LBB23_80:                              # %for.inc270
                                        #   in Loop: Header=BB23_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_74
.LBB23_81:                              # %for.end272
                                        #   in Loop: Header=BB23_69 Depth=2
	jmp	.LBB23_82
.LBB23_82:                              # %for.inc273
                                        #   in Loop: Header=BB23_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_69
.LBB23_83:                              # %for.end275
                                        #   in Loop: Header=BB23_67 Depth=1
	jmp	.LBB23_84
.LBB23_84:                              # %for.inc276
                                        #   in Loop: Header=BB23_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_67
.LBB23_85:                              # %for.end278
	jmp	.LBB23_95
.LBB23_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB23_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB23_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB23_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB23_89:                              # %for.cond284
                                        #   Parent Loop BB23_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB23_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB23_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB23_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_89
.LBB23_92:                              # %for.end310
                                        #   in Loop: Header=BB23_87 Depth=1
	jmp	.LBB23_93
.LBB23_93:                              # %for.inc311
                                        #   in Loop: Header=BB23_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_87
.LBB23_94:                              # %for.end313
	jmp	.LBB23_95
.LBB23_95:                              # %if.end314
	jmp	.LBB23_96
.LBB23_96:                              # %if.end315
	cmpl	$1990469182, -84(%rbp)  # imm = 0x76A4263E
	jne	.LBB23_98
.LBB23_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_97
.Lfunc_end23:
	.size	decode_one_b8block.13, .Lfunc_end23-decode_one_b8block.13
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.14        # -- Begin function Conceal_Error.14
	.p2align	4, 0x90
	.type	Conceal_Error.14,@function
Conceal_Error.14:                       # @Conceal_Error.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1299627817, -68(%rbp)  # imm = 0x4D76BF29
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB24_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB24_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB24_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB24_4:                               # %land.end
.LBB24_5:                               # %lor.end
.LBB24_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB24_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB24_9
.LBB24_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB24_14
.LBB24_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB24_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB24_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB24_12:                              # %land.end51
.LBB24_13:                              # %lor.end53
.LBB24_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB24_180
# %bb.15:                               # %land.end54
	movq	.LJTI24_0(,%rax,8), %rax
	jmpq	*%rax
.LBB24_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB24_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB24_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB24_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB24_18 Depth=1
	movl	$0, -4(%rbp)
.LBB24_20:                              # %for.cond68
                                        #   Parent Loop BB24_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB24_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB24_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB24_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_20
.LBB24_23:                              # %for.end
                                        #   in Loop: Header=BB24_18 Depth=1
	jmp	.LBB24_24
.LBB24_24:                              # %for.inc85
                                        #   in Loop: Header=BB24_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_18
.LBB24_25:                              # %for.end87
	jmp	.LBB24_35
.LBB24_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB24_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB24_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB24_27 Depth=1
	movl	$0, -4(%rbp)
.LBB24_29:                              # %for.cond92
                                        #   Parent Loop BB24_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB24_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB24_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB24_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_29
.LBB24_32:                              # %for.end104
                                        #   in Loop: Header=BB24_27 Depth=1
	jmp	.LBB24_33
.LBB24_33:                              # %for.inc105
                                        #   in Loop: Header=BB24_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_27
.LBB24_34:                              # %for.end107
	jmp	.LBB24_35
.LBB24_35:                              # %if.end
	jmp	.LBB24_180
.LBB24_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB24_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_39 Depth 2
                                        #       Child Loop BB24_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB24_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB24_37 Depth=1
	movl	$0, -12(%rbp)
.LBB24_39:                              # %for.cond113
                                        #   Parent Loop BB24_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB24_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB24_39 Depth=2
	movl	$0, -4(%rbp)
.LBB24_41:                              # %for.cond117
                                        #   Parent Loop BB24_37 Depth=1
                                        #     Parent Loop BB24_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB24_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB24_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB24_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_41
.LBB24_44:                              # %for.end141
                                        #   in Loop: Header=BB24_39 Depth=2
	jmp	.LBB24_45
.LBB24_45:                              # %for.inc142
                                        #   in Loop: Header=BB24_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_39
.LBB24_46:                              # %for.end144
                                        #   in Loop: Header=BB24_37 Depth=1
	jmp	.LBB24_47
.LBB24_47:                              # %for.inc145
                                        #   in Loop: Header=BB24_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_37
.LBB24_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB24_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB24_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB24_49 Depth=1
	movl	$0, -8(%rbp)
.LBB24_51:                              # %for.cond152
                                        #   Parent Loop BB24_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB24_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB24_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB24_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_51
.LBB24_54:                              # %for.end162
                                        #   in Loop: Header=BB24_49 Depth=1
	jmp	.LBB24_55
.LBB24_55:                              # %for.inc163
                                        #   in Loop: Header=BB24_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_49
.LBB24_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB24_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB24_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB24_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB24_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB24_59 Depth=1
	movl	$0, -4(%rbp)
.LBB24_61:                              # %for.cond175
                                        #   Parent Loop BB24_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB24_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB24_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB24_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_61
.LBB24_64:                              # %for.end195
                                        #   in Loop: Header=BB24_59 Depth=1
	jmp	.LBB24_65
.LBB24_65:                              # %for.inc196
                                        #   in Loop: Header=BB24_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_59
.LBB24_66:                              # %for.end198
	jmp	.LBB24_95
.LBB24_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB24_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB24_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_71 Depth 2
                                        #       Child Loop BB24_73 Depth 3
                                        #         Child Loop BB24_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB24_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB24_71:                              # %for.cond210
                                        #   Parent Loop BB24_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_73 Depth 3
                                        #         Child Loop BB24_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB24_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB24_73:                              # %for.cond236
                                        #   Parent Loop BB24_69 Depth=1
                                        #     Parent Loop BB24_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB24_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB24_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB24_73 Depth=3
	movl	$0, -4(%rbp)
.LBB24_75:                              # %for.cond240
                                        #   Parent Loop BB24_69 Depth=1
                                        #     Parent Loop BB24_71 Depth=2
                                        #       Parent Loop BB24_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB24_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB24_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB24_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_75
.LBB24_78:                              # %for.end259
                                        #   in Loop: Header=BB24_73 Depth=3
	jmp	.LBB24_79
.LBB24_79:                              # %for.inc260
                                        #   in Loop: Header=BB24_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_73
.LBB24_80:                              # %for.end262
                                        #   in Loop: Header=BB24_71 Depth=2
	jmp	.LBB24_81
.LBB24_81:                              # %for.inc263
                                        #   in Loop: Header=BB24_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_71
.LBB24_82:                              # %for.end265
                                        #   in Loop: Header=BB24_69 Depth=1
	jmp	.LBB24_83
.LBB24_83:                              # %for.inc266
                                        #   in Loop: Header=BB24_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_69
.LBB24_84:                              # %for.end268
	jmp	.LBB24_94
.LBB24_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB24_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB24_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB24_86 Depth=1
	movl	$0, -4(%rbp)
.LBB24_88:                              # %for.cond274
                                        #   Parent Loop BB24_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB24_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB24_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB24_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_88
.LBB24_91:                              # %for.end294
                                        #   in Loop: Header=BB24_86 Depth=1
	jmp	.LBB24_92
.LBB24_92:                              # %for.inc295
                                        #   in Loop: Header=BB24_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_86
.LBB24_93:                              # %for.end297
	jmp	.LBB24_94
.LBB24_94:                              # %if.end298
	jmp	.LBB24_95
.LBB24_95:                              # %if.end299
	jmp	.LBB24_105
.LBB24_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB24_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB24_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB24_97 Depth=1
	movl	$0, -4(%rbp)
.LBB24_99:                              # %for.cond305
                                        #   Parent Loop BB24_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB24_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB24_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB24_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_99
.LBB24_102:                             # %for.end317
                                        #   in Loop: Header=BB24_97 Depth=1
	jmp	.LBB24_103
.LBB24_103:                             # %for.inc318
                                        #   in Loop: Header=BB24_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_97
.LBB24_104:                             # %for.end320
	jmp	.LBB24_105
.LBB24_105:                             # %if.end321
	jmp	.LBB24_180
.LBB24_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB24_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB24_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_110 Depth 2
                                        #       Child Loop BB24_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB24_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB24_108 Depth=1
	movl	$0, -12(%rbp)
.LBB24_110:                             # %for.cond331
                                        #   Parent Loop BB24_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB24_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB24_110 Depth=2
	movl	$0, -4(%rbp)
.LBB24_112:                             # %for.cond335
                                        #   Parent Loop BB24_108 Depth=1
                                        #     Parent Loop BB24_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB24_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB24_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB24_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_112
.LBB24_115:                             # %for.end359
                                        #   in Loop: Header=BB24_110 Depth=2
	jmp	.LBB24_116
.LBB24_116:                             # %for.inc360
                                        #   in Loop: Header=BB24_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_110
.LBB24_117:                             # %for.end362
                                        #   in Loop: Header=BB24_108 Depth=1
	jmp	.LBB24_118
.LBB24_118:                             # %for.inc363
                                        #   in Loop: Header=BB24_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_108
.LBB24_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB24_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB24_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB24_120 Depth=1
	movl	$0, -8(%rbp)
.LBB24_122:                             # %for.cond370
                                        #   Parent Loop BB24_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB24_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB24_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB24_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_122
.LBB24_125:                             # %for.end380
                                        #   in Loop: Header=BB24_120 Depth=1
	jmp	.LBB24_126
.LBB24_126:                             # %for.inc381
                                        #   in Loop: Header=BB24_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_120
.LBB24_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB24_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB24_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB24_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB24_129 Depth=1
	movl	$0, -4(%rbp)
.LBB24_131:                             # %for.cond390
                                        #   Parent Loop BB24_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB24_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB24_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB24_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_131
.LBB24_134:                             # %for.end410
                                        #   in Loop: Header=BB24_129 Depth=1
	jmp	.LBB24_135
.LBB24_135:                             # %for.inc411
                                        #   in Loop: Header=BB24_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_129
.LBB24_136:                             # %for.end413
	jmp	.LBB24_156
.LBB24_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB24_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB24_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_141 Depth 2
                                        #       Child Loop BB24_143 Depth 3
                                        #         Child Loop BB24_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB24_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB24_141:                             # %for.cond425
                                        #   Parent Loop BB24_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_143 Depth 3
                                        #         Child Loop BB24_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB24_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB24_143:                             # %for.cond452
                                        #   Parent Loop BB24_139 Depth=1
                                        #     Parent Loop BB24_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB24_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB24_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB24_143 Depth=3
	movl	$0, -4(%rbp)
.LBB24_145:                             # %for.cond456
                                        #   Parent Loop BB24_139 Depth=1
                                        #     Parent Loop BB24_141 Depth=2
                                        #       Parent Loop BB24_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB24_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB24_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB24_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_145
.LBB24_148:                             # %for.end475
                                        #   in Loop: Header=BB24_143 Depth=3
	jmp	.LBB24_149
.LBB24_149:                             # %for.inc476
                                        #   in Loop: Header=BB24_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_143
.LBB24_150:                             # %for.end478
                                        #   in Loop: Header=BB24_141 Depth=2
	jmp	.LBB24_151
.LBB24_151:                             # %for.inc479
                                        #   in Loop: Header=BB24_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_141
.LBB24_152:                             # %for.end481
                                        #   in Loop: Header=BB24_139 Depth=1
	jmp	.LBB24_153
.LBB24_153:                             # %for.inc482
                                        #   in Loop: Header=BB24_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_139
.LBB24_154:                             # %for.end484
	jmp	.LBB24_155
.LBB24_155:                             # %if.end485
	jmp	.LBB24_156
.LBB24_156:                             # %if.end486
	jmp	.LBB24_157
.LBB24_157:                             # %if.end487
	jmp	.LBB24_180
.LBB24_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB24_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB24_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB24_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB24_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB24_161 Depth=1
	movl	$0, -4(%rbp)
.LBB24_163:                             # %for.cond499
                                        #   Parent Loop BB24_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB24_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB24_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB24_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_163
.LBB24_166:                             # %for.end519
                                        #   in Loop: Header=BB24_161 Depth=1
	jmp	.LBB24_167
.LBB24_167:                             # %for.inc520
                                        #   in Loop: Header=BB24_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_161
.LBB24_168:                             # %for.end522
	jmp	.LBB24_169
.LBB24_169:                             # %if.end523
	jmp	.LBB24_179
.LBB24_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB24_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB24_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB24_171 Depth=1
	movl	$0, -4(%rbp)
.LBB24_173:                             # %for.cond529
                                        #   Parent Loop BB24_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB24_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB24_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB24_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_173
.LBB24_176:                             # %for.end541
                                        #   in Loop: Header=BB24_171 Depth=1
	jmp	.LBB24_177
.LBB24_177:                             # %for.inc542
                                        #   in Loop: Header=BB24_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_171
.LBB24_178:                             # %for.end544
	jmp	.LBB24_179
.LBB24_179:                             # %if.end545
	jmp	.LBB24_180
.LBB24_180:                             # %sw.epilog
	cmpl	$1299627817, -68(%rbp)  # imm = 0x4D76BF29
	jne	.LBB24_182
.LBB24_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_181
.Lfunc_end24:
	.size	Conceal_Error.14, .Lfunc_end24-Conceal_Error.14
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI24_0:
	.quad	.LBB24_16
	.quad	.LBB24_158
	.quad	.LBB24_106
	.quad	.LBB24_180
	.quad	.LBB24_36
                                        # -- End function
	.text
	.globl	Get_Reference_Block.15  # -- Begin function Get_Reference_Block.15
	.p2align	4, 0x90
	.type	Get_Reference_Block.15,@function
Get_Reference_Block.15:                 # @Get_Reference_Block.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$527395344, -20(%rbp)   # imm = 0x1F6F6A10
	movq	%rdi, -56(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movq	%r9, -48(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB25_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB25_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB25_1 Depth=1
	movl	$0, -8(%rbp)
.LBB25_3:                               # %for.cond5
                                        #   Parent Loop BB25_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB25_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB25_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-24(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB25_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_3
.LBB25_6:                               # %for.end
                                        #   in Loop: Header=BB25_1 Depth=1
	jmp	.LBB25_7
.LBB25_7:                               # %for.inc14
                                        #   in Loop: Header=BB25_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_1
.LBB25_8:                               # %for.end16
	cmpl	$527395344, -20(%rbp)   # imm = 0x1F6F6A10
	jne	.LBB25_10
.LBB25_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_9
.Lfunc_end25:
	.size	Get_Reference_Block.15, .Lfunc_end25-Get_Reference_Block.15
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.16       # -- Begin function DecOneForthPix.16
	.p2align	4, 0x90
	.type	DecOneForthPix.16,@function
DecOneForthPix.16:                      # @DecOneForthPix.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$429683166, -12(%rbp)   # imm = 0x199C71DE
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB26_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB26_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_1
.LBB26_4:                               # %for.end
	cmpl	$429683166, -12(%rbp)   # imm = 0x199C71DE
	jne	.LBB26_6
.LBB26_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_5
.Lfunc_end26:
	.size	DecOneForthPix.16, .Lfunc_end26-DecOneForthPix.16
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.17    # -- Begin function Error_Concealment.17
	.p2align	4, 0x90
	.type	Error_Concealment.17,@function
Error_Concealment.17:                   # @Error_Concealment.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1243070334, -20(%rbp)  # imm = 0x4A17BF7E
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB27_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB27_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -4(%rbp)
.LBB27_3:                               # %for.cond2
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB27_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB27_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB27_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB27_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB27_6:                               # %if.end
                                        #   in Loop: Header=BB27_3 Depth=2
	jmp	.LBB27_7
.LBB27_7:                               # %for.inc
                                        #   in Loop: Header=BB27_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_3
.LBB27_8:                               # %for.end
                                        #   in Loop: Header=BB27_1 Depth=1
	jmp	.LBB27_9
.LBB27_9:                               # %for.inc7
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_1
.LBB27_10:                              # %for.end9
	cmpl	$1243070334, -20(%rbp)  # imm = 0x4A17BF7E
	jne	.LBB27_12
.LBB27_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_11
.Lfunc_end27:
	.size	Error_Concealment.17, .Lfunc_end27-Error_Concealment.17
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.18       # -- Begin function DecOneForthPix.18
	.p2align	4, 0x90
	.type	DecOneForthPix.18,@function
DecOneForthPix.18:                      # @DecOneForthPix.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$514957532, -12(%rbp)   # imm = 0x1EB1A0DC
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB28_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB28_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB28_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB28_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_1
.LBB28_4:                               # %for.end
	cmpl	$514957532, -12(%rbp)   # imm = 0x1EB1A0DC
	jne	.LBB28_6
.LBB28_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_5
.Lfunc_end28:
	.size	DecOneForthPix.18, .Lfunc_end28-DecOneForthPix.18
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.19        # -- Begin function Conceal_Error.19
	.p2align	4, 0x90
	.type	Conceal_Error.19,@function
Conceal_Error.19:                       # @Conceal_Error.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$573283464, -68(%rbp)   # imm = 0x222B9C88
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB29_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB29_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB29_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB29_4:                               # %land.end
.LBB29_5:                               # %lor.end
.LBB29_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB29_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB29_9
.LBB29_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB29_14
.LBB29_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB29_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB29_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB29_12:                              # %land.end51
.LBB29_13:                              # %lor.end53
.LBB29_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB29_180
# %bb.15:                               # %land.end54
	movq	.LJTI29_0(,%rax,8), %rax
	jmpq	*%rax
.LBB29_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB29_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB29_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB29_18 Depth=1
	movl	$0, -4(%rbp)
.LBB29_20:                              # %for.cond68
                                        #   Parent Loop BB29_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB29_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB29_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_20
.LBB29_23:                              # %for.end
                                        #   in Loop: Header=BB29_18 Depth=1
	jmp	.LBB29_24
.LBB29_24:                              # %for.inc85
                                        #   in Loop: Header=BB29_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_18
.LBB29_25:                              # %for.end87
	jmp	.LBB29_35
.LBB29_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB29_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB29_27 Depth=1
	movl	$0, -4(%rbp)
.LBB29_29:                              # %for.cond92
                                        #   Parent Loop BB29_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB29_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB29_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_29
.LBB29_32:                              # %for.end104
                                        #   in Loop: Header=BB29_27 Depth=1
	jmp	.LBB29_33
.LBB29_33:                              # %for.inc105
                                        #   in Loop: Header=BB29_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_27
.LBB29_34:                              # %for.end107
	jmp	.LBB29_35
.LBB29_35:                              # %if.end
	jmp	.LBB29_180
.LBB29_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB29_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_39 Depth 2
                                        #       Child Loop BB29_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB29_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB29_37 Depth=1
	movl	$0, -16(%rbp)
.LBB29_39:                              # %for.cond113
                                        #   Parent Loop BB29_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB29_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB29_39 Depth=2
	movl	$0, -4(%rbp)
.LBB29_41:                              # %for.cond117
                                        #   Parent Loop BB29_37 Depth=1
                                        #     Parent Loop BB29_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB29_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB29_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB29_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_41
.LBB29_44:                              # %for.end141
                                        #   in Loop: Header=BB29_39 Depth=2
	jmp	.LBB29_45
.LBB29_45:                              # %for.inc142
                                        #   in Loop: Header=BB29_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_39
.LBB29_46:                              # %for.end144
                                        #   in Loop: Header=BB29_37 Depth=1
	jmp	.LBB29_47
.LBB29_47:                              # %for.inc145
                                        #   in Loop: Header=BB29_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_37
.LBB29_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB29_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB29_49 Depth=1
	movl	$0, -8(%rbp)
.LBB29_51:                              # %for.cond152
                                        #   Parent Loop BB29_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB29_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB29_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_51
.LBB29_54:                              # %for.end162
                                        #   in Loop: Header=BB29_49 Depth=1
	jmp	.LBB29_55
.LBB29_55:                              # %for.inc163
                                        #   in Loop: Header=BB29_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_49
.LBB29_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB29_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB29_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB29_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB29_59 Depth=1
	movl	$0, -4(%rbp)
.LBB29_61:                              # %for.cond175
                                        #   Parent Loop BB29_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB29_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB29_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_61
.LBB29_64:                              # %for.end195
                                        #   in Loop: Header=BB29_59 Depth=1
	jmp	.LBB29_65
.LBB29_65:                              # %for.inc196
                                        #   in Loop: Header=BB29_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_59
.LBB29_66:                              # %for.end198
	jmp	.LBB29_95
.LBB29_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB29_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB29_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_71 Depth 2
                                        #       Child Loop BB29_73 Depth 3
                                        #         Child Loop BB29_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB29_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB29_71:                              # %for.cond210
                                        #   Parent Loop BB29_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_73 Depth 3
                                        #         Child Loop BB29_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB29_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB29_73:                              # %for.cond236
                                        #   Parent Loop BB29_69 Depth=1
                                        #     Parent Loop BB29_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB29_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB29_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB29_73 Depth=3
	movl	$0, -4(%rbp)
.LBB29_75:                              # %for.cond240
                                        #   Parent Loop BB29_69 Depth=1
                                        #     Parent Loop BB29_71 Depth=2
                                        #       Parent Loop BB29_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB29_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB29_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB29_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_75
.LBB29_78:                              # %for.end259
                                        #   in Loop: Header=BB29_73 Depth=3
	jmp	.LBB29_79
.LBB29_79:                              # %for.inc260
                                        #   in Loop: Header=BB29_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_73
.LBB29_80:                              # %for.end262
                                        #   in Loop: Header=BB29_71 Depth=2
	jmp	.LBB29_81
.LBB29_81:                              # %for.inc263
                                        #   in Loop: Header=BB29_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_71
.LBB29_82:                              # %for.end265
                                        #   in Loop: Header=BB29_69 Depth=1
	jmp	.LBB29_83
.LBB29_83:                              # %for.inc266
                                        #   in Loop: Header=BB29_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_69
.LBB29_84:                              # %for.end268
	jmp	.LBB29_94
.LBB29_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB29_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB29_86 Depth=1
	movl	$0, -4(%rbp)
.LBB29_88:                              # %for.cond274
                                        #   Parent Loop BB29_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB29_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB29_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_88
.LBB29_91:                              # %for.end294
                                        #   in Loop: Header=BB29_86 Depth=1
	jmp	.LBB29_92
.LBB29_92:                              # %for.inc295
                                        #   in Loop: Header=BB29_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_86
.LBB29_93:                              # %for.end297
	jmp	.LBB29_94
.LBB29_94:                              # %if.end298
	jmp	.LBB29_95
.LBB29_95:                              # %if.end299
	jmp	.LBB29_105
.LBB29_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB29_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB29_97 Depth=1
	movl	$0, -4(%rbp)
.LBB29_99:                              # %for.cond305
                                        #   Parent Loop BB29_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB29_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB29_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_99
.LBB29_102:                             # %for.end317
                                        #   in Loop: Header=BB29_97 Depth=1
	jmp	.LBB29_103
.LBB29_103:                             # %for.inc318
                                        #   in Loop: Header=BB29_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_97
.LBB29_104:                             # %for.end320
	jmp	.LBB29_105
.LBB29_105:                             # %if.end321
	jmp	.LBB29_180
.LBB29_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB29_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB29_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_110 Depth 2
                                        #       Child Loop BB29_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB29_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB29_108 Depth=1
	movl	$0, -16(%rbp)
.LBB29_110:                             # %for.cond331
                                        #   Parent Loop BB29_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB29_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB29_110 Depth=2
	movl	$0, -4(%rbp)
.LBB29_112:                             # %for.cond335
                                        #   Parent Loop BB29_108 Depth=1
                                        #     Parent Loop BB29_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB29_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB29_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB29_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_112
.LBB29_115:                             # %for.end359
                                        #   in Loop: Header=BB29_110 Depth=2
	jmp	.LBB29_116
.LBB29_116:                             # %for.inc360
                                        #   in Loop: Header=BB29_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_110
.LBB29_117:                             # %for.end362
                                        #   in Loop: Header=BB29_108 Depth=1
	jmp	.LBB29_118
.LBB29_118:                             # %for.inc363
                                        #   in Loop: Header=BB29_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_108
.LBB29_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB29_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB29_120 Depth=1
	movl	$0, -8(%rbp)
.LBB29_122:                             # %for.cond370
                                        #   Parent Loop BB29_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB29_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB29_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_122
.LBB29_125:                             # %for.end380
                                        #   in Loop: Header=BB29_120 Depth=1
	jmp	.LBB29_126
.LBB29_126:                             # %for.inc381
                                        #   in Loop: Header=BB29_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_120
.LBB29_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB29_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB29_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB29_129 Depth=1
	movl	$0, -4(%rbp)
.LBB29_131:                             # %for.cond390
                                        #   Parent Loop BB29_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB29_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB29_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_131
.LBB29_134:                             # %for.end410
                                        #   in Loop: Header=BB29_129 Depth=1
	jmp	.LBB29_135
.LBB29_135:                             # %for.inc411
                                        #   in Loop: Header=BB29_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_129
.LBB29_136:                             # %for.end413
	jmp	.LBB29_156
.LBB29_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB29_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB29_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_141 Depth 2
                                        #       Child Loop BB29_143 Depth 3
                                        #         Child Loop BB29_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB29_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB29_141:                             # %for.cond425
                                        #   Parent Loop BB29_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_143 Depth 3
                                        #         Child Loop BB29_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB29_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB29_143:                             # %for.cond452
                                        #   Parent Loop BB29_139 Depth=1
                                        #     Parent Loop BB29_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB29_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB29_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB29_143 Depth=3
	movl	$0, -4(%rbp)
.LBB29_145:                             # %for.cond456
                                        #   Parent Loop BB29_139 Depth=1
                                        #     Parent Loop BB29_141 Depth=2
                                        #       Parent Loop BB29_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB29_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB29_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB29_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_145
.LBB29_148:                             # %for.end475
                                        #   in Loop: Header=BB29_143 Depth=3
	jmp	.LBB29_149
.LBB29_149:                             # %for.inc476
                                        #   in Loop: Header=BB29_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_143
.LBB29_150:                             # %for.end478
                                        #   in Loop: Header=BB29_141 Depth=2
	jmp	.LBB29_151
.LBB29_151:                             # %for.inc479
                                        #   in Loop: Header=BB29_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_141
.LBB29_152:                             # %for.end481
                                        #   in Loop: Header=BB29_139 Depth=1
	jmp	.LBB29_153
.LBB29_153:                             # %for.inc482
                                        #   in Loop: Header=BB29_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_139
.LBB29_154:                             # %for.end484
	jmp	.LBB29_155
.LBB29_155:                             # %if.end485
	jmp	.LBB29_156
.LBB29_156:                             # %if.end486
	jmp	.LBB29_157
.LBB29_157:                             # %if.end487
	jmp	.LBB29_180
.LBB29_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB29_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB29_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB29_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB29_161 Depth=1
	movl	$0, -4(%rbp)
.LBB29_163:                             # %for.cond499
                                        #   Parent Loop BB29_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB29_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB29_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_163
.LBB29_166:                             # %for.end519
                                        #   in Loop: Header=BB29_161 Depth=1
	jmp	.LBB29_167
.LBB29_167:                             # %for.inc520
                                        #   in Loop: Header=BB29_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_161
.LBB29_168:                             # %for.end522
	jmp	.LBB29_169
.LBB29_169:                             # %if.end523
	jmp	.LBB29_179
.LBB29_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB29_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB29_171 Depth=1
	movl	$0, -4(%rbp)
.LBB29_173:                             # %for.cond529
                                        #   Parent Loop BB29_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB29_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB29_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_173
.LBB29_176:                             # %for.end541
                                        #   in Loop: Header=BB29_171 Depth=1
	jmp	.LBB29_177
.LBB29_177:                             # %for.inc542
                                        #   in Loop: Header=BB29_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_171
.LBB29_178:                             # %for.end544
	jmp	.LBB29_179
.LBB29_179:                             # %if.end545
	jmp	.LBB29_180
.LBB29_180:                             # %sw.epilog
	cmpl	$573283464, -68(%rbp)   # imm = 0x222B9C88
	jne	.LBB29_182
.LBB29_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_181
.Lfunc_end29:
	.size	Conceal_Error.19, .Lfunc_end29-Conceal_Error.19
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI29_0:
	.quad	.LBB29_16
	.quad	.LBB29_158
	.quad	.LBB29_106
	.quad	.LBB29_180
	.quad	.LBB29_36
                                        # -- End function
	.text
	.globl	DecOneForthPix.20       # -- Begin function DecOneForthPix.20
	.p2align	4, 0x90
	.type	DecOneForthPix.20,@function
DecOneForthPix.20:                      # @DecOneForthPix.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$213961379, -8(%rbp)    # imm = 0xCC0CAA3
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB30_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB30_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_1
.LBB30_4:                               # %for.end
	cmpl	$213961379, -8(%rbp)    # imm = 0xCC0CAA3
	jne	.LBB30_6
.LBB30_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_5
.Lfunc_end30:
	.size	DecOneForthPix.20, .Lfunc_end30-DecOneForthPix.20
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.21        # -- Begin function Conceal_Error.21
	.p2align	4, 0x90
	.type	Conceal_Error.21,@function
Conceal_Error.21:                       # @Conceal_Error.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$871007286, -68(%rbp)   # imm = 0x33EA8436
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB31_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB31_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB31_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB31_4:                               # %land.end
.LBB31_5:                               # %lor.end
.LBB31_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB31_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB31_9
.LBB31_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB31_14
.LBB31_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB31_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB31_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB31_12:                              # %land.end51
.LBB31_13:                              # %lor.end53
.LBB31_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB31_180
# %bb.15:                               # %land.end54
	movq	.LJTI31_0(,%rax,8), %rax
	jmpq	*%rax
.LBB31_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB31_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB31_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB31_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB31_18 Depth=1
	movl	$0, -4(%rbp)
.LBB31_20:                              # %for.cond68
                                        #   Parent Loop BB31_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB31_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB31_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB31_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_20
.LBB31_23:                              # %for.end
                                        #   in Loop: Header=BB31_18 Depth=1
	jmp	.LBB31_24
.LBB31_24:                              # %for.inc85
                                        #   in Loop: Header=BB31_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_18
.LBB31_25:                              # %for.end87
	jmp	.LBB31_35
.LBB31_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB31_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB31_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB31_27 Depth=1
	movl	$0, -4(%rbp)
.LBB31_29:                              # %for.cond92
                                        #   Parent Loop BB31_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB31_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB31_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB31_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_29
.LBB31_32:                              # %for.end104
                                        #   in Loop: Header=BB31_27 Depth=1
	jmp	.LBB31_33
.LBB31_33:                              # %for.inc105
                                        #   in Loop: Header=BB31_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_27
.LBB31_34:                              # %for.end107
	jmp	.LBB31_35
.LBB31_35:                              # %if.end
	jmp	.LBB31_180
.LBB31_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB31_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_39 Depth 2
                                        #       Child Loop BB31_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB31_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB31_37 Depth=1
	movl	$0, -16(%rbp)
.LBB31_39:                              # %for.cond113
                                        #   Parent Loop BB31_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB31_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB31_39 Depth=2
	movl	$0, -4(%rbp)
.LBB31_41:                              # %for.cond117
                                        #   Parent Loop BB31_37 Depth=1
                                        #     Parent Loop BB31_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB31_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB31_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB31_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_41
.LBB31_44:                              # %for.end141
                                        #   in Loop: Header=BB31_39 Depth=2
	jmp	.LBB31_45
.LBB31_45:                              # %for.inc142
                                        #   in Loop: Header=BB31_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_39
.LBB31_46:                              # %for.end144
                                        #   in Loop: Header=BB31_37 Depth=1
	jmp	.LBB31_47
.LBB31_47:                              # %for.inc145
                                        #   in Loop: Header=BB31_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_37
.LBB31_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB31_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB31_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB31_49 Depth=1
	movl	$0, -8(%rbp)
.LBB31_51:                              # %for.cond152
                                        #   Parent Loop BB31_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB31_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB31_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB31_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_51
.LBB31_54:                              # %for.end162
                                        #   in Loop: Header=BB31_49 Depth=1
	jmp	.LBB31_55
.LBB31_55:                              # %for.inc163
                                        #   in Loop: Header=BB31_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_49
.LBB31_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB31_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB31_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB31_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB31_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB31_59 Depth=1
	movl	$0, -4(%rbp)
.LBB31_61:                              # %for.cond175
                                        #   Parent Loop BB31_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB31_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB31_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB31_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_61
.LBB31_64:                              # %for.end195
                                        #   in Loop: Header=BB31_59 Depth=1
	jmp	.LBB31_65
.LBB31_65:                              # %for.inc196
                                        #   in Loop: Header=BB31_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_59
.LBB31_66:                              # %for.end198
	jmp	.LBB31_95
.LBB31_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB31_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB31_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_71 Depth 2
                                        #       Child Loop BB31_73 Depth 3
                                        #         Child Loop BB31_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB31_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB31_71:                              # %for.cond210
                                        #   Parent Loop BB31_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_73 Depth 3
                                        #         Child Loop BB31_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB31_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB31_73:                              # %for.cond236
                                        #   Parent Loop BB31_69 Depth=1
                                        #     Parent Loop BB31_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB31_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB31_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB31_73 Depth=3
	movl	$0, -4(%rbp)
.LBB31_75:                              # %for.cond240
                                        #   Parent Loop BB31_69 Depth=1
                                        #     Parent Loop BB31_71 Depth=2
                                        #       Parent Loop BB31_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB31_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB31_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB31_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_75
.LBB31_78:                              # %for.end259
                                        #   in Loop: Header=BB31_73 Depth=3
	jmp	.LBB31_79
.LBB31_79:                              # %for.inc260
                                        #   in Loop: Header=BB31_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_73
.LBB31_80:                              # %for.end262
                                        #   in Loop: Header=BB31_71 Depth=2
	jmp	.LBB31_81
.LBB31_81:                              # %for.inc263
                                        #   in Loop: Header=BB31_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_71
.LBB31_82:                              # %for.end265
                                        #   in Loop: Header=BB31_69 Depth=1
	jmp	.LBB31_83
.LBB31_83:                              # %for.inc266
                                        #   in Loop: Header=BB31_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_69
.LBB31_84:                              # %for.end268
	jmp	.LBB31_94
.LBB31_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB31_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB31_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB31_86 Depth=1
	movl	$0, -4(%rbp)
.LBB31_88:                              # %for.cond274
                                        #   Parent Loop BB31_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB31_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB31_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB31_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_88
.LBB31_91:                              # %for.end294
                                        #   in Loop: Header=BB31_86 Depth=1
	jmp	.LBB31_92
.LBB31_92:                              # %for.inc295
                                        #   in Loop: Header=BB31_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_86
.LBB31_93:                              # %for.end297
	jmp	.LBB31_94
.LBB31_94:                              # %if.end298
	jmp	.LBB31_95
.LBB31_95:                              # %if.end299
	jmp	.LBB31_105
.LBB31_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB31_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB31_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB31_97 Depth=1
	movl	$0, -4(%rbp)
.LBB31_99:                              # %for.cond305
                                        #   Parent Loop BB31_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB31_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB31_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB31_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_99
.LBB31_102:                             # %for.end317
                                        #   in Loop: Header=BB31_97 Depth=1
	jmp	.LBB31_103
.LBB31_103:                             # %for.inc318
                                        #   in Loop: Header=BB31_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_97
.LBB31_104:                             # %for.end320
	jmp	.LBB31_105
.LBB31_105:                             # %if.end321
	jmp	.LBB31_180
.LBB31_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB31_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB31_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_110 Depth 2
                                        #       Child Loop BB31_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB31_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB31_108 Depth=1
	movl	$0, -16(%rbp)
.LBB31_110:                             # %for.cond331
                                        #   Parent Loop BB31_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB31_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB31_110 Depth=2
	movl	$0, -4(%rbp)
.LBB31_112:                             # %for.cond335
                                        #   Parent Loop BB31_108 Depth=1
                                        #     Parent Loop BB31_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB31_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB31_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB31_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_112
.LBB31_115:                             # %for.end359
                                        #   in Loop: Header=BB31_110 Depth=2
	jmp	.LBB31_116
.LBB31_116:                             # %for.inc360
                                        #   in Loop: Header=BB31_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_110
.LBB31_117:                             # %for.end362
                                        #   in Loop: Header=BB31_108 Depth=1
	jmp	.LBB31_118
.LBB31_118:                             # %for.inc363
                                        #   in Loop: Header=BB31_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_108
.LBB31_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB31_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB31_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB31_120 Depth=1
	movl	$0, -8(%rbp)
.LBB31_122:                             # %for.cond370
                                        #   Parent Loop BB31_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB31_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB31_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB31_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_122
.LBB31_125:                             # %for.end380
                                        #   in Loop: Header=BB31_120 Depth=1
	jmp	.LBB31_126
.LBB31_126:                             # %for.inc381
                                        #   in Loop: Header=BB31_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_120
.LBB31_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB31_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB31_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB31_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB31_129 Depth=1
	movl	$0, -4(%rbp)
.LBB31_131:                             # %for.cond390
                                        #   Parent Loop BB31_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB31_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB31_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB31_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_131
.LBB31_134:                             # %for.end410
                                        #   in Loop: Header=BB31_129 Depth=1
	jmp	.LBB31_135
.LBB31_135:                             # %for.inc411
                                        #   in Loop: Header=BB31_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_129
.LBB31_136:                             # %for.end413
	jmp	.LBB31_156
.LBB31_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB31_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB31_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_141 Depth 2
                                        #       Child Loop BB31_143 Depth 3
                                        #         Child Loop BB31_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB31_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB31_141:                             # %for.cond425
                                        #   Parent Loop BB31_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_143 Depth 3
                                        #         Child Loop BB31_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB31_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB31_143:                             # %for.cond452
                                        #   Parent Loop BB31_139 Depth=1
                                        #     Parent Loop BB31_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB31_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB31_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB31_143 Depth=3
	movl	$0, -4(%rbp)
.LBB31_145:                             # %for.cond456
                                        #   Parent Loop BB31_139 Depth=1
                                        #     Parent Loop BB31_141 Depth=2
                                        #       Parent Loop BB31_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB31_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB31_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB31_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_145
.LBB31_148:                             # %for.end475
                                        #   in Loop: Header=BB31_143 Depth=3
	jmp	.LBB31_149
.LBB31_149:                             # %for.inc476
                                        #   in Loop: Header=BB31_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_143
.LBB31_150:                             # %for.end478
                                        #   in Loop: Header=BB31_141 Depth=2
	jmp	.LBB31_151
.LBB31_151:                             # %for.inc479
                                        #   in Loop: Header=BB31_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_141
.LBB31_152:                             # %for.end481
                                        #   in Loop: Header=BB31_139 Depth=1
	jmp	.LBB31_153
.LBB31_153:                             # %for.inc482
                                        #   in Loop: Header=BB31_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_139
.LBB31_154:                             # %for.end484
	jmp	.LBB31_155
.LBB31_155:                             # %if.end485
	jmp	.LBB31_156
.LBB31_156:                             # %if.end486
	jmp	.LBB31_157
.LBB31_157:                             # %if.end487
	jmp	.LBB31_180
.LBB31_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB31_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB31_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB31_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB31_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB31_161 Depth=1
	movl	$0, -4(%rbp)
.LBB31_163:                             # %for.cond499
                                        #   Parent Loop BB31_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB31_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB31_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB31_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_163
.LBB31_166:                             # %for.end519
                                        #   in Loop: Header=BB31_161 Depth=1
	jmp	.LBB31_167
.LBB31_167:                             # %for.inc520
                                        #   in Loop: Header=BB31_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_161
.LBB31_168:                             # %for.end522
	jmp	.LBB31_169
.LBB31_169:                             # %if.end523
	jmp	.LBB31_179
.LBB31_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB31_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB31_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB31_171 Depth=1
	movl	$0, -4(%rbp)
.LBB31_173:                             # %for.cond529
                                        #   Parent Loop BB31_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB31_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB31_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB31_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_173
.LBB31_176:                             # %for.end541
                                        #   in Loop: Header=BB31_171 Depth=1
	jmp	.LBB31_177
.LBB31_177:                             # %for.inc542
                                        #   in Loop: Header=BB31_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_171
.LBB31_178:                             # %for.end544
	jmp	.LBB31_179
.LBB31_179:                             # %if.end545
	jmp	.LBB31_180
.LBB31_180:                             # %sw.epilog
	cmpl	$871007286, -68(%rbp)   # imm = 0x33EA8436
	jne	.LBB31_182
.LBB31_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_181
.Lfunc_end31:
	.size	Conceal_Error.21, .Lfunc_end31-Conceal_Error.21
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI31_0:
	.quad	.LBB31_16
	.quad	.LBB31_158
	.quad	.LBB31_106
	.quad	.LBB31_180
	.quad	.LBB31_36
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.22
.LCPI32_0:
	.quad	4636737291354636288     # double 100
.LCPI32_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.22
	.p2align	4, 0x90
	.type	Build_Status_Map.22,@function
Build_Status_Map.22:                    # @Build_Status_Map.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$36724671, -44(%rbp)    # imm = 0x2305FBF
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB32_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -12(%rbp)
.LBB32_3:                               # %for.cond2
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB32_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB32_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB32_13
.LBB32_6:                               # %if.then
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB32_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB32_8:                               # %if.end
                                        #   in Loop: Header=BB32_3 Depth=2
	callq	rand
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB32_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB32_10:                              # %if.end20
                                        #   in Loop: Header=BB32_3 Depth=2
	callq	rand
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB32_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	$1, -4(%rbp)
.LBB32_12:                              # %if.end29
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB32_13:                              # %if.end30
                                        #   in Loop: Header=BB32_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB32_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB32_18
.LBB32_15:                              # %if.else
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB32_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB32_17:                              # %if.end49
                                        #   in Loop: Header=BB32_3 Depth=2
	jmp	.LBB32_18
.LBB32_18:                              # %if.end50
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_3
.LBB32_20:                              # %for.end
                                        #   in Loop: Header=BB32_1 Depth=1
	jmp	.LBB32_21
.LBB32_21:                              # %for.inc53
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_1
.LBB32_22:                              # %for.end55
	cmpl	$36724671, -44(%rbp)    # imm = 0x2305FBF
	jne	.LBB32_24
.LBB32_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_23
.Lfunc_end32:
	.size	Build_Status_Map.22, .Lfunc_end32-Build_Status_Map.22
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.23  # -- Begin function Get_Reference_Pixel.23
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.23,@function
Get_Reference_Pixel.23:                 # @Get_Reference_Pixel.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1930989882, -100(%rbp) # imm = 0x7318913A
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB33_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB33_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB33_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB33_5
.LBB33_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB33_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB33_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB33_11
.LBB33_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB33_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB33_10
.LBB33_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB33_10:                              # %cond.end14
.LBB33_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB33_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB33_14
.LBB33_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB33_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB33_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB33_20
.LBB33_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB33_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB33_19
.LBB33_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB33_19:                              # %cond.end29
.LBB33_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_332
.LBB33_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB33_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB33_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB33_25
.LBB33_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB33_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB33_31
.LBB33_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB33_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB33_30
.LBB33_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB33_30:                              # %cond.end52
.LBB33_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB33_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB33_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB33_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB33_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB33_36
.LBB33_35:                              # %cond.false61
                                        #   in Loop: Header=BB33_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB33_36:                              # %cond.end63
                                        #   in Loop: Header=BB33_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB33_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB33_42
.LBB33_38:                              # %cond.false68
                                        #   in Loop: Header=BB33_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB33_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB33_41
.LBB33_40:                              # %cond.false73
                                        #   in Loop: Header=BB33_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB33_41:                              # %cond.end75
                                        #   in Loop: Header=BB33_32 Depth=1
.LBB33_42:                              # %cond.end77
                                        #   in Loop: Header=BB33_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB33_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB33_32
.LBB33_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB33_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_47
.LBB33_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB33_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB33_53
.LBB33_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB33_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_52
.LBB33_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB33_52:                              # %cond.end113
.LBB33_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB33_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB33_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB33_57
.LBB33_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB33_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB33_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB33_63
.LBB33_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB33_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB33_62
.LBB33_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB33_62:                              # %cond.end136
.LBB33_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB33_76
.LBB33_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB33_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB33_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB33_68
.LBB33_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB33_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB33_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB33_74
.LBB33_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB33_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB33_73
.LBB33_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB33_73:                              # %cond.end169
.LBB33_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB33_75:                              # %if.end
	jmp	.LBB33_76
.LBB33_76:                              # %if.end178
	jmp	.LBB33_331
.LBB33_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB33_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB33_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB33_81
.LBB33_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB33_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB33_87
.LBB33_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB33_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB33_86
.LBB33_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB33_86:                              # %cond.end197
.LBB33_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB33_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB33_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB33_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB33_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB33_92
.LBB33_91:                              # %cond.false209
                                        #   in Loop: Header=BB33_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB33_92:                              # %cond.end211
                                        #   in Loop: Header=BB33_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB33_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB33_98
.LBB33_94:                              # %cond.false216
                                        #   in Loop: Header=BB33_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB33_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB33_97
.LBB33_96:                              # %cond.false221
                                        #   in Loop: Header=BB33_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB33_97:                              # %cond.end223
                                        #   in Loop: Header=BB33_88 Depth=1
.LBB33_98:                              # %cond.end225
                                        #   in Loop: Header=BB33_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB33_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_88
.LBB33_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB33_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_103
.LBB33_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB33_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB33_109
.LBB33_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB33_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_108
.LBB33_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB33_108:                             # %cond.end266
.LBB33_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB33_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB33_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB33_113
.LBB33_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB33_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB33_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB33_119
.LBB33_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB33_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB33_118
.LBB33_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB33_118:                             # %cond.end287
.LBB33_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB33_132
.LBB33_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB33_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB33_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB33_124
.LBB33_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB33_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB33_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB33_130
.LBB33_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB33_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB33_129
.LBB33_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB33_129:                             # %cond.end320
.LBB33_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB33_131:                             # %if.end331
	jmp	.LBB33_132
.LBB33_132:                             # %if.end332
	jmp	.LBB33_330
.LBB33_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB33_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB33_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB33_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB33_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB33_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB33_139
.LBB33_138:                             # %cond.false345
                                        #   in Loop: Header=BB33_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB33_139:                             # %cond.end347
                                        #   in Loop: Header=BB33_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB33_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB33_145
.LBB33_141:                             # %cond.false352
                                        #   in Loop: Header=BB33_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB33_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB33_144
.LBB33_143:                             # %cond.false357
                                        #   in Loop: Header=BB33_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB33_144:                             # %cond.end359
                                        #   in Loop: Header=BB33_135 Depth=1
.LBB33_145:                             # %cond.end361
                                        #   in Loop: Header=BB33_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB33_146:                             # %for.cond363
                                        #   Parent Loop BB33_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB33_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB33_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB33_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB33_150
.LBB33_149:                             # %cond.false371
                                        #   in Loop: Header=BB33_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB33_150:                             # %cond.end373
                                        #   in Loop: Header=BB33_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB33_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB33_156
.LBB33_152:                             # %cond.false378
                                        #   in Loop: Header=BB33_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB33_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB33_155
.LBB33_154:                             # %cond.false383
                                        #   in Loop: Header=BB33_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB33_155:                             # %cond.end385
                                        #   in Loop: Header=BB33_146 Depth=2
.LBB33_156:                             # %cond.end387
                                        #   in Loop: Header=BB33_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB33_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB33_146
.LBB33_158:                             # %for.end401
                                        #   in Loop: Header=BB33_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB33_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_135
.LBB33_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB33_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB33_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB33_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB33_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_161
.LBB33_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB33_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_167
.LBB33_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB33_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB33_173
.LBB33_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB33_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_172
.LBB33_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB33_172:                             # %cond.end449
.LBB33_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB33_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB33_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_177
.LBB33_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB33_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB33_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB33_183
.LBB33_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB33_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_182
.LBB33_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB33_182:                             # %cond.end486
.LBB33_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB33_196
.LBB33_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB33_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB33_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_188
.LBB33_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB33_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB33_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB33_194
.LBB33_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB33_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_193
.LBB33_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB33_193:                             # %cond.end526
.LBB33_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB33_195:                             # %if.end532
	jmp	.LBB33_196
.LBB33_196:                             # %if.end533
	jmp	.LBB33_329
.LBB33_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB33_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB33_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB33_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB33_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB33_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB33_203
.LBB33_202:                             # %cond.false546
                                        #   in Loop: Header=BB33_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB33_203:                             # %cond.end548
                                        #   in Loop: Header=BB33_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB33_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB33_209
.LBB33_205:                             # %cond.false553
                                        #   in Loop: Header=BB33_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB33_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB33_208
.LBB33_207:                             # %cond.false558
                                        #   in Loop: Header=BB33_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB33_208:                             # %cond.end560
                                        #   in Loop: Header=BB33_199 Depth=1
.LBB33_209:                             # %cond.end562
                                        #   in Loop: Header=BB33_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB33_210:                             # %for.cond564
                                        #   Parent Loop BB33_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB33_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB33_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB33_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB33_214
.LBB33_213:                             # %cond.false572
                                        #   in Loop: Header=BB33_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB33_214:                             # %cond.end574
                                        #   in Loop: Header=BB33_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB33_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB33_220
.LBB33_216:                             # %cond.false579
                                        #   in Loop: Header=BB33_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB33_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB33_219
.LBB33_218:                             # %cond.false584
                                        #   in Loop: Header=BB33_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB33_219:                             # %cond.end586
                                        #   in Loop: Header=BB33_210 Depth=2
.LBB33_220:                             # %cond.end588
                                        #   in Loop: Header=BB33_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB33_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_210
.LBB33_222:                             # %for.end602
                                        #   in Loop: Header=BB33_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB33_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB33_199
.LBB33_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB33_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB33_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB33_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB33_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB33_225
.LBB33_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB33_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_231
.LBB33_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB33_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB33_237
.LBB33_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB33_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_236
.LBB33_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB33_236:                             # %cond.end650
.LBB33_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB33_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB33_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_241
.LBB33_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB33_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB33_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB33_247
.LBB33_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB33_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_246
.LBB33_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB33_246:                             # %cond.end687
.LBB33_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB33_258
.LBB33_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB33_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_251
.LBB33_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB33_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB33_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB33_257
.LBB33_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB33_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_256
.LBB33_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB33_256:                             # %cond.end724
.LBB33_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB33_258:                             # %if.end730
	jmp	.LBB33_328
.LBB33_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB33_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB33_262
.LBB33_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB33_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB33_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB33_265
.LBB33_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB33_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB33_271
.LBB33_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB33_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB33_270
.LBB33_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB33_270:                             # %cond.end753
.LBB33_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB33_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB33_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB33_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB33_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB33_276
.LBB33_275:                             # %cond.false765
                                        #   in Loop: Header=BB33_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB33_276:                             # %cond.end767
                                        #   in Loop: Header=BB33_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB33_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB33_282
.LBB33_278:                             # %cond.false772
                                        #   in Loop: Header=BB33_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB33_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB33_281
.LBB33_280:                             # %cond.false777
                                        #   in Loop: Header=BB33_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB33_281:                             # %cond.end779
                                        #   in Loop: Header=BB33_272 Depth=1
.LBB33_282:                             # %cond.end781
                                        #   in Loop: Header=BB33_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB33_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB33_272
.LBB33_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB33_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_287
.LBB33_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB33_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB33_293
.LBB33_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB33_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_292
.LBB33_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB33_292:                             # %cond.end822
.LBB33_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB33_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB33_296
.LBB33_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB33_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB33_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB33_299
.LBB33_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB33_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB33_305
.LBB33_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB33_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB33_304
.LBB33_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB33_304:                             # %cond.end847
.LBB33_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB33_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB33_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB33_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB33_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB33_310
.LBB33_309:                             # %cond.false859
                                        #   in Loop: Header=BB33_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB33_310:                             # %cond.end861
                                        #   in Loop: Header=BB33_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB33_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB33_316
.LBB33_312:                             # %cond.false866
                                        #   in Loop: Header=BB33_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB33_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB33_315
.LBB33_314:                             # %cond.false871
                                        #   in Loop: Header=BB33_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB33_315:                             # %cond.end873
                                        #   in Loop: Header=BB33_306 Depth=1
.LBB33_316:                             # %cond.end875
                                        #   in Loop: Header=BB33_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB33_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_306
.LBB33_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB33_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_321
.LBB33_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB33_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB33_327
.LBB33_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB33_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_326
.LBB33_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB33_326:                             # %cond.end916
.LBB33_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-104(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB33_328:                             # %if.end922
	jmp	.LBB33_329
.LBB33_329:                             # %if.end923
	jmp	.LBB33_330
.LBB33_330:                             # %if.end924
	jmp	.LBB33_331
.LBB33_331:                             # %if.end925
	jmp	.LBB33_332
.LBB33_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1930989882, -100(%rbp) # imm = 0x7318913A
	jne	.LBB33_334
.LBB33_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_333
.Lfunc_end33:
	.size	Get_Reference_Pixel.23, .Lfunc_end33-Get_Reference_Pixel.23
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.24
.LCPI34_0:
	.quad	4636737291354636288     # double 100
.LCPI34_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.24
	.p2align	4, 0x90
	.type	Build_Status_Map.24,@function
Build_Status_Map.24:                    # @Build_Status_Map.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1680437989, -36(%rbp)  # imm = 0x642972E5
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -12(%rbp)
.LBB34_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB34_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -8(%rbp)
.LBB34_3:                               # %for.cond2
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB34_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB34_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB34_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB34_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB34_13
.LBB34_6:                               # %if.then
                                        #   in Loop: Header=BB34_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI34_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI34_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB34_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB34_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB34_8:                               # %if.end
                                        #   in Loop: Header=BB34_3 Depth=2
	callq	rand
	vmovsd	.LCPI34_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI34_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB34_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB34_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB34_10:                              # %if.end20
                                        #   in Loop: Header=BB34_3 Depth=2
	callq	rand
	vmovsd	.LCPI34_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI34_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB34_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB34_3 Depth=2
	movl	$1, -4(%rbp)
.LBB34_12:                              # %if.end29
                                        #   in Loop: Header=BB34_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB34_13:                              # %if.end30
                                        #   in Loop: Header=BB34_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB34_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB34_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB34_18
.LBB34_15:                              # %if.else
                                        #   in Loop: Header=BB34_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB34_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB34_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB34_17:                              # %if.end49
                                        #   in Loop: Header=BB34_3 Depth=2
	jmp	.LBB34_18
.LBB34_18:                              # %if.end50
                                        #   in Loop: Header=BB34_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB34_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_3
.LBB34_20:                              # %for.end
                                        #   in Loop: Header=BB34_1 Depth=1
	jmp	.LBB34_21
.LBB34_21:                              # %for.inc53
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_1
.LBB34_22:                              # %for.end55
	cmpl	$1680437989, -36(%rbp)  # imm = 0x642972E5
	jne	.LBB34_24
.LBB34_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_23
.Lfunc_end34:
	.size	Build_Status_Map.24, .Lfunc_end34-Build_Status_Map.24
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.25  # -- Begin function Get_Reference_Block.25
	.p2align	4, 0x90
	.type	Get_Reference_Block.25,@function
Get_Reference_Block.25:                 # @Get_Reference_Block.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1251858779, -36(%rbp)  # imm = 0x4A9DD95B
	movq	%rdi, -56(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -24(%rbp)
	movq	%r9, -48(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB35_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -4(%rbp)
.LBB35_3:                               # %for.cond5
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB35_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB35_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_3
.LBB35_6:                               # %for.end
                                        #   in Loop: Header=BB35_1 Depth=1
	jmp	.LBB35_7
.LBB35_7:                               # %for.inc14
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_1
.LBB35_8:                               # %for.end16
	cmpl	$1251858779, -36(%rbp)  # imm = 0x4A9DD95B
	jne	.LBB35_10
.LBB35_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_9
.Lfunc_end35:
	.size	Get_Reference_Block.25, .Lfunc_end35-Get_Reference_Block.25
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.26       # -- Begin function DecOneForthPix.26
	.p2align	4, 0x90
	.type	DecOneForthPix.26,@function
DecOneForthPix.26:                      # @DecOneForthPix.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$357339410, -8(%rbp)    # imm = 0x154C9112
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB36_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB36_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB36_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_1
.LBB36_4:                               # %for.end
	cmpl	$357339410, -8(%rbp)    # imm = 0x154C9112
	jne	.LBB36_6
.LBB36_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_5
.Lfunc_end36:
	.size	DecOneForthPix.26, .Lfunc_end36-DecOneForthPix.26
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.27   # -- Begin function decode_one_b8block.27
	.p2align	4, 0x90
	.type	decode_one_b8block.27,@function
decode_one_b8block.27:                  # @decode_one_b8block.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$2000334685, -84(%rbp)  # imm = 0x773AAF5D
	movl	%edi, -40(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB37_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB37_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB37_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB37_4:                               # %for.cond9
                                        #   Parent Loop BB37_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB37_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB37_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB37_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_4
.LBB37_7:                               # %for.end
                                        #   in Loop: Header=BB37_2 Depth=1
	jmp	.LBB37_8
.LBB37_8:                               # %for.inc26
                                        #   in Loop: Header=BB37_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_2
.LBB37_9:                               # %for.end28
	jmp	.LBB37_96
.LBB37_10:                              # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB37_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB37_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB37_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB37_31
.LBB37_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB37_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB37_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB37_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB37_17:                              # %for.cond40
                                        #   Parent Loop BB37_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB37_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB37_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB37_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_17
.LBB37_20:                              # %for.end49
                                        #   in Loop: Header=BB37_15 Depth=1
	jmp	.LBB37_21
.LBB37_21:                              # %for.inc50
                                        #   in Loop: Header=BB37_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_15
.LBB37_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB37_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB37_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB37_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB37_25:                              # %for.cond56
                                        #   Parent Loop BB37_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB37_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB37_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB37_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_25
.LBB37_28:                              # %for.end71
                                        #   in Loop: Header=BB37_23 Depth=1
	jmp	.LBB37_29
.LBB37_29:                              # %for.inc72
                                        #   in Loop: Header=BB37_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_23
.LBB37_30:                              # %for.end74
	jmp	.LBB37_60
.LBB37_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB37_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB37_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB37_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB37_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB37_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB37_36:                              # %for.cond83
                                        #   Parent Loop BB37_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB37_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB37_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB37_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_36
.LBB37_39:                              # %for.end120
                                        #   in Loop: Header=BB37_34 Depth=1
	jmp	.LBB37_40
.LBB37_40:                              # %for.inc121
                                        #   in Loop: Header=BB37_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_34
.LBB37_41:                              # %for.end123
	jmp	.LBB37_51
.LBB37_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB37_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB37_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB37_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB37_45:                              # %for.cond129
                                        #   Parent Loop BB37_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB37_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB37_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB37_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_45
.LBB37_48:                              # %for.end145
                                        #   in Loop: Header=BB37_43 Depth=1
	jmp	.LBB37_49
.LBB37_49:                              # %for.inc146
                                        #   in Loop: Header=BB37_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_43
.LBB37_50:                              # %for.end148
	jmp	.LBB37_51
.LBB37_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB37_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB37_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB37_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB37_54:                              # %for.cond153
                                        #   Parent Loop BB37_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB37_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB37_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB37_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_54
.LBB37_57:                              # %for.end167
                                        #   in Loop: Header=BB37_52 Depth=1
	jmp	.LBB37_58
.LBB37_58:                              # %for.inc168
                                        #   in Loop: Header=BB37_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_52
.LBB37_59:                              # %for.end170
	jmp	.LBB37_60
.LBB37_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB37_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB37_66
.LBB37_62:                              # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB37_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB37_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB37_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB37_86
.LBB37_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB37_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_69 Depth 2
                                        #       Child Loop BB37_74 Depth 3
                                        #         Child Loop BB37_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB37_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB37_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB37_69:                              # %for.cond197
                                        #   Parent Loop BB37_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_74 Depth 3
                                        #         Child Loop BB37_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB37_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB37_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB37_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB37_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB37_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB37_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB37_73:                              # %if.end218
                                        #   in Loop: Header=BB37_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB37_74:                              # %for.cond233
                                        #   Parent Loop BB37_67 Depth=1
                                        #     Parent Loop BB37_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB37_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB37_74 Depth=3
	movl	$0, -4(%rbp)
.LBB37_76:                              # %for.cond237
                                        #   Parent Loop BB37_67 Depth=1
                                        #     Parent Loop BB37_69 Depth=2
                                        #       Parent Loop BB37_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB37_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB37_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB37_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_76
.LBB37_79:                              # %for.end269
                                        #   in Loop: Header=BB37_74 Depth=3
	jmp	.LBB37_80
.LBB37_80:                              # %for.inc270
                                        #   in Loop: Header=BB37_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_74
.LBB37_81:                              # %for.end272
                                        #   in Loop: Header=BB37_69 Depth=2
	jmp	.LBB37_82
.LBB37_82:                              # %for.inc273
                                        #   in Loop: Header=BB37_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_69
.LBB37_83:                              # %for.end275
                                        #   in Loop: Header=BB37_67 Depth=1
	jmp	.LBB37_84
.LBB37_84:                              # %for.inc276
                                        #   in Loop: Header=BB37_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_67
.LBB37_85:                              # %for.end278
	jmp	.LBB37_95
.LBB37_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB37_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB37_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB37_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB37_89:                              # %for.cond284
                                        #   Parent Loop BB37_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB37_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB37_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB37_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_89
.LBB37_92:                              # %for.end310
                                        #   in Loop: Header=BB37_87 Depth=1
	jmp	.LBB37_93
.LBB37_93:                              # %for.inc311
                                        #   in Loop: Header=BB37_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_87
.LBB37_94:                              # %for.end313
	jmp	.LBB37_95
.LBB37_95:                              # %if.end314
	jmp	.LBB37_96
.LBB37_96:                              # %if.end315
	cmpl	$2000334685, -84(%rbp)  # imm = 0x773AAF5D
	jne	.LBB37_98
.LBB37_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_97
.Lfunc_end37:
	.size	decode_one_b8block.27, .Lfunc_end37-decode_one_b8block.27
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.28   # -- Begin function decode_one_b8block.28
	.p2align	4, 0x90
	.type	decode_one_b8block.28,@function
decode_one_b8block.28:                  # @decode_one_b8block.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1663182908, -84(%rbp)  # imm = 0x6322283C
	movl	%edi, -44(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB38_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB38_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_4:                               # %for.cond9
                                        #   Parent Loop BB38_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB38_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB38_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB38_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_4
.LBB38_7:                               # %for.end
                                        #   in Loop: Header=BB38_2 Depth=1
	jmp	.LBB38_8
.LBB38_8:                               # %for.inc26
                                        #   in Loop: Header=BB38_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_2
.LBB38_9:                               # %for.end28
	jmp	.LBB38_96
.LBB38_10:                              # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB38_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB38_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB38_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB38_31
.LBB38_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB38_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB38_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_17:                              # %for.cond40
                                        #   Parent Loop BB38_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB38_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB38_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB38_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_17
.LBB38_20:                              # %for.end49
                                        #   in Loop: Header=BB38_15 Depth=1
	jmp	.LBB38_21
.LBB38_21:                              # %for.inc50
                                        #   in Loop: Header=BB38_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_15
.LBB38_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB38_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB38_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB38_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB38_25:                              # %for.cond56
                                        #   Parent Loop BB38_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB38_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB38_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB38_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_25
.LBB38_28:                              # %for.end71
                                        #   in Loop: Header=BB38_23 Depth=1
	jmp	.LBB38_29
.LBB38_29:                              # %for.inc72
                                        #   in Loop: Header=BB38_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_23
.LBB38_30:                              # %for.end74
	jmp	.LBB38_60
.LBB38_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB38_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB38_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB38_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB38_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB38_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB38_36:                              # %for.cond83
                                        #   Parent Loop BB38_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB38_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB38_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB38_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_36
.LBB38_39:                              # %for.end120
                                        #   in Loop: Header=BB38_34 Depth=1
	jmp	.LBB38_40
.LBB38_40:                              # %for.inc121
                                        #   in Loop: Header=BB38_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_34
.LBB38_41:                              # %for.end123
	jmp	.LBB38_51
.LBB38_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB38_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB38_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB38_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB38_45:                              # %for.cond129
                                        #   Parent Loop BB38_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB38_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB38_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB38_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_45
.LBB38_48:                              # %for.end145
                                        #   in Loop: Header=BB38_43 Depth=1
	jmp	.LBB38_49
.LBB38_49:                              # %for.inc146
                                        #   in Loop: Header=BB38_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_43
.LBB38_50:                              # %for.end148
	jmp	.LBB38_51
.LBB38_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB38_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB38_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_54:                              # %for.cond153
                                        #   Parent Loop BB38_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB38_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB38_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB38_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_54
.LBB38_57:                              # %for.end167
                                        #   in Loop: Header=BB38_52 Depth=1
	jmp	.LBB38_58
.LBB38_58:                              # %for.inc168
                                        #   in Loop: Header=BB38_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_52
.LBB38_59:                              # %for.end170
	jmp	.LBB38_60
.LBB38_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB38_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB38_66
.LBB38_62:                              # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB38_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB38_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB38_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB38_86
.LBB38_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB38_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_69 Depth 2
                                        #       Child Loop BB38_74 Depth 3
                                        #         Child Loop BB38_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB38_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB38_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB38_69:                              # %for.cond197
                                        #   Parent Loop BB38_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_74 Depth 3
                                        #         Child Loop BB38_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB38_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB38_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB38_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB38_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB38_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB38_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB38_73:                              # %if.end218
                                        #   in Loop: Header=BB38_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-80(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB38_74:                              # %for.cond233
                                        #   Parent Loop BB38_67 Depth=1
                                        #     Parent Loop BB38_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB38_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB38_74 Depth=3
	movl	$0, -4(%rbp)
.LBB38_76:                              # %for.cond237
                                        #   Parent Loop BB38_67 Depth=1
                                        #     Parent Loop BB38_69 Depth=2
                                        #       Parent Loop BB38_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB38_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB38_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB38_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_76
.LBB38_79:                              # %for.end269
                                        #   in Loop: Header=BB38_74 Depth=3
	jmp	.LBB38_80
.LBB38_80:                              # %for.inc270
                                        #   in Loop: Header=BB38_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_74
.LBB38_81:                              # %for.end272
                                        #   in Loop: Header=BB38_69 Depth=2
	jmp	.LBB38_82
.LBB38_82:                              # %for.inc273
                                        #   in Loop: Header=BB38_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_69
.LBB38_83:                              # %for.end275
                                        #   in Loop: Header=BB38_67 Depth=1
	jmp	.LBB38_84
.LBB38_84:                              # %for.inc276
                                        #   in Loop: Header=BB38_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_67
.LBB38_85:                              # %for.end278
	jmp	.LBB38_95
.LBB38_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB38_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB38_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_89:                              # %for.cond284
                                        #   Parent Loop BB38_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB38_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB38_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB38_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_89
.LBB38_92:                              # %for.end310
                                        #   in Loop: Header=BB38_87 Depth=1
	jmp	.LBB38_93
.LBB38_93:                              # %for.inc311
                                        #   in Loop: Header=BB38_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_87
.LBB38_94:                              # %for.end313
	jmp	.LBB38_95
.LBB38_95:                              # %if.end314
	jmp	.LBB38_96
.LBB38_96:                              # %if.end315
	cmpl	$1663182908, -84(%rbp)  # imm = 0x6322283C
	jne	.LBB38_98
.LBB38_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_97
.Lfunc_end38:
	.size	decode_one_b8block.28, .Lfunc_end38-decode_one_b8block.28
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.29   # -- Begin function decode_one_b8block.29
	.p2align	4, 0x90
	.type	decode_one_b8block.29,@function
decode_one_b8block.29:                  # @decode_one_b8block.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$493926457, -84(%rbp)   # imm = 0x1D70B839
	movl	%edi, -44(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB39_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB39_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB39_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB39_4:                               # %for.cond9
                                        #   Parent Loop BB39_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB39_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB39_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB39_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_4
.LBB39_7:                               # %for.end
                                        #   in Loop: Header=BB39_2 Depth=1
	jmp	.LBB39_8
.LBB39_8:                               # %for.inc26
                                        #   in Loop: Header=BB39_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_2
.LBB39_9:                               # %for.end28
	jmp	.LBB39_96
.LBB39_10:                              # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB39_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB39_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB39_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB39_31
.LBB39_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB39_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB39_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB39_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB39_17:                              # %for.cond40
                                        #   Parent Loop BB39_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB39_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB39_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB39_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_17
.LBB39_20:                              # %for.end49
                                        #   in Loop: Header=BB39_15 Depth=1
	jmp	.LBB39_21
.LBB39_21:                              # %for.inc50
                                        #   in Loop: Header=BB39_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_15
.LBB39_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB39_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB39_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB39_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB39_25:                              # %for.cond56
                                        #   Parent Loop BB39_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB39_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB39_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB39_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_25
.LBB39_28:                              # %for.end71
                                        #   in Loop: Header=BB39_23 Depth=1
	jmp	.LBB39_29
.LBB39_29:                              # %for.inc72
                                        #   in Loop: Header=BB39_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_23
.LBB39_30:                              # %for.end74
	jmp	.LBB39_60
.LBB39_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB39_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB39_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB39_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB39_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB39_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB39_36:                              # %for.cond83
                                        #   Parent Loop BB39_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB39_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB39_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB39_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_36
.LBB39_39:                              # %for.end120
                                        #   in Loop: Header=BB39_34 Depth=1
	jmp	.LBB39_40
.LBB39_40:                              # %for.inc121
                                        #   in Loop: Header=BB39_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_34
.LBB39_41:                              # %for.end123
	jmp	.LBB39_51
.LBB39_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB39_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB39_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB39_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB39_45:                              # %for.cond129
                                        #   Parent Loop BB39_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB39_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB39_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB39_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_45
.LBB39_48:                              # %for.end145
                                        #   in Loop: Header=BB39_43 Depth=1
	jmp	.LBB39_49
.LBB39_49:                              # %for.inc146
                                        #   in Loop: Header=BB39_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_43
.LBB39_50:                              # %for.end148
	jmp	.LBB39_51
.LBB39_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB39_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB39_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB39_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB39_54:                              # %for.cond153
                                        #   Parent Loop BB39_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB39_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB39_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB39_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_54
.LBB39_57:                              # %for.end167
                                        #   in Loop: Header=BB39_52 Depth=1
	jmp	.LBB39_58
.LBB39_58:                              # %for.inc168
                                        #   in Loop: Header=BB39_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_52
.LBB39_59:                              # %for.end170
	jmp	.LBB39_60
.LBB39_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB39_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB39_66
.LBB39_62:                              # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB39_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB39_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB39_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB39_86
.LBB39_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB39_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_69 Depth 2
                                        #       Child Loop BB39_74 Depth 3
                                        #         Child Loop BB39_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB39_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB39_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB39_69:                              # %for.cond197
                                        #   Parent Loop BB39_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_74 Depth 3
                                        #         Child Loop BB39_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB39_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB39_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB39_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB39_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB39_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB39_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB39_73:                              # %if.end218
                                        #   in Loop: Header=BB39_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-76(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB39_74:                              # %for.cond233
                                        #   Parent Loop BB39_67 Depth=1
                                        #     Parent Loop BB39_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB39_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB39_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB39_74 Depth=3
	movl	$0, -4(%rbp)
.LBB39_76:                              # %for.cond237
                                        #   Parent Loop BB39_67 Depth=1
                                        #     Parent Loop BB39_69 Depth=2
                                        #       Parent Loop BB39_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB39_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB39_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB39_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_76
.LBB39_79:                              # %for.end269
                                        #   in Loop: Header=BB39_74 Depth=3
	jmp	.LBB39_80
.LBB39_80:                              # %for.inc270
                                        #   in Loop: Header=BB39_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_74
.LBB39_81:                              # %for.end272
                                        #   in Loop: Header=BB39_69 Depth=2
	jmp	.LBB39_82
.LBB39_82:                              # %for.inc273
                                        #   in Loop: Header=BB39_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_69
.LBB39_83:                              # %for.end275
                                        #   in Loop: Header=BB39_67 Depth=1
	jmp	.LBB39_84
.LBB39_84:                              # %for.inc276
                                        #   in Loop: Header=BB39_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_67
.LBB39_85:                              # %for.end278
	jmp	.LBB39_95
.LBB39_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB39_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB39_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB39_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB39_89:                              # %for.cond284
                                        #   Parent Loop BB39_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB39_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB39_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB39_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_89
.LBB39_92:                              # %for.end310
                                        #   in Loop: Header=BB39_87 Depth=1
	jmp	.LBB39_93
.LBB39_93:                              # %for.inc311
                                        #   in Loop: Header=BB39_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_87
.LBB39_94:                              # %for.end313
	jmp	.LBB39_95
.LBB39_95:                              # %if.end314
	jmp	.LBB39_96
.LBB39_96:                              # %if.end315
	cmpl	$493926457, -84(%rbp)   # imm = 0x1D70B839
	jne	.LBB39_98
.LBB39_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_97
.Lfunc_end39:
	.size	decode_one_b8block.29, .Lfunc_end39-decode_one_b8block.29
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.30 # -- Begin function compute_residue_b8block.30
	.p2align	4, 0x90
	.type	compute_residue_b8block.30,@function
compute_residue_b8block.30:             # @compute_residue_b8block.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$26981800, -36(%rbp)    # imm = 0x19BB5A8
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB40_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB40_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB40_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB40_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB40_4:                               # %for.cond4
                                        #   Parent Loop BB40_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB40_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB40_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB40_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_4
.LBB40_7:                               # %for.end
                                        #   in Loop: Header=BB40_2 Depth=1
	jmp	.LBB40_8
.LBB40_8:                               # %for.inc22
                                        #   in Loop: Header=BB40_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_2
.LBB40_9:                               # %for.end24
	jmp	.LBB40_19
.LBB40_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB40_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB40_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB40_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB40_13:                              # %for.cond29
                                        #   Parent Loop BB40_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB40_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB40_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB40_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_13
.LBB40_16:                              # %for.end56
                                        #   in Loop: Header=BB40_11 Depth=1
	jmp	.LBB40_17
.LBB40_17:                              # %for.inc57
                                        #   in Loop: Header=BB40_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_11
.LBB40_18:                              # %for.end59
	jmp	.LBB40_19
.LBB40_19:                              # %if.end
	cmpl	$26981800, -36(%rbp)    # imm = 0x19BB5A8
	jne	.LBB40_21
.LBB40_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_20
.Lfunc_end40:
	.size	compute_residue_b8block.30, .Lfunc_end40-compute_residue_b8block.30
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.31  # -- Begin function Get_Reference_Pixel.31
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.31,@function
Get_Reference_Pixel.31:                 # @Get_Reference_Pixel.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1677522372, -104(%rbp) # imm = 0x63FCF5C4
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB41_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB41_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB41_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB41_5
.LBB41_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB41_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB41_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB41_11
.LBB41_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB41_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB41_10
.LBB41_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB41_10:                              # %cond.end14
.LBB41_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB41_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB41_14
.LBB41_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB41_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB41_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB41_20
.LBB41_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB41_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB41_19
.LBB41_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB41_19:                              # %cond.end29
.LBB41_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_332
.LBB41_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB41_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB41_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB41_25
.LBB41_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB41_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB41_31
.LBB41_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB41_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB41_30
.LBB41_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB41_30:                              # %cond.end52
.LBB41_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB41_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB41_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB41_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB41_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB41_36
.LBB41_35:                              # %cond.false61
                                        #   in Loop: Header=BB41_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB41_36:                              # %cond.end63
                                        #   in Loop: Header=BB41_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB41_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB41_42
.LBB41_38:                              # %cond.false68
                                        #   in Loop: Header=BB41_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB41_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB41_41
.LBB41_40:                              # %cond.false73
                                        #   in Loop: Header=BB41_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB41_41:                              # %cond.end75
                                        #   in Loop: Header=BB41_32 Depth=1
.LBB41_42:                              # %cond.end77
                                        #   in Loop: Header=BB41_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB41_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_32
.LBB41_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_47
.LBB41_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB41_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB41_53
.LBB41_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_52
.LBB41_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB41_52:                              # %cond.end113
.LBB41_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB41_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB41_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB41_57
.LBB41_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB41_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB41_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB41_63
.LBB41_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB41_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB41_62
.LBB41_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB41_62:                              # %cond.end136
.LBB41_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB41_76
.LBB41_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB41_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB41_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB41_68
.LBB41_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB41_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB41_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB41_74
.LBB41_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB41_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB41_73
.LBB41_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB41_73:                              # %cond.end169
.LBB41_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB41_75:                              # %if.end
	jmp	.LBB41_76
.LBB41_76:                              # %if.end178
	jmp	.LBB41_331
.LBB41_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB41_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB41_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB41_81
.LBB41_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB41_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB41_87
.LBB41_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB41_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB41_86
.LBB41_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB41_86:                              # %cond.end197
.LBB41_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB41_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB41_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB41_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB41_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB41_92
.LBB41_91:                              # %cond.false209
                                        #   in Loop: Header=BB41_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB41_92:                              # %cond.end211
                                        #   in Loop: Header=BB41_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB41_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB41_98
.LBB41_94:                              # %cond.false216
                                        #   in Loop: Header=BB41_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB41_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB41_97
.LBB41_96:                              # %cond.false221
                                        #   in Loop: Header=BB41_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB41_97:                              # %cond.end223
                                        #   in Loop: Header=BB41_88 Depth=1
.LBB41_98:                              # %cond.end225
                                        #   in Loop: Header=BB41_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB41_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_88
.LBB41_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_103
.LBB41_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB41_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB41_109
.LBB41_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_108
.LBB41_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB41_108:                             # %cond.end266
.LBB41_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB41_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB41_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB41_113
.LBB41_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB41_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB41_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB41_119
.LBB41_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB41_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB41_118
.LBB41_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB41_118:                             # %cond.end287
.LBB41_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB41_132
.LBB41_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB41_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB41_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB41_124
.LBB41_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB41_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB41_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB41_130
.LBB41_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB41_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB41_129
.LBB41_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB41_129:                             # %cond.end320
.LBB41_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB41_131:                             # %if.end331
	jmp	.LBB41_132
.LBB41_132:                             # %if.end332
	jmp	.LBB41_330
.LBB41_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB41_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB41_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB41_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB41_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB41_139
.LBB41_138:                             # %cond.false345
                                        #   in Loop: Header=BB41_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB41_139:                             # %cond.end347
                                        #   in Loop: Header=BB41_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB41_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB41_145
.LBB41_141:                             # %cond.false352
                                        #   in Loop: Header=BB41_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB41_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB41_144
.LBB41_143:                             # %cond.false357
                                        #   in Loop: Header=BB41_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB41_144:                             # %cond.end359
                                        #   in Loop: Header=BB41_135 Depth=1
.LBB41_145:                             # %cond.end361
                                        #   in Loop: Header=BB41_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB41_146:                             # %for.cond363
                                        #   Parent Loop BB41_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB41_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB41_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB41_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB41_150
.LBB41_149:                             # %cond.false371
                                        #   in Loop: Header=BB41_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB41_150:                             # %cond.end373
                                        #   in Loop: Header=BB41_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB41_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB41_156
.LBB41_152:                             # %cond.false378
                                        #   in Loop: Header=BB41_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB41_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB41_155
.LBB41_154:                             # %cond.false383
                                        #   in Loop: Header=BB41_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB41_155:                             # %cond.end385
                                        #   in Loop: Header=BB41_146 Depth=2
.LBB41_156:                             # %cond.end387
                                        #   in Loop: Header=BB41_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB41_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_146
.LBB41_158:                             # %for.end401
                                        #   in Loop: Header=BB41_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB41_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_135
.LBB41_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB41_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB41_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB41_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB41_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_161
.LBB41_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_167
.LBB41_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB41_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB41_173
.LBB41_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_172
.LBB41_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB41_172:                             # %cond.end449
.LBB41_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB41_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB41_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_177
.LBB41_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB41_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB41_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB41_183
.LBB41_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB41_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_182
.LBB41_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB41_182:                             # %cond.end486
.LBB41_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB41_196
.LBB41_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB41_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB41_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_188
.LBB41_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB41_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB41_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB41_194
.LBB41_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB41_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_193
.LBB41_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB41_193:                             # %cond.end526
.LBB41_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB41_195:                             # %if.end532
	jmp	.LBB41_196
.LBB41_196:                             # %if.end533
	jmp	.LBB41_329
.LBB41_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB41_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB41_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB41_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB41_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB41_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB41_203
.LBB41_202:                             # %cond.false546
                                        #   in Loop: Header=BB41_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB41_203:                             # %cond.end548
                                        #   in Loop: Header=BB41_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB41_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB41_209
.LBB41_205:                             # %cond.false553
                                        #   in Loop: Header=BB41_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB41_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB41_208
.LBB41_207:                             # %cond.false558
                                        #   in Loop: Header=BB41_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB41_208:                             # %cond.end560
                                        #   in Loop: Header=BB41_199 Depth=1
.LBB41_209:                             # %cond.end562
                                        #   in Loop: Header=BB41_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB41_210:                             # %for.cond564
                                        #   Parent Loop BB41_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB41_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB41_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB41_214
.LBB41_213:                             # %cond.false572
                                        #   in Loop: Header=BB41_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB41_214:                             # %cond.end574
                                        #   in Loop: Header=BB41_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB41_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB41_220
.LBB41_216:                             # %cond.false579
                                        #   in Loop: Header=BB41_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB41_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB41_219
.LBB41_218:                             # %cond.false584
                                        #   in Loop: Header=BB41_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB41_219:                             # %cond.end586
                                        #   in Loop: Header=BB41_210 Depth=2
.LBB41_220:                             # %cond.end588
                                        #   in Loop: Header=BB41_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB41_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_210
.LBB41_222:                             # %for.end602
                                        #   in Loop: Header=BB41_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB41_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_199
.LBB41_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB41_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB41_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB41_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB41_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_225
.LBB41_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_231
.LBB41_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB41_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB41_237
.LBB41_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_236
.LBB41_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB41_236:                             # %cond.end650
.LBB41_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB41_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB41_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_241
.LBB41_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB41_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB41_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB41_247
.LBB41_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB41_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_246
.LBB41_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB41_246:                             # %cond.end687
.LBB41_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB41_258
.LBB41_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB41_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_251
.LBB41_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB41_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB41_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB41_257
.LBB41_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB41_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_256
.LBB41_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB41_256:                             # %cond.end724
.LBB41_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB41_258:                             # %if.end730
	jmp	.LBB41_328
.LBB41_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB41_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB41_262
.LBB41_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB41_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB41_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB41_265
.LBB41_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB41_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB41_271
.LBB41_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB41_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB41_270
.LBB41_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB41_270:                             # %cond.end753
.LBB41_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB41_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB41_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB41_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB41_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB41_276
.LBB41_275:                             # %cond.false765
                                        #   in Loop: Header=BB41_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB41_276:                             # %cond.end767
                                        #   in Loop: Header=BB41_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB41_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB41_282
.LBB41_278:                             # %cond.false772
                                        #   in Loop: Header=BB41_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB41_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB41_281
.LBB41_280:                             # %cond.false777
                                        #   in Loop: Header=BB41_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB41_281:                             # %cond.end779
                                        #   in Loop: Header=BB41_272 Depth=1
.LBB41_282:                             # %cond.end781
                                        #   in Loop: Header=BB41_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB41_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_272
.LBB41_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_287
.LBB41_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB41_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB41_293
.LBB41_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_292
.LBB41_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB41_292:                             # %cond.end822
.LBB41_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB41_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB41_296
.LBB41_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB41_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB41_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB41_299
.LBB41_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB41_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB41_305
.LBB41_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB41_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB41_304
.LBB41_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB41_304:                             # %cond.end847
.LBB41_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB41_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB41_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB41_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB41_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB41_310
.LBB41_309:                             # %cond.false859
                                        #   in Loop: Header=BB41_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB41_310:                             # %cond.end861
                                        #   in Loop: Header=BB41_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB41_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB41_316
.LBB41_312:                             # %cond.false866
                                        #   in Loop: Header=BB41_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB41_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB41_315
.LBB41_314:                             # %cond.false871
                                        #   in Loop: Header=BB41_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB41_315:                             # %cond.end873
                                        #   in Loop: Header=BB41_306 Depth=1
.LBB41_316:                             # %cond.end875
                                        #   in Loop: Header=BB41_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB41_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_306
.LBB41_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_321
.LBB41_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB41_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB41_327
.LBB41_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_326
.LBB41_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB41_326:                             # %cond.end916
.LBB41_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB41_328:                             # %if.end922
	jmp	.LBB41_329
.LBB41_329:                             # %if.end923
	jmp	.LBB41_330
.LBB41_330:                             # %if.end924
	jmp	.LBB41_331
.LBB41_331:                             # %if.end925
	jmp	.LBB41_332
.LBB41_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1677522372, -104(%rbp) # imm = 0x63FCF5C4
	jne	.LBB41_334
.LBB41_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_333
.Lfunc_end41:
	.size	Get_Reference_Pixel.31, .Lfunc_end41-Get_Reference_Pixel.31
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.32   # -- Begin function decode_one_b8block.32
	.p2align	4, 0x90
	.type	decode_one_b8block.32,@function
decode_one_b8block.32:                  # @decode_one_b8block.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$638484988, -84(%rbp)   # imm = 0x260E81FC
	movl	%edi, -48(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB42_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB42_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_4:                               # %for.cond9
                                        #   Parent Loop BB42_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB42_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB42_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB42_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_4
.LBB42_7:                               # %for.end
                                        #   in Loop: Header=BB42_2 Depth=1
	jmp	.LBB42_8
.LBB42_8:                               # %for.inc26
                                        #   in Loop: Header=BB42_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_2
.LBB42_9:                               # %for.end28
	jmp	.LBB42_96
.LBB42_10:                              # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB42_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB42_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB42_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB42_31
.LBB42_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB42_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB42_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_17:                              # %for.cond40
                                        #   Parent Loop BB42_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB42_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB42_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB42_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_17
.LBB42_20:                              # %for.end49
                                        #   in Loop: Header=BB42_15 Depth=1
	jmp	.LBB42_21
.LBB42_21:                              # %for.inc50
                                        #   in Loop: Header=BB42_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_15
.LBB42_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB42_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB42_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB42_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB42_25:                              # %for.cond56
                                        #   Parent Loop BB42_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB42_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB42_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB42_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_25
.LBB42_28:                              # %for.end71
                                        #   in Loop: Header=BB42_23 Depth=1
	jmp	.LBB42_29
.LBB42_29:                              # %for.inc72
                                        #   in Loop: Header=BB42_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_23
.LBB42_30:                              # %for.end74
	jmp	.LBB42_60
.LBB42_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB42_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB42_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB42_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB42_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB42_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB42_36:                              # %for.cond83
                                        #   Parent Loop BB42_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB42_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB42_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB42_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_36
.LBB42_39:                              # %for.end120
                                        #   in Loop: Header=BB42_34 Depth=1
	jmp	.LBB42_40
.LBB42_40:                              # %for.inc121
                                        #   in Loop: Header=BB42_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_34
.LBB42_41:                              # %for.end123
	jmp	.LBB42_51
.LBB42_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB42_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB42_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB42_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB42_45:                              # %for.cond129
                                        #   Parent Loop BB42_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB42_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB42_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB42_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_45
.LBB42_48:                              # %for.end145
                                        #   in Loop: Header=BB42_43 Depth=1
	jmp	.LBB42_49
.LBB42_49:                              # %for.inc146
                                        #   in Loop: Header=BB42_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_43
.LBB42_50:                              # %for.end148
	jmp	.LBB42_51
.LBB42_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB42_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB42_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_54:                              # %for.cond153
                                        #   Parent Loop BB42_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB42_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB42_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB42_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_54
.LBB42_57:                              # %for.end167
                                        #   in Loop: Header=BB42_52 Depth=1
	jmp	.LBB42_58
.LBB42_58:                              # %for.inc168
                                        #   in Loop: Header=BB42_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_52
.LBB42_59:                              # %for.end170
	jmp	.LBB42_60
.LBB42_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB42_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB42_66
.LBB42_62:                              # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB42_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB42_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB42_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB42_86
.LBB42_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB42_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_69 Depth 2
                                        #       Child Loop BB42_74 Depth 3
                                        #         Child Loop BB42_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB42_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB42_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB42_69:                              # %for.cond197
                                        #   Parent Loop BB42_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_74 Depth 3
                                        #         Child Loop BB42_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB42_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB42_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB42_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB42_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB42_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB42_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB42_73:                              # %if.end218
                                        #   in Loop: Header=BB42_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB42_74:                              # %for.cond233
                                        #   Parent Loop BB42_67 Depth=1
                                        #     Parent Loop BB42_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB42_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB42_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB42_74 Depth=3
	movl	$0, -4(%rbp)
.LBB42_76:                              # %for.cond237
                                        #   Parent Loop BB42_67 Depth=1
                                        #     Parent Loop BB42_69 Depth=2
                                        #       Parent Loop BB42_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB42_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB42_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB42_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_76
.LBB42_79:                              # %for.end269
                                        #   in Loop: Header=BB42_74 Depth=3
	jmp	.LBB42_80
.LBB42_80:                              # %for.inc270
                                        #   in Loop: Header=BB42_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_74
.LBB42_81:                              # %for.end272
                                        #   in Loop: Header=BB42_69 Depth=2
	jmp	.LBB42_82
.LBB42_82:                              # %for.inc273
                                        #   in Loop: Header=BB42_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_69
.LBB42_83:                              # %for.end275
                                        #   in Loop: Header=BB42_67 Depth=1
	jmp	.LBB42_84
.LBB42_84:                              # %for.inc276
                                        #   in Loop: Header=BB42_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_67
.LBB42_85:                              # %for.end278
	jmp	.LBB42_95
.LBB42_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB42_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB42_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_89:                              # %for.cond284
                                        #   Parent Loop BB42_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB42_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB42_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB42_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_89
.LBB42_92:                              # %for.end310
                                        #   in Loop: Header=BB42_87 Depth=1
	jmp	.LBB42_93
.LBB42_93:                              # %for.inc311
                                        #   in Loop: Header=BB42_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_87
.LBB42_94:                              # %for.end313
	jmp	.LBB42_95
.LBB42_95:                              # %if.end314
	jmp	.LBB42_96
.LBB42_96:                              # %if.end315
	cmpl	$638484988, -84(%rbp)   # imm = 0x260E81FC
	jne	.LBB42_98
.LBB42_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_97
.Lfunc_end42:
	.size	decode_one_b8block.32, .Lfunc_end42-decode_one_b8block.32
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.33  # -- Begin function Get_Reference_Block.33
	.p2align	4, 0x90
	.type	Get_Reference_Block.33,@function
Get_Reference_Block.33:                 # @Get_Reference_Block.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$591520124, -28(%rbp)   # imm = 0x2341E17C
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -56(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB43_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB43_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -4(%rbp)
.LBB43_3:                               # %for.cond5
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB43_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-32(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB43_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_3
.LBB43_6:                               # %for.end
                                        #   in Loop: Header=BB43_1 Depth=1
	jmp	.LBB43_7
.LBB43_7:                               # %for.inc14
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_1
.LBB43_8:                               # %for.end16
	cmpl	$591520124, -28(%rbp)   # imm = 0x2341E17C
	jne	.LBB43_10
.LBB43_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_9
.Lfunc_end43:
	.size	Get_Reference_Block.33, .Lfunc_end43-Get_Reference_Block.33
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.34   # -- Begin function decode_one_b8block.34
	.p2align	4, 0x90
	.type	decode_one_b8block.34,@function
decode_one_b8block.34:                  # @decode_one_b8block.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1054957409, -84(%rbp)  # imm = 0x3EE15F61
	movl	%edi, -56(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB44_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB44_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB44_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB44_4:                               # %for.cond9
                                        #   Parent Loop BB44_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB44_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB44_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB44_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_4
.LBB44_7:                               # %for.end
                                        #   in Loop: Header=BB44_2 Depth=1
	jmp	.LBB44_8
.LBB44_8:                               # %for.inc26
                                        #   in Loop: Header=BB44_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_2
.LBB44_9:                               # %for.end28
	jmp	.LBB44_96
.LBB44_10:                              # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB44_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB44_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB44_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB44_31
.LBB44_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB44_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB44_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB44_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB44_17:                              # %for.cond40
                                        #   Parent Loop BB44_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB44_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB44_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB44_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_17
.LBB44_20:                              # %for.end49
                                        #   in Loop: Header=BB44_15 Depth=1
	jmp	.LBB44_21
.LBB44_21:                              # %for.inc50
                                        #   in Loop: Header=BB44_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_15
.LBB44_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB44_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB44_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB44_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB44_25:                              # %for.cond56
                                        #   Parent Loop BB44_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB44_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB44_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB44_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_25
.LBB44_28:                              # %for.end71
                                        #   in Loop: Header=BB44_23 Depth=1
	jmp	.LBB44_29
.LBB44_29:                              # %for.inc72
                                        #   in Loop: Header=BB44_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_23
.LBB44_30:                              # %for.end74
	jmp	.LBB44_60
.LBB44_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB44_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB44_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB44_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB44_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB44_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB44_36:                              # %for.cond83
                                        #   Parent Loop BB44_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB44_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB44_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB44_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_36
.LBB44_39:                              # %for.end120
                                        #   in Loop: Header=BB44_34 Depth=1
	jmp	.LBB44_40
.LBB44_40:                              # %for.inc121
                                        #   in Loop: Header=BB44_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_34
.LBB44_41:                              # %for.end123
	jmp	.LBB44_51
.LBB44_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB44_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB44_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB44_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB44_45:                              # %for.cond129
                                        #   Parent Loop BB44_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB44_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB44_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB44_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_45
.LBB44_48:                              # %for.end145
                                        #   in Loop: Header=BB44_43 Depth=1
	jmp	.LBB44_49
.LBB44_49:                              # %for.inc146
                                        #   in Loop: Header=BB44_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_43
.LBB44_50:                              # %for.end148
	jmp	.LBB44_51
.LBB44_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB44_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB44_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB44_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB44_54:                              # %for.cond153
                                        #   Parent Loop BB44_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB44_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB44_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB44_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_54
.LBB44_57:                              # %for.end167
                                        #   in Loop: Header=BB44_52 Depth=1
	jmp	.LBB44_58
.LBB44_58:                              # %for.inc168
                                        #   in Loop: Header=BB44_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_52
.LBB44_59:                              # %for.end170
	jmp	.LBB44_60
.LBB44_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB44_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB44_66
.LBB44_62:                              # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB44_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB44_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB44_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB44_86
.LBB44_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB44_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_69 Depth 2
                                        #       Child Loop BB44_74 Depth 3
                                        #         Child Loop BB44_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB44_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB44_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB44_69:                              # %for.cond197
                                        #   Parent Loop BB44_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_74 Depth 3
                                        #         Child Loop BB44_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB44_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB44_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB44_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB44_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB44_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB44_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB44_73:                              # %if.end218
                                        #   in Loop: Header=BB44_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-80(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB44_74:                              # %for.cond233
                                        #   Parent Loop BB44_67 Depth=1
                                        #     Parent Loop BB44_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB44_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB44_74 Depth=3
	movl	$0, -8(%rbp)
.LBB44_76:                              # %for.cond237
                                        #   Parent Loop BB44_67 Depth=1
                                        #     Parent Loop BB44_69 Depth=2
                                        #       Parent Loop BB44_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB44_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB44_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB44_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_76
.LBB44_79:                              # %for.end269
                                        #   in Loop: Header=BB44_74 Depth=3
	jmp	.LBB44_80
.LBB44_80:                              # %for.inc270
                                        #   in Loop: Header=BB44_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_74
.LBB44_81:                              # %for.end272
                                        #   in Loop: Header=BB44_69 Depth=2
	jmp	.LBB44_82
.LBB44_82:                              # %for.inc273
                                        #   in Loop: Header=BB44_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_69
.LBB44_83:                              # %for.end275
                                        #   in Loop: Header=BB44_67 Depth=1
	jmp	.LBB44_84
.LBB44_84:                              # %for.inc276
                                        #   in Loop: Header=BB44_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_67
.LBB44_85:                              # %for.end278
	jmp	.LBB44_95
.LBB44_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB44_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB44_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB44_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB44_89:                              # %for.cond284
                                        #   Parent Loop BB44_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB44_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB44_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB44_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_89
.LBB44_92:                              # %for.end310
                                        #   in Loop: Header=BB44_87 Depth=1
	jmp	.LBB44_93
.LBB44_93:                              # %for.inc311
                                        #   in Loop: Header=BB44_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_87
.LBB44_94:                              # %for.end313
	jmp	.LBB44_95
.LBB44_95:                              # %if.end314
	jmp	.LBB44_96
.LBB44_96:                              # %if.end315
	cmpl	$1054957409, -84(%rbp)  # imm = 0x3EE15F61
	jne	.LBB44_98
.LBB44_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_97
.Lfunc_end44:
	.size	decode_one_b8block.34, .Lfunc_end44-decode_one_b8block.34
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.35   # -- Begin function decode_one_b8block.35
	.p2align	4, 0x90
	.type	decode_one_b8block.35,@function
decode_one_b8block.35:                  # @decode_one_b8block.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$650782937, -84(%rbp)   # imm = 0x26CA28D9
	movl	%edi, -52(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB45_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB45_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB45_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_4:                               # %for.cond9
                                        #   Parent Loop BB45_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB45_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB45_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB45_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_4
.LBB45_7:                               # %for.end
                                        #   in Loop: Header=BB45_2 Depth=1
	jmp	.LBB45_8
.LBB45_8:                               # %for.inc26
                                        #   in Loop: Header=BB45_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_2
.LBB45_9:                               # %for.end28
	jmp	.LBB45_96
.LBB45_10:                              # %if.else
	cmpl	$0, -64(%rbp)
	jne	.LBB45_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB45_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB45_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB45_31
.LBB45_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB45_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB45_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_17:                              # %for.cond40
                                        #   Parent Loop BB45_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB45_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB45_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB45_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_17
.LBB45_20:                              # %for.end49
                                        #   in Loop: Header=BB45_15 Depth=1
	jmp	.LBB45_21
.LBB45_21:                              # %for.inc50
                                        #   in Loop: Header=BB45_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_15
.LBB45_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB45_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB45_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB45_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB45_25:                              # %for.cond56
                                        #   Parent Loop BB45_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB45_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB45_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB45_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_25
.LBB45_28:                              # %for.end71
                                        #   in Loop: Header=BB45_23 Depth=1
	jmp	.LBB45_29
.LBB45_29:                              # %for.inc72
                                        #   in Loop: Header=BB45_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_23
.LBB45_30:                              # %for.end74
	jmp	.LBB45_60
.LBB45_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB45_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB45_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB45_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB45_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB45_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB45_36:                              # %for.cond83
                                        #   Parent Loop BB45_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB45_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB45_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB45_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_36
.LBB45_39:                              # %for.end120
                                        #   in Loop: Header=BB45_34 Depth=1
	jmp	.LBB45_40
.LBB45_40:                              # %for.inc121
                                        #   in Loop: Header=BB45_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_34
.LBB45_41:                              # %for.end123
	jmp	.LBB45_51
.LBB45_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB45_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB45_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB45_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB45_45:                              # %for.cond129
                                        #   Parent Loop BB45_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB45_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB45_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB45_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_45
.LBB45_48:                              # %for.end145
                                        #   in Loop: Header=BB45_43 Depth=1
	jmp	.LBB45_49
.LBB45_49:                              # %for.inc146
                                        #   in Loop: Header=BB45_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_43
.LBB45_50:                              # %for.end148
	jmp	.LBB45_51
.LBB45_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB45_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB45_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_54:                              # %for.cond153
                                        #   Parent Loop BB45_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB45_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB45_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB45_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_54
.LBB45_57:                              # %for.end167
                                        #   in Loop: Header=BB45_52 Depth=1
	jmp	.LBB45_58
.LBB45_58:                              # %for.inc168
                                        #   in Loop: Header=BB45_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_52
.LBB45_59:                              # %for.end170
	jmp	.LBB45_60
.LBB45_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB45_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB45_66
.LBB45_62:                              # %lor.lhs.false177
	cmpl	$0, -64(%rbp)
	jne	.LBB45_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB45_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB45_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB45_86
.LBB45_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB45_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_69 Depth 2
                                        #       Child Loop BB45_74 Depth 3
                                        #         Child Loop BB45_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB45_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB45_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB45_69:                              # %for.cond197
                                        #   Parent Loop BB45_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_74 Depth 3
                                        #         Child Loop BB45_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB45_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB45_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB45_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB45_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB45_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB45_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB45_73:                              # %if.end218
                                        #   in Loop: Header=BB45_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-76(%rbp), %esi
	movl	-80(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB45_74:                              # %for.cond233
                                        #   Parent Loop BB45_67 Depth=1
                                        #     Parent Loop BB45_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB45_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB45_74 Depth=3
	movl	$0, -4(%rbp)
.LBB45_76:                              # %for.cond237
                                        #   Parent Loop BB45_67 Depth=1
                                        #     Parent Loop BB45_69 Depth=2
                                        #       Parent Loop BB45_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB45_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB45_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB45_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_76
.LBB45_79:                              # %for.end269
                                        #   in Loop: Header=BB45_74 Depth=3
	jmp	.LBB45_80
.LBB45_80:                              # %for.inc270
                                        #   in Loop: Header=BB45_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_74
.LBB45_81:                              # %for.end272
                                        #   in Loop: Header=BB45_69 Depth=2
	jmp	.LBB45_82
.LBB45_82:                              # %for.inc273
                                        #   in Loop: Header=BB45_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_69
.LBB45_83:                              # %for.end275
                                        #   in Loop: Header=BB45_67 Depth=1
	jmp	.LBB45_84
.LBB45_84:                              # %for.inc276
                                        #   in Loop: Header=BB45_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_67
.LBB45_85:                              # %for.end278
	jmp	.LBB45_95
.LBB45_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB45_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB45_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_89:                              # %for.cond284
                                        #   Parent Loop BB45_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB45_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB45_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB45_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_89
.LBB45_92:                              # %for.end310
                                        #   in Loop: Header=BB45_87 Depth=1
	jmp	.LBB45_93
.LBB45_93:                              # %for.inc311
                                        #   in Loop: Header=BB45_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_87
.LBB45_94:                              # %for.end313
	jmp	.LBB45_95
.LBB45_95:                              # %if.end314
	jmp	.LBB45_96
.LBB45_96:                              # %if.end315
	cmpl	$650782937, -84(%rbp)   # imm = 0x26CA28D9
	jne	.LBB45_98
.LBB45_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_97
.Lfunc_end45:
	.size	decode_one_b8block.35, .Lfunc_end45-decode_one_b8block.35
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.36
.LCPI46_0:
	.quad	4636737291354636288     # double 100
.LCPI46_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.36
	.p2align	4, 0x90
	.type	Build_Status_Map.36,@function
Build_Status_Map.36:                    # @Build_Status_Map.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$366773572, -44(%rbp)   # imm = 0x15DC8544
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB46_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB46_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -8(%rbp)
.LBB46_3:                               # %for.cond2
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB46_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB46_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB46_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB46_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB46_13
.LBB46_6:                               # %if.then
                                        #   in Loop: Header=BB46_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI46_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI46_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB46_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB46_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB46_8:                               # %if.end
                                        #   in Loop: Header=BB46_3 Depth=2
	callq	rand
	vmovsd	.LCPI46_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI46_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB46_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB46_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB46_10:                              # %if.end20
                                        #   in Loop: Header=BB46_3 Depth=2
	callq	rand
	vmovsd	.LCPI46_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI46_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB46_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB46_3 Depth=2
	movl	$1, -4(%rbp)
.LBB46_12:                              # %if.end29
                                        #   in Loop: Header=BB46_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB46_13:                              # %if.end30
                                        #   in Loop: Header=BB46_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB46_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB46_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB46_18
.LBB46_15:                              # %if.else
                                        #   in Loop: Header=BB46_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB46_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB46_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB46_17:                              # %if.end49
                                        #   in Loop: Header=BB46_3 Depth=2
	jmp	.LBB46_18
.LBB46_18:                              # %if.end50
                                        #   in Loop: Header=BB46_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB46_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_3
.LBB46_20:                              # %for.end
                                        #   in Loop: Header=BB46_1 Depth=1
	jmp	.LBB46_21
.LBB46_21:                              # %for.inc53
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_1
.LBB46_22:                              # %for.end55
	cmpl	$366773572, -44(%rbp)   # imm = 0x15DC8544
	jne	.LBB46_24
.LBB46_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_23
.Lfunc_end46:
	.size	Build_Status_Map.36, .Lfunc_end46-Build_Status_Map.36
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.37        # -- Begin function Conceal_Error.37
	.p2align	4, 0x90
	.type	Conceal_Error.37,@function
Conceal_Error.37:                       # @Conceal_Error.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1966351231, -68(%rbp)  # imm = 0x7534237F
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB47_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB47_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB47_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB47_4:                               # %land.end
.LBB47_5:                               # %lor.end
.LBB47_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB47_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB47_9
.LBB47_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB47_14
.LBB47_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB47_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB47_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB47_12:                              # %land.end51
.LBB47_13:                              # %lor.end53
.LBB47_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB47_180
# %bb.15:                               # %land.end54
	movq	.LJTI47_0(,%rax,8), %rax
	jmpq	*%rax
.LBB47_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB47_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB47_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB47_18 Depth=1
	movl	$0, -4(%rbp)
.LBB47_20:                              # %for.cond68
                                        #   Parent Loop BB47_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB47_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB47_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_20
.LBB47_23:                              # %for.end
                                        #   in Loop: Header=BB47_18 Depth=1
	jmp	.LBB47_24
.LBB47_24:                              # %for.inc85
                                        #   in Loop: Header=BB47_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_18
.LBB47_25:                              # %for.end87
	jmp	.LBB47_35
.LBB47_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB47_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB47_27 Depth=1
	movl	$0, -4(%rbp)
.LBB47_29:                              # %for.cond92
                                        #   Parent Loop BB47_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB47_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB47_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_29
.LBB47_32:                              # %for.end104
                                        #   in Loop: Header=BB47_27 Depth=1
	jmp	.LBB47_33
.LBB47_33:                              # %for.inc105
                                        #   in Loop: Header=BB47_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_27
.LBB47_34:                              # %for.end107
	jmp	.LBB47_35
.LBB47_35:                              # %if.end
	jmp	.LBB47_180
.LBB47_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB47_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_39 Depth 2
                                        #       Child Loop BB47_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB47_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB47_37 Depth=1
	movl	$0, -16(%rbp)
.LBB47_39:                              # %for.cond113
                                        #   Parent Loop BB47_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB47_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB47_39 Depth=2
	movl	$0, -4(%rbp)
.LBB47_41:                              # %for.cond117
                                        #   Parent Loop BB47_37 Depth=1
                                        #     Parent Loop BB47_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB47_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB47_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB47_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_41
.LBB47_44:                              # %for.end141
                                        #   in Loop: Header=BB47_39 Depth=2
	jmp	.LBB47_45
.LBB47_45:                              # %for.inc142
                                        #   in Loop: Header=BB47_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_39
.LBB47_46:                              # %for.end144
                                        #   in Loop: Header=BB47_37 Depth=1
	jmp	.LBB47_47
.LBB47_47:                              # %for.inc145
                                        #   in Loop: Header=BB47_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_37
.LBB47_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB47_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB47_49 Depth=1
	movl	$0, -8(%rbp)
.LBB47_51:                              # %for.cond152
                                        #   Parent Loop BB47_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB47_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB47_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_51
.LBB47_54:                              # %for.end162
                                        #   in Loop: Header=BB47_49 Depth=1
	jmp	.LBB47_55
.LBB47_55:                              # %for.inc163
                                        #   in Loop: Header=BB47_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_49
.LBB47_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB47_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB47_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB47_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB47_59 Depth=1
	movl	$0, -4(%rbp)
.LBB47_61:                              # %for.cond175
                                        #   Parent Loop BB47_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB47_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB47_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_61
.LBB47_64:                              # %for.end195
                                        #   in Loop: Header=BB47_59 Depth=1
	jmp	.LBB47_65
.LBB47_65:                              # %for.inc196
                                        #   in Loop: Header=BB47_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_59
.LBB47_66:                              # %for.end198
	jmp	.LBB47_95
.LBB47_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB47_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB47_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_71 Depth 2
                                        #       Child Loop BB47_73 Depth 3
                                        #         Child Loop BB47_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB47_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB47_71:                              # %for.cond210
                                        #   Parent Loop BB47_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_73 Depth 3
                                        #         Child Loop BB47_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB47_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB47_73:                              # %for.cond236
                                        #   Parent Loop BB47_69 Depth=1
                                        #     Parent Loop BB47_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB47_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB47_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB47_73 Depth=3
	movl	$0, -4(%rbp)
.LBB47_75:                              # %for.cond240
                                        #   Parent Loop BB47_69 Depth=1
                                        #     Parent Loop BB47_71 Depth=2
                                        #       Parent Loop BB47_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB47_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB47_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB47_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_75
.LBB47_78:                              # %for.end259
                                        #   in Loop: Header=BB47_73 Depth=3
	jmp	.LBB47_79
.LBB47_79:                              # %for.inc260
                                        #   in Loop: Header=BB47_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_73
.LBB47_80:                              # %for.end262
                                        #   in Loop: Header=BB47_71 Depth=2
	jmp	.LBB47_81
.LBB47_81:                              # %for.inc263
                                        #   in Loop: Header=BB47_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_71
.LBB47_82:                              # %for.end265
                                        #   in Loop: Header=BB47_69 Depth=1
	jmp	.LBB47_83
.LBB47_83:                              # %for.inc266
                                        #   in Loop: Header=BB47_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_69
.LBB47_84:                              # %for.end268
	jmp	.LBB47_94
.LBB47_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB47_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB47_86 Depth=1
	movl	$0, -4(%rbp)
.LBB47_88:                              # %for.cond274
                                        #   Parent Loop BB47_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB47_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB47_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_88
.LBB47_91:                              # %for.end294
                                        #   in Loop: Header=BB47_86 Depth=1
	jmp	.LBB47_92
.LBB47_92:                              # %for.inc295
                                        #   in Loop: Header=BB47_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_86
.LBB47_93:                              # %for.end297
	jmp	.LBB47_94
.LBB47_94:                              # %if.end298
	jmp	.LBB47_95
.LBB47_95:                              # %if.end299
	jmp	.LBB47_105
.LBB47_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB47_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB47_97 Depth=1
	movl	$0, -4(%rbp)
.LBB47_99:                              # %for.cond305
                                        #   Parent Loop BB47_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB47_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB47_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_99
.LBB47_102:                             # %for.end317
                                        #   in Loop: Header=BB47_97 Depth=1
	jmp	.LBB47_103
.LBB47_103:                             # %for.inc318
                                        #   in Loop: Header=BB47_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_97
.LBB47_104:                             # %for.end320
	jmp	.LBB47_105
.LBB47_105:                             # %if.end321
	jmp	.LBB47_180
.LBB47_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB47_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB47_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_110 Depth 2
                                        #       Child Loop BB47_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB47_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB47_108 Depth=1
	movl	$0, -16(%rbp)
.LBB47_110:                             # %for.cond331
                                        #   Parent Loop BB47_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB47_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB47_110 Depth=2
	movl	$0, -4(%rbp)
.LBB47_112:                             # %for.cond335
                                        #   Parent Loop BB47_108 Depth=1
                                        #     Parent Loop BB47_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB47_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB47_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB47_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_112
.LBB47_115:                             # %for.end359
                                        #   in Loop: Header=BB47_110 Depth=2
	jmp	.LBB47_116
.LBB47_116:                             # %for.inc360
                                        #   in Loop: Header=BB47_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_110
.LBB47_117:                             # %for.end362
                                        #   in Loop: Header=BB47_108 Depth=1
	jmp	.LBB47_118
.LBB47_118:                             # %for.inc363
                                        #   in Loop: Header=BB47_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_108
.LBB47_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB47_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB47_120 Depth=1
	movl	$0, -8(%rbp)
.LBB47_122:                             # %for.cond370
                                        #   Parent Loop BB47_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB47_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB47_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_122
.LBB47_125:                             # %for.end380
                                        #   in Loop: Header=BB47_120 Depth=1
	jmp	.LBB47_126
.LBB47_126:                             # %for.inc381
                                        #   in Loop: Header=BB47_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_120
.LBB47_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB47_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB47_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB47_129 Depth=1
	movl	$0, -4(%rbp)
.LBB47_131:                             # %for.cond390
                                        #   Parent Loop BB47_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB47_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB47_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_131
.LBB47_134:                             # %for.end410
                                        #   in Loop: Header=BB47_129 Depth=1
	jmp	.LBB47_135
.LBB47_135:                             # %for.inc411
                                        #   in Loop: Header=BB47_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_129
.LBB47_136:                             # %for.end413
	jmp	.LBB47_156
.LBB47_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB47_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB47_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_141 Depth 2
                                        #       Child Loop BB47_143 Depth 3
                                        #         Child Loop BB47_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB47_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB47_141:                             # %for.cond425
                                        #   Parent Loop BB47_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_143 Depth 3
                                        #         Child Loop BB47_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB47_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB47_143:                             # %for.cond452
                                        #   Parent Loop BB47_139 Depth=1
                                        #     Parent Loop BB47_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB47_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB47_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB47_143 Depth=3
	movl	$0, -4(%rbp)
.LBB47_145:                             # %for.cond456
                                        #   Parent Loop BB47_139 Depth=1
                                        #     Parent Loop BB47_141 Depth=2
                                        #       Parent Loop BB47_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB47_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB47_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB47_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_145
.LBB47_148:                             # %for.end475
                                        #   in Loop: Header=BB47_143 Depth=3
	jmp	.LBB47_149
.LBB47_149:                             # %for.inc476
                                        #   in Loop: Header=BB47_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_143
.LBB47_150:                             # %for.end478
                                        #   in Loop: Header=BB47_141 Depth=2
	jmp	.LBB47_151
.LBB47_151:                             # %for.inc479
                                        #   in Loop: Header=BB47_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_141
.LBB47_152:                             # %for.end481
                                        #   in Loop: Header=BB47_139 Depth=1
	jmp	.LBB47_153
.LBB47_153:                             # %for.inc482
                                        #   in Loop: Header=BB47_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_139
.LBB47_154:                             # %for.end484
	jmp	.LBB47_155
.LBB47_155:                             # %if.end485
	jmp	.LBB47_156
.LBB47_156:                             # %if.end486
	jmp	.LBB47_157
.LBB47_157:                             # %if.end487
	jmp	.LBB47_180
.LBB47_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB47_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB47_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB47_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB47_161 Depth=1
	movl	$0, -4(%rbp)
.LBB47_163:                             # %for.cond499
                                        #   Parent Loop BB47_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB47_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB47_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_163
.LBB47_166:                             # %for.end519
                                        #   in Loop: Header=BB47_161 Depth=1
	jmp	.LBB47_167
.LBB47_167:                             # %for.inc520
                                        #   in Loop: Header=BB47_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_161
.LBB47_168:                             # %for.end522
	jmp	.LBB47_169
.LBB47_169:                             # %if.end523
	jmp	.LBB47_179
.LBB47_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB47_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB47_171 Depth=1
	movl	$0, -4(%rbp)
.LBB47_173:                             # %for.cond529
                                        #   Parent Loop BB47_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB47_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB47_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_173
.LBB47_176:                             # %for.end541
                                        #   in Loop: Header=BB47_171 Depth=1
	jmp	.LBB47_177
.LBB47_177:                             # %for.inc542
                                        #   in Loop: Header=BB47_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_171
.LBB47_178:                             # %for.end544
	jmp	.LBB47_179
.LBB47_179:                             # %if.end545
	jmp	.LBB47_180
.LBB47_180:                             # %sw.epilog
	cmpl	$1966351231, -68(%rbp)  # imm = 0x7534237F
	jne	.LBB47_182
.LBB47_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_181
.Lfunc_end47:
	.size	Conceal_Error.37, .Lfunc_end47-Conceal_Error.37
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI47_0:
	.quad	.LBB47_16
	.quad	.LBB47_158
	.quad	.LBB47_106
	.quad	.LBB47_180
	.quad	.LBB47_36
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.38
.LCPI48_0:
	.quad	4636737291354636288     # double 100
.LCPI48_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.38
	.p2align	4, 0x90
	.type	Build_Status_Map.38,@function
Build_Status_Map.38:                    # @Build_Status_Map.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$749755617, -40(%rbp)   # imm = 0x2CB05CE1
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -12(%rbp)
.LBB48_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB48_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	$0, -8(%rbp)
.LBB48_3:                               # %for.cond2
                                        #   Parent Loop BB48_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB48_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB48_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB48_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB48_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB48_13
.LBB48_6:                               # %if.then
                                        #   in Loop: Header=BB48_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI48_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI48_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB48_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB48_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB48_8:                               # %if.end
                                        #   in Loop: Header=BB48_3 Depth=2
	callq	rand
	vmovsd	.LCPI48_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI48_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB48_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB48_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB48_10:                              # %if.end20
                                        #   in Loop: Header=BB48_3 Depth=2
	callq	rand
	vmovsd	.LCPI48_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI48_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB48_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB48_3 Depth=2
	movl	$1, -4(%rbp)
.LBB48_12:                              # %if.end29
                                        #   in Loop: Header=BB48_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB48_13:                              # %if.end30
                                        #   in Loop: Header=BB48_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB48_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB48_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB48_18
.LBB48_15:                              # %if.else
                                        #   in Loop: Header=BB48_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB48_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB48_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB48_17:                              # %if.end49
                                        #   in Loop: Header=BB48_3 Depth=2
	jmp	.LBB48_18
.LBB48_18:                              # %if.end50
                                        #   in Loop: Header=BB48_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB48_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_3
.LBB48_20:                              # %for.end
                                        #   in Loop: Header=BB48_1 Depth=1
	jmp	.LBB48_21
.LBB48_21:                              # %for.inc53
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_1
.LBB48_22:                              # %for.end55
	cmpl	$749755617, -40(%rbp)   # imm = 0x2CB05CE1
	jne	.LBB48_24
.LBB48_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_23
.Lfunc_end48:
	.size	Build_Status_Map.38, .Lfunc_end48-Build_Status_Map.38
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.39    # -- Begin function Error_Concealment.39
	.p2align	4, 0x90
	.type	Error_Concealment.39,@function
Error_Concealment.39:                   # @Error_Concealment.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1717209462, -20(%rbp)  # imm = 0x665A8976
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB49_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -4(%rbp)
.LBB49_3:                               # %for.cond2
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB49_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB49_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB49_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB49_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB49_6:                               # %if.end
                                        #   in Loop: Header=BB49_3 Depth=2
	jmp	.LBB49_7
.LBB49_7:                               # %for.inc
                                        #   in Loop: Header=BB49_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_3
.LBB49_8:                               # %for.end
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_9
.LBB49_9:                               # %for.inc7
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_1
.LBB49_10:                              # %for.end9
	cmpl	$1717209462, -20(%rbp)  # imm = 0x665A8976
	jne	.LBB49_12
.LBB49_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_11
.Lfunc_end49:
	.size	Error_Concealment.39, .Lfunc_end49-Error_Concealment.39
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.40    # -- Begin function Error_Concealment.40
	.p2align	4, 0x90
	.type	Error_Concealment.40,@function
Error_Concealment.40:                   # @Error_Concealment.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1654960189, -16(%rbp)  # imm = 0x62A4B03D
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB50_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB50_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$0, -4(%rbp)
.LBB50_3:                               # %for.cond2
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB50_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB50_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB50_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB50_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB50_6:                               # %if.end
                                        #   in Loop: Header=BB50_3 Depth=2
	jmp	.LBB50_7
.LBB50_7:                               # %for.inc
                                        #   in Loop: Header=BB50_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_3
.LBB50_8:                               # %for.end
                                        #   in Loop: Header=BB50_1 Depth=1
	jmp	.LBB50_9
.LBB50_9:                               # %for.inc7
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_1
.LBB50_10:                              # %for.end9
	cmpl	$1654960189, -16(%rbp)  # imm = 0x62A4B03D
	jne	.LBB50_12
.LBB50_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_11
.Lfunc_end50:
	.size	Error_Concealment.40, .Lfunc_end50-Error_Concealment.40
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.41       # -- Begin function DecOneForthPix.41
	.p2align	4, 0x90
	.type	DecOneForthPix.41,@function
DecOneForthPix.41:                      # @DecOneForthPix.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$399557551, -12(%rbp)   # imm = 0x17D0C3AF
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB51_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB51_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB51_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_1
.LBB51_4:                               # %for.end
	cmpl	$399557551, -12(%rbp)   # imm = 0x17D0C3AF
	jne	.LBB51_6
.LBB51_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_5
.Lfunc_end51:
	.size	DecOneForthPix.41, .Lfunc_end51-DecOneForthPix.41
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.42       # -- Begin function DecOneForthPix.42
	.p2align	4, 0x90
	.type	DecOneForthPix.42,@function
DecOneForthPix.42:                      # @DecOneForthPix.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$677646779, -12(%rbp)   # imm = 0x286411BB
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB52_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB52_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB52_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_1
.LBB52_4:                               # %for.end
	cmpl	$677646779, -12(%rbp)   # imm = 0x286411BB
	jne	.LBB52_6
.LBB52_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_5
.Lfunc_end52:
	.size	DecOneForthPix.42, .Lfunc_end52-DecOneForthPix.42
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.43    # -- Begin function Error_Concealment.43
	.p2align	4, 0x90
	.type	Error_Concealment.43,@function
Error_Concealment.43:                   # @Error_Concealment.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$192132663, -16(%rbp)   # imm = 0xB73B637
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB53_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB53_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -4(%rbp)
.LBB53_3:                               # %for.cond2
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB53_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB53_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB53_6:                               # %if.end
                                        #   in Loop: Header=BB53_3 Depth=2
	jmp	.LBB53_7
.LBB53_7:                               # %for.inc
                                        #   in Loop: Header=BB53_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_3
.LBB53_8:                               # %for.end
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_9
.LBB53_9:                               # %for.inc7
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_1
.LBB53_10:                              # %for.end9
	cmpl	$192132663, -16(%rbp)   # imm = 0xB73B637
	jne	.LBB53_12
.LBB53_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_11
.Lfunc_end53:
	.size	Error_Concealment.43, .Lfunc_end53-Error_Concealment.43
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.44  # -- Begin function Get_Reference_Pixel.44
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.44,@function
Get_Reference_Pixel.44:                 # @Get_Reference_Pixel.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$193537663, -108(%rbp)  # imm = 0xB89267F
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB54_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB54_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB54_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB54_5
.LBB54_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB54_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB54_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB54_11
.LBB54_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB54_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB54_10
.LBB54_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB54_10:                              # %cond.end14
.LBB54_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB54_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB54_14
.LBB54_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB54_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB54_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB54_20
.LBB54_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB54_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB54_19
.LBB54_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB54_19:                              # %cond.end29
.LBB54_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_332
.LBB54_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB54_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB54_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB54_25
.LBB54_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB54_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB54_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB54_31
.LBB54_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB54_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB54_30
.LBB54_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB54_30:                              # %cond.end52
.LBB54_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB54_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB54_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB54_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB54_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB54_36
.LBB54_35:                              # %cond.false61
                                        #   in Loop: Header=BB54_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB54_36:                              # %cond.end63
                                        #   in Loop: Header=BB54_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB54_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB54_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB54_42
.LBB54_38:                              # %cond.false68
                                        #   in Loop: Header=BB54_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB54_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB54_41
.LBB54_40:                              # %cond.false73
                                        #   in Loop: Header=BB54_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB54_41:                              # %cond.end75
                                        #   in Loop: Header=BB54_32 Depth=1
.LBB54_42:                              # %cond.end77
                                        #   in Loop: Header=BB54_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB54_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_32
.LBB54_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB54_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_47
.LBB54_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB54_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB54_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB54_53
.LBB54_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB54_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_52
.LBB54_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB54_52:                              # %cond.end113
.LBB54_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB54_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB54_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB54_57
.LBB54_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB54_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB54_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB54_63
.LBB54_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB54_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB54_62
.LBB54_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB54_62:                              # %cond.end136
.LBB54_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB54_76
.LBB54_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB54_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB54_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB54_68
.LBB54_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB54_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB54_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB54_74
.LBB54_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB54_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB54_73
.LBB54_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB54_73:                              # %cond.end169
.LBB54_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB54_75:                              # %if.end
	jmp	.LBB54_76
.LBB54_76:                              # %if.end178
	jmp	.LBB54_331
.LBB54_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB54_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB54_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB54_81
.LBB54_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB54_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB54_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB54_87
.LBB54_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB54_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB54_86
.LBB54_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB54_86:                              # %cond.end197
.LBB54_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB54_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB54_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB54_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB54_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB54_92
.LBB54_91:                              # %cond.false209
                                        #   in Loop: Header=BB54_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB54_92:                              # %cond.end211
                                        #   in Loop: Header=BB54_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB54_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB54_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB54_98
.LBB54_94:                              # %cond.false216
                                        #   in Loop: Header=BB54_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB54_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB54_97
.LBB54_96:                              # %cond.false221
                                        #   in Loop: Header=BB54_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB54_97:                              # %cond.end223
                                        #   in Loop: Header=BB54_88 Depth=1
.LBB54_98:                              # %cond.end225
                                        #   in Loop: Header=BB54_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB54_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB54_88
.LBB54_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB54_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_103
.LBB54_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB54_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB54_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB54_109
.LBB54_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB54_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_108
.LBB54_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB54_108:                             # %cond.end266
.LBB54_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB54_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB54_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB54_113
.LBB54_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB54_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB54_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB54_119
.LBB54_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB54_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB54_118
.LBB54_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB54_118:                             # %cond.end287
.LBB54_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB54_132
.LBB54_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB54_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB54_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB54_124
.LBB54_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB54_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB54_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB54_130
.LBB54_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB54_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB54_129
.LBB54_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB54_129:                             # %cond.end320
.LBB54_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB54_131:                             # %if.end331
	jmp	.LBB54_132
.LBB54_132:                             # %if.end332
	jmp	.LBB54_330
.LBB54_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB54_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB54_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB54_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB54_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB54_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB54_139
.LBB54_138:                             # %cond.false345
                                        #   in Loop: Header=BB54_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB54_139:                             # %cond.end347
                                        #   in Loop: Header=BB54_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB54_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB54_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB54_145
.LBB54_141:                             # %cond.false352
                                        #   in Loop: Header=BB54_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB54_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB54_144
.LBB54_143:                             # %cond.false357
                                        #   in Loop: Header=BB54_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB54_144:                             # %cond.end359
                                        #   in Loop: Header=BB54_135 Depth=1
.LBB54_145:                             # %cond.end361
                                        #   in Loop: Header=BB54_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB54_146:                             # %for.cond363
                                        #   Parent Loop BB54_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB54_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB54_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB54_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB54_150
.LBB54_149:                             # %cond.false371
                                        #   in Loop: Header=BB54_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB54_150:                             # %cond.end373
                                        #   in Loop: Header=BB54_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB54_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB54_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB54_156
.LBB54_152:                             # %cond.false378
                                        #   in Loop: Header=BB54_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB54_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB54_155
.LBB54_154:                             # %cond.false383
                                        #   in Loop: Header=BB54_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB54_155:                             # %cond.end385
                                        #   in Loop: Header=BB54_146 Depth=2
.LBB54_156:                             # %cond.end387
                                        #   in Loop: Header=BB54_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB54_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_146
.LBB54_158:                             # %for.end401
                                        #   in Loop: Header=BB54_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB54_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB54_135
.LBB54_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB54_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB54_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB54_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB54_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB54_161
.LBB54_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB54_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_167
.LBB54_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB54_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB54_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB54_173
.LBB54_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB54_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_172
.LBB54_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB54_172:                             # %cond.end449
.LBB54_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB54_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB54_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_177
.LBB54_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB54_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB54_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB54_183
.LBB54_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB54_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_182
.LBB54_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB54_182:                             # %cond.end486
.LBB54_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB54_196
.LBB54_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB54_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB54_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_188
.LBB54_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB54_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB54_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB54_194
.LBB54_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB54_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_193
.LBB54_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB54_193:                             # %cond.end526
.LBB54_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB54_195:                             # %if.end532
	jmp	.LBB54_196
.LBB54_196:                             # %if.end533
	jmp	.LBB54_329
.LBB54_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB54_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB54_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB54_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB54_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB54_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB54_203
.LBB54_202:                             # %cond.false546
                                        #   in Loop: Header=BB54_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB54_203:                             # %cond.end548
                                        #   in Loop: Header=BB54_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB54_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB54_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB54_209
.LBB54_205:                             # %cond.false553
                                        #   in Loop: Header=BB54_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB54_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB54_208
.LBB54_207:                             # %cond.false558
                                        #   in Loop: Header=BB54_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB54_208:                             # %cond.end560
                                        #   in Loop: Header=BB54_199 Depth=1
.LBB54_209:                             # %cond.end562
                                        #   in Loop: Header=BB54_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB54_210:                             # %for.cond564
                                        #   Parent Loop BB54_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB54_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB54_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB54_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB54_214
.LBB54_213:                             # %cond.false572
                                        #   in Loop: Header=BB54_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB54_214:                             # %cond.end574
                                        #   in Loop: Header=BB54_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB54_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB54_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB54_220
.LBB54_216:                             # %cond.false579
                                        #   in Loop: Header=BB54_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB54_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB54_219
.LBB54_218:                             # %cond.false584
                                        #   in Loop: Header=BB54_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB54_219:                             # %cond.end586
                                        #   in Loop: Header=BB54_210 Depth=2
.LBB54_220:                             # %cond.end588
                                        #   in Loop: Header=BB54_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB54_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB54_210
.LBB54_222:                             # %for.end602
                                        #   in Loop: Header=BB54_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB54_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_199
.LBB54_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB54_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB54_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB54_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB54_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_225
.LBB54_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB54_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_231
.LBB54_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB54_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB54_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB54_237
.LBB54_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB54_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_236
.LBB54_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB54_236:                             # %cond.end650
.LBB54_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB54_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB54_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_241
.LBB54_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB54_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB54_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB54_247
.LBB54_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB54_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_246
.LBB54_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB54_246:                             # %cond.end687
.LBB54_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB54_258
.LBB54_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB54_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_251
.LBB54_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB54_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB54_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB54_257
.LBB54_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB54_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_256
.LBB54_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB54_256:                             # %cond.end724
.LBB54_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB54_258:                             # %if.end730
	jmp	.LBB54_328
.LBB54_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB54_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB54_262
.LBB54_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB54_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB54_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB54_265
.LBB54_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB54_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB54_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB54_271
.LBB54_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB54_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB54_270
.LBB54_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB54_270:                             # %cond.end753
.LBB54_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB54_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB54_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB54_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB54_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB54_276
.LBB54_275:                             # %cond.false765
                                        #   in Loop: Header=BB54_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB54_276:                             # %cond.end767
                                        #   in Loop: Header=BB54_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB54_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB54_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB54_282
.LBB54_278:                             # %cond.false772
                                        #   in Loop: Header=BB54_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB54_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB54_281
.LBB54_280:                             # %cond.false777
                                        #   in Loop: Header=BB54_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB54_281:                             # %cond.end779
                                        #   in Loop: Header=BB54_272 Depth=1
.LBB54_282:                             # %cond.end781
                                        #   in Loop: Header=BB54_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB54_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_272
.LBB54_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB54_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_287
.LBB54_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB54_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB54_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB54_293
.LBB54_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB54_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_292
.LBB54_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB54_292:                             # %cond.end822
.LBB54_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB54_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB54_296
.LBB54_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB54_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB54_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB54_299
.LBB54_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB54_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB54_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB54_305
.LBB54_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB54_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB54_304
.LBB54_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB54_304:                             # %cond.end847
.LBB54_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB54_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB54_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB54_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB54_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB54_310
.LBB54_309:                             # %cond.false859
                                        #   in Loop: Header=BB54_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB54_310:                             # %cond.end861
                                        #   in Loop: Header=BB54_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB54_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB54_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB54_316
.LBB54_312:                             # %cond.false866
                                        #   in Loop: Header=BB54_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB54_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB54_315
.LBB54_314:                             # %cond.false871
                                        #   in Loop: Header=BB54_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB54_315:                             # %cond.end873
                                        #   in Loop: Header=BB54_306 Depth=1
.LBB54_316:                             # %cond.end875
                                        #   in Loop: Header=BB54_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB54_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB54_306
.LBB54_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB54_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_321
.LBB54_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB54_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB54_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB54_327
.LBB54_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB54_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_326
.LBB54_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB54_326:                             # %cond.end916
.LBB54_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-100(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB54_328:                             # %if.end922
	jmp	.LBB54_329
.LBB54_329:                             # %if.end923
	jmp	.LBB54_330
.LBB54_330:                             # %if.end924
	jmp	.LBB54_331
.LBB54_331:                             # %if.end925
	jmp	.LBB54_332
.LBB54_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$193537663, -108(%rbp)  # imm = 0xB89267F
	jne	.LBB54_334
.LBB54_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_333
.Lfunc_end54:
	.size	Get_Reference_Pixel.44, .Lfunc_end54-Get_Reference_Pixel.44
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.45    # -- Begin function Error_Concealment.45
	.p2align	4, 0x90
	.type	Error_Concealment.45,@function
Error_Concealment.45:                   # @Error_Concealment.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1528684283, -16(%rbp)  # imm = 0x5B1DDEFB
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB55_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB55_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -4(%rbp)
.LBB55_3:                               # %for.cond2
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB55_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB55_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB55_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB55_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB55_6:                               # %if.end
                                        #   in Loop: Header=BB55_3 Depth=2
	jmp	.LBB55_7
.LBB55_7:                               # %for.inc
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_3
.LBB55_8:                               # %for.end
                                        #   in Loop: Header=BB55_1 Depth=1
	jmp	.LBB55_9
.LBB55_9:                               # %for.inc7
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_1
.LBB55_10:                              # %for.end9
	cmpl	$1528684283, -16(%rbp)  # imm = 0x5B1DDEFB
	jne	.LBB55_12
.LBB55_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_11
.Lfunc_end55:
	.size	Error_Concealment.45, .Lfunc_end55-Error_Concealment.45
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.46  # -- Begin function Get_Reference_Block.46
	.p2align	4, 0x90
	.type	Get_Reference_Block.46,@function
Get_Reference_Block.46:                 # @Get_Reference_Block.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1054663787, -24(%rbp)  # imm = 0x3EDCE46B
	movq	%rdi, -56(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -48(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB56_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB56_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -4(%rbp)
.LBB56_3:                               # %for.cond5
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB56_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB56_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB56_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_3
.LBB56_6:                               # %for.end
                                        #   in Loop: Header=BB56_1 Depth=1
	jmp	.LBB56_7
.LBB56_7:                               # %for.inc14
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_1
.LBB56_8:                               # %for.end16
	cmpl	$1054663787, -24(%rbp)  # imm = 0x3EDCE46B
	jne	.LBB56_10
.LBB56_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_9
.Lfunc_end56:
	.size	Get_Reference_Block.46, .Lfunc_end56-Get_Reference_Block.46
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.47        # -- Begin function Conceal_Error.47
	.p2align	4, 0x90
	.type	Conceal_Error.47,@function
Conceal_Error.47:                       # @Conceal_Error.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1481955490, -68(%rbp)  # imm = 0x5854D8A2
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB57_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB57_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB57_4:                               # %land.end
.LBB57_5:                               # %lor.end
.LBB57_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB57_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB57_9
.LBB57_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB57_14
.LBB57_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB57_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB57_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB57_12:                              # %land.end51
.LBB57_13:                              # %lor.end53
.LBB57_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB57_180
# %bb.15:                               # %land.end54
	movq	.LJTI57_0(,%rax,8), %rax
	jmpq	*%rax
.LBB57_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB57_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB57_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB57_18 Depth=1
	movl	$0, -4(%rbp)
.LBB57_20:                              # %for.cond68
                                        #   Parent Loop BB57_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB57_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB57_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_20
.LBB57_23:                              # %for.end
                                        #   in Loop: Header=BB57_18 Depth=1
	jmp	.LBB57_24
.LBB57_24:                              # %for.inc85
                                        #   in Loop: Header=BB57_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_18
.LBB57_25:                              # %for.end87
	jmp	.LBB57_35
.LBB57_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB57_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB57_27 Depth=1
	movl	$0, -4(%rbp)
.LBB57_29:                              # %for.cond92
                                        #   Parent Loop BB57_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB57_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB57_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_29
.LBB57_32:                              # %for.end104
                                        #   in Loop: Header=BB57_27 Depth=1
	jmp	.LBB57_33
.LBB57_33:                              # %for.inc105
                                        #   in Loop: Header=BB57_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_27
.LBB57_34:                              # %for.end107
	jmp	.LBB57_35
.LBB57_35:                              # %if.end
	jmp	.LBB57_180
.LBB57_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB57_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_39 Depth 2
                                        #       Child Loop BB57_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB57_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB57_37 Depth=1
	movl	$0, -12(%rbp)
.LBB57_39:                              # %for.cond113
                                        #   Parent Loop BB57_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB57_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB57_39 Depth=2
	movl	$0, -4(%rbp)
.LBB57_41:                              # %for.cond117
                                        #   Parent Loop BB57_37 Depth=1
                                        #     Parent Loop BB57_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB57_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB57_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB57_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_41
.LBB57_44:                              # %for.end141
                                        #   in Loop: Header=BB57_39 Depth=2
	jmp	.LBB57_45
.LBB57_45:                              # %for.inc142
                                        #   in Loop: Header=BB57_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_39
.LBB57_46:                              # %for.end144
                                        #   in Loop: Header=BB57_37 Depth=1
	jmp	.LBB57_47
.LBB57_47:                              # %for.inc145
                                        #   in Loop: Header=BB57_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_37
.LBB57_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB57_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB57_49 Depth=1
	movl	$0, -8(%rbp)
.LBB57_51:                              # %for.cond152
                                        #   Parent Loop BB57_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB57_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB57_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_51
.LBB57_54:                              # %for.end162
                                        #   in Loop: Header=BB57_49 Depth=1
	jmp	.LBB57_55
.LBB57_55:                              # %for.inc163
                                        #   in Loop: Header=BB57_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_49
.LBB57_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB57_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB57_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB57_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB57_59 Depth=1
	movl	$0, -4(%rbp)
.LBB57_61:                              # %for.cond175
                                        #   Parent Loop BB57_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB57_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB57_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_61
.LBB57_64:                              # %for.end195
                                        #   in Loop: Header=BB57_59 Depth=1
	jmp	.LBB57_65
.LBB57_65:                              # %for.inc196
                                        #   in Loop: Header=BB57_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_59
.LBB57_66:                              # %for.end198
	jmp	.LBB57_95
.LBB57_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB57_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB57_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_71 Depth 2
                                        #       Child Loop BB57_73 Depth 3
                                        #         Child Loop BB57_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB57_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB57_71:                              # %for.cond210
                                        #   Parent Loop BB57_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_73 Depth 3
                                        #         Child Loop BB57_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB57_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB57_73:                              # %for.cond236
                                        #   Parent Loop BB57_69 Depth=1
                                        #     Parent Loop BB57_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB57_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB57_73 Depth=3
	movl	$0, -4(%rbp)
.LBB57_75:                              # %for.cond240
                                        #   Parent Loop BB57_69 Depth=1
                                        #     Parent Loop BB57_71 Depth=2
                                        #       Parent Loop BB57_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB57_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB57_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB57_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_75
.LBB57_78:                              # %for.end259
                                        #   in Loop: Header=BB57_73 Depth=3
	jmp	.LBB57_79
.LBB57_79:                              # %for.inc260
                                        #   in Loop: Header=BB57_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_73
.LBB57_80:                              # %for.end262
                                        #   in Loop: Header=BB57_71 Depth=2
	jmp	.LBB57_81
.LBB57_81:                              # %for.inc263
                                        #   in Loop: Header=BB57_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_71
.LBB57_82:                              # %for.end265
                                        #   in Loop: Header=BB57_69 Depth=1
	jmp	.LBB57_83
.LBB57_83:                              # %for.inc266
                                        #   in Loop: Header=BB57_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_69
.LBB57_84:                              # %for.end268
	jmp	.LBB57_94
.LBB57_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB57_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB57_86 Depth=1
	movl	$0, -4(%rbp)
.LBB57_88:                              # %for.cond274
                                        #   Parent Loop BB57_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB57_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB57_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_88
.LBB57_91:                              # %for.end294
                                        #   in Loop: Header=BB57_86 Depth=1
	jmp	.LBB57_92
.LBB57_92:                              # %for.inc295
                                        #   in Loop: Header=BB57_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_86
.LBB57_93:                              # %for.end297
	jmp	.LBB57_94
.LBB57_94:                              # %if.end298
	jmp	.LBB57_95
.LBB57_95:                              # %if.end299
	jmp	.LBB57_105
.LBB57_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB57_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB57_97 Depth=1
	movl	$0, -4(%rbp)
.LBB57_99:                              # %for.cond305
                                        #   Parent Loop BB57_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB57_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB57_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_99
.LBB57_102:                             # %for.end317
                                        #   in Loop: Header=BB57_97 Depth=1
	jmp	.LBB57_103
.LBB57_103:                             # %for.inc318
                                        #   in Loop: Header=BB57_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_97
.LBB57_104:                             # %for.end320
	jmp	.LBB57_105
.LBB57_105:                             # %if.end321
	jmp	.LBB57_180
.LBB57_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB57_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB57_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_110 Depth 2
                                        #       Child Loop BB57_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB57_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	$0, -12(%rbp)
.LBB57_110:                             # %for.cond331
                                        #   Parent Loop BB57_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB57_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB57_110 Depth=2
	movl	$0, -4(%rbp)
.LBB57_112:                             # %for.cond335
                                        #   Parent Loop BB57_108 Depth=1
                                        #     Parent Loop BB57_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB57_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB57_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB57_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_112
.LBB57_115:                             # %for.end359
                                        #   in Loop: Header=BB57_110 Depth=2
	jmp	.LBB57_116
.LBB57_116:                             # %for.inc360
                                        #   in Loop: Header=BB57_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_110
.LBB57_117:                             # %for.end362
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_118
.LBB57_118:                             # %for.inc363
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_108
.LBB57_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB57_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB57_120 Depth=1
	movl	$0, -8(%rbp)
.LBB57_122:                             # %for.cond370
                                        #   Parent Loop BB57_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB57_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB57_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_122
.LBB57_125:                             # %for.end380
                                        #   in Loop: Header=BB57_120 Depth=1
	jmp	.LBB57_126
.LBB57_126:                             # %for.inc381
                                        #   in Loop: Header=BB57_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_120
.LBB57_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB57_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB57_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB57_129 Depth=1
	movl	$0, -4(%rbp)
.LBB57_131:                             # %for.cond390
                                        #   Parent Loop BB57_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB57_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB57_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_131
.LBB57_134:                             # %for.end410
                                        #   in Loop: Header=BB57_129 Depth=1
	jmp	.LBB57_135
.LBB57_135:                             # %for.inc411
                                        #   in Loop: Header=BB57_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_129
.LBB57_136:                             # %for.end413
	jmp	.LBB57_156
.LBB57_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB57_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB57_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_141 Depth 2
                                        #       Child Loop BB57_143 Depth 3
                                        #         Child Loop BB57_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB57_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB57_141:                             # %for.cond425
                                        #   Parent Loop BB57_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_143 Depth 3
                                        #         Child Loop BB57_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB57_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB57_143:                             # %for.cond452
                                        #   Parent Loop BB57_139 Depth=1
                                        #     Parent Loop BB57_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB57_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB57_143 Depth=3
	movl	$0, -4(%rbp)
.LBB57_145:                             # %for.cond456
                                        #   Parent Loop BB57_139 Depth=1
                                        #     Parent Loop BB57_141 Depth=2
                                        #       Parent Loop BB57_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB57_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB57_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB57_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_145
.LBB57_148:                             # %for.end475
                                        #   in Loop: Header=BB57_143 Depth=3
	jmp	.LBB57_149
.LBB57_149:                             # %for.inc476
                                        #   in Loop: Header=BB57_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_143
.LBB57_150:                             # %for.end478
                                        #   in Loop: Header=BB57_141 Depth=2
	jmp	.LBB57_151
.LBB57_151:                             # %for.inc479
                                        #   in Loop: Header=BB57_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_141
.LBB57_152:                             # %for.end481
                                        #   in Loop: Header=BB57_139 Depth=1
	jmp	.LBB57_153
.LBB57_153:                             # %for.inc482
                                        #   in Loop: Header=BB57_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_139
.LBB57_154:                             # %for.end484
	jmp	.LBB57_155
.LBB57_155:                             # %if.end485
	jmp	.LBB57_156
.LBB57_156:                             # %if.end486
	jmp	.LBB57_157
.LBB57_157:                             # %if.end487
	jmp	.LBB57_180
.LBB57_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB57_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB57_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB57_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB57_161 Depth=1
	movl	$0, -4(%rbp)
.LBB57_163:                             # %for.cond499
                                        #   Parent Loop BB57_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB57_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB57_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_163
.LBB57_166:                             # %for.end519
                                        #   in Loop: Header=BB57_161 Depth=1
	jmp	.LBB57_167
.LBB57_167:                             # %for.inc520
                                        #   in Loop: Header=BB57_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_161
.LBB57_168:                             # %for.end522
	jmp	.LBB57_169
.LBB57_169:                             # %if.end523
	jmp	.LBB57_179
.LBB57_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB57_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	$0, -4(%rbp)
.LBB57_173:                             # %for.cond529
                                        #   Parent Loop BB57_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB57_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB57_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_173
.LBB57_176:                             # %for.end541
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_177
.LBB57_177:                             # %for.inc542
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_171
.LBB57_178:                             # %for.end544
	jmp	.LBB57_179
.LBB57_179:                             # %if.end545
	jmp	.LBB57_180
.LBB57_180:                             # %sw.epilog
	cmpl	$1481955490, -68(%rbp)  # imm = 0x5854D8A2
	jne	.LBB57_182
.LBB57_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_181
.Lfunc_end57:
	.size	Conceal_Error.47, .Lfunc_end57-Conceal_Error.47
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI57_0:
	.quad	.LBB57_16
	.quad	.LBB57_158
	.quad	.LBB57_106
	.quad	.LBB57_180
	.quad	.LBB57_36
                                        # -- End function
	.text
	.globl	Get_Reference_Block.48  # -- Begin function Get_Reference_Block.48
	.p2align	4, 0x90
	.type	Get_Reference_Block.48,@function
Get_Reference_Block.48:                 # @Get_Reference_Block.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$226977723, -20(%rbp)   # imm = 0xD8767BB
	movq	%rdi, -48(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -12(%rbp)
	movq	%r9, -56(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB58_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB58_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -8(%rbp)
.LBB58_3:                               # %for.cond5
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB58_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB58_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-36(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB58_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_3
.LBB58_6:                               # %for.end
                                        #   in Loop: Header=BB58_1 Depth=1
	jmp	.LBB58_7
.LBB58_7:                               # %for.inc14
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_1
.LBB58_8:                               # %for.end16
	cmpl	$226977723, -20(%rbp)   # imm = 0xD8767BB
	jne	.LBB58_10
.LBB58_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_9
.Lfunc_end58:
	.size	Get_Reference_Block.48, .Lfunc_end58-Get_Reference_Block.48
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.49 # -- Begin function compute_residue_b8block.49
	.p2align	4, 0x90
	.type	compute_residue_b8block.49,@function
compute_residue_b8block.49:             # @compute_residue_b8block.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$953662490, -36(%rbp)   # imm = 0x38D7BC1A
	movl	%edi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB59_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB59_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB59_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_4:                               # %for.cond4
                                        #   Parent Loop BB59_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB59_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB59_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB59_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_4
.LBB59_7:                               # %for.end
                                        #   in Loop: Header=BB59_2 Depth=1
	jmp	.LBB59_8
.LBB59_8:                               # %for.inc22
                                        #   in Loop: Header=BB59_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_2
.LBB59_9:                               # %for.end24
	jmp	.LBB59_19
.LBB59_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB59_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB59_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_13:                              # %for.cond29
                                        #   Parent Loop BB59_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB59_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB59_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB59_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_13
.LBB59_16:                              # %for.end56
                                        #   in Loop: Header=BB59_11 Depth=1
	jmp	.LBB59_17
.LBB59_17:                              # %for.inc57
                                        #   in Loop: Header=BB59_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_11
.LBB59_18:                              # %for.end59
	jmp	.LBB59_19
.LBB59_19:                              # %if.end
	cmpl	$953662490, -36(%rbp)   # imm = 0x38D7BC1A
	jne	.LBB59_21
.LBB59_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_20
.Lfunc_end59:
	.size	compute_residue_b8block.49, .Lfunc_end59-compute_residue_b8block.49
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.50       # -- Begin function DecOneForthPix.50
	.p2align	4, 0x90
	.type	DecOneForthPix.50,@function
DecOneForthPix.50:                      # @DecOneForthPix.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$4521589, -8(%rbp)      # imm = 0x44FE75
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB60_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB60_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_1
.LBB60_4:                               # %for.end
	cmpl	$4521589, -8(%rbp)      # imm = 0x44FE75
	jne	.LBB60_6
.LBB60_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_5
.Lfunc_end60:
	.size	DecOneForthPix.50, .Lfunc_end60-DecOneForthPix.50
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.51 # -- Begin function compute_residue_b8block.51
	.p2align	4, 0x90
	.type	compute_residue_b8block.51,@function
compute_residue_b8block.51:             # @compute_residue_b8block.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$515858240, -36(%rbp)   # imm = 0x1EBF5F40
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB61_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB61_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB61_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB61_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB61_4:                               # %for.cond4
                                        #   Parent Loop BB61_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB61_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB61_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB61_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_4
.LBB61_7:                               # %for.end
                                        #   in Loop: Header=BB61_2 Depth=1
	jmp	.LBB61_8
.LBB61_8:                               # %for.inc22
                                        #   in Loop: Header=BB61_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_2
.LBB61_9:                               # %for.end24
	jmp	.LBB61_19
.LBB61_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB61_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB61_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB61_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB61_13:                              # %for.cond29
                                        #   Parent Loop BB61_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB61_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB61_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB61_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_13
.LBB61_16:                              # %for.end56
                                        #   in Loop: Header=BB61_11 Depth=1
	jmp	.LBB61_17
.LBB61_17:                              # %for.inc57
                                        #   in Loop: Header=BB61_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_11
.LBB61_18:                              # %for.end59
	jmp	.LBB61_19
.LBB61_19:                              # %if.end
	cmpl	$515858240, -36(%rbp)   # imm = 0x1EBF5F40
	jne	.LBB61_21
.LBB61_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_20
.Lfunc_end61:
	.size	compute_residue_b8block.51, .Lfunc_end61-compute_residue_b8block.51
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.52 # -- Begin function compute_residue_b8block.52
	.p2align	4, 0x90
	.type	compute_residue_b8block.52,@function
compute_residue_b8block.52:             # @compute_residue_b8block.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$883148695, -36(%rbp)   # imm = 0x34A3C797
	movl	%edi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB62_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB62_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB62_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB62_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB62_4:                               # %for.cond4
                                        #   Parent Loop BB62_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB62_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB62_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB62_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_4
.LBB62_7:                               # %for.end
                                        #   in Loop: Header=BB62_2 Depth=1
	jmp	.LBB62_8
.LBB62_8:                               # %for.inc22
                                        #   in Loop: Header=BB62_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_2
.LBB62_9:                               # %for.end24
	jmp	.LBB62_19
.LBB62_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB62_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB62_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB62_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB62_13:                              # %for.cond29
                                        #   Parent Loop BB62_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB62_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB62_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB62_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_13
.LBB62_16:                              # %for.end56
                                        #   in Loop: Header=BB62_11 Depth=1
	jmp	.LBB62_17
.LBB62_17:                              # %for.inc57
                                        #   in Loop: Header=BB62_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_11
.LBB62_18:                              # %for.end59
	jmp	.LBB62_19
.LBB62_19:                              # %if.end
	cmpl	$883148695, -36(%rbp)   # imm = 0x34A3C797
	jne	.LBB62_21
.LBB62_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_20
.Lfunc_end62:
	.size	compute_residue_b8block.52, .Lfunc_end62-compute_residue_b8block.52
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.53  # -- Begin function Get_Reference_Block.53
	.p2align	4, 0x90
	.type	Get_Reference_Block.53,@function
Get_Reference_Block.53:                 # @Get_Reference_Block.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$758980621, -24(%rbp)   # imm = 0x2D3D200D
	movq	%rdi, -56(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -48(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB63_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB63_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_3:                               # %for.cond5
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB63_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB63_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-32(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-36(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB63_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_3
.LBB63_6:                               # %for.end
                                        #   in Loop: Header=BB63_1 Depth=1
	jmp	.LBB63_7
.LBB63_7:                               # %for.inc14
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_1
.LBB63_8:                               # %for.end16
	cmpl	$758980621, -24(%rbp)   # imm = 0x2D3D200D
	jne	.LBB63_10
.LBB63_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_9
.Lfunc_end63:
	.size	Get_Reference_Block.53, .Lfunc_end63-Get_Reference_Block.53
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.54    # -- Begin function Error_Concealment.54
	.p2align	4, 0x90
	.type	Error_Concealment.54,@function
Error_Concealment.54:                   # @Error_Concealment.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$409148212, -16(%rbp)   # imm = 0x18631B34
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB64_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB64_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	$0, -4(%rbp)
.LBB64_3:                               # %for.cond2
                                        #   Parent Loop BB64_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB64_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB64_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB64_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB64_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB64_6:                               # %if.end
                                        #   in Loop: Header=BB64_3 Depth=2
	jmp	.LBB64_7
.LBB64_7:                               # %for.inc
                                        #   in Loop: Header=BB64_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_3
.LBB64_8:                               # %for.end
                                        #   in Loop: Header=BB64_1 Depth=1
	jmp	.LBB64_9
.LBB64_9:                               # %for.inc7
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_1
.LBB64_10:                              # %for.end9
	cmpl	$409148212, -16(%rbp)   # imm = 0x18631B34
	jne	.LBB64_12
.LBB64_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_11
.Lfunc_end64:
	.size	Error_Concealment.54, .Lfunc_end64-Error_Concealment.54
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.55        # -- Begin function Conceal_Error.55
	.p2align	4, 0x90
	.type	Conceal_Error.55,@function
Conceal_Error.55:                       # @Conceal_Error.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$788785857, -68(%rbp)   # imm = 0x2F03EAC1
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB65_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB65_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB65_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB65_4:                               # %land.end
.LBB65_5:                               # %lor.end
.LBB65_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB65_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB65_9
.LBB65_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB65_14
.LBB65_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB65_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB65_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB65_12:                              # %land.end51
.LBB65_13:                              # %lor.end53
.LBB65_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB65_180
# %bb.15:                               # %land.end54
	movq	.LJTI65_0(,%rax,8), %rax
	jmpq	*%rax
.LBB65_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB65_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB65_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB65_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB65_18 Depth=1
	movl	$0, -4(%rbp)
.LBB65_20:                              # %for.cond68
                                        #   Parent Loop BB65_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB65_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB65_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB65_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_20
.LBB65_23:                              # %for.end
                                        #   in Loop: Header=BB65_18 Depth=1
	jmp	.LBB65_24
.LBB65_24:                              # %for.inc85
                                        #   in Loop: Header=BB65_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_18
.LBB65_25:                              # %for.end87
	jmp	.LBB65_35
.LBB65_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB65_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB65_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB65_27 Depth=1
	movl	$0, -4(%rbp)
.LBB65_29:                              # %for.cond92
                                        #   Parent Loop BB65_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB65_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB65_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB65_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_29
.LBB65_32:                              # %for.end104
                                        #   in Loop: Header=BB65_27 Depth=1
	jmp	.LBB65_33
.LBB65_33:                              # %for.inc105
                                        #   in Loop: Header=BB65_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_27
.LBB65_34:                              # %for.end107
	jmp	.LBB65_35
.LBB65_35:                              # %if.end
	jmp	.LBB65_180
.LBB65_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB65_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_39 Depth 2
                                        #       Child Loop BB65_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB65_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB65_37 Depth=1
	movl	$0, -12(%rbp)
.LBB65_39:                              # %for.cond113
                                        #   Parent Loop BB65_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB65_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB65_39 Depth=2
	movl	$0, -4(%rbp)
.LBB65_41:                              # %for.cond117
                                        #   Parent Loop BB65_37 Depth=1
                                        #     Parent Loop BB65_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB65_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB65_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB65_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_41
.LBB65_44:                              # %for.end141
                                        #   in Loop: Header=BB65_39 Depth=2
	jmp	.LBB65_45
.LBB65_45:                              # %for.inc142
                                        #   in Loop: Header=BB65_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_39
.LBB65_46:                              # %for.end144
                                        #   in Loop: Header=BB65_37 Depth=1
	jmp	.LBB65_47
.LBB65_47:                              # %for.inc145
                                        #   in Loop: Header=BB65_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_37
.LBB65_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB65_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB65_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB65_49 Depth=1
	movl	$0, -8(%rbp)
.LBB65_51:                              # %for.cond152
                                        #   Parent Loop BB65_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB65_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB65_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB65_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_51
.LBB65_54:                              # %for.end162
                                        #   in Loop: Header=BB65_49 Depth=1
	jmp	.LBB65_55
.LBB65_55:                              # %for.inc163
                                        #   in Loop: Header=BB65_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_49
.LBB65_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB65_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB65_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB65_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB65_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB65_59 Depth=1
	movl	$0, -4(%rbp)
.LBB65_61:                              # %for.cond175
                                        #   Parent Loop BB65_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB65_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB65_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB65_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_61
.LBB65_64:                              # %for.end195
                                        #   in Loop: Header=BB65_59 Depth=1
	jmp	.LBB65_65
.LBB65_65:                              # %for.inc196
                                        #   in Loop: Header=BB65_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_59
.LBB65_66:                              # %for.end198
	jmp	.LBB65_95
.LBB65_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB65_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB65_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_71 Depth 2
                                        #       Child Loop BB65_73 Depth 3
                                        #         Child Loop BB65_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB65_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB65_71:                              # %for.cond210
                                        #   Parent Loop BB65_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_73 Depth 3
                                        #         Child Loop BB65_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB65_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB65_73:                              # %for.cond236
                                        #   Parent Loop BB65_69 Depth=1
                                        #     Parent Loop BB65_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB65_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB65_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB65_73 Depth=3
	movl	$0, -4(%rbp)
.LBB65_75:                              # %for.cond240
                                        #   Parent Loop BB65_69 Depth=1
                                        #     Parent Loop BB65_71 Depth=2
                                        #       Parent Loop BB65_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB65_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB65_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB65_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_75
.LBB65_78:                              # %for.end259
                                        #   in Loop: Header=BB65_73 Depth=3
	jmp	.LBB65_79
.LBB65_79:                              # %for.inc260
                                        #   in Loop: Header=BB65_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_73
.LBB65_80:                              # %for.end262
                                        #   in Loop: Header=BB65_71 Depth=2
	jmp	.LBB65_81
.LBB65_81:                              # %for.inc263
                                        #   in Loop: Header=BB65_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_71
.LBB65_82:                              # %for.end265
                                        #   in Loop: Header=BB65_69 Depth=1
	jmp	.LBB65_83
.LBB65_83:                              # %for.inc266
                                        #   in Loop: Header=BB65_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_69
.LBB65_84:                              # %for.end268
	jmp	.LBB65_94
.LBB65_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB65_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB65_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB65_86 Depth=1
	movl	$0, -4(%rbp)
.LBB65_88:                              # %for.cond274
                                        #   Parent Loop BB65_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB65_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB65_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB65_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_88
.LBB65_91:                              # %for.end294
                                        #   in Loop: Header=BB65_86 Depth=1
	jmp	.LBB65_92
.LBB65_92:                              # %for.inc295
                                        #   in Loop: Header=BB65_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_86
.LBB65_93:                              # %for.end297
	jmp	.LBB65_94
.LBB65_94:                              # %if.end298
	jmp	.LBB65_95
.LBB65_95:                              # %if.end299
	jmp	.LBB65_105
.LBB65_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB65_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB65_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB65_97 Depth=1
	movl	$0, -4(%rbp)
.LBB65_99:                              # %for.cond305
                                        #   Parent Loop BB65_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB65_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB65_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB65_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_99
.LBB65_102:                             # %for.end317
                                        #   in Loop: Header=BB65_97 Depth=1
	jmp	.LBB65_103
.LBB65_103:                             # %for.inc318
                                        #   in Loop: Header=BB65_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_97
.LBB65_104:                             # %for.end320
	jmp	.LBB65_105
.LBB65_105:                             # %if.end321
	jmp	.LBB65_180
.LBB65_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB65_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB65_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_110 Depth 2
                                        #       Child Loop BB65_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB65_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB65_108 Depth=1
	movl	$0, -12(%rbp)
.LBB65_110:                             # %for.cond331
                                        #   Parent Loop BB65_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB65_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB65_110 Depth=2
	movl	$0, -4(%rbp)
.LBB65_112:                             # %for.cond335
                                        #   Parent Loop BB65_108 Depth=1
                                        #     Parent Loop BB65_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB65_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB65_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB65_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_112
.LBB65_115:                             # %for.end359
                                        #   in Loop: Header=BB65_110 Depth=2
	jmp	.LBB65_116
.LBB65_116:                             # %for.inc360
                                        #   in Loop: Header=BB65_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_110
.LBB65_117:                             # %for.end362
                                        #   in Loop: Header=BB65_108 Depth=1
	jmp	.LBB65_118
.LBB65_118:                             # %for.inc363
                                        #   in Loop: Header=BB65_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_108
.LBB65_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB65_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB65_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB65_120 Depth=1
	movl	$0, -8(%rbp)
.LBB65_122:                             # %for.cond370
                                        #   Parent Loop BB65_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB65_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB65_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB65_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_122
.LBB65_125:                             # %for.end380
                                        #   in Loop: Header=BB65_120 Depth=1
	jmp	.LBB65_126
.LBB65_126:                             # %for.inc381
                                        #   in Loop: Header=BB65_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_120
.LBB65_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB65_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB65_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB65_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB65_129 Depth=1
	movl	$0, -4(%rbp)
.LBB65_131:                             # %for.cond390
                                        #   Parent Loop BB65_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB65_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB65_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB65_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_131
.LBB65_134:                             # %for.end410
                                        #   in Loop: Header=BB65_129 Depth=1
	jmp	.LBB65_135
.LBB65_135:                             # %for.inc411
                                        #   in Loop: Header=BB65_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_129
.LBB65_136:                             # %for.end413
	jmp	.LBB65_156
.LBB65_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB65_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB65_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_141 Depth 2
                                        #       Child Loop BB65_143 Depth 3
                                        #         Child Loop BB65_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB65_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB65_141:                             # %for.cond425
                                        #   Parent Loop BB65_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_143 Depth 3
                                        #         Child Loop BB65_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB65_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB65_143:                             # %for.cond452
                                        #   Parent Loop BB65_139 Depth=1
                                        #     Parent Loop BB65_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB65_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB65_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB65_143 Depth=3
	movl	$0, -4(%rbp)
.LBB65_145:                             # %for.cond456
                                        #   Parent Loop BB65_139 Depth=1
                                        #     Parent Loop BB65_141 Depth=2
                                        #       Parent Loop BB65_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB65_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB65_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB65_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_145
.LBB65_148:                             # %for.end475
                                        #   in Loop: Header=BB65_143 Depth=3
	jmp	.LBB65_149
.LBB65_149:                             # %for.inc476
                                        #   in Loop: Header=BB65_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_143
.LBB65_150:                             # %for.end478
                                        #   in Loop: Header=BB65_141 Depth=2
	jmp	.LBB65_151
.LBB65_151:                             # %for.inc479
                                        #   in Loop: Header=BB65_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_141
.LBB65_152:                             # %for.end481
                                        #   in Loop: Header=BB65_139 Depth=1
	jmp	.LBB65_153
.LBB65_153:                             # %for.inc482
                                        #   in Loop: Header=BB65_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_139
.LBB65_154:                             # %for.end484
	jmp	.LBB65_155
.LBB65_155:                             # %if.end485
	jmp	.LBB65_156
.LBB65_156:                             # %if.end486
	jmp	.LBB65_157
.LBB65_157:                             # %if.end487
	jmp	.LBB65_180
.LBB65_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB65_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB65_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB65_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB65_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB65_161 Depth=1
	movl	$0, -4(%rbp)
.LBB65_163:                             # %for.cond499
                                        #   Parent Loop BB65_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB65_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB65_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB65_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_163
.LBB65_166:                             # %for.end519
                                        #   in Loop: Header=BB65_161 Depth=1
	jmp	.LBB65_167
.LBB65_167:                             # %for.inc520
                                        #   in Loop: Header=BB65_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_161
.LBB65_168:                             # %for.end522
	jmp	.LBB65_169
.LBB65_169:                             # %if.end523
	jmp	.LBB65_179
.LBB65_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB65_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB65_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB65_171 Depth=1
	movl	$0, -4(%rbp)
.LBB65_173:                             # %for.cond529
                                        #   Parent Loop BB65_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB65_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB65_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB65_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_173
.LBB65_176:                             # %for.end541
                                        #   in Loop: Header=BB65_171 Depth=1
	jmp	.LBB65_177
.LBB65_177:                             # %for.inc542
                                        #   in Loop: Header=BB65_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_171
.LBB65_178:                             # %for.end544
	jmp	.LBB65_179
.LBB65_179:                             # %if.end545
	jmp	.LBB65_180
.LBB65_180:                             # %sw.epilog
	cmpl	$788785857, -68(%rbp)   # imm = 0x2F03EAC1
	jne	.LBB65_182
.LBB65_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_181
.Lfunc_end65:
	.size	Conceal_Error.55, .Lfunc_end65-Conceal_Error.55
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI65_0:
	.quad	.LBB65_16
	.quad	.LBB65_158
	.quad	.LBB65_106
	.quad	.LBB65_180
	.quad	.LBB65_36
                                        # -- End function
	.text
	.globl	compute_residue_b8block.56 # -- Begin function compute_residue_b8block.56
	.p2align	4, 0x90
	.type	compute_residue_b8block.56,@function
compute_residue_b8block.56:             # @compute_residue_b8block.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$885594305, -36(%rbp)   # imm = 0x34C918C1
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB66_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB66_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB66_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB66_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB66_4:                               # %for.cond4
                                        #   Parent Loop BB66_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB66_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB66_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB66_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_4
.LBB66_7:                               # %for.end
                                        #   in Loop: Header=BB66_2 Depth=1
	jmp	.LBB66_8
.LBB66_8:                               # %for.inc22
                                        #   in Loop: Header=BB66_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_2
.LBB66_9:                               # %for.end24
	jmp	.LBB66_19
.LBB66_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB66_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB66_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB66_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB66_13:                              # %for.cond29
                                        #   Parent Loop BB66_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB66_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB66_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB66_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_13
.LBB66_16:                              # %for.end56
                                        #   in Loop: Header=BB66_11 Depth=1
	jmp	.LBB66_17
.LBB66_17:                              # %for.inc57
                                        #   in Loop: Header=BB66_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_11
.LBB66_18:                              # %for.end59
	jmp	.LBB66_19
.LBB66_19:                              # %if.end
	cmpl	$885594305, -36(%rbp)   # imm = 0x34C918C1
	jne	.LBB66_21
.LBB66_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_20
.Lfunc_end66:
	.size	compute_residue_b8block.56, .Lfunc_end66-compute_residue_b8block.56
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.57  # -- Begin function Get_Reference_Pixel.57
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.57,@function
Get_Reference_Pixel.57:                 # @Get_Reference_Pixel.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1629211088, -108(%rbp) # imm = 0x611BC9D0
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB67_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB67_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB67_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB67_5
.LBB67_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB67_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB67_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB67_11
.LBB67_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB67_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB67_10
.LBB67_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB67_10:                              # %cond.end14
.LBB67_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB67_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB67_14
.LBB67_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB67_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB67_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB67_20
.LBB67_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB67_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB67_19
.LBB67_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB67_19:                              # %cond.end29
.LBB67_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_332
.LBB67_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB67_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB67_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB67_25
.LBB67_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB67_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB67_31
.LBB67_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB67_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB67_30
.LBB67_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB67_30:                              # %cond.end52
.LBB67_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB67_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB67_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB67_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB67_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB67_36
.LBB67_35:                              # %cond.false61
                                        #   in Loop: Header=BB67_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB67_36:                              # %cond.end63
                                        #   in Loop: Header=BB67_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB67_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB67_42
.LBB67_38:                              # %cond.false68
                                        #   in Loop: Header=BB67_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB67_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB67_41
.LBB67_40:                              # %cond.false73
                                        #   in Loop: Header=BB67_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB67_41:                              # %cond.end75
                                        #   in Loop: Header=BB67_32 Depth=1
.LBB67_42:                              # %cond.end77
                                        #   in Loop: Header=BB67_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB67_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_32
.LBB67_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_47
.LBB67_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB67_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB67_53
.LBB67_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_52
.LBB67_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB67_52:                              # %cond.end113
.LBB67_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB67_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB67_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB67_57
.LBB67_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB67_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB67_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB67_63
.LBB67_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB67_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB67_62
.LBB67_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB67_62:                              # %cond.end136
.LBB67_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB67_76
.LBB67_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB67_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB67_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB67_68
.LBB67_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB67_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB67_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB67_74
.LBB67_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB67_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB67_73
.LBB67_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB67_73:                              # %cond.end169
.LBB67_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB67_75:                              # %if.end
	jmp	.LBB67_76
.LBB67_76:                              # %if.end178
	jmp	.LBB67_331
.LBB67_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB67_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB67_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB67_81
.LBB67_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB67_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB67_87
.LBB67_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB67_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB67_86
.LBB67_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB67_86:                              # %cond.end197
.LBB67_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB67_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB67_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB67_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB67_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB67_92
.LBB67_91:                              # %cond.false209
                                        #   in Loop: Header=BB67_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB67_92:                              # %cond.end211
                                        #   in Loop: Header=BB67_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB67_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB67_98
.LBB67_94:                              # %cond.false216
                                        #   in Loop: Header=BB67_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB67_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB67_97
.LBB67_96:                              # %cond.false221
                                        #   in Loop: Header=BB67_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB67_97:                              # %cond.end223
                                        #   in Loop: Header=BB67_88 Depth=1
.LBB67_98:                              # %cond.end225
                                        #   in Loop: Header=BB67_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB67_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_88
.LBB67_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_103
.LBB67_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB67_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB67_109
.LBB67_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_108
.LBB67_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB67_108:                             # %cond.end266
.LBB67_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB67_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB67_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB67_113
.LBB67_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB67_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB67_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB67_119
.LBB67_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB67_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB67_118
.LBB67_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB67_118:                             # %cond.end287
.LBB67_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB67_132
.LBB67_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB67_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB67_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB67_124
.LBB67_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB67_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB67_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB67_130
.LBB67_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB67_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB67_129
.LBB67_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB67_129:                             # %cond.end320
.LBB67_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB67_131:                             # %if.end331
	jmp	.LBB67_132
.LBB67_132:                             # %if.end332
	jmp	.LBB67_330
.LBB67_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB67_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB67_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB67_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB67_139
.LBB67_138:                             # %cond.false345
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB67_139:                             # %cond.end347
                                        #   in Loop: Header=BB67_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB67_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB67_145
.LBB67_141:                             # %cond.false352
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB67_144
.LBB67_143:                             # %cond.false357
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB67_144:                             # %cond.end359
                                        #   in Loop: Header=BB67_135 Depth=1
.LBB67_145:                             # %cond.end361
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB67_146:                             # %for.cond363
                                        #   Parent Loop BB67_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB67_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB67_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB67_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB67_150
.LBB67_149:                             # %cond.false371
                                        #   in Loop: Header=BB67_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB67_150:                             # %cond.end373
                                        #   in Loop: Header=BB67_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB67_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB67_156
.LBB67_152:                             # %cond.false378
                                        #   in Loop: Header=BB67_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB67_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB67_155
.LBB67_154:                             # %cond.false383
                                        #   in Loop: Header=BB67_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB67_155:                             # %cond.end385
                                        #   in Loop: Header=BB67_146 Depth=2
.LBB67_156:                             # %cond.end387
                                        #   in Loop: Header=BB67_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB67_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_146
.LBB67_158:                             # %for.end401
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_135
.LBB67_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB67_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB67_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB67_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB67_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_161
.LBB67_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_167
.LBB67_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB67_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB67_173
.LBB67_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_172
.LBB67_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB67_172:                             # %cond.end449
.LBB67_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB67_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB67_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_177
.LBB67_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB67_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB67_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB67_183
.LBB67_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB67_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_182
.LBB67_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB67_182:                             # %cond.end486
.LBB67_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB67_196
.LBB67_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB67_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB67_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_188
.LBB67_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB67_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB67_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB67_194
.LBB67_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB67_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_193
.LBB67_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB67_193:                             # %cond.end526
.LBB67_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB67_195:                             # %if.end532
	jmp	.LBB67_196
.LBB67_196:                             # %if.end533
	jmp	.LBB67_329
.LBB67_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB67_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB67_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB67_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB67_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB67_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB67_203
.LBB67_202:                             # %cond.false546
                                        #   in Loop: Header=BB67_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB67_203:                             # %cond.end548
                                        #   in Loop: Header=BB67_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB67_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB67_209
.LBB67_205:                             # %cond.false553
                                        #   in Loop: Header=BB67_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB67_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB67_208
.LBB67_207:                             # %cond.false558
                                        #   in Loop: Header=BB67_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB67_208:                             # %cond.end560
                                        #   in Loop: Header=BB67_199 Depth=1
.LBB67_209:                             # %cond.end562
                                        #   in Loop: Header=BB67_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB67_210:                             # %for.cond564
                                        #   Parent Loop BB67_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB67_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB67_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB67_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB67_214
.LBB67_213:                             # %cond.false572
                                        #   in Loop: Header=BB67_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB67_214:                             # %cond.end574
                                        #   in Loop: Header=BB67_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB67_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB67_220
.LBB67_216:                             # %cond.false579
                                        #   in Loop: Header=BB67_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB67_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB67_219
.LBB67_218:                             # %cond.false584
                                        #   in Loop: Header=BB67_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB67_219:                             # %cond.end586
                                        #   in Loop: Header=BB67_210 Depth=2
.LBB67_220:                             # %cond.end588
                                        #   in Loop: Header=BB67_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB67_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_210
.LBB67_222:                             # %for.end602
                                        #   in Loop: Header=BB67_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB67_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_199
.LBB67_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB67_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB67_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB67_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB67_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_225
.LBB67_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_231
.LBB67_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB67_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB67_237
.LBB67_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_236
.LBB67_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB67_236:                             # %cond.end650
.LBB67_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB67_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB67_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_241
.LBB67_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB67_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB67_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB67_247
.LBB67_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB67_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_246
.LBB67_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB67_246:                             # %cond.end687
.LBB67_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB67_258
.LBB67_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB67_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_251
.LBB67_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB67_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB67_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB67_257
.LBB67_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB67_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_256
.LBB67_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB67_256:                             # %cond.end724
.LBB67_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB67_258:                             # %if.end730
	jmp	.LBB67_328
.LBB67_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB67_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB67_262
.LBB67_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB67_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB67_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB67_265
.LBB67_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB67_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB67_271
.LBB67_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB67_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB67_270
.LBB67_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB67_270:                             # %cond.end753
.LBB67_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB67_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB67_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB67_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB67_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB67_276
.LBB67_275:                             # %cond.false765
                                        #   in Loop: Header=BB67_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB67_276:                             # %cond.end767
                                        #   in Loop: Header=BB67_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB67_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB67_282
.LBB67_278:                             # %cond.false772
                                        #   in Loop: Header=BB67_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB67_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB67_281
.LBB67_280:                             # %cond.false777
                                        #   in Loop: Header=BB67_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB67_281:                             # %cond.end779
                                        #   in Loop: Header=BB67_272 Depth=1
.LBB67_282:                             # %cond.end781
                                        #   in Loop: Header=BB67_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB67_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_272
.LBB67_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_287
.LBB67_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB67_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB67_293
.LBB67_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_292
.LBB67_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB67_292:                             # %cond.end822
.LBB67_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB67_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB67_296
.LBB67_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB67_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB67_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB67_299
.LBB67_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB67_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB67_305
.LBB67_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB67_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB67_304
.LBB67_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB67_304:                             # %cond.end847
.LBB67_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB67_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB67_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB67_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB67_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB67_310
.LBB67_309:                             # %cond.false859
                                        #   in Loop: Header=BB67_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB67_310:                             # %cond.end861
                                        #   in Loop: Header=BB67_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB67_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB67_316
.LBB67_312:                             # %cond.false866
                                        #   in Loop: Header=BB67_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB67_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB67_315
.LBB67_314:                             # %cond.false871
                                        #   in Loop: Header=BB67_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB67_315:                             # %cond.end873
                                        #   in Loop: Header=BB67_306 Depth=1
.LBB67_316:                             # %cond.end875
                                        #   in Loop: Header=BB67_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB67_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_306
.LBB67_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_321
.LBB67_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB67_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB67_327
.LBB67_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_326
.LBB67_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB67_326:                             # %cond.end916
.LBB67_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-100(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB67_328:                             # %if.end922
	jmp	.LBB67_329
.LBB67_329:                             # %if.end923
	jmp	.LBB67_330
.LBB67_330:                             # %if.end924
	jmp	.LBB67_331
.LBB67_331:                             # %if.end925
	jmp	.LBB67_332
.LBB67_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1629211088, -108(%rbp) # imm = 0x611BC9D0
	jne	.LBB67_334
.LBB67_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_333
.Lfunc_end67:
	.size	Get_Reference_Pixel.57, .Lfunc_end67-Get_Reference_Pixel.57
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.58       # -- Begin function DecOneForthPix.58
	.p2align	4, 0x90
	.type	DecOneForthPix.58,@function
DecOneForthPix.58:                      # @DecOneForthPix.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1812861878, -12(%rbp)  # imm = 0x6C0E13B6
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB68_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB68_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB68_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_1
.LBB68_4:                               # %for.end
	cmpl	$1812861878, -12(%rbp)  # imm = 0x6C0E13B6
	jne	.LBB68_6
.LBB68_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_5
.Lfunc_end68:
	.size	DecOneForthPix.58, .Lfunc_end68-DecOneForthPix.58
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.59    # -- Begin function Error_Concealment.59
	.p2align	4, 0x90
	.type	Error_Concealment.59,@function
Error_Concealment.59:                   # @Error_Concealment.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1641769951, -20(%rbp)  # imm = 0x61DB6BDF
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB69_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB69_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -4(%rbp)
.LBB69_3:                               # %for.cond2
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB69_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB69_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB69_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB69_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB69_6:                               # %if.end
                                        #   in Loop: Header=BB69_3 Depth=2
	jmp	.LBB69_7
.LBB69_7:                               # %for.inc
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_3
.LBB69_8:                               # %for.end
                                        #   in Loop: Header=BB69_1 Depth=1
	jmp	.LBB69_9
.LBB69_9:                               # %for.inc7
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_1
.LBB69_10:                              # %for.end9
	cmpl	$1641769951, -20(%rbp)  # imm = 0x61DB6BDF
	jne	.LBB69_12
.LBB69_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_11
.Lfunc_end69:
	.size	Error_Concealment.59, .Lfunc_end69-Error_Concealment.59
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.60        # -- Begin function Conceal_Error.60
	.p2align	4, 0x90
	.type	Conceal_Error.60,@function
Conceal_Error.60:                       # @Conceal_Error.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1032324043, -68(%rbp)  # imm = 0x3D8803CB
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB70_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB70_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB70_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB70_4:                               # %land.end
.LBB70_5:                               # %lor.end
.LBB70_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB70_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB70_9
.LBB70_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB70_14
.LBB70_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB70_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB70_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB70_12:                              # %land.end51
.LBB70_13:                              # %lor.end53
.LBB70_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB70_180
# %bb.15:                               # %land.end54
	movq	.LJTI70_0(,%rax,8), %rax
	jmpq	*%rax
.LBB70_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB70_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB70_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB70_18 Depth=1
	movl	$0, -4(%rbp)
.LBB70_20:                              # %for.cond68
                                        #   Parent Loop BB70_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB70_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB70_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_20
.LBB70_23:                              # %for.end
                                        #   in Loop: Header=BB70_18 Depth=1
	jmp	.LBB70_24
.LBB70_24:                              # %for.inc85
                                        #   in Loop: Header=BB70_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_18
.LBB70_25:                              # %for.end87
	jmp	.LBB70_35
.LBB70_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB70_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB70_27 Depth=1
	movl	$0, -4(%rbp)
.LBB70_29:                              # %for.cond92
                                        #   Parent Loop BB70_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB70_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB70_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_29
.LBB70_32:                              # %for.end104
                                        #   in Loop: Header=BB70_27 Depth=1
	jmp	.LBB70_33
.LBB70_33:                              # %for.inc105
                                        #   in Loop: Header=BB70_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_27
.LBB70_34:                              # %for.end107
	jmp	.LBB70_35
.LBB70_35:                              # %if.end
	jmp	.LBB70_180
.LBB70_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB70_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_39 Depth 2
                                        #       Child Loop BB70_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB70_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB70_37 Depth=1
	movl	$0, -12(%rbp)
.LBB70_39:                              # %for.cond113
                                        #   Parent Loop BB70_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB70_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB70_39 Depth=2
	movl	$0, -4(%rbp)
.LBB70_41:                              # %for.cond117
                                        #   Parent Loop BB70_37 Depth=1
                                        #     Parent Loop BB70_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB70_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB70_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB70_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_41
.LBB70_44:                              # %for.end141
                                        #   in Loop: Header=BB70_39 Depth=2
	jmp	.LBB70_45
.LBB70_45:                              # %for.inc142
                                        #   in Loop: Header=BB70_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_39
.LBB70_46:                              # %for.end144
                                        #   in Loop: Header=BB70_37 Depth=1
	jmp	.LBB70_47
.LBB70_47:                              # %for.inc145
                                        #   in Loop: Header=BB70_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_37
.LBB70_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB70_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB70_49 Depth=1
	movl	$0, -8(%rbp)
.LBB70_51:                              # %for.cond152
                                        #   Parent Loop BB70_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB70_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB70_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_51
.LBB70_54:                              # %for.end162
                                        #   in Loop: Header=BB70_49 Depth=1
	jmp	.LBB70_55
.LBB70_55:                              # %for.inc163
                                        #   in Loop: Header=BB70_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_49
.LBB70_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB70_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB70_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB70_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB70_59 Depth=1
	movl	$0, -4(%rbp)
.LBB70_61:                              # %for.cond175
                                        #   Parent Loop BB70_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB70_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB70_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_61
.LBB70_64:                              # %for.end195
                                        #   in Loop: Header=BB70_59 Depth=1
	jmp	.LBB70_65
.LBB70_65:                              # %for.inc196
                                        #   in Loop: Header=BB70_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_59
.LBB70_66:                              # %for.end198
	jmp	.LBB70_95
.LBB70_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB70_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB70_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_71 Depth 2
                                        #       Child Loop BB70_73 Depth 3
                                        #         Child Loop BB70_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB70_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB70_71:                              # %for.cond210
                                        #   Parent Loop BB70_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_73 Depth 3
                                        #         Child Loop BB70_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB70_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB70_73:                              # %for.cond236
                                        #   Parent Loop BB70_69 Depth=1
                                        #     Parent Loop BB70_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB70_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB70_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB70_73 Depth=3
	movl	$0, -4(%rbp)
.LBB70_75:                              # %for.cond240
                                        #   Parent Loop BB70_69 Depth=1
                                        #     Parent Loop BB70_71 Depth=2
                                        #       Parent Loop BB70_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB70_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB70_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB70_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_75
.LBB70_78:                              # %for.end259
                                        #   in Loop: Header=BB70_73 Depth=3
	jmp	.LBB70_79
.LBB70_79:                              # %for.inc260
                                        #   in Loop: Header=BB70_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_73
.LBB70_80:                              # %for.end262
                                        #   in Loop: Header=BB70_71 Depth=2
	jmp	.LBB70_81
.LBB70_81:                              # %for.inc263
                                        #   in Loop: Header=BB70_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_71
.LBB70_82:                              # %for.end265
                                        #   in Loop: Header=BB70_69 Depth=1
	jmp	.LBB70_83
.LBB70_83:                              # %for.inc266
                                        #   in Loop: Header=BB70_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_69
.LBB70_84:                              # %for.end268
	jmp	.LBB70_94
.LBB70_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB70_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB70_86 Depth=1
	movl	$0, -4(%rbp)
.LBB70_88:                              # %for.cond274
                                        #   Parent Loop BB70_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB70_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB70_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_88
.LBB70_91:                              # %for.end294
                                        #   in Loop: Header=BB70_86 Depth=1
	jmp	.LBB70_92
.LBB70_92:                              # %for.inc295
                                        #   in Loop: Header=BB70_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_86
.LBB70_93:                              # %for.end297
	jmp	.LBB70_94
.LBB70_94:                              # %if.end298
	jmp	.LBB70_95
.LBB70_95:                              # %if.end299
	jmp	.LBB70_105
.LBB70_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB70_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB70_97 Depth=1
	movl	$0, -4(%rbp)
.LBB70_99:                              # %for.cond305
                                        #   Parent Loop BB70_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB70_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB70_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_99
.LBB70_102:                             # %for.end317
                                        #   in Loop: Header=BB70_97 Depth=1
	jmp	.LBB70_103
.LBB70_103:                             # %for.inc318
                                        #   in Loop: Header=BB70_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_97
.LBB70_104:                             # %for.end320
	jmp	.LBB70_105
.LBB70_105:                             # %if.end321
	jmp	.LBB70_180
.LBB70_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB70_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB70_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_110 Depth 2
                                        #       Child Loop BB70_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB70_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB70_108 Depth=1
	movl	$0, -12(%rbp)
.LBB70_110:                             # %for.cond331
                                        #   Parent Loop BB70_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB70_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB70_110 Depth=2
	movl	$0, -4(%rbp)
.LBB70_112:                             # %for.cond335
                                        #   Parent Loop BB70_108 Depth=1
                                        #     Parent Loop BB70_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB70_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB70_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB70_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_112
.LBB70_115:                             # %for.end359
                                        #   in Loop: Header=BB70_110 Depth=2
	jmp	.LBB70_116
.LBB70_116:                             # %for.inc360
                                        #   in Loop: Header=BB70_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_110
.LBB70_117:                             # %for.end362
                                        #   in Loop: Header=BB70_108 Depth=1
	jmp	.LBB70_118
.LBB70_118:                             # %for.inc363
                                        #   in Loop: Header=BB70_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_108
.LBB70_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB70_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB70_120 Depth=1
	movl	$0, -8(%rbp)
.LBB70_122:                             # %for.cond370
                                        #   Parent Loop BB70_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB70_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB70_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_122
.LBB70_125:                             # %for.end380
                                        #   in Loop: Header=BB70_120 Depth=1
	jmp	.LBB70_126
.LBB70_126:                             # %for.inc381
                                        #   in Loop: Header=BB70_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_120
.LBB70_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB70_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB70_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB70_129 Depth=1
	movl	$0, -4(%rbp)
.LBB70_131:                             # %for.cond390
                                        #   Parent Loop BB70_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB70_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB70_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_131
.LBB70_134:                             # %for.end410
                                        #   in Loop: Header=BB70_129 Depth=1
	jmp	.LBB70_135
.LBB70_135:                             # %for.inc411
                                        #   in Loop: Header=BB70_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_129
.LBB70_136:                             # %for.end413
	jmp	.LBB70_156
.LBB70_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB70_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB70_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_141 Depth 2
                                        #       Child Loop BB70_143 Depth 3
                                        #         Child Loop BB70_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB70_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB70_141:                             # %for.cond425
                                        #   Parent Loop BB70_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_143 Depth 3
                                        #         Child Loop BB70_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB70_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB70_143:                             # %for.cond452
                                        #   Parent Loop BB70_139 Depth=1
                                        #     Parent Loop BB70_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB70_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB70_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB70_143 Depth=3
	movl	$0, -4(%rbp)
.LBB70_145:                             # %for.cond456
                                        #   Parent Loop BB70_139 Depth=1
                                        #     Parent Loop BB70_141 Depth=2
                                        #       Parent Loop BB70_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB70_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB70_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB70_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_145
.LBB70_148:                             # %for.end475
                                        #   in Loop: Header=BB70_143 Depth=3
	jmp	.LBB70_149
.LBB70_149:                             # %for.inc476
                                        #   in Loop: Header=BB70_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_143
.LBB70_150:                             # %for.end478
                                        #   in Loop: Header=BB70_141 Depth=2
	jmp	.LBB70_151
.LBB70_151:                             # %for.inc479
                                        #   in Loop: Header=BB70_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_141
.LBB70_152:                             # %for.end481
                                        #   in Loop: Header=BB70_139 Depth=1
	jmp	.LBB70_153
.LBB70_153:                             # %for.inc482
                                        #   in Loop: Header=BB70_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_139
.LBB70_154:                             # %for.end484
	jmp	.LBB70_155
.LBB70_155:                             # %if.end485
	jmp	.LBB70_156
.LBB70_156:                             # %if.end486
	jmp	.LBB70_157
.LBB70_157:                             # %if.end487
	jmp	.LBB70_180
.LBB70_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB70_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB70_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB70_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB70_161 Depth=1
	movl	$0, -4(%rbp)
.LBB70_163:                             # %for.cond499
                                        #   Parent Loop BB70_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB70_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB70_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_163
.LBB70_166:                             # %for.end519
                                        #   in Loop: Header=BB70_161 Depth=1
	jmp	.LBB70_167
.LBB70_167:                             # %for.inc520
                                        #   in Loop: Header=BB70_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_161
.LBB70_168:                             # %for.end522
	jmp	.LBB70_169
.LBB70_169:                             # %if.end523
	jmp	.LBB70_179
.LBB70_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB70_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB70_171 Depth=1
	movl	$0, -4(%rbp)
.LBB70_173:                             # %for.cond529
                                        #   Parent Loop BB70_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB70_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB70_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_173
.LBB70_176:                             # %for.end541
                                        #   in Loop: Header=BB70_171 Depth=1
	jmp	.LBB70_177
.LBB70_177:                             # %for.inc542
                                        #   in Loop: Header=BB70_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_171
.LBB70_178:                             # %for.end544
	jmp	.LBB70_179
.LBB70_179:                             # %if.end545
	jmp	.LBB70_180
.LBB70_180:                             # %sw.epilog
	cmpl	$1032324043, -68(%rbp)  # imm = 0x3D8803CB
	jne	.LBB70_182
.LBB70_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_181
.Lfunc_end70:
	.size	Conceal_Error.60, .Lfunc_end70-Conceal_Error.60
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI70_0:
	.quad	.LBB70_16
	.quad	.LBB70_158
	.quad	.LBB70_106
	.quad	.LBB70_180
	.quad	.LBB70_36
                                        # -- End function
	.text
	.globl	Conceal_Error.61        # -- Begin function Conceal_Error.61
	.p2align	4, 0x90
	.type	Conceal_Error.61,@function
Conceal_Error.61:                       # @Conceal_Error.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1783464447, -68(%rbp)  # imm = 0x6A4D81FF
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB71_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB71_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB71_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB71_4:                               # %land.end
.LBB71_5:                               # %lor.end
.LBB71_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB71_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB71_9
.LBB71_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB71_14
.LBB71_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB71_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB71_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB71_12:                              # %land.end51
.LBB71_13:                              # %lor.end53
.LBB71_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB71_180
# %bb.15:                               # %land.end54
	movq	.LJTI71_0(,%rax,8), %rax
	jmpq	*%rax
.LBB71_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB71_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB71_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB71_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB71_18 Depth=1
	movl	$0, -4(%rbp)
.LBB71_20:                              # %for.cond68
                                        #   Parent Loop BB71_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB71_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB71_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB71_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_20
.LBB71_23:                              # %for.end
                                        #   in Loop: Header=BB71_18 Depth=1
	jmp	.LBB71_24
.LBB71_24:                              # %for.inc85
                                        #   in Loop: Header=BB71_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_18
.LBB71_25:                              # %for.end87
	jmp	.LBB71_35
.LBB71_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB71_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB71_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB71_27 Depth=1
	movl	$0, -4(%rbp)
.LBB71_29:                              # %for.cond92
                                        #   Parent Loop BB71_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB71_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB71_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB71_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_29
.LBB71_32:                              # %for.end104
                                        #   in Loop: Header=BB71_27 Depth=1
	jmp	.LBB71_33
.LBB71_33:                              # %for.inc105
                                        #   in Loop: Header=BB71_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_27
.LBB71_34:                              # %for.end107
	jmp	.LBB71_35
.LBB71_35:                              # %if.end
	jmp	.LBB71_180
.LBB71_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB71_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_39 Depth 2
                                        #       Child Loop BB71_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB71_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB71_37 Depth=1
	movl	$0, -12(%rbp)
.LBB71_39:                              # %for.cond113
                                        #   Parent Loop BB71_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB71_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB71_39 Depth=2
	movl	$0, -4(%rbp)
.LBB71_41:                              # %for.cond117
                                        #   Parent Loop BB71_37 Depth=1
                                        #     Parent Loop BB71_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB71_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB71_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB71_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_41
.LBB71_44:                              # %for.end141
                                        #   in Loop: Header=BB71_39 Depth=2
	jmp	.LBB71_45
.LBB71_45:                              # %for.inc142
                                        #   in Loop: Header=BB71_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_39
.LBB71_46:                              # %for.end144
                                        #   in Loop: Header=BB71_37 Depth=1
	jmp	.LBB71_47
.LBB71_47:                              # %for.inc145
                                        #   in Loop: Header=BB71_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_37
.LBB71_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB71_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB71_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB71_49 Depth=1
	movl	$0, -8(%rbp)
.LBB71_51:                              # %for.cond152
                                        #   Parent Loop BB71_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB71_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB71_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB71_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_51
.LBB71_54:                              # %for.end162
                                        #   in Loop: Header=BB71_49 Depth=1
	jmp	.LBB71_55
.LBB71_55:                              # %for.inc163
                                        #   in Loop: Header=BB71_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_49
.LBB71_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB71_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB71_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB71_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB71_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB71_59 Depth=1
	movl	$0, -4(%rbp)
.LBB71_61:                              # %for.cond175
                                        #   Parent Loop BB71_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB71_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB71_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB71_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_61
.LBB71_64:                              # %for.end195
                                        #   in Loop: Header=BB71_59 Depth=1
	jmp	.LBB71_65
.LBB71_65:                              # %for.inc196
                                        #   in Loop: Header=BB71_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_59
.LBB71_66:                              # %for.end198
	jmp	.LBB71_95
.LBB71_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB71_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB71_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_71 Depth 2
                                        #       Child Loop BB71_73 Depth 3
                                        #         Child Loop BB71_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB71_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB71_71:                              # %for.cond210
                                        #   Parent Loop BB71_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_73 Depth 3
                                        #         Child Loop BB71_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB71_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB71_73:                              # %for.cond236
                                        #   Parent Loop BB71_69 Depth=1
                                        #     Parent Loop BB71_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB71_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB71_73 Depth=3
	movl	$0, -4(%rbp)
.LBB71_75:                              # %for.cond240
                                        #   Parent Loop BB71_69 Depth=1
                                        #     Parent Loop BB71_71 Depth=2
                                        #       Parent Loop BB71_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB71_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB71_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB71_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_75
.LBB71_78:                              # %for.end259
                                        #   in Loop: Header=BB71_73 Depth=3
	jmp	.LBB71_79
.LBB71_79:                              # %for.inc260
                                        #   in Loop: Header=BB71_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_73
.LBB71_80:                              # %for.end262
                                        #   in Loop: Header=BB71_71 Depth=2
	jmp	.LBB71_81
.LBB71_81:                              # %for.inc263
                                        #   in Loop: Header=BB71_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_71
.LBB71_82:                              # %for.end265
                                        #   in Loop: Header=BB71_69 Depth=1
	jmp	.LBB71_83
.LBB71_83:                              # %for.inc266
                                        #   in Loop: Header=BB71_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_69
.LBB71_84:                              # %for.end268
	jmp	.LBB71_94
.LBB71_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB71_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB71_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB71_86 Depth=1
	movl	$0, -4(%rbp)
.LBB71_88:                              # %for.cond274
                                        #   Parent Loop BB71_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB71_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB71_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB71_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_88
.LBB71_91:                              # %for.end294
                                        #   in Loop: Header=BB71_86 Depth=1
	jmp	.LBB71_92
.LBB71_92:                              # %for.inc295
                                        #   in Loop: Header=BB71_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_86
.LBB71_93:                              # %for.end297
	jmp	.LBB71_94
.LBB71_94:                              # %if.end298
	jmp	.LBB71_95
.LBB71_95:                              # %if.end299
	jmp	.LBB71_105
.LBB71_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB71_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB71_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB71_97 Depth=1
	movl	$0, -4(%rbp)
.LBB71_99:                              # %for.cond305
                                        #   Parent Loop BB71_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB71_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB71_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB71_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_99
.LBB71_102:                             # %for.end317
                                        #   in Loop: Header=BB71_97 Depth=1
	jmp	.LBB71_103
.LBB71_103:                             # %for.inc318
                                        #   in Loop: Header=BB71_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_97
.LBB71_104:                             # %for.end320
	jmp	.LBB71_105
.LBB71_105:                             # %if.end321
	jmp	.LBB71_180
.LBB71_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB71_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB71_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_110 Depth 2
                                        #       Child Loop BB71_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB71_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	$0, -12(%rbp)
.LBB71_110:                             # %for.cond331
                                        #   Parent Loop BB71_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB71_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB71_110 Depth=2
	movl	$0, -4(%rbp)
.LBB71_112:                             # %for.cond335
                                        #   Parent Loop BB71_108 Depth=1
                                        #     Parent Loop BB71_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB71_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB71_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB71_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_112
.LBB71_115:                             # %for.end359
                                        #   in Loop: Header=BB71_110 Depth=2
	jmp	.LBB71_116
.LBB71_116:                             # %for.inc360
                                        #   in Loop: Header=BB71_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_110
.LBB71_117:                             # %for.end362
                                        #   in Loop: Header=BB71_108 Depth=1
	jmp	.LBB71_118
.LBB71_118:                             # %for.inc363
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_108
.LBB71_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB71_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB71_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB71_120 Depth=1
	movl	$0, -8(%rbp)
.LBB71_122:                             # %for.cond370
                                        #   Parent Loop BB71_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB71_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB71_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB71_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_122
.LBB71_125:                             # %for.end380
                                        #   in Loop: Header=BB71_120 Depth=1
	jmp	.LBB71_126
.LBB71_126:                             # %for.inc381
                                        #   in Loop: Header=BB71_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_120
.LBB71_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB71_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB71_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB71_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB71_129 Depth=1
	movl	$0, -4(%rbp)
.LBB71_131:                             # %for.cond390
                                        #   Parent Loop BB71_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB71_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB71_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB71_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_131
.LBB71_134:                             # %for.end410
                                        #   in Loop: Header=BB71_129 Depth=1
	jmp	.LBB71_135
.LBB71_135:                             # %for.inc411
                                        #   in Loop: Header=BB71_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_129
.LBB71_136:                             # %for.end413
	jmp	.LBB71_156
.LBB71_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB71_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB71_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_141 Depth 2
                                        #       Child Loop BB71_143 Depth 3
                                        #         Child Loop BB71_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB71_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB71_141:                             # %for.cond425
                                        #   Parent Loop BB71_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_143 Depth 3
                                        #         Child Loop BB71_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB71_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB71_143:                             # %for.cond452
                                        #   Parent Loop BB71_139 Depth=1
                                        #     Parent Loop BB71_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB71_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB71_143 Depth=3
	movl	$0, -4(%rbp)
.LBB71_145:                             # %for.cond456
                                        #   Parent Loop BB71_139 Depth=1
                                        #     Parent Loop BB71_141 Depth=2
                                        #       Parent Loop BB71_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB71_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB71_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB71_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_145
.LBB71_148:                             # %for.end475
                                        #   in Loop: Header=BB71_143 Depth=3
	jmp	.LBB71_149
.LBB71_149:                             # %for.inc476
                                        #   in Loop: Header=BB71_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_143
.LBB71_150:                             # %for.end478
                                        #   in Loop: Header=BB71_141 Depth=2
	jmp	.LBB71_151
.LBB71_151:                             # %for.inc479
                                        #   in Loop: Header=BB71_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_141
.LBB71_152:                             # %for.end481
                                        #   in Loop: Header=BB71_139 Depth=1
	jmp	.LBB71_153
.LBB71_153:                             # %for.inc482
                                        #   in Loop: Header=BB71_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_139
.LBB71_154:                             # %for.end484
	jmp	.LBB71_155
.LBB71_155:                             # %if.end485
	jmp	.LBB71_156
.LBB71_156:                             # %if.end486
	jmp	.LBB71_157
.LBB71_157:                             # %if.end487
	jmp	.LBB71_180
.LBB71_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB71_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB71_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB71_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB71_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB71_161 Depth=1
	movl	$0, -4(%rbp)
.LBB71_163:                             # %for.cond499
                                        #   Parent Loop BB71_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB71_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB71_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB71_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_163
.LBB71_166:                             # %for.end519
                                        #   in Loop: Header=BB71_161 Depth=1
	jmp	.LBB71_167
.LBB71_167:                             # %for.inc520
                                        #   in Loop: Header=BB71_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_161
.LBB71_168:                             # %for.end522
	jmp	.LBB71_169
.LBB71_169:                             # %if.end523
	jmp	.LBB71_179
.LBB71_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB71_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB71_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB71_171 Depth=1
	movl	$0, -4(%rbp)
.LBB71_173:                             # %for.cond529
                                        #   Parent Loop BB71_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB71_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB71_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB71_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_173
.LBB71_176:                             # %for.end541
                                        #   in Loop: Header=BB71_171 Depth=1
	jmp	.LBB71_177
.LBB71_177:                             # %for.inc542
                                        #   in Loop: Header=BB71_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_171
.LBB71_178:                             # %for.end544
	jmp	.LBB71_179
.LBB71_179:                             # %if.end545
	jmp	.LBB71_180
.LBB71_180:                             # %sw.epilog
	cmpl	$1783464447, -68(%rbp)  # imm = 0x6A4D81FF
	jne	.LBB71_182
.LBB71_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_181
.Lfunc_end71:
	.size	Conceal_Error.61, .Lfunc_end71-Conceal_Error.61
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI71_0:
	.quad	.LBB71_16
	.quad	.LBB71_158
	.quad	.LBB71_106
	.quad	.LBB71_180
	.quad	.LBB71_36
                                        # -- End function
	.text
	.globl	Get_Reference_Pixel.62  # -- Begin function Get_Reference_Pixel.62
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.62,@function
Get_Reference_Pixel.62:                 # @Get_Reference_Pixel.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1646752723, -100(%rbp) # imm = 0x622773D3
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB72_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB72_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB72_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB72_5
.LBB72_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB72_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB72_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB72_11
.LBB72_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB72_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB72_10
.LBB72_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB72_10:                              # %cond.end14
.LBB72_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB72_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB72_14
.LBB72_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB72_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB72_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB72_20
.LBB72_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB72_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB72_19
.LBB72_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB72_19:                              # %cond.end29
.LBB72_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_332
.LBB72_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB72_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB72_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB72_25
.LBB72_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB72_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB72_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB72_31
.LBB72_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB72_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB72_30
.LBB72_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB72_30:                              # %cond.end52
.LBB72_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB72_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB72_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB72_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB72_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB72_36
.LBB72_35:                              # %cond.false61
                                        #   in Loop: Header=BB72_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB72_36:                              # %cond.end63
                                        #   in Loop: Header=BB72_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB72_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB72_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB72_42
.LBB72_38:                              # %cond.false68
                                        #   in Loop: Header=BB72_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB72_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB72_41
.LBB72_40:                              # %cond.false73
                                        #   in Loop: Header=BB72_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB72_41:                              # %cond.end75
                                        #   in Loop: Header=BB72_32 Depth=1
.LBB72_42:                              # %cond.end77
                                        #   in Loop: Header=BB72_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB72_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_32
.LBB72_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_47
.LBB72_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB72_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB72_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB72_53
.LBB72_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_52
.LBB72_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB72_52:                              # %cond.end113
.LBB72_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB72_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB72_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB72_57
.LBB72_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB72_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB72_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB72_63
.LBB72_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB72_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB72_62
.LBB72_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB72_62:                              # %cond.end136
.LBB72_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB72_76
.LBB72_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB72_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB72_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB72_68
.LBB72_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB72_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB72_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB72_74
.LBB72_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB72_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB72_73
.LBB72_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB72_73:                              # %cond.end169
.LBB72_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB72_75:                              # %if.end
	jmp	.LBB72_76
.LBB72_76:                              # %if.end178
	jmp	.LBB72_331
.LBB72_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB72_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB72_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB72_81
.LBB72_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB72_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB72_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB72_87
.LBB72_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB72_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB72_86
.LBB72_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB72_86:                              # %cond.end197
.LBB72_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB72_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB72_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB72_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB72_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB72_92
.LBB72_91:                              # %cond.false209
                                        #   in Loop: Header=BB72_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB72_92:                              # %cond.end211
                                        #   in Loop: Header=BB72_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB72_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB72_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB72_98
.LBB72_94:                              # %cond.false216
                                        #   in Loop: Header=BB72_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB72_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB72_97
.LBB72_96:                              # %cond.false221
                                        #   in Loop: Header=BB72_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB72_97:                              # %cond.end223
                                        #   in Loop: Header=BB72_88 Depth=1
.LBB72_98:                              # %cond.end225
                                        #   in Loop: Header=BB72_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB72_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB72_88
.LBB72_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_103
.LBB72_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB72_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB72_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB72_109
.LBB72_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_108
.LBB72_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB72_108:                             # %cond.end266
.LBB72_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB72_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB72_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB72_113
.LBB72_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB72_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB72_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB72_119
.LBB72_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB72_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB72_118
.LBB72_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB72_118:                             # %cond.end287
.LBB72_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB72_132
.LBB72_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB72_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB72_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB72_124
.LBB72_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB72_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB72_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB72_130
.LBB72_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB72_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB72_129
.LBB72_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB72_129:                             # %cond.end320
.LBB72_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB72_131:                             # %if.end331
	jmp	.LBB72_132
.LBB72_132:                             # %if.end332
	jmp	.LBB72_330
.LBB72_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB72_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB72_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB72_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB72_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB72_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB72_139
.LBB72_138:                             # %cond.false345
                                        #   in Loop: Header=BB72_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB72_139:                             # %cond.end347
                                        #   in Loop: Header=BB72_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB72_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB72_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB72_145
.LBB72_141:                             # %cond.false352
                                        #   in Loop: Header=BB72_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB72_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB72_144
.LBB72_143:                             # %cond.false357
                                        #   in Loop: Header=BB72_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB72_144:                             # %cond.end359
                                        #   in Loop: Header=BB72_135 Depth=1
.LBB72_145:                             # %cond.end361
                                        #   in Loop: Header=BB72_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB72_146:                             # %for.cond363
                                        #   Parent Loop BB72_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB72_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB72_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB72_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB72_150
.LBB72_149:                             # %cond.false371
                                        #   in Loop: Header=BB72_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB72_150:                             # %cond.end373
                                        #   in Loop: Header=BB72_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB72_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB72_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_156
.LBB72_152:                             # %cond.false378
                                        #   in Loop: Header=BB72_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB72_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB72_155
.LBB72_154:                             # %cond.false383
                                        #   in Loop: Header=BB72_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB72_155:                             # %cond.end385
                                        #   in Loop: Header=BB72_146 Depth=2
.LBB72_156:                             # %cond.end387
                                        #   in Loop: Header=BB72_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB72_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_146
.LBB72_158:                             # %for.end401
                                        #   in Loop: Header=BB72_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB72_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB72_135
.LBB72_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB72_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB72_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB72_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB72_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB72_161
.LBB72_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_167
.LBB72_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB72_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB72_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB72_173
.LBB72_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_172
.LBB72_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB72_172:                             # %cond.end449
.LBB72_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB72_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB72_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_177
.LBB72_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB72_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB72_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB72_183
.LBB72_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB72_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_182
.LBB72_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB72_182:                             # %cond.end486
.LBB72_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB72_196
.LBB72_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB72_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB72_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_188
.LBB72_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB72_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB72_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB72_194
.LBB72_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB72_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_193
.LBB72_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB72_193:                             # %cond.end526
.LBB72_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB72_195:                             # %if.end532
	jmp	.LBB72_196
.LBB72_196:                             # %if.end533
	jmp	.LBB72_329
.LBB72_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB72_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB72_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB72_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB72_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB72_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB72_203
.LBB72_202:                             # %cond.false546
                                        #   in Loop: Header=BB72_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB72_203:                             # %cond.end548
                                        #   in Loop: Header=BB72_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB72_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB72_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB72_209
.LBB72_205:                             # %cond.false553
                                        #   in Loop: Header=BB72_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB72_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB72_208
.LBB72_207:                             # %cond.false558
                                        #   in Loop: Header=BB72_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB72_208:                             # %cond.end560
                                        #   in Loop: Header=BB72_199 Depth=1
.LBB72_209:                             # %cond.end562
                                        #   in Loop: Header=BB72_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB72_210:                             # %for.cond564
                                        #   Parent Loop BB72_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB72_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB72_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB72_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB72_214
.LBB72_213:                             # %cond.false572
                                        #   in Loop: Header=BB72_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB72_214:                             # %cond.end574
                                        #   in Loop: Header=BB72_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB72_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB72_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_220
.LBB72_216:                             # %cond.false579
                                        #   in Loop: Header=BB72_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB72_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB72_219
.LBB72_218:                             # %cond.false584
                                        #   in Loop: Header=BB72_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB72_219:                             # %cond.end586
                                        #   in Loop: Header=BB72_210 Depth=2
.LBB72_220:                             # %cond.end588
                                        #   in Loop: Header=BB72_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB72_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB72_210
.LBB72_222:                             # %for.end602
                                        #   in Loop: Header=BB72_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB72_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_199
.LBB72_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB72_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB72_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB72_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB72_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_225
.LBB72_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_231
.LBB72_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB72_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB72_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB72_237
.LBB72_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_236
.LBB72_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB72_236:                             # %cond.end650
.LBB72_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB72_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB72_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_241
.LBB72_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB72_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB72_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB72_247
.LBB72_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB72_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_246
.LBB72_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB72_246:                             # %cond.end687
.LBB72_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB72_258
.LBB72_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB72_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_251
.LBB72_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB72_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB72_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB72_257
.LBB72_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB72_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_256
.LBB72_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB72_256:                             # %cond.end724
.LBB72_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB72_258:                             # %if.end730
	jmp	.LBB72_328
.LBB72_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB72_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB72_262
.LBB72_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB72_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB72_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB72_265
.LBB72_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB72_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB72_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB72_271
.LBB72_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB72_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB72_270
.LBB72_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB72_270:                             # %cond.end753
.LBB72_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB72_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB72_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB72_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB72_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB72_276
.LBB72_275:                             # %cond.false765
                                        #   in Loop: Header=BB72_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB72_276:                             # %cond.end767
                                        #   in Loop: Header=BB72_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB72_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB72_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB72_282
.LBB72_278:                             # %cond.false772
                                        #   in Loop: Header=BB72_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB72_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB72_281
.LBB72_280:                             # %cond.false777
                                        #   in Loop: Header=BB72_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB72_281:                             # %cond.end779
                                        #   in Loop: Header=BB72_272 Depth=1
.LBB72_282:                             # %cond.end781
                                        #   in Loop: Header=BB72_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB72_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_272
.LBB72_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_287
.LBB72_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB72_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB72_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB72_293
.LBB72_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_292
.LBB72_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB72_292:                             # %cond.end822
.LBB72_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB72_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB72_296
.LBB72_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB72_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB72_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB72_299
.LBB72_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB72_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB72_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB72_305
.LBB72_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB72_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB72_304
.LBB72_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB72_304:                             # %cond.end847
.LBB72_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB72_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB72_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB72_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB72_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB72_310
.LBB72_309:                             # %cond.false859
                                        #   in Loop: Header=BB72_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB72_310:                             # %cond.end861
                                        #   in Loop: Header=BB72_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB72_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB72_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB72_316
.LBB72_312:                             # %cond.false866
                                        #   in Loop: Header=BB72_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB72_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB72_315
.LBB72_314:                             # %cond.false871
                                        #   in Loop: Header=BB72_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB72_315:                             # %cond.end873
                                        #   in Loop: Header=BB72_306 Depth=1
.LBB72_316:                             # %cond.end875
                                        #   in Loop: Header=BB72_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB72_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB72_306
.LBB72_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_321
.LBB72_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB72_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB72_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB72_327
.LBB72_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_326
.LBB72_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB72_326:                             # %cond.end916
.LBB72_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB72_328:                             # %if.end922
	jmp	.LBB72_329
.LBB72_329:                             # %if.end923
	jmp	.LBB72_330
.LBB72_330:                             # %if.end924
	jmp	.LBB72_331
.LBB72_331:                             # %if.end925
	jmp	.LBB72_332
.LBB72_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1646752723, -100(%rbp) # imm = 0x622773D3
	jne	.LBB72_334
.LBB72_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_333
.Lfunc_end72:
	.size	Get_Reference_Pixel.62, .Lfunc_end72-Get_Reference_Pixel.62
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.63  # -- Begin function Get_Reference_Block.63
	.p2align	4, 0x90
	.type	Get_Reference_Block.63,@function
Get_Reference_Block.63:                 # @Get_Reference_Block.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$773839493, -32(%rbp)   # imm = 0x2E1FDA85
	movq	%rdi, -56(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -24(%rbp)
	movq	%r9, -48(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB73_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB73_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_3:                               # %for.cond5
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB73_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-28(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB73_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_3
.LBB73_6:                               # %for.end
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_7
.LBB73_7:                               # %for.inc14
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_1
.LBB73_8:                               # %for.end16
	cmpl	$773839493, -32(%rbp)   # imm = 0x2E1FDA85
	jne	.LBB73_10
.LBB73_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_9
.Lfunc_end73:
	.size	Get_Reference_Block.63, .Lfunc_end73-Get_Reference_Block.63
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.64        # -- Begin function Conceal_Error.64
	.p2align	4, 0x90
	.type	Conceal_Error.64,@function
Conceal_Error.64:                       # @Conceal_Error.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$864656463, -68(%rbp)   # imm = 0x33899C4F
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB74_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB74_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB74_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB74_4:                               # %land.end
.LBB74_5:                               # %lor.end
.LBB74_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB74_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB74_9
.LBB74_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB74_14
.LBB74_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB74_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB74_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB74_12:                              # %land.end51
.LBB74_13:                              # %lor.end53
.LBB74_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB74_180
# %bb.15:                               # %land.end54
	movq	.LJTI74_0(,%rax,8), %rax
	jmpq	*%rax
.LBB74_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB74_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB74_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB74_18 Depth=1
	movl	$0, -4(%rbp)
.LBB74_20:                              # %for.cond68
                                        #   Parent Loop BB74_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB74_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB74_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_20
.LBB74_23:                              # %for.end
                                        #   in Loop: Header=BB74_18 Depth=1
	jmp	.LBB74_24
.LBB74_24:                              # %for.inc85
                                        #   in Loop: Header=BB74_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_18
.LBB74_25:                              # %for.end87
	jmp	.LBB74_35
.LBB74_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB74_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB74_27 Depth=1
	movl	$0, -4(%rbp)
.LBB74_29:                              # %for.cond92
                                        #   Parent Loop BB74_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB74_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB74_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_29
.LBB74_32:                              # %for.end104
                                        #   in Loop: Header=BB74_27 Depth=1
	jmp	.LBB74_33
.LBB74_33:                              # %for.inc105
                                        #   in Loop: Header=BB74_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_27
.LBB74_34:                              # %for.end107
	jmp	.LBB74_35
.LBB74_35:                              # %if.end
	jmp	.LBB74_180
.LBB74_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB74_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_39 Depth 2
                                        #       Child Loop BB74_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB74_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB74_37 Depth=1
	movl	$0, -16(%rbp)
.LBB74_39:                              # %for.cond113
                                        #   Parent Loop BB74_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB74_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB74_39 Depth=2
	movl	$0, -4(%rbp)
.LBB74_41:                              # %for.cond117
                                        #   Parent Loop BB74_37 Depth=1
                                        #     Parent Loop BB74_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB74_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB74_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB74_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_41
.LBB74_44:                              # %for.end141
                                        #   in Loop: Header=BB74_39 Depth=2
	jmp	.LBB74_45
.LBB74_45:                              # %for.inc142
                                        #   in Loop: Header=BB74_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_39
.LBB74_46:                              # %for.end144
                                        #   in Loop: Header=BB74_37 Depth=1
	jmp	.LBB74_47
.LBB74_47:                              # %for.inc145
                                        #   in Loop: Header=BB74_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_37
.LBB74_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB74_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB74_49 Depth=1
	movl	$0, -8(%rbp)
.LBB74_51:                              # %for.cond152
                                        #   Parent Loop BB74_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB74_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB74_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_51
.LBB74_54:                              # %for.end162
                                        #   in Loop: Header=BB74_49 Depth=1
	jmp	.LBB74_55
.LBB74_55:                              # %for.inc163
                                        #   in Loop: Header=BB74_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_49
.LBB74_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB74_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB74_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB74_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB74_59 Depth=1
	movl	$0, -4(%rbp)
.LBB74_61:                              # %for.cond175
                                        #   Parent Loop BB74_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB74_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB74_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_61
.LBB74_64:                              # %for.end195
                                        #   in Loop: Header=BB74_59 Depth=1
	jmp	.LBB74_65
.LBB74_65:                              # %for.inc196
                                        #   in Loop: Header=BB74_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_59
.LBB74_66:                              # %for.end198
	jmp	.LBB74_95
.LBB74_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB74_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB74_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_71 Depth 2
                                        #       Child Loop BB74_73 Depth 3
                                        #         Child Loop BB74_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB74_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB74_71:                              # %for.cond210
                                        #   Parent Loop BB74_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_73 Depth 3
                                        #         Child Loop BB74_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB74_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB74_73:                              # %for.cond236
                                        #   Parent Loop BB74_69 Depth=1
                                        #     Parent Loop BB74_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB74_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB74_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB74_73 Depth=3
	movl	$0, -4(%rbp)
.LBB74_75:                              # %for.cond240
                                        #   Parent Loop BB74_69 Depth=1
                                        #     Parent Loop BB74_71 Depth=2
                                        #       Parent Loop BB74_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB74_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB74_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB74_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_75
.LBB74_78:                              # %for.end259
                                        #   in Loop: Header=BB74_73 Depth=3
	jmp	.LBB74_79
.LBB74_79:                              # %for.inc260
                                        #   in Loop: Header=BB74_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_73
.LBB74_80:                              # %for.end262
                                        #   in Loop: Header=BB74_71 Depth=2
	jmp	.LBB74_81
.LBB74_81:                              # %for.inc263
                                        #   in Loop: Header=BB74_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_71
.LBB74_82:                              # %for.end265
                                        #   in Loop: Header=BB74_69 Depth=1
	jmp	.LBB74_83
.LBB74_83:                              # %for.inc266
                                        #   in Loop: Header=BB74_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_69
.LBB74_84:                              # %for.end268
	jmp	.LBB74_94
.LBB74_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB74_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB74_86 Depth=1
	movl	$0, -4(%rbp)
.LBB74_88:                              # %for.cond274
                                        #   Parent Loop BB74_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB74_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB74_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_88
.LBB74_91:                              # %for.end294
                                        #   in Loop: Header=BB74_86 Depth=1
	jmp	.LBB74_92
.LBB74_92:                              # %for.inc295
                                        #   in Loop: Header=BB74_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_86
.LBB74_93:                              # %for.end297
	jmp	.LBB74_94
.LBB74_94:                              # %if.end298
	jmp	.LBB74_95
.LBB74_95:                              # %if.end299
	jmp	.LBB74_105
.LBB74_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB74_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB74_97 Depth=1
	movl	$0, -4(%rbp)
.LBB74_99:                              # %for.cond305
                                        #   Parent Loop BB74_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB74_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB74_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_99
.LBB74_102:                             # %for.end317
                                        #   in Loop: Header=BB74_97 Depth=1
	jmp	.LBB74_103
.LBB74_103:                             # %for.inc318
                                        #   in Loop: Header=BB74_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_97
.LBB74_104:                             # %for.end320
	jmp	.LBB74_105
.LBB74_105:                             # %if.end321
	jmp	.LBB74_180
.LBB74_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB74_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB74_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_110 Depth 2
                                        #       Child Loop BB74_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB74_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB74_108 Depth=1
	movl	$0, -16(%rbp)
.LBB74_110:                             # %for.cond331
                                        #   Parent Loop BB74_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB74_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB74_110 Depth=2
	movl	$0, -4(%rbp)
.LBB74_112:                             # %for.cond335
                                        #   Parent Loop BB74_108 Depth=1
                                        #     Parent Loop BB74_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB74_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB74_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB74_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_112
.LBB74_115:                             # %for.end359
                                        #   in Loop: Header=BB74_110 Depth=2
	jmp	.LBB74_116
.LBB74_116:                             # %for.inc360
                                        #   in Loop: Header=BB74_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_110
.LBB74_117:                             # %for.end362
                                        #   in Loop: Header=BB74_108 Depth=1
	jmp	.LBB74_118
.LBB74_118:                             # %for.inc363
                                        #   in Loop: Header=BB74_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_108
.LBB74_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB74_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB74_120 Depth=1
	movl	$0, -8(%rbp)
.LBB74_122:                             # %for.cond370
                                        #   Parent Loop BB74_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB74_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB74_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_122
.LBB74_125:                             # %for.end380
                                        #   in Loop: Header=BB74_120 Depth=1
	jmp	.LBB74_126
.LBB74_126:                             # %for.inc381
                                        #   in Loop: Header=BB74_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_120
.LBB74_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB74_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB74_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB74_129 Depth=1
	movl	$0, -4(%rbp)
.LBB74_131:                             # %for.cond390
                                        #   Parent Loop BB74_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB74_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB74_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_131
.LBB74_134:                             # %for.end410
                                        #   in Loop: Header=BB74_129 Depth=1
	jmp	.LBB74_135
.LBB74_135:                             # %for.inc411
                                        #   in Loop: Header=BB74_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_129
.LBB74_136:                             # %for.end413
	jmp	.LBB74_156
.LBB74_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB74_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB74_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_141 Depth 2
                                        #       Child Loop BB74_143 Depth 3
                                        #         Child Loop BB74_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB74_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB74_141:                             # %for.cond425
                                        #   Parent Loop BB74_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_143 Depth 3
                                        #         Child Loop BB74_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB74_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB74_143:                             # %for.cond452
                                        #   Parent Loop BB74_139 Depth=1
                                        #     Parent Loop BB74_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB74_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB74_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB74_143 Depth=3
	movl	$0, -4(%rbp)
.LBB74_145:                             # %for.cond456
                                        #   Parent Loop BB74_139 Depth=1
                                        #     Parent Loop BB74_141 Depth=2
                                        #       Parent Loop BB74_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB74_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB74_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB74_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_145
.LBB74_148:                             # %for.end475
                                        #   in Loop: Header=BB74_143 Depth=3
	jmp	.LBB74_149
.LBB74_149:                             # %for.inc476
                                        #   in Loop: Header=BB74_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_143
.LBB74_150:                             # %for.end478
                                        #   in Loop: Header=BB74_141 Depth=2
	jmp	.LBB74_151
.LBB74_151:                             # %for.inc479
                                        #   in Loop: Header=BB74_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_141
.LBB74_152:                             # %for.end481
                                        #   in Loop: Header=BB74_139 Depth=1
	jmp	.LBB74_153
.LBB74_153:                             # %for.inc482
                                        #   in Loop: Header=BB74_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_139
.LBB74_154:                             # %for.end484
	jmp	.LBB74_155
.LBB74_155:                             # %if.end485
	jmp	.LBB74_156
.LBB74_156:                             # %if.end486
	jmp	.LBB74_157
.LBB74_157:                             # %if.end487
	jmp	.LBB74_180
.LBB74_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB74_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB74_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB74_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB74_161 Depth=1
	movl	$0, -4(%rbp)
.LBB74_163:                             # %for.cond499
                                        #   Parent Loop BB74_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB74_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB74_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_163
.LBB74_166:                             # %for.end519
                                        #   in Loop: Header=BB74_161 Depth=1
	jmp	.LBB74_167
.LBB74_167:                             # %for.inc520
                                        #   in Loop: Header=BB74_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_161
.LBB74_168:                             # %for.end522
	jmp	.LBB74_169
.LBB74_169:                             # %if.end523
	jmp	.LBB74_179
.LBB74_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB74_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB74_171 Depth=1
	movl	$0, -4(%rbp)
.LBB74_173:                             # %for.cond529
                                        #   Parent Loop BB74_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB74_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB74_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_173
.LBB74_176:                             # %for.end541
                                        #   in Loop: Header=BB74_171 Depth=1
	jmp	.LBB74_177
.LBB74_177:                             # %for.inc542
                                        #   in Loop: Header=BB74_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_171
.LBB74_178:                             # %for.end544
	jmp	.LBB74_179
.LBB74_179:                             # %if.end545
	jmp	.LBB74_180
.LBB74_180:                             # %sw.epilog
	cmpl	$864656463, -68(%rbp)   # imm = 0x33899C4F
	jne	.LBB74_182
.LBB74_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_181
.Lfunc_end74:
	.size	Conceal_Error.64, .Lfunc_end74-Conceal_Error.64
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI74_0:
	.quad	.LBB74_16
	.quad	.LBB74_158
	.quad	.LBB74_106
	.quad	.LBB74_180
	.quad	.LBB74_36
                                        # -- End function
	.text
	.globl	Get_Reference_Pixel.65  # -- Begin function Get_Reference_Pixel.65
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.65,@function
Get_Reference_Pixel.65:                 # @Get_Reference_Pixel.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1610616785, -104(%rbp) # imm = 0x60000FD1
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB75_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB75_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB75_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB75_5
.LBB75_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB75_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB75_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB75_11
.LBB75_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB75_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB75_10
.LBB75_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB75_10:                              # %cond.end14
.LBB75_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB75_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB75_14
.LBB75_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB75_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB75_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB75_20
.LBB75_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB75_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB75_19
.LBB75_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB75_19:                              # %cond.end29
.LBB75_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_332
.LBB75_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB75_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB75_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB75_25
.LBB75_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB75_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB75_31
.LBB75_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB75_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB75_30
.LBB75_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB75_30:                              # %cond.end52
.LBB75_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB75_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB75_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB75_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB75_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB75_36
.LBB75_35:                              # %cond.false61
                                        #   in Loop: Header=BB75_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB75_36:                              # %cond.end63
                                        #   in Loop: Header=BB75_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB75_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB75_42
.LBB75_38:                              # %cond.false68
                                        #   in Loop: Header=BB75_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB75_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB75_41
.LBB75_40:                              # %cond.false73
                                        #   in Loop: Header=BB75_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB75_41:                              # %cond.end75
                                        #   in Loop: Header=BB75_32 Depth=1
.LBB75_42:                              # %cond.end77
                                        #   in Loop: Header=BB75_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB75_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_32
.LBB75_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_47
.LBB75_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB75_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB75_53
.LBB75_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_52
.LBB75_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB75_52:                              # %cond.end113
.LBB75_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB75_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB75_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB75_57
.LBB75_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB75_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB75_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB75_63
.LBB75_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB75_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB75_62
.LBB75_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB75_62:                              # %cond.end136
.LBB75_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB75_76
.LBB75_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB75_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB75_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB75_68
.LBB75_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB75_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB75_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB75_74
.LBB75_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB75_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB75_73
.LBB75_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB75_73:                              # %cond.end169
.LBB75_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB75_75:                              # %if.end
	jmp	.LBB75_76
.LBB75_76:                              # %if.end178
	jmp	.LBB75_331
.LBB75_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB75_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB75_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB75_81
.LBB75_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB75_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB75_87
.LBB75_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB75_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB75_86
.LBB75_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB75_86:                              # %cond.end197
.LBB75_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB75_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB75_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB75_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB75_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB75_92
.LBB75_91:                              # %cond.false209
                                        #   in Loop: Header=BB75_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB75_92:                              # %cond.end211
                                        #   in Loop: Header=BB75_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB75_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB75_98
.LBB75_94:                              # %cond.false216
                                        #   in Loop: Header=BB75_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB75_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB75_97
.LBB75_96:                              # %cond.false221
                                        #   in Loop: Header=BB75_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB75_97:                              # %cond.end223
                                        #   in Loop: Header=BB75_88 Depth=1
.LBB75_98:                              # %cond.end225
                                        #   in Loop: Header=BB75_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB75_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_88
.LBB75_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_103
.LBB75_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB75_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB75_109
.LBB75_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_108
.LBB75_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB75_108:                             # %cond.end266
.LBB75_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB75_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB75_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB75_113
.LBB75_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB75_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB75_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB75_119
.LBB75_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB75_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB75_118
.LBB75_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB75_118:                             # %cond.end287
.LBB75_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB75_132
.LBB75_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB75_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB75_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB75_124
.LBB75_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB75_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB75_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB75_130
.LBB75_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB75_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB75_129
.LBB75_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB75_129:                             # %cond.end320
.LBB75_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB75_131:                             # %if.end331
	jmp	.LBB75_132
.LBB75_132:                             # %if.end332
	jmp	.LBB75_330
.LBB75_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB75_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB75_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB75_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB75_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB75_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB75_139
.LBB75_138:                             # %cond.false345
                                        #   in Loop: Header=BB75_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB75_139:                             # %cond.end347
                                        #   in Loop: Header=BB75_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB75_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB75_145
.LBB75_141:                             # %cond.false352
                                        #   in Loop: Header=BB75_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB75_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB75_144
.LBB75_143:                             # %cond.false357
                                        #   in Loop: Header=BB75_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB75_144:                             # %cond.end359
                                        #   in Loop: Header=BB75_135 Depth=1
.LBB75_145:                             # %cond.end361
                                        #   in Loop: Header=BB75_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB75_146:                             # %for.cond363
                                        #   Parent Loop BB75_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB75_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB75_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB75_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB75_150
.LBB75_149:                             # %cond.false371
                                        #   in Loop: Header=BB75_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB75_150:                             # %cond.end373
                                        #   in Loop: Header=BB75_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB75_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB75_156
.LBB75_152:                             # %cond.false378
                                        #   in Loop: Header=BB75_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB75_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB75_155
.LBB75_154:                             # %cond.false383
                                        #   in Loop: Header=BB75_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB75_155:                             # %cond.end385
                                        #   in Loop: Header=BB75_146 Depth=2
.LBB75_156:                             # %cond.end387
                                        #   in Loop: Header=BB75_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB75_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_146
.LBB75_158:                             # %for.end401
                                        #   in Loop: Header=BB75_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB75_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_135
.LBB75_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB75_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB75_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB75_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB75_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_161
.LBB75_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_167
.LBB75_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB75_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB75_173
.LBB75_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_172
.LBB75_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB75_172:                             # %cond.end449
.LBB75_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB75_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB75_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_177
.LBB75_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB75_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB75_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB75_183
.LBB75_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB75_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_182
.LBB75_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB75_182:                             # %cond.end486
.LBB75_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB75_196
.LBB75_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB75_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB75_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_188
.LBB75_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB75_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB75_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB75_194
.LBB75_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB75_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_193
.LBB75_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB75_193:                             # %cond.end526
.LBB75_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB75_195:                             # %if.end532
	jmp	.LBB75_196
.LBB75_196:                             # %if.end533
	jmp	.LBB75_329
.LBB75_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB75_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB75_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB75_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB75_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB75_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB75_203
.LBB75_202:                             # %cond.false546
                                        #   in Loop: Header=BB75_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB75_203:                             # %cond.end548
                                        #   in Loop: Header=BB75_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB75_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB75_209
.LBB75_205:                             # %cond.false553
                                        #   in Loop: Header=BB75_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB75_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB75_208
.LBB75_207:                             # %cond.false558
                                        #   in Loop: Header=BB75_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB75_208:                             # %cond.end560
                                        #   in Loop: Header=BB75_199 Depth=1
.LBB75_209:                             # %cond.end562
                                        #   in Loop: Header=BB75_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB75_210:                             # %for.cond564
                                        #   Parent Loop BB75_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB75_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB75_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB75_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB75_214
.LBB75_213:                             # %cond.false572
                                        #   in Loop: Header=BB75_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB75_214:                             # %cond.end574
                                        #   in Loop: Header=BB75_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB75_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB75_220
.LBB75_216:                             # %cond.false579
                                        #   in Loop: Header=BB75_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB75_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB75_219
.LBB75_218:                             # %cond.false584
                                        #   in Loop: Header=BB75_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB75_219:                             # %cond.end586
                                        #   in Loop: Header=BB75_210 Depth=2
.LBB75_220:                             # %cond.end588
                                        #   in Loop: Header=BB75_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB75_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_210
.LBB75_222:                             # %for.end602
                                        #   in Loop: Header=BB75_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB75_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_199
.LBB75_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB75_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB75_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB75_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB75_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_225
.LBB75_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_231
.LBB75_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB75_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB75_237
.LBB75_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_236
.LBB75_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB75_236:                             # %cond.end650
.LBB75_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB75_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB75_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_241
.LBB75_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB75_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB75_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB75_247
.LBB75_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB75_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_246
.LBB75_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB75_246:                             # %cond.end687
.LBB75_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB75_258
.LBB75_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB75_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_251
.LBB75_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB75_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB75_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB75_257
.LBB75_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB75_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_256
.LBB75_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB75_256:                             # %cond.end724
.LBB75_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB75_258:                             # %if.end730
	jmp	.LBB75_328
.LBB75_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB75_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB75_262
.LBB75_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB75_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB75_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB75_265
.LBB75_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB75_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB75_271
.LBB75_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB75_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB75_270
.LBB75_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB75_270:                             # %cond.end753
.LBB75_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB75_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB75_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB75_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB75_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB75_276
.LBB75_275:                             # %cond.false765
                                        #   in Loop: Header=BB75_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB75_276:                             # %cond.end767
                                        #   in Loop: Header=BB75_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB75_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB75_282
.LBB75_278:                             # %cond.false772
                                        #   in Loop: Header=BB75_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB75_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB75_281
.LBB75_280:                             # %cond.false777
                                        #   in Loop: Header=BB75_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB75_281:                             # %cond.end779
                                        #   in Loop: Header=BB75_272 Depth=1
.LBB75_282:                             # %cond.end781
                                        #   in Loop: Header=BB75_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB75_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_272
.LBB75_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_287
.LBB75_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB75_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB75_293
.LBB75_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_292
.LBB75_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB75_292:                             # %cond.end822
.LBB75_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB75_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB75_296
.LBB75_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB75_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB75_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB75_299
.LBB75_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB75_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB75_305
.LBB75_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB75_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB75_304
.LBB75_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB75_304:                             # %cond.end847
.LBB75_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB75_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB75_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB75_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB75_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB75_310
.LBB75_309:                             # %cond.false859
                                        #   in Loop: Header=BB75_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB75_310:                             # %cond.end861
                                        #   in Loop: Header=BB75_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB75_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB75_316
.LBB75_312:                             # %cond.false866
                                        #   in Loop: Header=BB75_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB75_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB75_315
.LBB75_314:                             # %cond.false871
                                        #   in Loop: Header=BB75_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB75_315:                             # %cond.end873
                                        #   in Loop: Header=BB75_306 Depth=1
.LBB75_316:                             # %cond.end875
                                        #   in Loop: Header=BB75_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB75_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_306
.LBB75_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_321
.LBB75_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB75_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB75_327
.LBB75_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_326
.LBB75_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB75_326:                             # %cond.end916
.LBB75_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB75_328:                             # %if.end922
	jmp	.LBB75_329
.LBB75_329:                             # %if.end923
	jmp	.LBB75_330
.LBB75_330:                             # %if.end924
	jmp	.LBB75_331
.LBB75_331:                             # %if.end925
	jmp	.LBB75_332
.LBB75_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1610616785, -104(%rbp) # imm = 0x60000FD1
	jne	.LBB75_334
.LBB75_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_333
.Lfunc_end75:
	.size	Get_Reference_Pixel.65, .Lfunc_end75-Get_Reference_Pixel.65
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.66    # -- Begin function Error_Concealment.66
	.p2align	4, 0x90
	.type	Error_Concealment.66,@function
Error_Concealment.66:                   # @Error_Concealment.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1628784881, -16(%rbp)  # imm = 0x611548F1
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB76_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB76_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_3:                               # %for.cond2
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB76_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB76_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB76_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB76_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB76_6:                               # %if.end
                                        #   in Loop: Header=BB76_3 Depth=2
	jmp	.LBB76_7
.LBB76_7:                               # %for.inc
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_3
.LBB76_8:                               # %for.end
                                        #   in Loop: Header=BB76_1 Depth=1
	jmp	.LBB76_9
.LBB76_9:                               # %for.inc7
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_1
.LBB76_10:                              # %for.end9
	cmpl	$1628784881, -16(%rbp)  # imm = 0x611548F1
	jne	.LBB76_12
.LBB76_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_11
.Lfunc_end76:
	.size	Error_Concealment.66, .Lfunc_end76-Error_Concealment.66
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.67
.LCPI77_0:
	.quad	4636737291354636288     # double 100
.LCPI77_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.67
	.p2align	4, 0x90
	.type	Build_Status_Map.67,@function
Build_Status_Map.67:                    # @Build_Status_Map.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1547306564, -44(%rbp)  # imm = 0x5C3A0644
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB77_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB77_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_3:                               # %for.cond2
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB77_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB77_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB77_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB77_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB77_13
.LBB77_6:                               # %if.then
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI77_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI77_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB77_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB77_8:                               # %if.end
                                        #   in Loop: Header=BB77_3 Depth=2
	callq	rand
	vmovsd	.LCPI77_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI77_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB77_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB77_10:                              # %if.end20
                                        #   in Loop: Header=BB77_3 Depth=2
	callq	rand
	vmovsd	.LCPI77_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI77_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB77_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	$1, -4(%rbp)
.LBB77_12:                              # %if.end29
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB77_13:                              # %if.end30
                                        #   in Loop: Header=BB77_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB77_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB77_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB77_18
.LBB77_15:                              # %if.else
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB77_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB77_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB77_17:                              # %if.end49
                                        #   in Loop: Header=BB77_3 Depth=2
	jmp	.LBB77_18
.LBB77_18:                              # %if.end50
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_3
.LBB77_20:                              # %for.end
                                        #   in Loop: Header=BB77_1 Depth=1
	jmp	.LBB77_21
.LBB77_21:                              # %for.inc53
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_1
.LBB77_22:                              # %for.end55
	cmpl	$1547306564, -44(%rbp)  # imm = 0x5C3A0644
	jne	.LBB77_24
.LBB77_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_23
.Lfunc_end77:
	.size	Build_Status_Map.67, .Lfunc_end77-Build_Status_Map.67
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.68       # -- Begin function DecOneForthPix.68
	.p2align	4, 0x90
	.type	DecOneForthPix.68,@function
DecOneForthPix.68:                      # @DecOneForthPix.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2090075958, -8(%rbp)   # imm = 0x7C940736
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB78_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB78_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB78_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_1
.LBB78_4:                               # %for.end
	cmpl	$2090075958, -8(%rbp)   # imm = 0x7C940736
	jne	.LBB78_6
.LBB78_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_5
.Lfunc_end78:
	.size	DecOneForthPix.68, .Lfunc_end78-DecOneForthPix.68
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.69        # -- Begin function Conceal_Error.69
	.p2align	4, 0x90
	.type	Conceal_Error.69,@function
Conceal_Error.69:                       # @Conceal_Error.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1693174983, -68(%rbp)  # imm = 0x64EBCCC7
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB79_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB79_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB79_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB79_4:                               # %land.end
.LBB79_5:                               # %lor.end
.LBB79_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB79_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB79_9
.LBB79_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB79_14
.LBB79_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB79_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB79_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB79_12:                              # %land.end51
.LBB79_13:                              # %lor.end53
.LBB79_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB79_180
# %bb.15:                               # %land.end54
	movq	.LJTI79_0(,%rax,8), %rax
	jmpq	*%rax
.LBB79_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB79_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB79_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB79_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB79_18 Depth=1
	movl	$0, -4(%rbp)
.LBB79_20:                              # %for.cond68
                                        #   Parent Loop BB79_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB79_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB79_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB79_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_20
.LBB79_23:                              # %for.end
                                        #   in Loop: Header=BB79_18 Depth=1
	jmp	.LBB79_24
.LBB79_24:                              # %for.inc85
                                        #   in Loop: Header=BB79_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_18
.LBB79_25:                              # %for.end87
	jmp	.LBB79_35
.LBB79_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB79_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB79_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB79_27 Depth=1
	movl	$0, -4(%rbp)
.LBB79_29:                              # %for.cond92
                                        #   Parent Loop BB79_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB79_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB79_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB79_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_29
.LBB79_32:                              # %for.end104
                                        #   in Loop: Header=BB79_27 Depth=1
	jmp	.LBB79_33
.LBB79_33:                              # %for.inc105
                                        #   in Loop: Header=BB79_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_27
.LBB79_34:                              # %for.end107
	jmp	.LBB79_35
.LBB79_35:                              # %if.end
	jmp	.LBB79_180
.LBB79_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB79_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_39 Depth 2
                                        #       Child Loop BB79_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB79_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB79_37 Depth=1
	movl	$0, -16(%rbp)
.LBB79_39:                              # %for.cond113
                                        #   Parent Loop BB79_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB79_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB79_39 Depth=2
	movl	$0, -4(%rbp)
.LBB79_41:                              # %for.cond117
                                        #   Parent Loop BB79_37 Depth=1
                                        #     Parent Loop BB79_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB79_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB79_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB79_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_41
.LBB79_44:                              # %for.end141
                                        #   in Loop: Header=BB79_39 Depth=2
	jmp	.LBB79_45
.LBB79_45:                              # %for.inc142
                                        #   in Loop: Header=BB79_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_39
.LBB79_46:                              # %for.end144
                                        #   in Loop: Header=BB79_37 Depth=1
	jmp	.LBB79_47
.LBB79_47:                              # %for.inc145
                                        #   in Loop: Header=BB79_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_37
.LBB79_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB79_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB79_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB79_49 Depth=1
	movl	$0, -8(%rbp)
.LBB79_51:                              # %for.cond152
                                        #   Parent Loop BB79_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB79_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB79_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB79_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_51
.LBB79_54:                              # %for.end162
                                        #   in Loop: Header=BB79_49 Depth=1
	jmp	.LBB79_55
.LBB79_55:                              # %for.inc163
                                        #   in Loop: Header=BB79_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_49
.LBB79_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB79_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB79_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB79_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB79_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB79_59 Depth=1
	movl	$0, -4(%rbp)
.LBB79_61:                              # %for.cond175
                                        #   Parent Loop BB79_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB79_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB79_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB79_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_61
.LBB79_64:                              # %for.end195
                                        #   in Loop: Header=BB79_59 Depth=1
	jmp	.LBB79_65
.LBB79_65:                              # %for.inc196
                                        #   in Loop: Header=BB79_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_59
.LBB79_66:                              # %for.end198
	jmp	.LBB79_95
.LBB79_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB79_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB79_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_71 Depth 2
                                        #       Child Loop BB79_73 Depth 3
                                        #         Child Loop BB79_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB79_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB79_71:                              # %for.cond210
                                        #   Parent Loop BB79_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_73 Depth 3
                                        #         Child Loop BB79_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB79_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB79_73:                              # %for.cond236
                                        #   Parent Loop BB79_69 Depth=1
                                        #     Parent Loop BB79_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB79_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB79_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB79_73 Depth=3
	movl	$0, -4(%rbp)
.LBB79_75:                              # %for.cond240
                                        #   Parent Loop BB79_69 Depth=1
                                        #     Parent Loop BB79_71 Depth=2
                                        #       Parent Loop BB79_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB79_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB79_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB79_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_75
.LBB79_78:                              # %for.end259
                                        #   in Loop: Header=BB79_73 Depth=3
	jmp	.LBB79_79
.LBB79_79:                              # %for.inc260
                                        #   in Loop: Header=BB79_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_73
.LBB79_80:                              # %for.end262
                                        #   in Loop: Header=BB79_71 Depth=2
	jmp	.LBB79_81
.LBB79_81:                              # %for.inc263
                                        #   in Loop: Header=BB79_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_71
.LBB79_82:                              # %for.end265
                                        #   in Loop: Header=BB79_69 Depth=1
	jmp	.LBB79_83
.LBB79_83:                              # %for.inc266
                                        #   in Loop: Header=BB79_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_69
.LBB79_84:                              # %for.end268
	jmp	.LBB79_94
.LBB79_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB79_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB79_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB79_86 Depth=1
	movl	$0, -4(%rbp)
.LBB79_88:                              # %for.cond274
                                        #   Parent Loop BB79_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB79_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB79_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB79_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_88
.LBB79_91:                              # %for.end294
                                        #   in Loop: Header=BB79_86 Depth=1
	jmp	.LBB79_92
.LBB79_92:                              # %for.inc295
                                        #   in Loop: Header=BB79_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_86
.LBB79_93:                              # %for.end297
	jmp	.LBB79_94
.LBB79_94:                              # %if.end298
	jmp	.LBB79_95
.LBB79_95:                              # %if.end299
	jmp	.LBB79_105
.LBB79_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB79_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB79_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB79_97 Depth=1
	movl	$0, -4(%rbp)
.LBB79_99:                              # %for.cond305
                                        #   Parent Loop BB79_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB79_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB79_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB79_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_99
.LBB79_102:                             # %for.end317
                                        #   in Loop: Header=BB79_97 Depth=1
	jmp	.LBB79_103
.LBB79_103:                             # %for.inc318
                                        #   in Loop: Header=BB79_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_97
.LBB79_104:                             # %for.end320
	jmp	.LBB79_105
.LBB79_105:                             # %if.end321
	jmp	.LBB79_180
.LBB79_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB79_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB79_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_110 Depth 2
                                        #       Child Loop BB79_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB79_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB79_108 Depth=1
	movl	$0, -16(%rbp)
.LBB79_110:                             # %for.cond331
                                        #   Parent Loop BB79_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB79_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB79_110 Depth=2
	movl	$0, -4(%rbp)
.LBB79_112:                             # %for.cond335
                                        #   Parent Loop BB79_108 Depth=1
                                        #     Parent Loop BB79_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB79_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB79_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB79_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_112
.LBB79_115:                             # %for.end359
                                        #   in Loop: Header=BB79_110 Depth=2
	jmp	.LBB79_116
.LBB79_116:                             # %for.inc360
                                        #   in Loop: Header=BB79_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_110
.LBB79_117:                             # %for.end362
                                        #   in Loop: Header=BB79_108 Depth=1
	jmp	.LBB79_118
.LBB79_118:                             # %for.inc363
                                        #   in Loop: Header=BB79_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_108
.LBB79_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB79_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB79_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB79_120 Depth=1
	movl	$0, -8(%rbp)
.LBB79_122:                             # %for.cond370
                                        #   Parent Loop BB79_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB79_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB79_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB79_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_122
.LBB79_125:                             # %for.end380
                                        #   in Loop: Header=BB79_120 Depth=1
	jmp	.LBB79_126
.LBB79_126:                             # %for.inc381
                                        #   in Loop: Header=BB79_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_120
.LBB79_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB79_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB79_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB79_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB79_129 Depth=1
	movl	$0, -4(%rbp)
.LBB79_131:                             # %for.cond390
                                        #   Parent Loop BB79_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB79_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB79_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB79_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_131
.LBB79_134:                             # %for.end410
                                        #   in Loop: Header=BB79_129 Depth=1
	jmp	.LBB79_135
.LBB79_135:                             # %for.inc411
                                        #   in Loop: Header=BB79_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_129
.LBB79_136:                             # %for.end413
	jmp	.LBB79_156
.LBB79_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB79_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB79_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_141 Depth 2
                                        #       Child Loop BB79_143 Depth 3
                                        #         Child Loop BB79_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB79_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB79_141:                             # %for.cond425
                                        #   Parent Loop BB79_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_143 Depth 3
                                        #         Child Loop BB79_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB79_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB79_143:                             # %for.cond452
                                        #   Parent Loop BB79_139 Depth=1
                                        #     Parent Loop BB79_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB79_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB79_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB79_143 Depth=3
	movl	$0, -4(%rbp)
.LBB79_145:                             # %for.cond456
                                        #   Parent Loop BB79_139 Depth=1
                                        #     Parent Loop BB79_141 Depth=2
                                        #       Parent Loop BB79_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB79_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB79_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB79_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_145
.LBB79_148:                             # %for.end475
                                        #   in Loop: Header=BB79_143 Depth=3
	jmp	.LBB79_149
.LBB79_149:                             # %for.inc476
                                        #   in Loop: Header=BB79_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_143
.LBB79_150:                             # %for.end478
                                        #   in Loop: Header=BB79_141 Depth=2
	jmp	.LBB79_151
.LBB79_151:                             # %for.inc479
                                        #   in Loop: Header=BB79_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_141
.LBB79_152:                             # %for.end481
                                        #   in Loop: Header=BB79_139 Depth=1
	jmp	.LBB79_153
.LBB79_153:                             # %for.inc482
                                        #   in Loop: Header=BB79_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_139
.LBB79_154:                             # %for.end484
	jmp	.LBB79_155
.LBB79_155:                             # %if.end485
	jmp	.LBB79_156
.LBB79_156:                             # %if.end486
	jmp	.LBB79_157
.LBB79_157:                             # %if.end487
	jmp	.LBB79_180
.LBB79_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB79_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB79_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB79_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB79_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB79_161 Depth=1
	movl	$0, -4(%rbp)
.LBB79_163:                             # %for.cond499
                                        #   Parent Loop BB79_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB79_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB79_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB79_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_163
.LBB79_166:                             # %for.end519
                                        #   in Loop: Header=BB79_161 Depth=1
	jmp	.LBB79_167
.LBB79_167:                             # %for.inc520
                                        #   in Loop: Header=BB79_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_161
.LBB79_168:                             # %for.end522
	jmp	.LBB79_169
.LBB79_169:                             # %if.end523
	jmp	.LBB79_179
.LBB79_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB79_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB79_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB79_171 Depth=1
	movl	$0, -4(%rbp)
.LBB79_173:                             # %for.cond529
                                        #   Parent Loop BB79_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB79_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB79_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB79_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_173
.LBB79_176:                             # %for.end541
                                        #   in Loop: Header=BB79_171 Depth=1
	jmp	.LBB79_177
.LBB79_177:                             # %for.inc542
                                        #   in Loop: Header=BB79_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_171
.LBB79_178:                             # %for.end544
	jmp	.LBB79_179
.LBB79_179:                             # %if.end545
	jmp	.LBB79_180
.LBB79_180:                             # %sw.epilog
	cmpl	$1693174983, -68(%rbp)  # imm = 0x64EBCCC7
	jne	.LBB79_182
.LBB79_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_181
.Lfunc_end79:
	.size	Conceal_Error.69, .Lfunc_end79-Conceal_Error.69
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI79_0:
	.quad	.LBB79_16
	.quad	.LBB79_158
	.quad	.LBB79_106
	.quad	.LBB79_180
	.quad	.LBB79_36
                                        # -- End function
	.text
	.globl	Get_Reference_Block.70  # -- Begin function Get_Reference_Block.70
	.p2align	4, 0x90
	.type	Get_Reference_Block.70,@function
Get_Reference_Block.70:                 # @Get_Reference_Block.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1802937981, -12(%rbp)  # imm = 0x6B76A67D
	movq	%rdi, -56(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -16(%rbp)
	movq	%r9, -48(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -8(%rbp)
.LBB80_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB80_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -4(%rbp)
.LBB80_3:                               # %for.cond5
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB80_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB80_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-36(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-28(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB80_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_3
.LBB80_6:                               # %for.end
                                        #   in Loop: Header=BB80_1 Depth=1
	jmp	.LBB80_7
.LBB80_7:                               # %for.inc14
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_1
.LBB80_8:                               # %for.end16
	cmpl	$1802937981, -12(%rbp)  # imm = 0x6B76A67D
	jne	.LBB80_10
.LBB80_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_9
.Lfunc_end80:
	.size	Get_Reference_Block.70, .Lfunc_end80-Get_Reference_Block.70
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.71    # -- Begin function Error_Concealment.71
	.p2align	4, 0x90
	.type	Error_Concealment.71,@function
Error_Concealment.71:                   # @Error_Concealment.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$146591974, -20(%rbp)   # imm = 0x8BCD0E6
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB81_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB81_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	$0, -8(%rbp)
.LBB81_3:                               # %for.cond2
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB81_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB81_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB81_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB81_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB81_6:                               # %if.end
                                        #   in Loop: Header=BB81_3 Depth=2
	jmp	.LBB81_7
.LBB81_7:                               # %for.inc
                                        #   in Loop: Header=BB81_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_3
.LBB81_8:                               # %for.end
                                        #   in Loop: Header=BB81_1 Depth=1
	jmp	.LBB81_9
.LBB81_9:                               # %for.inc7
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_1
.LBB81_10:                              # %for.end9
	cmpl	$146591974, -20(%rbp)   # imm = 0x8BCD0E6
	jne	.LBB81_12
.LBB81_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_11
.Lfunc_end81:
	.size	Error_Concealment.71, .Lfunc_end81-Error_Concealment.71
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.72 # -- Begin function compute_residue_b8block.72
	.p2align	4, 0x90
	.type	compute_residue_b8block.72,@function
compute_residue_b8block.72:             # @compute_residue_b8block.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$36365726, -36(%rbp)    # imm = 0x22AE59E
	movl	%edi, -32(%rbp)
	movl	%esi, -24(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB82_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB82_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB82_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB82_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB82_4:                               # %for.cond4
                                        #   Parent Loop BB82_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB82_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB82_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB82_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_4
.LBB82_7:                               # %for.end
                                        #   in Loop: Header=BB82_2 Depth=1
	jmp	.LBB82_8
.LBB82_8:                               # %for.inc22
                                        #   in Loop: Header=BB82_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_2
.LBB82_9:                               # %for.end24
	jmp	.LBB82_19
.LBB82_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB82_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB82_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB82_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB82_13:                              # %for.cond29
                                        #   Parent Loop BB82_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB82_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB82_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB82_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_13
.LBB82_16:                              # %for.end56
                                        #   in Loop: Header=BB82_11 Depth=1
	jmp	.LBB82_17
.LBB82_17:                              # %for.inc57
                                        #   in Loop: Header=BB82_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_11
.LBB82_18:                              # %for.end59
	jmp	.LBB82_19
.LBB82_19:                              # %if.end
	cmpl	$36365726, -36(%rbp)    # imm = 0x22AE59E
	jne	.LBB82_21
.LBB82_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_20
.Lfunc_end82:
	.size	compute_residue_b8block.72, .Lfunc_end82-compute_residue_b8block.72
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.73
.LCPI83_0:
	.quad	4636737291354636288     # double 100
.LCPI83_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.73
	.p2align	4, 0x90
	.type	Build_Status_Map.73,@function
Build_Status_Map.73:                    # @Build_Status_Map.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$753818094, -36(%rbp)   # imm = 0x2CEE59EE
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB83_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB83_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -12(%rbp)
.LBB83_3:                               # %for.cond2
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB83_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB83_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB83_13
.LBB83_6:                               # %if.then
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI83_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI83_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB83_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB83_8:                               # %if.end
                                        #   in Loop: Header=BB83_3 Depth=2
	callq	rand
	vmovsd	.LCPI83_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI83_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB83_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB83_10:                              # %if.end20
                                        #   in Loop: Header=BB83_3 Depth=2
	callq	rand
	vmovsd	.LCPI83_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI83_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB83_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	$1, -4(%rbp)
.LBB83_12:                              # %if.end29
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB83_13:                              # %if.end30
                                        #   in Loop: Header=BB83_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB83_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB83_18
.LBB83_15:                              # %if.else
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB83_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB83_17:                              # %if.end49
                                        #   in Loop: Header=BB83_3 Depth=2
	jmp	.LBB83_18
.LBB83_18:                              # %if.end50
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_3
.LBB83_20:                              # %for.end
                                        #   in Loop: Header=BB83_1 Depth=1
	jmp	.LBB83_21
.LBB83_21:                              # %for.inc53
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_1
.LBB83_22:                              # %for.end55
	cmpl	$753818094, -36(%rbp)   # imm = 0x2CEE59EE
	jne	.LBB83_24
.LBB83_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_23
.Lfunc_end83:
	.size	Build_Status_Map.73, .Lfunc_end83-Build_Status_Map.73
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.74       # -- Begin function DecOneForthPix.74
	.p2align	4, 0x90
	.type	DecOneForthPix.74,@function
DecOneForthPix.74:                      # @DecOneForthPix.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1423682425, -8(%rbp)   # imm = 0x54DBAB79
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB84_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB84_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_1
.LBB84_4:                               # %for.end
	cmpl	$1423682425, -8(%rbp)   # imm = 0x54DBAB79
	jne	.LBB84_6
.LBB84_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_5
.Lfunc_end84:
	.size	DecOneForthPix.74, .Lfunc_end84-DecOneForthPix.74
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.75  # -- Begin function Get_Reference_Pixel.75
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.75,@function
Get_Reference_Pixel.75:                 # @Get_Reference_Pixel.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1701122761, -108(%rbp) # imm = 0x656512C9
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB85_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB85_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB85_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB85_5
.LBB85_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB85_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB85_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB85_11
.LBB85_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB85_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB85_10
.LBB85_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB85_10:                              # %cond.end14
.LBB85_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB85_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB85_14
.LBB85_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB85_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB85_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB85_20
.LBB85_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB85_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB85_19
.LBB85_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB85_19:                              # %cond.end29
.LBB85_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_332
.LBB85_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB85_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB85_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB85_25
.LBB85_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB85_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB85_31
.LBB85_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB85_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB85_30
.LBB85_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB85_30:                              # %cond.end52
.LBB85_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB85_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB85_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB85_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB85_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB85_36
.LBB85_35:                              # %cond.false61
                                        #   in Loop: Header=BB85_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_36:                              # %cond.end63
                                        #   in Loop: Header=BB85_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB85_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB85_42
.LBB85_38:                              # %cond.false68
                                        #   in Loop: Header=BB85_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB85_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB85_41
.LBB85_40:                              # %cond.false73
                                        #   in Loop: Header=BB85_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_41:                              # %cond.end75
                                        #   in Loop: Header=BB85_32 Depth=1
.LBB85_42:                              # %cond.end77
                                        #   in Loop: Header=BB85_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB85_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_32
.LBB85_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_47
.LBB85_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB85_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB85_53
.LBB85_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_52
.LBB85_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB85_52:                              # %cond.end113
.LBB85_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB85_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB85_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB85_57
.LBB85_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB85_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB85_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB85_63
.LBB85_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB85_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB85_62
.LBB85_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB85_62:                              # %cond.end136
.LBB85_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB85_76
.LBB85_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB85_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB85_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB85_68
.LBB85_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB85_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB85_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB85_74
.LBB85_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB85_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB85_73
.LBB85_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB85_73:                              # %cond.end169
.LBB85_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB85_75:                              # %if.end
	jmp	.LBB85_76
.LBB85_76:                              # %if.end178
	jmp	.LBB85_331
.LBB85_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB85_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB85_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB85_81
.LBB85_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB85_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB85_87
.LBB85_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB85_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB85_86
.LBB85_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB85_86:                              # %cond.end197
.LBB85_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB85_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB85_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB85_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB85_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB85_92
.LBB85_91:                              # %cond.false209
                                        #   in Loop: Header=BB85_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB85_92:                              # %cond.end211
                                        #   in Loop: Header=BB85_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB85_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB85_98
.LBB85_94:                              # %cond.false216
                                        #   in Loop: Header=BB85_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB85_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB85_97
.LBB85_96:                              # %cond.false221
                                        #   in Loop: Header=BB85_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB85_97:                              # %cond.end223
                                        #   in Loop: Header=BB85_88 Depth=1
.LBB85_98:                              # %cond.end225
                                        #   in Loop: Header=BB85_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB85_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_88
.LBB85_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_103
.LBB85_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB85_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB85_109
.LBB85_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_108
.LBB85_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB85_108:                             # %cond.end266
.LBB85_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB85_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB85_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB85_113
.LBB85_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB85_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB85_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB85_119
.LBB85_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB85_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB85_118
.LBB85_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB85_118:                             # %cond.end287
.LBB85_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB85_132
.LBB85_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB85_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB85_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB85_124
.LBB85_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB85_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB85_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB85_130
.LBB85_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB85_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB85_129
.LBB85_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB85_129:                             # %cond.end320
.LBB85_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB85_131:                             # %if.end331
	jmp	.LBB85_132
.LBB85_132:                             # %if.end332
	jmp	.LBB85_330
.LBB85_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB85_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB85_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB85_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB85_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB85_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB85_139
.LBB85_138:                             # %cond.false345
                                        #   in Loop: Header=BB85_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB85_139:                             # %cond.end347
                                        #   in Loop: Header=BB85_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB85_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB85_145
.LBB85_141:                             # %cond.false352
                                        #   in Loop: Header=BB85_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB85_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB85_144
.LBB85_143:                             # %cond.false357
                                        #   in Loop: Header=BB85_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB85_144:                             # %cond.end359
                                        #   in Loop: Header=BB85_135 Depth=1
.LBB85_145:                             # %cond.end361
                                        #   in Loop: Header=BB85_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB85_146:                             # %for.cond363
                                        #   Parent Loop BB85_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB85_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB85_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB85_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB85_150
.LBB85_149:                             # %cond.false371
                                        #   in Loop: Header=BB85_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_150:                             # %cond.end373
                                        #   in Loop: Header=BB85_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB85_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB85_156
.LBB85_152:                             # %cond.false378
                                        #   in Loop: Header=BB85_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB85_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB85_155
.LBB85_154:                             # %cond.false383
                                        #   in Loop: Header=BB85_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_155:                             # %cond.end385
                                        #   in Loop: Header=BB85_146 Depth=2
.LBB85_156:                             # %cond.end387
                                        #   in Loop: Header=BB85_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB85_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_146
.LBB85_158:                             # %for.end401
                                        #   in Loop: Header=BB85_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB85_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_135
.LBB85_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB85_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB85_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB85_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB85_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_161
.LBB85_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_167
.LBB85_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB85_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB85_173
.LBB85_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_172
.LBB85_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB85_172:                             # %cond.end449
.LBB85_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB85_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB85_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_177
.LBB85_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB85_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB85_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB85_183
.LBB85_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB85_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_182
.LBB85_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB85_182:                             # %cond.end486
.LBB85_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB85_196
.LBB85_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB85_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB85_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_188
.LBB85_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB85_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB85_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB85_194
.LBB85_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB85_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_193
.LBB85_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB85_193:                             # %cond.end526
.LBB85_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB85_195:                             # %if.end532
	jmp	.LBB85_196
.LBB85_196:                             # %if.end533
	jmp	.LBB85_329
.LBB85_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB85_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB85_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB85_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB85_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB85_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB85_203
.LBB85_202:                             # %cond.false546
                                        #   in Loop: Header=BB85_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_203:                             # %cond.end548
                                        #   in Loop: Header=BB85_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB85_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB85_209
.LBB85_205:                             # %cond.false553
                                        #   in Loop: Header=BB85_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB85_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB85_208
.LBB85_207:                             # %cond.false558
                                        #   in Loop: Header=BB85_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_208:                             # %cond.end560
                                        #   in Loop: Header=BB85_199 Depth=1
.LBB85_209:                             # %cond.end562
                                        #   in Loop: Header=BB85_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB85_210:                             # %for.cond564
                                        #   Parent Loop BB85_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB85_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB85_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB85_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB85_214
.LBB85_213:                             # %cond.false572
                                        #   in Loop: Header=BB85_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB85_214:                             # %cond.end574
                                        #   in Loop: Header=BB85_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB85_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB85_220
.LBB85_216:                             # %cond.false579
                                        #   in Loop: Header=BB85_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB85_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB85_219
.LBB85_218:                             # %cond.false584
                                        #   in Loop: Header=BB85_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB85_219:                             # %cond.end586
                                        #   in Loop: Header=BB85_210 Depth=2
.LBB85_220:                             # %cond.end588
                                        #   in Loop: Header=BB85_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB85_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_210
.LBB85_222:                             # %for.end602
                                        #   in Loop: Header=BB85_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB85_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_199
.LBB85_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB85_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB85_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB85_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB85_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_225
.LBB85_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_231
.LBB85_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB85_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB85_237
.LBB85_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_236
.LBB85_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB85_236:                             # %cond.end650
.LBB85_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB85_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB85_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_241
.LBB85_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB85_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB85_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB85_247
.LBB85_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB85_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_246
.LBB85_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB85_246:                             # %cond.end687
.LBB85_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB85_258
.LBB85_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB85_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_251
.LBB85_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB85_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB85_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB85_257
.LBB85_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB85_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_256
.LBB85_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB85_256:                             # %cond.end724
.LBB85_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB85_258:                             # %if.end730
	jmp	.LBB85_328
.LBB85_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB85_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB85_262
.LBB85_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB85_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB85_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB85_265
.LBB85_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB85_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB85_271
.LBB85_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB85_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB85_270
.LBB85_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB85_270:                             # %cond.end753
.LBB85_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB85_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB85_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB85_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB85_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB85_276
.LBB85_275:                             # %cond.false765
                                        #   in Loop: Header=BB85_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_276:                             # %cond.end767
                                        #   in Loop: Header=BB85_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB85_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB85_282
.LBB85_278:                             # %cond.false772
                                        #   in Loop: Header=BB85_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB85_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB85_281
.LBB85_280:                             # %cond.false777
                                        #   in Loop: Header=BB85_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_281:                             # %cond.end779
                                        #   in Loop: Header=BB85_272 Depth=1
.LBB85_282:                             # %cond.end781
                                        #   in Loop: Header=BB85_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB85_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_272
.LBB85_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_287
.LBB85_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB85_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB85_293
.LBB85_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_292
.LBB85_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB85_292:                             # %cond.end822
.LBB85_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB85_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB85_296
.LBB85_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB85_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB85_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB85_299
.LBB85_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB85_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB85_305
.LBB85_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB85_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB85_304
.LBB85_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB85_304:                             # %cond.end847
.LBB85_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB85_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB85_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB85_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB85_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB85_310
.LBB85_309:                             # %cond.false859
                                        #   in Loop: Header=BB85_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB85_310:                             # %cond.end861
                                        #   in Loop: Header=BB85_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB85_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB85_316
.LBB85_312:                             # %cond.false866
                                        #   in Loop: Header=BB85_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB85_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB85_315
.LBB85_314:                             # %cond.false871
                                        #   in Loop: Header=BB85_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB85_315:                             # %cond.end873
                                        #   in Loop: Header=BB85_306 Depth=1
.LBB85_316:                             # %cond.end875
                                        #   in Loop: Header=BB85_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB85_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_306
.LBB85_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_321
.LBB85_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB85_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB85_327
.LBB85_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_326
.LBB85_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB85_326:                             # %cond.end916
.LBB85_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-100(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB85_328:                             # %if.end922
	jmp	.LBB85_329
.LBB85_329:                             # %if.end923
	jmp	.LBB85_330
.LBB85_330:                             # %if.end924
	jmp	.LBB85_331
.LBB85_331:                             # %if.end925
	jmp	.LBB85_332
.LBB85_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1701122761, -108(%rbp) # imm = 0x656512C9
	jne	.LBB85_334
.LBB85_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_333
.Lfunc_end85:
	.size	Get_Reference_Pixel.75, .Lfunc_end85-Get_Reference_Pixel.75
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.76       # -- Begin function DecOneForthPix.76
	.p2align	4, 0x90
	.type	DecOneForthPix.76,@function
DecOneForthPix.76:                      # @DecOneForthPix.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1697804104, -12(%rbp)  # imm = 0x65326F48
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB86_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB86_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB86_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_1
.LBB86_4:                               # %for.end
	cmpl	$1697804104, -12(%rbp)  # imm = 0x65326F48
	jne	.LBB86_6
.LBB86_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_5
.Lfunc_end86:
	.size	DecOneForthPix.76, .Lfunc_end86-DecOneForthPix.76
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.77
.LCPI87_0:
	.quad	4636737291354636288     # double 100
.LCPI87_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.77
	.p2align	4, 0x90
	.type	Build_Status_Map.77,@function
Build_Status_Map.77:                    # @Build_Status_Map.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$949323414, -36(%rbp)   # imm = 0x38958696
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -12(%rbp)
.LBB87_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB87_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_3:                               # %for.cond2
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB87_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB87_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB87_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB87_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB87_13
.LBB87_6:                               # %if.then
                                        #   in Loop: Header=BB87_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI87_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI87_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB87_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB87_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB87_8:                               # %if.end
                                        #   in Loop: Header=BB87_3 Depth=2
	callq	rand
	vmovsd	.LCPI87_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI87_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB87_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB87_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB87_10:                              # %if.end20
                                        #   in Loop: Header=BB87_3 Depth=2
	callq	rand
	vmovsd	.LCPI87_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI87_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB87_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB87_3 Depth=2
	movl	$1, -4(%rbp)
.LBB87_12:                              # %if.end29
                                        #   in Loop: Header=BB87_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB87_13:                              # %if.end30
                                        #   in Loop: Header=BB87_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB87_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB87_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB87_18
.LBB87_15:                              # %if.else
                                        #   in Loop: Header=BB87_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB87_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB87_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB87_17:                              # %if.end49
                                        #   in Loop: Header=BB87_3 Depth=2
	jmp	.LBB87_18
.LBB87_18:                              # %if.end50
                                        #   in Loop: Header=BB87_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB87_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_3
.LBB87_20:                              # %for.end
                                        #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_21
.LBB87_21:                              # %for.inc53
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_1
.LBB87_22:                              # %for.end55
	cmpl	$949323414, -36(%rbp)   # imm = 0x38958696
	jne	.LBB87_24
.LBB87_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_23
.Lfunc_end87:
	.size	Build_Status_Map.77, .Lfunc_end87-Build_Status_Map.77
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.78  # -- Begin function Get_Reference_Pixel.78
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.78,@function
Get_Reference_Pixel.78:                 # @Get_Reference_Pixel.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$250285892, -100(%rbp)  # imm = 0xEEB0F44
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB88_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB88_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB88_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB88_5
.LBB88_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB88_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB88_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB88_11
.LBB88_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB88_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB88_10
.LBB88_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB88_10:                              # %cond.end14
.LBB88_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB88_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB88_14
.LBB88_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB88_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB88_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB88_20
.LBB88_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB88_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB88_19
.LBB88_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB88_19:                              # %cond.end29
.LBB88_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_332
.LBB88_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB88_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB88_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB88_25
.LBB88_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB88_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB88_31
.LBB88_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB88_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB88_30
.LBB88_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB88_30:                              # %cond.end52
.LBB88_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB88_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB88_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB88_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB88_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB88_36
.LBB88_35:                              # %cond.false61
                                        #   in Loop: Header=BB88_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB88_36:                              # %cond.end63
                                        #   in Loop: Header=BB88_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB88_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB88_42
.LBB88_38:                              # %cond.false68
                                        #   in Loop: Header=BB88_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB88_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB88_41
.LBB88_40:                              # %cond.false73
                                        #   in Loop: Header=BB88_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB88_41:                              # %cond.end75
                                        #   in Loop: Header=BB88_32 Depth=1
.LBB88_42:                              # %cond.end77
                                        #   in Loop: Header=BB88_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB88_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_32
.LBB88_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB88_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_47
.LBB88_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB88_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB88_53
.LBB88_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB88_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_52
.LBB88_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB88_52:                              # %cond.end113
.LBB88_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB88_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB88_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB88_57
.LBB88_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB88_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB88_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB88_63
.LBB88_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB88_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB88_62
.LBB88_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB88_62:                              # %cond.end136
.LBB88_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB88_76
.LBB88_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB88_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB88_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB88_68
.LBB88_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB88_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB88_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB88_74
.LBB88_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB88_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB88_73
.LBB88_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB88_73:                              # %cond.end169
.LBB88_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB88_75:                              # %if.end
	jmp	.LBB88_76
.LBB88_76:                              # %if.end178
	jmp	.LBB88_331
.LBB88_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB88_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB88_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB88_81
.LBB88_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB88_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB88_87
.LBB88_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB88_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB88_86
.LBB88_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB88_86:                              # %cond.end197
.LBB88_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB88_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB88_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB88_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB88_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB88_92
.LBB88_91:                              # %cond.false209
                                        #   in Loop: Header=BB88_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB88_92:                              # %cond.end211
                                        #   in Loop: Header=BB88_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB88_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB88_98
.LBB88_94:                              # %cond.false216
                                        #   in Loop: Header=BB88_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB88_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB88_97
.LBB88_96:                              # %cond.false221
                                        #   in Loop: Header=BB88_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB88_97:                              # %cond.end223
                                        #   in Loop: Header=BB88_88 Depth=1
.LBB88_98:                              # %cond.end225
                                        #   in Loop: Header=BB88_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB88_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB88_88
.LBB88_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB88_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_103
.LBB88_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB88_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB88_109
.LBB88_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB88_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_108
.LBB88_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB88_108:                             # %cond.end266
.LBB88_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB88_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB88_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB88_113
.LBB88_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB88_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB88_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB88_119
.LBB88_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB88_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB88_118
.LBB88_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB88_118:                             # %cond.end287
.LBB88_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB88_132
.LBB88_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB88_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB88_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB88_124
.LBB88_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB88_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB88_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB88_130
.LBB88_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB88_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB88_129
.LBB88_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB88_129:                             # %cond.end320
.LBB88_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB88_131:                             # %if.end331
	jmp	.LBB88_132
.LBB88_132:                             # %if.end332
	jmp	.LBB88_330
.LBB88_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB88_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB88_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB88_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB88_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB88_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB88_139
.LBB88_138:                             # %cond.false345
                                        #   in Loop: Header=BB88_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB88_139:                             # %cond.end347
                                        #   in Loop: Header=BB88_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB88_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB88_145
.LBB88_141:                             # %cond.false352
                                        #   in Loop: Header=BB88_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB88_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB88_144
.LBB88_143:                             # %cond.false357
                                        #   in Loop: Header=BB88_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB88_144:                             # %cond.end359
                                        #   in Loop: Header=BB88_135 Depth=1
.LBB88_145:                             # %cond.end361
                                        #   in Loop: Header=BB88_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB88_146:                             # %for.cond363
                                        #   Parent Loop BB88_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB88_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB88_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB88_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB88_150
.LBB88_149:                             # %cond.false371
                                        #   in Loop: Header=BB88_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB88_150:                             # %cond.end373
                                        #   in Loop: Header=BB88_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB88_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB88_156
.LBB88_152:                             # %cond.false378
                                        #   in Loop: Header=BB88_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB88_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB88_155
.LBB88_154:                             # %cond.false383
                                        #   in Loop: Header=BB88_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB88_155:                             # %cond.end385
                                        #   in Loop: Header=BB88_146 Depth=2
.LBB88_156:                             # %cond.end387
                                        #   in Loop: Header=BB88_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB88_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_146
.LBB88_158:                             # %for.end401
                                        #   in Loop: Header=BB88_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB88_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB88_135
.LBB88_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB88_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB88_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB88_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB88_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB88_161
.LBB88_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB88_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_167
.LBB88_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB88_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB88_173
.LBB88_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB88_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_172
.LBB88_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB88_172:                             # %cond.end449
.LBB88_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB88_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB88_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_177
.LBB88_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB88_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB88_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB88_183
.LBB88_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB88_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_182
.LBB88_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB88_182:                             # %cond.end486
.LBB88_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB88_196
.LBB88_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB88_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB88_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_188
.LBB88_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB88_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB88_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB88_194
.LBB88_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB88_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_193
.LBB88_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB88_193:                             # %cond.end526
.LBB88_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB88_195:                             # %if.end532
	jmp	.LBB88_196
.LBB88_196:                             # %if.end533
	jmp	.LBB88_329
.LBB88_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB88_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB88_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB88_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB88_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB88_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB88_203
.LBB88_202:                             # %cond.false546
                                        #   in Loop: Header=BB88_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB88_203:                             # %cond.end548
                                        #   in Loop: Header=BB88_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB88_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB88_209
.LBB88_205:                             # %cond.false553
                                        #   in Loop: Header=BB88_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB88_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB88_208
.LBB88_207:                             # %cond.false558
                                        #   in Loop: Header=BB88_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB88_208:                             # %cond.end560
                                        #   in Loop: Header=BB88_199 Depth=1
.LBB88_209:                             # %cond.end562
                                        #   in Loop: Header=BB88_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB88_210:                             # %for.cond564
                                        #   Parent Loop BB88_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB88_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB88_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB88_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB88_214
.LBB88_213:                             # %cond.false572
                                        #   in Loop: Header=BB88_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB88_214:                             # %cond.end574
                                        #   in Loop: Header=BB88_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB88_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB88_220
.LBB88_216:                             # %cond.false579
                                        #   in Loop: Header=BB88_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB88_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB88_219
.LBB88_218:                             # %cond.false584
                                        #   in Loop: Header=BB88_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB88_219:                             # %cond.end586
                                        #   in Loop: Header=BB88_210 Depth=2
.LBB88_220:                             # %cond.end588
                                        #   in Loop: Header=BB88_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB88_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB88_210
.LBB88_222:                             # %for.end602
                                        #   in Loop: Header=BB88_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB88_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_199
.LBB88_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB88_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB88_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB88_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB88_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_225
.LBB88_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB88_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_231
.LBB88_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB88_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB88_237
.LBB88_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB88_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_236
.LBB88_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB88_236:                             # %cond.end650
.LBB88_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB88_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB88_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_241
.LBB88_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB88_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB88_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB88_247
.LBB88_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB88_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_246
.LBB88_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB88_246:                             # %cond.end687
.LBB88_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB88_258
.LBB88_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB88_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_251
.LBB88_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB88_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB88_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB88_257
.LBB88_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB88_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_256
.LBB88_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB88_256:                             # %cond.end724
.LBB88_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB88_258:                             # %if.end730
	jmp	.LBB88_328
.LBB88_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB88_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB88_262
.LBB88_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB88_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB88_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB88_265
.LBB88_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB88_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB88_271
.LBB88_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB88_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB88_270
.LBB88_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB88_270:                             # %cond.end753
.LBB88_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB88_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB88_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB88_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB88_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB88_276
.LBB88_275:                             # %cond.false765
                                        #   in Loop: Header=BB88_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB88_276:                             # %cond.end767
                                        #   in Loop: Header=BB88_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB88_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB88_282
.LBB88_278:                             # %cond.false772
                                        #   in Loop: Header=BB88_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB88_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB88_281
.LBB88_280:                             # %cond.false777
                                        #   in Loop: Header=BB88_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB88_281:                             # %cond.end779
                                        #   in Loop: Header=BB88_272 Depth=1
.LBB88_282:                             # %cond.end781
                                        #   in Loop: Header=BB88_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB88_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_272
.LBB88_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB88_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_287
.LBB88_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB88_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB88_293
.LBB88_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB88_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_292
.LBB88_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB88_292:                             # %cond.end822
.LBB88_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB88_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB88_296
.LBB88_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB88_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB88_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB88_299
.LBB88_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB88_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB88_305
.LBB88_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB88_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB88_304
.LBB88_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB88_304:                             # %cond.end847
.LBB88_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB88_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB88_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB88_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB88_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB88_310
.LBB88_309:                             # %cond.false859
                                        #   in Loop: Header=BB88_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB88_310:                             # %cond.end861
                                        #   in Loop: Header=BB88_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB88_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB88_316
.LBB88_312:                             # %cond.false866
                                        #   in Loop: Header=BB88_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB88_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB88_315
.LBB88_314:                             # %cond.false871
                                        #   in Loop: Header=BB88_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB88_315:                             # %cond.end873
                                        #   in Loop: Header=BB88_306 Depth=1
.LBB88_316:                             # %cond.end875
                                        #   in Loop: Header=BB88_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB88_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB88_306
.LBB88_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB88_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_321
.LBB88_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB88_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB88_327
.LBB88_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB88_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_326
.LBB88_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB88_326:                             # %cond.end916
.LBB88_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB88_328:                             # %if.end922
	jmp	.LBB88_329
.LBB88_329:                             # %if.end923
	jmp	.LBB88_330
.LBB88_330:                             # %if.end924
	jmp	.LBB88_331
.LBB88_331:                             # %if.end925
	jmp	.LBB88_332
.LBB88_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$250285892, -100(%rbp)  # imm = 0xEEB0F44
	jne	.LBB88_334
.LBB88_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_333
.Lfunc_end88:
	.size	Get_Reference_Pixel.78, .Lfunc_end88-Get_Reference_Pixel.78
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.79  # -- Begin function Get_Reference_Pixel.79
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.79,@function
Get_Reference_Pixel.79:                 # @Get_Reference_Pixel.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1691076952, -104(%rbp) # imm = 0x64CBC958
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB89_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB89_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB89_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB89_5
.LBB89_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB89_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB89_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB89_11
.LBB89_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB89_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB89_10
.LBB89_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB89_10:                              # %cond.end14
.LBB89_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB89_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB89_14
.LBB89_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB89_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB89_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB89_20
.LBB89_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB89_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB89_19
.LBB89_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB89_19:                              # %cond.end29
.LBB89_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_332
.LBB89_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB89_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB89_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB89_25
.LBB89_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB89_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB89_31
.LBB89_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB89_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB89_30
.LBB89_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB89_30:                              # %cond.end52
.LBB89_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB89_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB89_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_36
.LBB89_35:                              # %cond.false61
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_36:                              # %cond.end63
                                        #   in Loop: Header=BB89_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB89_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_42
.LBB89_38:                              # %cond.false68
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_41
.LBB89_40:                              # %cond.false73
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_41:                              # %cond.end75
                                        #   in Loop: Header=BB89_32 Depth=1
.LBB89_42:                              # %cond.end77
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_32
.LBB89_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_47
.LBB89_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB89_53
.LBB89_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_52
.LBB89_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_52:                              # %cond.end113
.LBB89_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB89_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB89_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB89_57
.LBB89_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB89_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB89_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB89_63
.LBB89_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB89_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB89_62
.LBB89_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB89_62:                              # %cond.end136
.LBB89_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB89_76
.LBB89_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB89_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB89_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB89_68
.LBB89_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB89_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB89_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB89_74
.LBB89_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB89_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB89_73
.LBB89_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB89_73:                              # %cond.end169
.LBB89_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB89_75:                              # %if.end
	jmp	.LBB89_76
.LBB89_76:                              # %if.end178
	jmp	.LBB89_331
.LBB89_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB89_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB89_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB89_81
.LBB89_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB89_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB89_87
.LBB89_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB89_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB89_86
.LBB89_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB89_86:                              # %cond.end197
.LBB89_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB89_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB89_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_92
.LBB89_91:                              # %cond.false209
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_92:                              # %cond.end211
                                        #   in Loop: Header=BB89_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB89_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_98
.LBB89_94:                              # %cond.false216
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_97
.LBB89_96:                              # %cond.false221
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_97:                              # %cond.end223
                                        #   in Loop: Header=BB89_88 Depth=1
.LBB89_98:                              # %cond.end225
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_88
.LBB89_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_103
.LBB89_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB89_109
.LBB89_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_108
.LBB89_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_108:                             # %cond.end266
.LBB89_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB89_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB89_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB89_113
.LBB89_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB89_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB89_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB89_119
.LBB89_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB89_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB89_118
.LBB89_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB89_118:                             # %cond.end287
.LBB89_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB89_132
.LBB89_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB89_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB89_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB89_124
.LBB89_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB89_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB89_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB89_130
.LBB89_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB89_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB89_129
.LBB89_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB89_129:                             # %cond.end320
.LBB89_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB89_131:                             # %if.end331
	jmp	.LBB89_132
.LBB89_132:                             # %if.end332
	jmp	.LBB89_330
.LBB89_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB89_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB89_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB89_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_139
.LBB89_138:                             # %cond.false345
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_139:                             # %cond.end347
                                        #   in Loop: Header=BB89_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB89_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_145
.LBB89_141:                             # %cond.false352
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_144
.LBB89_143:                             # %cond.false357
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_144:                             # %cond.end359
                                        #   in Loop: Header=BB89_135 Depth=1
.LBB89_145:                             # %cond.end361
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB89_146:                             # %for.cond363
                                        #   Parent Loop BB89_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB89_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB89_150
.LBB89_149:                             # %cond.false371
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_150:                             # %cond.end373
                                        #   in Loop: Header=BB89_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB89_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_156
.LBB89_152:                             # %cond.false378
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB89_155
.LBB89_154:                             # %cond.false383
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_155:                             # %cond.end385
                                        #   in Loop: Header=BB89_146 Depth=2
.LBB89_156:                             # %cond.end387
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_146
.LBB89_158:                             # %for.end401
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_135
.LBB89_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB89_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB89_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB89_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB89_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_161
.LBB89_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_167
.LBB89_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB89_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB89_173
.LBB89_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_172
.LBB89_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB89_172:                             # %cond.end449
.LBB89_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB89_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_177
.LBB89_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB89_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB89_183
.LBB89_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_182
.LBB89_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_182:                             # %cond.end486
.LBB89_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB89_196
.LBB89_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB89_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_188
.LBB89_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB89_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB89_194
.LBB89_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_193
.LBB89_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_193:                             # %cond.end526
.LBB89_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB89_195:                             # %if.end532
	jmp	.LBB89_196
.LBB89_196:                             # %if.end533
	jmp	.LBB89_329
.LBB89_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB89_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB89_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB89_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_203
.LBB89_202:                             # %cond.false546
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_203:                             # %cond.end548
                                        #   in Loop: Header=BB89_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB89_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_209
.LBB89_205:                             # %cond.false553
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_208
.LBB89_207:                             # %cond.false558
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_208:                             # %cond.end560
                                        #   in Loop: Header=BB89_199 Depth=1
.LBB89_209:                             # %cond.end562
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB89_210:                             # %for.cond564
                                        #   Parent Loop BB89_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB89_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB89_214
.LBB89_213:                             # %cond.false572
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_214:                             # %cond.end574
                                        #   in Loop: Header=BB89_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB89_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_220
.LBB89_216:                             # %cond.false579
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB89_219
.LBB89_218:                             # %cond.false584
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_219:                             # %cond.end586
                                        #   in Loop: Header=BB89_210 Depth=2
.LBB89_220:                             # %cond.end588
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_210
.LBB89_222:                             # %for.end602
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_199
.LBB89_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB89_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB89_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB89_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB89_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_225
.LBB89_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_231
.LBB89_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB89_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB89_237
.LBB89_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_236
.LBB89_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB89_236:                             # %cond.end650
.LBB89_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB89_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_241
.LBB89_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB89_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB89_247
.LBB89_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_246
.LBB89_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_246:                             # %cond.end687
.LBB89_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB89_258
.LBB89_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_251
.LBB89_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB89_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB89_257
.LBB89_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_256
.LBB89_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_256:                             # %cond.end724
.LBB89_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB89_258:                             # %if.end730
	jmp	.LBB89_328
.LBB89_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB89_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB89_262
.LBB89_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB89_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB89_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB89_265
.LBB89_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB89_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB89_271
.LBB89_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB89_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB89_270
.LBB89_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB89_270:                             # %cond.end753
.LBB89_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB89_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB89_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_276
.LBB89_275:                             # %cond.false765
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_276:                             # %cond.end767
                                        #   in Loop: Header=BB89_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB89_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_282
.LBB89_278:                             # %cond.false772
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_281
.LBB89_280:                             # %cond.false777
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_281:                             # %cond.end779
                                        #   in Loop: Header=BB89_272 Depth=1
.LBB89_282:                             # %cond.end781
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_272
.LBB89_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_287
.LBB89_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB89_293
.LBB89_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_292
.LBB89_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_292:                             # %cond.end822
.LBB89_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB89_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB89_296
.LBB89_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB89_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB89_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB89_299
.LBB89_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB89_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB89_305
.LBB89_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB89_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB89_304
.LBB89_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB89_304:                             # %cond.end847
.LBB89_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB89_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB89_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_310
.LBB89_309:                             # %cond.false859
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_310:                             # %cond.end861
                                        #   in Loop: Header=BB89_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB89_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_316
.LBB89_312:                             # %cond.false866
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_315
.LBB89_314:                             # %cond.false871
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_315:                             # %cond.end873
                                        #   in Loop: Header=BB89_306 Depth=1
.LBB89_316:                             # %cond.end875
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_306
.LBB89_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_321
.LBB89_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB89_327
.LBB89_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_326
.LBB89_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_326:                             # %cond.end916
.LBB89_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB89_328:                             # %if.end922
	jmp	.LBB89_329
.LBB89_329:                             # %if.end923
	jmp	.LBB89_330
.LBB89_330:                             # %if.end924
	jmp	.LBB89_331
.LBB89_331:                             # %if.end925
	jmp	.LBB89_332
.LBB89_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1691076952, -104(%rbp) # imm = 0x64CBC958
	jne	.LBB89_334
.LBB89_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_333
.Lfunc_end89:
	.size	Get_Reference_Pixel.79, .Lfunc_end89-Get_Reference_Pixel.79
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.80        # -- Begin function Conceal_Error.80
	.p2align	4, 0x90
	.type	Conceal_Error.80,@function
Conceal_Error.80:                       # @Conceal_Error.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$788270620, -68(%rbp)   # imm = 0x2EFC0E1C
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB90_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB90_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB90_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB90_4:                               # %land.end
.LBB90_5:                               # %lor.end
.LBB90_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB90_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB90_9
.LBB90_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB90_14
.LBB90_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB90_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB90_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB90_12:                              # %land.end51
.LBB90_13:                              # %lor.end53
.LBB90_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB90_180
# %bb.15:                               # %land.end54
	movq	.LJTI90_0(,%rax,8), %rax
	jmpq	*%rax
.LBB90_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB90_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB90_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB90_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB90_18 Depth=1
	movl	$0, -4(%rbp)
.LBB90_20:                              # %for.cond68
                                        #   Parent Loop BB90_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB90_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB90_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB90_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_20
.LBB90_23:                              # %for.end
                                        #   in Loop: Header=BB90_18 Depth=1
	jmp	.LBB90_24
.LBB90_24:                              # %for.inc85
                                        #   in Loop: Header=BB90_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_18
.LBB90_25:                              # %for.end87
	jmp	.LBB90_35
.LBB90_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB90_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB90_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB90_27 Depth=1
	movl	$0, -4(%rbp)
.LBB90_29:                              # %for.cond92
                                        #   Parent Loop BB90_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB90_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB90_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB90_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_29
.LBB90_32:                              # %for.end104
                                        #   in Loop: Header=BB90_27 Depth=1
	jmp	.LBB90_33
.LBB90_33:                              # %for.inc105
                                        #   in Loop: Header=BB90_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_27
.LBB90_34:                              # %for.end107
	jmp	.LBB90_35
.LBB90_35:                              # %if.end
	jmp	.LBB90_180
.LBB90_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB90_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_39 Depth 2
                                        #       Child Loop BB90_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB90_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB90_37 Depth=1
	movl	$0, -16(%rbp)
.LBB90_39:                              # %for.cond113
                                        #   Parent Loop BB90_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB90_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB90_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB90_39 Depth=2
	movl	$0, -4(%rbp)
.LBB90_41:                              # %for.cond117
                                        #   Parent Loop BB90_37 Depth=1
                                        #     Parent Loop BB90_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB90_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB90_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB90_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_41
.LBB90_44:                              # %for.end141
                                        #   in Loop: Header=BB90_39 Depth=2
	jmp	.LBB90_45
.LBB90_45:                              # %for.inc142
                                        #   in Loop: Header=BB90_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_39
.LBB90_46:                              # %for.end144
                                        #   in Loop: Header=BB90_37 Depth=1
	jmp	.LBB90_47
.LBB90_47:                              # %for.inc145
                                        #   in Loop: Header=BB90_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_37
.LBB90_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB90_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB90_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB90_49 Depth=1
	movl	$0, -8(%rbp)
.LBB90_51:                              # %for.cond152
                                        #   Parent Loop BB90_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB90_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB90_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB90_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_51
.LBB90_54:                              # %for.end162
                                        #   in Loop: Header=BB90_49 Depth=1
	jmp	.LBB90_55
.LBB90_55:                              # %for.inc163
                                        #   in Loop: Header=BB90_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_49
.LBB90_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB90_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB90_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB90_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB90_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB90_59 Depth=1
	movl	$0, -4(%rbp)
.LBB90_61:                              # %for.cond175
                                        #   Parent Loop BB90_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB90_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB90_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB90_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_61
.LBB90_64:                              # %for.end195
                                        #   in Loop: Header=BB90_59 Depth=1
	jmp	.LBB90_65
.LBB90_65:                              # %for.inc196
                                        #   in Loop: Header=BB90_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_59
.LBB90_66:                              # %for.end198
	jmp	.LBB90_95
.LBB90_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB90_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB90_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_71 Depth 2
                                        #       Child Loop BB90_73 Depth 3
                                        #         Child Loop BB90_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB90_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB90_71:                              # %for.cond210
                                        #   Parent Loop BB90_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB90_73 Depth 3
                                        #         Child Loop BB90_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB90_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB90_73:                              # %for.cond236
                                        #   Parent Loop BB90_69 Depth=1
                                        #     Parent Loop BB90_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB90_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB90_73 Depth=3
	movl	$0, -4(%rbp)
.LBB90_75:                              # %for.cond240
                                        #   Parent Loop BB90_69 Depth=1
                                        #     Parent Loop BB90_71 Depth=2
                                        #       Parent Loop BB90_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB90_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB90_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB90_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_75
.LBB90_78:                              # %for.end259
                                        #   in Loop: Header=BB90_73 Depth=3
	jmp	.LBB90_79
.LBB90_79:                              # %for.inc260
                                        #   in Loop: Header=BB90_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_73
.LBB90_80:                              # %for.end262
                                        #   in Loop: Header=BB90_71 Depth=2
	jmp	.LBB90_81
.LBB90_81:                              # %for.inc263
                                        #   in Loop: Header=BB90_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_71
.LBB90_82:                              # %for.end265
                                        #   in Loop: Header=BB90_69 Depth=1
	jmp	.LBB90_83
.LBB90_83:                              # %for.inc266
                                        #   in Loop: Header=BB90_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_69
.LBB90_84:                              # %for.end268
	jmp	.LBB90_94
.LBB90_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB90_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB90_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB90_86 Depth=1
	movl	$0, -4(%rbp)
.LBB90_88:                              # %for.cond274
                                        #   Parent Loop BB90_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB90_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB90_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB90_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_88
.LBB90_91:                              # %for.end294
                                        #   in Loop: Header=BB90_86 Depth=1
	jmp	.LBB90_92
.LBB90_92:                              # %for.inc295
                                        #   in Loop: Header=BB90_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_86
.LBB90_93:                              # %for.end297
	jmp	.LBB90_94
.LBB90_94:                              # %if.end298
	jmp	.LBB90_95
.LBB90_95:                              # %if.end299
	jmp	.LBB90_105
.LBB90_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB90_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB90_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB90_97 Depth=1
	movl	$0, -4(%rbp)
.LBB90_99:                              # %for.cond305
                                        #   Parent Loop BB90_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB90_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB90_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB90_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_99
.LBB90_102:                             # %for.end317
                                        #   in Loop: Header=BB90_97 Depth=1
	jmp	.LBB90_103
.LBB90_103:                             # %for.inc318
                                        #   in Loop: Header=BB90_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_97
.LBB90_104:                             # %for.end320
	jmp	.LBB90_105
.LBB90_105:                             # %if.end321
	jmp	.LBB90_180
.LBB90_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB90_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB90_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_110 Depth 2
                                        #       Child Loop BB90_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB90_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB90_108 Depth=1
	movl	$0, -16(%rbp)
.LBB90_110:                             # %for.cond331
                                        #   Parent Loop BB90_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB90_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB90_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB90_110 Depth=2
	movl	$0, -4(%rbp)
.LBB90_112:                             # %for.cond335
                                        #   Parent Loop BB90_108 Depth=1
                                        #     Parent Loop BB90_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB90_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB90_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB90_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_112
.LBB90_115:                             # %for.end359
                                        #   in Loop: Header=BB90_110 Depth=2
	jmp	.LBB90_116
.LBB90_116:                             # %for.inc360
                                        #   in Loop: Header=BB90_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_110
.LBB90_117:                             # %for.end362
                                        #   in Loop: Header=BB90_108 Depth=1
	jmp	.LBB90_118
.LBB90_118:                             # %for.inc363
                                        #   in Loop: Header=BB90_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_108
.LBB90_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB90_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB90_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB90_120 Depth=1
	movl	$0, -8(%rbp)
.LBB90_122:                             # %for.cond370
                                        #   Parent Loop BB90_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB90_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB90_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB90_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_122
.LBB90_125:                             # %for.end380
                                        #   in Loop: Header=BB90_120 Depth=1
	jmp	.LBB90_126
.LBB90_126:                             # %for.inc381
                                        #   in Loop: Header=BB90_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_120
.LBB90_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB90_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB90_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB90_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB90_129 Depth=1
	movl	$0, -4(%rbp)
.LBB90_131:                             # %for.cond390
                                        #   Parent Loop BB90_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB90_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB90_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB90_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_131
.LBB90_134:                             # %for.end410
                                        #   in Loop: Header=BB90_129 Depth=1
	jmp	.LBB90_135
.LBB90_135:                             # %for.inc411
                                        #   in Loop: Header=BB90_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_129
.LBB90_136:                             # %for.end413
	jmp	.LBB90_156
.LBB90_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB90_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB90_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_141 Depth 2
                                        #       Child Loop BB90_143 Depth 3
                                        #         Child Loop BB90_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB90_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB90_141:                             # %for.cond425
                                        #   Parent Loop BB90_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB90_143 Depth 3
                                        #         Child Loop BB90_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB90_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB90_143:                             # %for.cond452
                                        #   Parent Loop BB90_139 Depth=1
                                        #     Parent Loop BB90_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB90_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB90_143 Depth=3
	movl	$0, -4(%rbp)
.LBB90_145:                             # %for.cond456
                                        #   Parent Loop BB90_139 Depth=1
                                        #     Parent Loop BB90_141 Depth=2
                                        #       Parent Loop BB90_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB90_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB90_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB90_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_145
.LBB90_148:                             # %for.end475
                                        #   in Loop: Header=BB90_143 Depth=3
	jmp	.LBB90_149
.LBB90_149:                             # %for.inc476
                                        #   in Loop: Header=BB90_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_143
.LBB90_150:                             # %for.end478
                                        #   in Loop: Header=BB90_141 Depth=2
	jmp	.LBB90_151
.LBB90_151:                             # %for.inc479
                                        #   in Loop: Header=BB90_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_141
.LBB90_152:                             # %for.end481
                                        #   in Loop: Header=BB90_139 Depth=1
	jmp	.LBB90_153
.LBB90_153:                             # %for.inc482
                                        #   in Loop: Header=BB90_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_139
.LBB90_154:                             # %for.end484
	jmp	.LBB90_155
.LBB90_155:                             # %if.end485
	jmp	.LBB90_156
.LBB90_156:                             # %if.end486
	jmp	.LBB90_157
.LBB90_157:                             # %if.end487
	jmp	.LBB90_180
.LBB90_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB90_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB90_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB90_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB90_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB90_161 Depth=1
	movl	$0, -4(%rbp)
.LBB90_163:                             # %for.cond499
                                        #   Parent Loop BB90_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB90_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB90_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB90_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_163
.LBB90_166:                             # %for.end519
                                        #   in Loop: Header=BB90_161 Depth=1
	jmp	.LBB90_167
.LBB90_167:                             # %for.inc520
                                        #   in Loop: Header=BB90_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_161
.LBB90_168:                             # %for.end522
	jmp	.LBB90_169
.LBB90_169:                             # %if.end523
	jmp	.LBB90_179
.LBB90_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB90_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB90_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB90_171 Depth=1
	movl	$0, -4(%rbp)
.LBB90_173:                             # %for.cond529
                                        #   Parent Loop BB90_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB90_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB90_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB90_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_173
.LBB90_176:                             # %for.end541
                                        #   in Loop: Header=BB90_171 Depth=1
	jmp	.LBB90_177
.LBB90_177:                             # %for.inc542
                                        #   in Loop: Header=BB90_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_171
.LBB90_178:                             # %for.end544
	jmp	.LBB90_179
.LBB90_179:                             # %if.end545
	jmp	.LBB90_180
.LBB90_180:                             # %sw.epilog
	cmpl	$788270620, -68(%rbp)   # imm = 0x2EFC0E1C
	jne	.LBB90_182
.LBB90_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_181
.Lfunc_end90:
	.size	Conceal_Error.80, .Lfunc_end90-Conceal_Error.80
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI90_0:
	.quad	.LBB90_16
	.quad	.LBB90_158
	.quad	.LBB90_106
	.quad	.LBB90_180
	.quad	.LBB90_36
                                        # -- End function
	.text
	.globl	Conceal_Error.81        # -- Begin function Conceal_Error.81
	.p2align	4, 0x90
	.type	Conceal_Error.81,@function
Conceal_Error.81:                       # @Conceal_Error.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1873847641, -68(%rbp)  # imm = 0x6FB0A559
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB91_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB91_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB91_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB91_4:                               # %land.end
.LBB91_5:                               # %lor.end
.LBB91_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB91_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB91_9
.LBB91_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB91_14
.LBB91_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB91_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB91_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB91_12:                              # %land.end51
.LBB91_13:                              # %lor.end53
.LBB91_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB91_180
# %bb.15:                               # %land.end54
	movq	.LJTI91_0(,%rax,8), %rax
	jmpq	*%rax
.LBB91_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB91_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB91_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB91_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB91_18 Depth=1
	movl	$0, -4(%rbp)
.LBB91_20:                              # %for.cond68
                                        #   Parent Loop BB91_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB91_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB91_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB91_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_20
.LBB91_23:                              # %for.end
                                        #   in Loop: Header=BB91_18 Depth=1
	jmp	.LBB91_24
.LBB91_24:                              # %for.inc85
                                        #   in Loop: Header=BB91_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_18
.LBB91_25:                              # %for.end87
	jmp	.LBB91_35
.LBB91_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB91_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB91_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB91_27 Depth=1
	movl	$0, -4(%rbp)
.LBB91_29:                              # %for.cond92
                                        #   Parent Loop BB91_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB91_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB91_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB91_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_29
.LBB91_32:                              # %for.end104
                                        #   in Loop: Header=BB91_27 Depth=1
	jmp	.LBB91_33
.LBB91_33:                              # %for.inc105
                                        #   in Loop: Header=BB91_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_27
.LBB91_34:                              # %for.end107
	jmp	.LBB91_35
.LBB91_35:                              # %if.end
	jmp	.LBB91_180
.LBB91_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB91_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_39 Depth 2
                                        #       Child Loop BB91_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB91_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB91_37 Depth=1
	movl	$0, -12(%rbp)
.LBB91_39:                              # %for.cond113
                                        #   Parent Loop BB91_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB91_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB91_39 Depth=2
	movl	$0, -4(%rbp)
.LBB91_41:                              # %for.cond117
                                        #   Parent Loop BB91_37 Depth=1
                                        #     Parent Loop BB91_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB91_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB91_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB91_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_41
.LBB91_44:                              # %for.end141
                                        #   in Loop: Header=BB91_39 Depth=2
	jmp	.LBB91_45
.LBB91_45:                              # %for.inc142
                                        #   in Loop: Header=BB91_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_39
.LBB91_46:                              # %for.end144
                                        #   in Loop: Header=BB91_37 Depth=1
	jmp	.LBB91_47
.LBB91_47:                              # %for.inc145
                                        #   in Loop: Header=BB91_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_37
.LBB91_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB91_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB91_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB91_49 Depth=1
	movl	$0, -8(%rbp)
.LBB91_51:                              # %for.cond152
                                        #   Parent Loop BB91_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB91_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB91_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB91_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_51
.LBB91_54:                              # %for.end162
                                        #   in Loop: Header=BB91_49 Depth=1
	jmp	.LBB91_55
.LBB91_55:                              # %for.inc163
                                        #   in Loop: Header=BB91_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_49
.LBB91_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB91_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB91_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB91_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB91_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB91_59 Depth=1
	movl	$0, -4(%rbp)
.LBB91_61:                              # %for.cond175
                                        #   Parent Loop BB91_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB91_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB91_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB91_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_61
.LBB91_64:                              # %for.end195
                                        #   in Loop: Header=BB91_59 Depth=1
	jmp	.LBB91_65
.LBB91_65:                              # %for.inc196
                                        #   in Loop: Header=BB91_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_59
.LBB91_66:                              # %for.end198
	jmp	.LBB91_95
.LBB91_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB91_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB91_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_71 Depth 2
                                        #       Child Loop BB91_73 Depth 3
                                        #         Child Loop BB91_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB91_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB91_71:                              # %for.cond210
                                        #   Parent Loop BB91_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_73 Depth 3
                                        #         Child Loop BB91_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB91_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB91_73:                              # %for.cond236
                                        #   Parent Loop BB91_69 Depth=1
                                        #     Parent Loop BB91_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB91_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB91_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB91_73 Depth=3
	movl	$0, -4(%rbp)
.LBB91_75:                              # %for.cond240
                                        #   Parent Loop BB91_69 Depth=1
                                        #     Parent Loop BB91_71 Depth=2
                                        #       Parent Loop BB91_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB91_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB91_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB91_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_75
.LBB91_78:                              # %for.end259
                                        #   in Loop: Header=BB91_73 Depth=3
	jmp	.LBB91_79
.LBB91_79:                              # %for.inc260
                                        #   in Loop: Header=BB91_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_73
.LBB91_80:                              # %for.end262
                                        #   in Loop: Header=BB91_71 Depth=2
	jmp	.LBB91_81
.LBB91_81:                              # %for.inc263
                                        #   in Loop: Header=BB91_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_71
.LBB91_82:                              # %for.end265
                                        #   in Loop: Header=BB91_69 Depth=1
	jmp	.LBB91_83
.LBB91_83:                              # %for.inc266
                                        #   in Loop: Header=BB91_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_69
.LBB91_84:                              # %for.end268
	jmp	.LBB91_94
.LBB91_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB91_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB91_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB91_86 Depth=1
	movl	$0, -4(%rbp)
.LBB91_88:                              # %for.cond274
                                        #   Parent Loop BB91_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB91_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB91_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB91_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_88
.LBB91_91:                              # %for.end294
                                        #   in Loop: Header=BB91_86 Depth=1
	jmp	.LBB91_92
.LBB91_92:                              # %for.inc295
                                        #   in Loop: Header=BB91_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_86
.LBB91_93:                              # %for.end297
	jmp	.LBB91_94
.LBB91_94:                              # %if.end298
	jmp	.LBB91_95
.LBB91_95:                              # %if.end299
	jmp	.LBB91_105
.LBB91_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB91_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB91_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB91_97 Depth=1
	movl	$0, -4(%rbp)
.LBB91_99:                              # %for.cond305
                                        #   Parent Loop BB91_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB91_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB91_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB91_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_99
.LBB91_102:                             # %for.end317
                                        #   in Loop: Header=BB91_97 Depth=1
	jmp	.LBB91_103
.LBB91_103:                             # %for.inc318
                                        #   in Loop: Header=BB91_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_97
.LBB91_104:                             # %for.end320
	jmp	.LBB91_105
.LBB91_105:                             # %if.end321
	jmp	.LBB91_180
.LBB91_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB91_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB91_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_110 Depth 2
                                        #       Child Loop BB91_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB91_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB91_108 Depth=1
	movl	$0, -12(%rbp)
.LBB91_110:                             # %for.cond331
                                        #   Parent Loop BB91_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB91_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB91_110 Depth=2
	movl	$0, -4(%rbp)
.LBB91_112:                             # %for.cond335
                                        #   Parent Loop BB91_108 Depth=1
                                        #     Parent Loop BB91_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB91_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB91_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB91_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_112
.LBB91_115:                             # %for.end359
                                        #   in Loop: Header=BB91_110 Depth=2
	jmp	.LBB91_116
.LBB91_116:                             # %for.inc360
                                        #   in Loop: Header=BB91_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_110
.LBB91_117:                             # %for.end362
                                        #   in Loop: Header=BB91_108 Depth=1
	jmp	.LBB91_118
.LBB91_118:                             # %for.inc363
                                        #   in Loop: Header=BB91_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_108
.LBB91_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB91_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB91_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB91_120 Depth=1
	movl	$0, -8(%rbp)
.LBB91_122:                             # %for.cond370
                                        #   Parent Loop BB91_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB91_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB91_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB91_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_122
.LBB91_125:                             # %for.end380
                                        #   in Loop: Header=BB91_120 Depth=1
	jmp	.LBB91_126
.LBB91_126:                             # %for.inc381
                                        #   in Loop: Header=BB91_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_120
.LBB91_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB91_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB91_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB91_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB91_129 Depth=1
	movl	$0, -4(%rbp)
.LBB91_131:                             # %for.cond390
                                        #   Parent Loop BB91_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB91_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB91_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB91_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_131
.LBB91_134:                             # %for.end410
                                        #   in Loop: Header=BB91_129 Depth=1
	jmp	.LBB91_135
.LBB91_135:                             # %for.inc411
                                        #   in Loop: Header=BB91_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_129
.LBB91_136:                             # %for.end413
	jmp	.LBB91_156
.LBB91_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB91_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB91_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_141 Depth 2
                                        #       Child Loop BB91_143 Depth 3
                                        #         Child Loop BB91_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB91_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB91_141:                             # %for.cond425
                                        #   Parent Loop BB91_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_143 Depth 3
                                        #         Child Loop BB91_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB91_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB91_143:                             # %for.cond452
                                        #   Parent Loop BB91_139 Depth=1
                                        #     Parent Loop BB91_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB91_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB91_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB91_143 Depth=3
	movl	$0, -4(%rbp)
.LBB91_145:                             # %for.cond456
                                        #   Parent Loop BB91_139 Depth=1
                                        #     Parent Loop BB91_141 Depth=2
                                        #       Parent Loop BB91_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB91_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB91_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB91_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_145
.LBB91_148:                             # %for.end475
                                        #   in Loop: Header=BB91_143 Depth=3
	jmp	.LBB91_149
.LBB91_149:                             # %for.inc476
                                        #   in Loop: Header=BB91_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_143
.LBB91_150:                             # %for.end478
                                        #   in Loop: Header=BB91_141 Depth=2
	jmp	.LBB91_151
.LBB91_151:                             # %for.inc479
                                        #   in Loop: Header=BB91_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_141
.LBB91_152:                             # %for.end481
                                        #   in Loop: Header=BB91_139 Depth=1
	jmp	.LBB91_153
.LBB91_153:                             # %for.inc482
                                        #   in Loop: Header=BB91_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_139
.LBB91_154:                             # %for.end484
	jmp	.LBB91_155
.LBB91_155:                             # %if.end485
	jmp	.LBB91_156
.LBB91_156:                             # %if.end486
	jmp	.LBB91_157
.LBB91_157:                             # %if.end487
	jmp	.LBB91_180
.LBB91_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB91_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB91_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB91_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB91_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB91_161 Depth=1
	movl	$0, -4(%rbp)
.LBB91_163:                             # %for.cond499
                                        #   Parent Loop BB91_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB91_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB91_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB91_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_163
.LBB91_166:                             # %for.end519
                                        #   in Loop: Header=BB91_161 Depth=1
	jmp	.LBB91_167
.LBB91_167:                             # %for.inc520
                                        #   in Loop: Header=BB91_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_161
.LBB91_168:                             # %for.end522
	jmp	.LBB91_169
.LBB91_169:                             # %if.end523
	jmp	.LBB91_179
.LBB91_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB91_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB91_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB91_171 Depth=1
	movl	$0, -4(%rbp)
.LBB91_173:                             # %for.cond529
                                        #   Parent Loop BB91_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB91_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB91_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB91_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_173
.LBB91_176:                             # %for.end541
                                        #   in Loop: Header=BB91_171 Depth=1
	jmp	.LBB91_177
.LBB91_177:                             # %for.inc542
                                        #   in Loop: Header=BB91_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_171
.LBB91_178:                             # %for.end544
	jmp	.LBB91_179
.LBB91_179:                             # %if.end545
	jmp	.LBB91_180
.LBB91_180:                             # %sw.epilog
	cmpl	$1873847641, -68(%rbp)  # imm = 0x6FB0A559
	jne	.LBB91_182
.LBB91_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_181
.Lfunc_end91:
	.size	Conceal_Error.81, .Lfunc_end91-Conceal_Error.81
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI91_0:
	.quad	.LBB91_16
	.quad	.LBB91_158
	.quad	.LBB91_106
	.quad	.LBB91_180
	.quad	.LBB91_36
                                        # -- End function
	.text
	.globl	Conceal_Error.82        # -- Begin function Conceal_Error.82
	.p2align	4, 0x90
	.type	Conceal_Error.82,@function
Conceal_Error.82:                       # @Conceal_Error.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$983200094, -68(%rbp)   # imm = 0x3A9A715E
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB92_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB92_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB92_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB92_4:                               # %land.end
.LBB92_5:                               # %lor.end
.LBB92_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB92_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB92_9
.LBB92_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB92_14
.LBB92_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB92_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB92_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB92_12:                              # %land.end51
.LBB92_13:                              # %lor.end53
.LBB92_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB92_180
# %bb.15:                               # %land.end54
	movq	.LJTI92_0(,%rax,8), %rax
	jmpq	*%rax
.LBB92_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB92_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB92_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB92_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB92_18 Depth=1
	movl	$0, -4(%rbp)
.LBB92_20:                              # %for.cond68
                                        #   Parent Loop BB92_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB92_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB92_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB92_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_20
.LBB92_23:                              # %for.end
                                        #   in Loop: Header=BB92_18 Depth=1
	jmp	.LBB92_24
.LBB92_24:                              # %for.inc85
                                        #   in Loop: Header=BB92_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_18
.LBB92_25:                              # %for.end87
	jmp	.LBB92_35
.LBB92_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB92_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB92_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB92_27 Depth=1
	movl	$0, -4(%rbp)
.LBB92_29:                              # %for.cond92
                                        #   Parent Loop BB92_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB92_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB92_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB92_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_29
.LBB92_32:                              # %for.end104
                                        #   in Loop: Header=BB92_27 Depth=1
	jmp	.LBB92_33
.LBB92_33:                              # %for.inc105
                                        #   in Loop: Header=BB92_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_27
.LBB92_34:                              # %for.end107
	jmp	.LBB92_35
.LBB92_35:                              # %if.end
	jmp	.LBB92_180
.LBB92_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB92_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_39 Depth 2
                                        #       Child Loop BB92_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB92_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB92_37 Depth=1
	movl	$0, -12(%rbp)
.LBB92_39:                              # %for.cond113
                                        #   Parent Loop BB92_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB92_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB92_39 Depth=2
	movl	$0, -4(%rbp)
.LBB92_41:                              # %for.cond117
                                        #   Parent Loop BB92_37 Depth=1
                                        #     Parent Loop BB92_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB92_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB92_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB92_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_41
.LBB92_44:                              # %for.end141
                                        #   in Loop: Header=BB92_39 Depth=2
	jmp	.LBB92_45
.LBB92_45:                              # %for.inc142
                                        #   in Loop: Header=BB92_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_39
.LBB92_46:                              # %for.end144
                                        #   in Loop: Header=BB92_37 Depth=1
	jmp	.LBB92_47
.LBB92_47:                              # %for.inc145
                                        #   in Loop: Header=BB92_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_37
.LBB92_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB92_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB92_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB92_49 Depth=1
	movl	$0, -8(%rbp)
.LBB92_51:                              # %for.cond152
                                        #   Parent Loop BB92_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB92_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB92_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB92_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_51
.LBB92_54:                              # %for.end162
                                        #   in Loop: Header=BB92_49 Depth=1
	jmp	.LBB92_55
.LBB92_55:                              # %for.inc163
                                        #   in Loop: Header=BB92_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_49
.LBB92_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB92_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB92_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB92_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB92_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB92_59 Depth=1
	movl	$0, -4(%rbp)
.LBB92_61:                              # %for.cond175
                                        #   Parent Loop BB92_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB92_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB92_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB92_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_61
.LBB92_64:                              # %for.end195
                                        #   in Loop: Header=BB92_59 Depth=1
	jmp	.LBB92_65
.LBB92_65:                              # %for.inc196
                                        #   in Loop: Header=BB92_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_59
.LBB92_66:                              # %for.end198
	jmp	.LBB92_95
.LBB92_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB92_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB92_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_71 Depth 2
                                        #       Child Loop BB92_73 Depth 3
                                        #         Child Loop BB92_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB92_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB92_71:                              # %for.cond210
                                        #   Parent Loop BB92_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_73 Depth 3
                                        #         Child Loop BB92_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB92_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB92_73:                              # %for.cond236
                                        #   Parent Loop BB92_69 Depth=1
                                        #     Parent Loop BB92_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB92_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB92_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB92_73 Depth=3
	movl	$0, -4(%rbp)
.LBB92_75:                              # %for.cond240
                                        #   Parent Loop BB92_69 Depth=1
                                        #     Parent Loop BB92_71 Depth=2
                                        #       Parent Loop BB92_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB92_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB92_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB92_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_75
.LBB92_78:                              # %for.end259
                                        #   in Loop: Header=BB92_73 Depth=3
	jmp	.LBB92_79
.LBB92_79:                              # %for.inc260
                                        #   in Loop: Header=BB92_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_73
.LBB92_80:                              # %for.end262
                                        #   in Loop: Header=BB92_71 Depth=2
	jmp	.LBB92_81
.LBB92_81:                              # %for.inc263
                                        #   in Loop: Header=BB92_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_71
.LBB92_82:                              # %for.end265
                                        #   in Loop: Header=BB92_69 Depth=1
	jmp	.LBB92_83
.LBB92_83:                              # %for.inc266
                                        #   in Loop: Header=BB92_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_69
.LBB92_84:                              # %for.end268
	jmp	.LBB92_94
.LBB92_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB92_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB92_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB92_86 Depth=1
	movl	$0, -4(%rbp)
.LBB92_88:                              # %for.cond274
                                        #   Parent Loop BB92_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB92_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB92_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB92_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_88
.LBB92_91:                              # %for.end294
                                        #   in Loop: Header=BB92_86 Depth=1
	jmp	.LBB92_92
.LBB92_92:                              # %for.inc295
                                        #   in Loop: Header=BB92_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_86
.LBB92_93:                              # %for.end297
	jmp	.LBB92_94
.LBB92_94:                              # %if.end298
	jmp	.LBB92_95
.LBB92_95:                              # %if.end299
	jmp	.LBB92_105
.LBB92_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB92_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB92_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB92_97 Depth=1
	movl	$0, -4(%rbp)
.LBB92_99:                              # %for.cond305
                                        #   Parent Loop BB92_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB92_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB92_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB92_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_99
.LBB92_102:                             # %for.end317
                                        #   in Loop: Header=BB92_97 Depth=1
	jmp	.LBB92_103
.LBB92_103:                             # %for.inc318
                                        #   in Loop: Header=BB92_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_97
.LBB92_104:                             # %for.end320
	jmp	.LBB92_105
.LBB92_105:                             # %if.end321
	jmp	.LBB92_180
.LBB92_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB92_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB92_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_110 Depth 2
                                        #       Child Loop BB92_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB92_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB92_108 Depth=1
	movl	$0, -12(%rbp)
.LBB92_110:                             # %for.cond331
                                        #   Parent Loop BB92_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB92_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB92_110 Depth=2
	movl	$0, -4(%rbp)
.LBB92_112:                             # %for.cond335
                                        #   Parent Loop BB92_108 Depth=1
                                        #     Parent Loop BB92_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB92_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB92_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB92_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_112
.LBB92_115:                             # %for.end359
                                        #   in Loop: Header=BB92_110 Depth=2
	jmp	.LBB92_116
.LBB92_116:                             # %for.inc360
                                        #   in Loop: Header=BB92_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_110
.LBB92_117:                             # %for.end362
                                        #   in Loop: Header=BB92_108 Depth=1
	jmp	.LBB92_118
.LBB92_118:                             # %for.inc363
                                        #   in Loop: Header=BB92_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_108
.LBB92_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB92_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB92_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB92_120 Depth=1
	movl	$0, -8(%rbp)
.LBB92_122:                             # %for.cond370
                                        #   Parent Loop BB92_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB92_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB92_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB92_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_122
.LBB92_125:                             # %for.end380
                                        #   in Loop: Header=BB92_120 Depth=1
	jmp	.LBB92_126
.LBB92_126:                             # %for.inc381
                                        #   in Loop: Header=BB92_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_120
.LBB92_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB92_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB92_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB92_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB92_129 Depth=1
	movl	$0, -4(%rbp)
.LBB92_131:                             # %for.cond390
                                        #   Parent Loop BB92_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB92_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB92_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB92_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_131
.LBB92_134:                             # %for.end410
                                        #   in Loop: Header=BB92_129 Depth=1
	jmp	.LBB92_135
.LBB92_135:                             # %for.inc411
                                        #   in Loop: Header=BB92_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_129
.LBB92_136:                             # %for.end413
	jmp	.LBB92_156
.LBB92_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB92_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB92_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_141 Depth 2
                                        #       Child Loop BB92_143 Depth 3
                                        #         Child Loop BB92_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB92_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB92_141:                             # %for.cond425
                                        #   Parent Loop BB92_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_143 Depth 3
                                        #         Child Loop BB92_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB92_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB92_143:                             # %for.cond452
                                        #   Parent Loop BB92_139 Depth=1
                                        #     Parent Loop BB92_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB92_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB92_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB92_143 Depth=3
	movl	$0, -4(%rbp)
.LBB92_145:                             # %for.cond456
                                        #   Parent Loop BB92_139 Depth=1
                                        #     Parent Loop BB92_141 Depth=2
                                        #       Parent Loop BB92_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB92_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB92_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB92_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_145
.LBB92_148:                             # %for.end475
                                        #   in Loop: Header=BB92_143 Depth=3
	jmp	.LBB92_149
.LBB92_149:                             # %for.inc476
                                        #   in Loop: Header=BB92_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_143
.LBB92_150:                             # %for.end478
                                        #   in Loop: Header=BB92_141 Depth=2
	jmp	.LBB92_151
.LBB92_151:                             # %for.inc479
                                        #   in Loop: Header=BB92_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_141
.LBB92_152:                             # %for.end481
                                        #   in Loop: Header=BB92_139 Depth=1
	jmp	.LBB92_153
.LBB92_153:                             # %for.inc482
                                        #   in Loop: Header=BB92_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_139
.LBB92_154:                             # %for.end484
	jmp	.LBB92_155
.LBB92_155:                             # %if.end485
	jmp	.LBB92_156
.LBB92_156:                             # %if.end486
	jmp	.LBB92_157
.LBB92_157:                             # %if.end487
	jmp	.LBB92_180
.LBB92_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB92_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB92_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB92_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB92_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB92_161 Depth=1
	movl	$0, -4(%rbp)
.LBB92_163:                             # %for.cond499
                                        #   Parent Loop BB92_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB92_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB92_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB92_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_163
.LBB92_166:                             # %for.end519
                                        #   in Loop: Header=BB92_161 Depth=1
	jmp	.LBB92_167
.LBB92_167:                             # %for.inc520
                                        #   in Loop: Header=BB92_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_161
.LBB92_168:                             # %for.end522
	jmp	.LBB92_169
.LBB92_169:                             # %if.end523
	jmp	.LBB92_179
.LBB92_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB92_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB92_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB92_171 Depth=1
	movl	$0, -4(%rbp)
.LBB92_173:                             # %for.cond529
                                        #   Parent Loop BB92_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB92_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB92_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB92_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_173
.LBB92_176:                             # %for.end541
                                        #   in Loop: Header=BB92_171 Depth=1
	jmp	.LBB92_177
.LBB92_177:                             # %for.inc542
                                        #   in Loop: Header=BB92_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_171
.LBB92_178:                             # %for.end544
	jmp	.LBB92_179
.LBB92_179:                             # %if.end545
	jmp	.LBB92_180
.LBB92_180:                             # %sw.epilog
	cmpl	$983200094, -68(%rbp)   # imm = 0x3A9A715E
	jne	.LBB92_182
.LBB92_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_181
.Lfunc_end92:
	.size	Conceal_Error.82, .Lfunc_end92-Conceal_Error.82
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI92_0:
	.quad	.LBB92_16
	.quad	.LBB92_158
	.quad	.LBB92_106
	.quad	.LBB92_180
	.quad	.LBB92_36
                                        # -- End function
	.text
	.globl	decode_one_b8block.83   # -- Begin function decode_one_b8block.83
	.p2align	4, 0x90
	.type	decode_one_b8block.83,@function
decode_one_b8block.83:                  # @decode_one_b8block.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$105055778, -84(%rbp)   # imm = 0x6430622
	movl	%edi, -48(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB93_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB93_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB93_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_4:                               # %for.cond9
                                        #   Parent Loop BB93_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB93_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB93_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB93_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_4
.LBB93_7:                               # %for.end
                                        #   in Loop: Header=BB93_2 Depth=1
	jmp	.LBB93_8
.LBB93_8:                               # %for.inc26
                                        #   in Loop: Header=BB93_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_2
.LBB93_9:                               # %for.end28
	jmp	.LBB93_96
.LBB93_10:                              # %if.else
	cmpl	$0, -64(%rbp)
	jne	.LBB93_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB93_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB93_31
.LBB93_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB93_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB93_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_17:                              # %for.cond40
                                        #   Parent Loop BB93_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB93_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB93_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB93_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_17
.LBB93_20:                              # %for.end49
                                        #   in Loop: Header=BB93_15 Depth=1
	jmp	.LBB93_21
.LBB93_21:                              # %for.inc50
                                        #   in Loop: Header=BB93_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_15
.LBB93_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB93_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB93_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB93_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB93_25:                              # %for.cond56
                                        #   Parent Loop BB93_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB93_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB93_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB93_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_25
.LBB93_28:                              # %for.end71
                                        #   in Loop: Header=BB93_23 Depth=1
	jmp	.LBB93_29
.LBB93_29:                              # %for.inc72
                                        #   in Loop: Header=BB93_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_23
.LBB93_30:                              # %for.end74
	jmp	.LBB93_60
.LBB93_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB93_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB93_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB93_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB93_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB93_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB93_36:                              # %for.cond83
                                        #   Parent Loop BB93_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB93_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB93_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB93_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_36
.LBB93_39:                              # %for.end120
                                        #   in Loop: Header=BB93_34 Depth=1
	jmp	.LBB93_40
.LBB93_40:                              # %for.inc121
                                        #   in Loop: Header=BB93_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_34
.LBB93_41:                              # %for.end123
	jmp	.LBB93_51
.LBB93_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB93_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB93_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB93_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB93_45:                              # %for.cond129
                                        #   Parent Loop BB93_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB93_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB93_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB93_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_45
.LBB93_48:                              # %for.end145
                                        #   in Loop: Header=BB93_43 Depth=1
	jmp	.LBB93_49
.LBB93_49:                              # %for.inc146
                                        #   in Loop: Header=BB93_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_43
.LBB93_50:                              # %for.end148
	jmp	.LBB93_51
.LBB93_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB93_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB93_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_54:                              # %for.cond153
                                        #   Parent Loop BB93_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB93_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB93_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB93_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_54
.LBB93_57:                              # %for.end167
                                        #   in Loop: Header=BB93_52 Depth=1
	jmp	.LBB93_58
.LBB93_58:                              # %for.inc168
                                        #   in Loop: Header=BB93_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_52
.LBB93_59:                              # %for.end170
	jmp	.LBB93_60
.LBB93_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB93_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB93_66
.LBB93_62:                              # %lor.lhs.false177
	cmpl	$0, -64(%rbp)
	jne	.LBB93_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB93_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB93_86
.LBB93_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB93_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_69 Depth 2
                                        #       Child Loop BB93_74 Depth 3
                                        #         Child Loop BB93_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB93_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB93_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB93_69:                              # %for.cond197
                                        #   Parent Loop BB93_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_74 Depth 3
                                        #         Child Loop BB93_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB93_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB93_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB93_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB93_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB93_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB93_73:                              # %if.end218
                                        #   in Loop: Header=BB93_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB93_74:                              # %for.cond233
                                        #   Parent Loop BB93_67 Depth=1
                                        #     Parent Loop BB93_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB93_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB93_74 Depth=3
	movl	$0, -8(%rbp)
.LBB93_76:                              # %for.cond237
                                        #   Parent Loop BB93_67 Depth=1
                                        #     Parent Loop BB93_69 Depth=2
                                        #       Parent Loop BB93_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB93_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB93_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB93_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_76
.LBB93_79:                              # %for.end269
                                        #   in Loop: Header=BB93_74 Depth=3
	jmp	.LBB93_80
.LBB93_80:                              # %for.inc270
                                        #   in Loop: Header=BB93_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_74
.LBB93_81:                              # %for.end272
                                        #   in Loop: Header=BB93_69 Depth=2
	jmp	.LBB93_82
.LBB93_82:                              # %for.inc273
                                        #   in Loop: Header=BB93_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_69
.LBB93_83:                              # %for.end275
                                        #   in Loop: Header=BB93_67 Depth=1
	jmp	.LBB93_84
.LBB93_84:                              # %for.inc276
                                        #   in Loop: Header=BB93_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_67
.LBB93_85:                              # %for.end278
	jmp	.LBB93_95
.LBB93_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB93_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB93_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_89:                              # %for.cond284
                                        #   Parent Loop BB93_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB93_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB93_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB93_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_89
.LBB93_92:                              # %for.end310
                                        #   in Loop: Header=BB93_87 Depth=1
	jmp	.LBB93_93
.LBB93_93:                              # %for.inc311
                                        #   in Loop: Header=BB93_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_87
.LBB93_94:                              # %for.end313
	jmp	.LBB93_95
.LBB93_95:                              # %if.end314
	jmp	.LBB93_96
.LBB93_96:                              # %if.end315
	cmpl	$105055778, -84(%rbp)   # imm = 0x6430622
	jne	.LBB93_98
.LBB93_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_97
.Lfunc_end93:
	.size	decode_one_b8block.83, .Lfunc_end93-decode_one_b8block.83
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.84       # -- Begin function DecOneForthPix.84
	.p2align	4, 0x90
	.type	DecOneForthPix.84,@function
DecOneForthPix.84:                      # @DecOneForthPix.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$295956693, -8(%rbp)    # imm = 0x11A3F0D5
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB94_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB94_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB94_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB94_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_1
.LBB94_4:                               # %for.end
	cmpl	$295956693, -8(%rbp)    # imm = 0x11A3F0D5
	jne	.LBB94_6
.LBB94_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_5
.Lfunc_end94:
	.size	DecOneForthPix.84, .Lfunc_end94-DecOneForthPix.84
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.85  # -- Begin function Get_Reference_Pixel.85
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.85,@function
Get_Reference_Pixel.85:                 # @Get_Reference_Pixel.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$2001032858, -100(%rbp) # imm = 0x7745569A
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB95_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB95_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB95_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB95_5
.LBB95_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB95_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB95_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB95_11
.LBB95_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB95_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB95_10
.LBB95_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB95_10:                              # %cond.end14
.LBB95_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB95_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB95_14
.LBB95_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB95_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB95_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB95_20
.LBB95_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB95_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB95_19
.LBB95_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB95_19:                              # %cond.end29
.LBB95_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_332
.LBB95_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB95_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB95_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB95_25
.LBB95_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB95_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB95_31
.LBB95_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB95_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB95_30
.LBB95_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB95_30:                              # %cond.end52
.LBB95_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB95_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB95_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB95_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB95_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB95_36
.LBB95_35:                              # %cond.false61
                                        #   in Loop: Header=BB95_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB95_36:                              # %cond.end63
                                        #   in Loop: Header=BB95_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB95_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB95_42
.LBB95_38:                              # %cond.false68
                                        #   in Loop: Header=BB95_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB95_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB95_41
.LBB95_40:                              # %cond.false73
                                        #   in Loop: Header=BB95_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB95_41:                              # %cond.end75
                                        #   in Loop: Header=BB95_32 Depth=1
.LBB95_42:                              # %cond.end77
                                        #   in Loop: Header=BB95_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB95_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB95_32
.LBB95_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_47
.LBB95_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB95_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB95_53
.LBB95_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_52
.LBB95_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB95_52:                              # %cond.end113
.LBB95_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB95_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB95_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB95_57
.LBB95_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB95_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB95_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB95_63
.LBB95_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB95_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB95_62
.LBB95_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB95_62:                              # %cond.end136
.LBB95_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB95_76
.LBB95_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB95_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB95_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB95_68
.LBB95_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB95_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB95_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB95_74
.LBB95_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB95_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB95_73
.LBB95_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB95_73:                              # %cond.end169
.LBB95_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB95_75:                              # %if.end
	jmp	.LBB95_76
.LBB95_76:                              # %if.end178
	jmp	.LBB95_331
.LBB95_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB95_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB95_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB95_81
.LBB95_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB95_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB95_87
.LBB95_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB95_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB95_86
.LBB95_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB95_86:                              # %cond.end197
.LBB95_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB95_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB95_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB95_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB95_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB95_92
.LBB95_91:                              # %cond.false209
                                        #   in Loop: Header=BB95_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB95_92:                              # %cond.end211
                                        #   in Loop: Header=BB95_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB95_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB95_98
.LBB95_94:                              # %cond.false216
                                        #   in Loop: Header=BB95_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB95_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB95_97
.LBB95_96:                              # %cond.false221
                                        #   in Loop: Header=BB95_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB95_97:                              # %cond.end223
                                        #   in Loop: Header=BB95_88 Depth=1
.LBB95_98:                              # %cond.end225
                                        #   in Loop: Header=BB95_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB95_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_88
.LBB95_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_103
.LBB95_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB95_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB95_109
.LBB95_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_108
.LBB95_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB95_108:                             # %cond.end266
.LBB95_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB95_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB95_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB95_113
.LBB95_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB95_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB95_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB95_119
.LBB95_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB95_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB95_118
.LBB95_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB95_118:                             # %cond.end287
.LBB95_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB95_132
.LBB95_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB95_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB95_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB95_124
.LBB95_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB95_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB95_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB95_130
.LBB95_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB95_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB95_129
.LBB95_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB95_129:                             # %cond.end320
.LBB95_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB95_131:                             # %if.end331
	jmp	.LBB95_132
.LBB95_132:                             # %if.end332
	jmp	.LBB95_330
.LBB95_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB95_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB95_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB95_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB95_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB95_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB95_139
.LBB95_138:                             # %cond.false345
                                        #   in Loop: Header=BB95_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB95_139:                             # %cond.end347
                                        #   in Loop: Header=BB95_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB95_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB95_145
.LBB95_141:                             # %cond.false352
                                        #   in Loop: Header=BB95_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB95_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB95_144
.LBB95_143:                             # %cond.false357
                                        #   in Loop: Header=BB95_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB95_144:                             # %cond.end359
                                        #   in Loop: Header=BB95_135 Depth=1
.LBB95_145:                             # %cond.end361
                                        #   in Loop: Header=BB95_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB95_146:                             # %for.cond363
                                        #   Parent Loop BB95_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB95_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB95_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB95_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB95_150
.LBB95_149:                             # %cond.false371
                                        #   in Loop: Header=BB95_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB95_150:                             # %cond.end373
                                        #   in Loop: Header=BB95_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB95_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB95_156
.LBB95_152:                             # %cond.false378
                                        #   in Loop: Header=BB95_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB95_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB95_155
.LBB95_154:                             # %cond.false383
                                        #   in Loop: Header=BB95_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB95_155:                             # %cond.end385
                                        #   in Loop: Header=BB95_146 Depth=2
.LBB95_156:                             # %cond.end387
                                        #   in Loop: Header=BB95_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB95_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB95_146
.LBB95_158:                             # %for.end401
                                        #   in Loop: Header=BB95_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB95_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_135
.LBB95_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB95_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB95_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB95_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB95_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_161
.LBB95_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_167
.LBB95_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB95_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB95_173
.LBB95_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_172
.LBB95_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB95_172:                             # %cond.end449
.LBB95_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB95_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB95_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_177
.LBB95_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB95_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB95_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB95_183
.LBB95_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB95_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_182
.LBB95_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB95_182:                             # %cond.end486
.LBB95_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB95_196
.LBB95_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB95_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB95_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_188
.LBB95_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB95_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB95_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB95_194
.LBB95_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB95_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_193
.LBB95_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB95_193:                             # %cond.end526
.LBB95_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB95_195:                             # %if.end532
	jmp	.LBB95_196
.LBB95_196:                             # %if.end533
	jmp	.LBB95_329
.LBB95_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB95_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB95_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB95_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB95_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB95_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB95_203
.LBB95_202:                             # %cond.false546
                                        #   in Loop: Header=BB95_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB95_203:                             # %cond.end548
                                        #   in Loop: Header=BB95_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB95_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB95_209
.LBB95_205:                             # %cond.false553
                                        #   in Loop: Header=BB95_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB95_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB95_208
.LBB95_207:                             # %cond.false558
                                        #   in Loop: Header=BB95_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB95_208:                             # %cond.end560
                                        #   in Loop: Header=BB95_199 Depth=1
.LBB95_209:                             # %cond.end562
                                        #   in Loop: Header=BB95_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB95_210:                             # %for.cond564
                                        #   Parent Loop BB95_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB95_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB95_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB95_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB95_214
.LBB95_213:                             # %cond.false572
                                        #   in Loop: Header=BB95_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB95_214:                             # %cond.end574
                                        #   in Loop: Header=BB95_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB95_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB95_220
.LBB95_216:                             # %cond.false579
                                        #   in Loop: Header=BB95_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB95_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB95_219
.LBB95_218:                             # %cond.false584
                                        #   in Loop: Header=BB95_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB95_219:                             # %cond.end586
                                        #   in Loop: Header=BB95_210 Depth=2
.LBB95_220:                             # %cond.end588
                                        #   in Loop: Header=BB95_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB95_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_210
.LBB95_222:                             # %for.end602
                                        #   in Loop: Header=BB95_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB95_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB95_199
.LBB95_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB95_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB95_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB95_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB95_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB95_225
.LBB95_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_231
.LBB95_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB95_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB95_237
.LBB95_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_236
.LBB95_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB95_236:                             # %cond.end650
.LBB95_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB95_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB95_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_241
.LBB95_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB95_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB95_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB95_247
.LBB95_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB95_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_246
.LBB95_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB95_246:                             # %cond.end687
.LBB95_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB95_258
.LBB95_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB95_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_251
.LBB95_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB95_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB95_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB95_257
.LBB95_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB95_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_256
.LBB95_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB95_256:                             # %cond.end724
.LBB95_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB95_258:                             # %if.end730
	jmp	.LBB95_328
.LBB95_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB95_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB95_262
.LBB95_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB95_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB95_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB95_265
.LBB95_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB95_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB95_271
.LBB95_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB95_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB95_270
.LBB95_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB95_270:                             # %cond.end753
.LBB95_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB95_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB95_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB95_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB95_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB95_276
.LBB95_275:                             # %cond.false765
                                        #   in Loop: Header=BB95_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB95_276:                             # %cond.end767
                                        #   in Loop: Header=BB95_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB95_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB95_282
.LBB95_278:                             # %cond.false772
                                        #   in Loop: Header=BB95_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB95_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB95_281
.LBB95_280:                             # %cond.false777
                                        #   in Loop: Header=BB95_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB95_281:                             # %cond.end779
                                        #   in Loop: Header=BB95_272 Depth=1
.LBB95_282:                             # %cond.end781
                                        #   in Loop: Header=BB95_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB95_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB95_272
.LBB95_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_287
.LBB95_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB95_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB95_293
.LBB95_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_292
.LBB95_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB95_292:                             # %cond.end822
.LBB95_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB95_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB95_296
.LBB95_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB95_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB95_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB95_299
.LBB95_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB95_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB95_305
.LBB95_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB95_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB95_304
.LBB95_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB95_304:                             # %cond.end847
.LBB95_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB95_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB95_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB95_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB95_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB95_310
.LBB95_309:                             # %cond.false859
                                        #   in Loop: Header=BB95_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB95_310:                             # %cond.end861
                                        #   in Loop: Header=BB95_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB95_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB95_316
.LBB95_312:                             # %cond.false866
                                        #   in Loop: Header=BB95_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB95_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB95_315
.LBB95_314:                             # %cond.false871
                                        #   in Loop: Header=BB95_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB95_315:                             # %cond.end873
                                        #   in Loop: Header=BB95_306 Depth=1
.LBB95_316:                             # %cond.end875
                                        #   in Loop: Header=BB95_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB95_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_306
.LBB95_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_321
.LBB95_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB95_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB95_327
.LBB95_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_326
.LBB95_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB95_326:                             # %cond.end916
.LBB95_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB95_328:                             # %if.end922
	jmp	.LBB95_329
.LBB95_329:                             # %if.end923
	jmp	.LBB95_330
.LBB95_330:                             # %if.end924
	jmp	.LBB95_331
.LBB95_331:                             # %if.end925
	jmp	.LBB95_332
.LBB95_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$2001032858, -100(%rbp) # imm = 0x7745569A
	jne	.LBB95_334
.LBB95_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_333
.Lfunc_end95:
	.size	Get_Reference_Pixel.85, .Lfunc_end95-Get_Reference_Pixel.85
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.86   # -- Begin function decode_one_b8block.86
	.p2align	4, 0x90
	.type	decode_one_b8block.86,@function
decode_one_b8block.86:                  # @decode_one_b8block.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1299564039, -84(%rbp)  # imm = 0x4D75C607
	movl	%edi, -56(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB96_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB96_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB96_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_4:                               # %for.cond9
                                        #   Parent Loop BB96_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB96_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB96_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB96_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_4
.LBB96_7:                               # %for.end
                                        #   in Loop: Header=BB96_2 Depth=1
	jmp	.LBB96_8
.LBB96_8:                               # %for.inc26
                                        #   in Loop: Header=BB96_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_2
.LBB96_9:                               # %for.end28
	jmp	.LBB96_96
.LBB96_10:                              # %if.else
	cmpl	$0, -64(%rbp)
	jne	.LBB96_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB96_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB96_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB96_31
.LBB96_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB96_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB96_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_17:                              # %for.cond40
                                        #   Parent Loop BB96_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB96_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB96_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB96_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_17
.LBB96_20:                              # %for.end49
                                        #   in Loop: Header=BB96_15 Depth=1
	jmp	.LBB96_21
.LBB96_21:                              # %for.inc50
                                        #   in Loop: Header=BB96_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_15
.LBB96_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB96_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB96_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB96_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB96_25:                              # %for.cond56
                                        #   Parent Loop BB96_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB96_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB96_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB96_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB96_25
.LBB96_28:                              # %for.end71
                                        #   in Loop: Header=BB96_23 Depth=1
	jmp	.LBB96_29
.LBB96_29:                              # %for.inc72
                                        #   in Loop: Header=BB96_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_23
.LBB96_30:                              # %for.end74
	jmp	.LBB96_60
.LBB96_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB96_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB96_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB96_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB96_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB96_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB96_36:                              # %for.cond83
                                        #   Parent Loop BB96_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB96_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB96_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB96_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB96_36
.LBB96_39:                              # %for.end120
                                        #   in Loop: Header=BB96_34 Depth=1
	jmp	.LBB96_40
.LBB96_40:                              # %for.inc121
                                        #   in Loop: Header=BB96_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_34
.LBB96_41:                              # %for.end123
	jmp	.LBB96_51
.LBB96_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB96_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB96_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB96_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB96_45:                              # %for.cond129
                                        #   Parent Loop BB96_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB96_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB96_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB96_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB96_45
.LBB96_48:                              # %for.end145
                                        #   in Loop: Header=BB96_43 Depth=1
	jmp	.LBB96_49
.LBB96_49:                              # %for.inc146
                                        #   in Loop: Header=BB96_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_43
.LBB96_50:                              # %for.end148
	jmp	.LBB96_51
.LBB96_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB96_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB96_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_54:                              # %for.cond153
                                        #   Parent Loop BB96_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB96_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB96_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB96_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_54
.LBB96_57:                              # %for.end167
                                        #   in Loop: Header=BB96_52 Depth=1
	jmp	.LBB96_58
.LBB96_58:                              # %for.inc168
                                        #   in Loop: Header=BB96_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_52
.LBB96_59:                              # %for.end170
	jmp	.LBB96_60
.LBB96_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB96_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB96_66
.LBB96_62:                              # %lor.lhs.false177
	cmpl	$0, -64(%rbp)
	jne	.LBB96_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB96_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB96_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB96_86
.LBB96_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB96_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_69 Depth 2
                                        #       Child Loop BB96_74 Depth 3
                                        #         Child Loop BB96_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB96_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB96_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB96_69:                              # %for.cond197
                                        #   Parent Loop BB96_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB96_74 Depth 3
                                        #         Child Loop BB96_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB96_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB96_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB96_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB96_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB96_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB96_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB96_73:                              # %if.end218
                                        #   in Loop: Header=BB96_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB96_74:                              # %for.cond233
                                        #   Parent Loop BB96_67 Depth=1
                                        #     Parent Loop BB96_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB96_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB96_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB96_74 Depth=3
	movl	$0, -4(%rbp)
.LBB96_76:                              # %for.cond237
                                        #   Parent Loop BB96_67 Depth=1
                                        #     Parent Loop BB96_69 Depth=2
                                        #       Parent Loop BB96_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB96_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB96_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB96_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_76
.LBB96_79:                              # %for.end269
                                        #   in Loop: Header=BB96_74 Depth=3
	jmp	.LBB96_80
.LBB96_80:                              # %for.inc270
                                        #   in Loop: Header=BB96_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_74
.LBB96_81:                              # %for.end272
                                        #   in Loop: Header=BB96_69 Depth=2
	jmp	.LBB96_82
.LBB96_82:                              # %for.inc273
                                        #   in Loop: Header=BB96_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB96_69
.LBB96_83:                              # %for.end275
                                        #   in Loop: Header=BB96_67 Depth=1
	jmp	.LBB96_84
.LBB96_84:                              # %for.inc276
                                        #   in Loop: Header=BB96_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_67
.LBB96_85:                              # %for.end278
	jmp	.LBB96_95
.LBB96_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB96_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB96_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_89:                              # %for.cond284
                                        #   Parent Loop BB96_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB96_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB96_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB96_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_89
.LBB96_92:                              # %for.end310
                                        #   in Loop: Header=BB96_87 Depth=1
	jmp	.LBB96_93
.LBB96_93:                              # %for.inc311
                                        #   in Loop: Header=BB96_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_87
.LBB96_94:                              # %for.end313
	jmp	.LBB96_95
.LBB96_95:                              # %if.end314
	jmp	.LBB96_96
.LBB96_96:                              # %if.end315
	cmpl	$1299564039, -84(%rbp)  # imm = 0x4D75C607
	jne	.LBB96_98
.LBB96_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_97
.Lfunc_end96:
	.size	decode_one_b8block.86, .Lfunc_end96-decode_one_b8block.86
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.87  # -- Begin function Get_Reference_Pixel.87
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.87,@function
Get_Reference_Pixel.87:                 # @Get_Reference_Pixel.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$529382445, -104(%rbp)  # imm = 0x1F8DBC2D
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB97_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB97_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB97_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB97_5
.LBB97_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB97_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB97_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB97_11
.LBB97_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB97_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB97_10
.LBB97_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB97_10:                              # %cond.end14
.LBB97_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB97_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB97_14
.LBB97_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB97_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB97_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB97_20
.LBB97_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB97_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB97_19
.LBB97_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB97_19:                              # %cond.end29
.LBB97_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_332
.LBB97_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB97_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB97_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB97_25
.LBB97_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB97_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB97_31
.LBB97_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB97_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB97_30
.LBB97_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB97_30:                              # %cond.end52
.LBB97_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB97_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB97_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB97_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB97_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB97_36
.LBB97_35:                              # %cond.false61
                                        #   in Loop: Header=BB97_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB97_36:                              # %cond.end63
                                        #   in Loop: Header=BB97_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB97_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_42
.LBB97_38:                              # %cond.false68
                                        #   in Loop: Header=BB97_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB97_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB97_41
.LBB97_40:                              # %cond.false73
                                        #   in Loop: Header=BB97_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB97_41:                              # %cond.end75
                                        #   in Loop: Header=BB97_32 Depth=1
.LBB97_42:                              # %cond.end77
                                        #   in Loop: Header=BB97_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB97_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_32
.LBB97_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_47
.LBB97_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB97_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB97_53
.LBB97_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_52
.LBB97_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB97_52:                              # %cond.end113
.LBB97_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB97_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB97_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB97_57
.LBB97_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB97_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB97_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB97_63
.LBB97_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB97_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB97_62
.LBB97_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB97_62:                              # %cond.end136
.LBB97_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB97_76
.LBB97_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB97_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB97_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB97_68
.LBB97_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB97_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB97_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB97_74
.LBB97_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB97_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB97_73
.LBB97_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB97_73:                              # %cond.end169
.LBB97_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB97_75:                              # %if.end
	jmp	.LBB97_76
.LBB97_76:                              # %if.end178
	jmp	.LBB97_331
.LBB97_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB97_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB97_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB97_81
.LBB97_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB97_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB97_87
.LBB97_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB97_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB97_86
.LBB97_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB97_86:                              # %cond.end197
.LBB97_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB97_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB97_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB97_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB97_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB97_92
.LBB97_91:                              # %cond.false209
                                        #   in Loop: Header=BB97_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB97_92:                              # %cond.end211
                                        #   in Loop: Header=BB97_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB97_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_98
.LBB97_94:                              # %cond.false216
                                        #   in Loop: Header=BB97_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB97_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB97_97
.LBB97_96:                              # %cond.false221
                                        #   in Loop: Header=BB97_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB97_97:                              # %cond.end223
                                        #   in Loop: Header=BB97_88 Depth=1
.LBB97_98:                              # %cond.end225
                                        #   in Loop: Header=BB97_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB97_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB97_88
.LBB97_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_103
.LBB97_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB97_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB97_109
.LBB97_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_108
.LBB97_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB97_108:                             # %cond.end266
.LBB97_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB97_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB97_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB97_113
.LBB97_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB97_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB97_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB97_119
.LBB97_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB97_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB97_118
.LBB97_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB97_118:                             # %cond.end287
.LBB97_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB97_132
.LBB97_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB97_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB97_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB97_124
.LBB97_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB97_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB97_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB97_130
.LBB97_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB97_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB97_129
.LBB97_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB97_129:                             # %cond.end320
.LBB97_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB97_131:                             # %if.end331
	jmp	.LBB97_132
.LBB97_132:                             # %if.end332
	jmp	.LBB97_330
.LBB97_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB97_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB97_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB97_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB97_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB97_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB97_139
.LBB97_138:                             # %cond.false345
                                        #   in Loop: Header=BB97_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB97_139:                             # %cond.end347
                                        #   in Loop: Header=BB97_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB97_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_145
.LBB97_141:                             # %cond.false352
                                        #   in Loop: Header=BB97_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB97_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB97_144
.LBB97_143:                             # %cond.false357
                                        #   in Loop: Header=BB97_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB97_144:                             # %cond.end359
                                        #   in Loop: Header=BB97_135 Depth=1
.LBB97_145:                             # %cond.end361
                                        #   in Loop: Header=BB97_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB97_146:                             # %for.cond363
                                        #   Parent Loop BB97_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB97_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB97_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB97_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB97_150
.LBB97_149:                             # %cond.false371
                                        #   in Loop: Header=BB97_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB97_150:                             # %cond.end373
                                        #   in Loop: Header=BB97_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB97_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB97_156
.LBB97_152:                             # %cond.false378
                                        #   in Loop: Header=BB97_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB97_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB97_155
.LBB97_154:                             # %cond.false383
                                        #   in Loop: Header=BB97_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB97_155:                             # %cond.end385
                                        #   in Loop: Header=BB97_146 Depth=2
.LBB97_156:                             # %cond.end387
                                        #   in Loop: Header=BB97_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB97_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_146
.LBB97_158:                             # %for.end401
                                        #   in Loop: Header=BB97_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB97_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB97_135
.LBB97_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB97_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB97_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB97_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB97_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB97_161
.LBB97_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_167
.LBB97_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB97_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB97_173
.LBB97_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_172
.LBB97_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB97_172:                             # %cond.end449
.LBB97_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB97_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB97_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_177
.LBB97_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB97_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB97_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB97_183
.LBB97_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB97_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_182
.LBB97_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB97_182:                             # %cond.end486
.LBB97_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB97_196
.LBB97_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB97_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB97_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_188
.LBB97_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB97_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB97_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB97_194
.LBB97_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB97_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_193
.LBB97_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB97_193:                             # %cond.end526
.LBB97_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB97_195:                             # %if.end532
	jmp	.LBB97_196
.LBB97_196:                             # %if.end533
	jmp	.LBB97_329
.LBB97_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB97_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB97_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB97_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB97_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB97_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB97_203
.LBB97_202:                             # %cond.false546
                                        #   in Loop: Header=BB97_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB97_203:                             # %cond.end548
                                        #   in Loop: Header=BB97_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB97_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_209
.LBB97_205:                             # %cond.false553
                                        #   in Loop: Header=BB97_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB97_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB97_208
.LBB97_207:                             # %cond.false558
                                        #   in Loop: Header=BB97_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB97_208:                             # %cond.end560
                                        #   in Loop: Header=BB97_199 Depth=1
.LBB97_209:                             # %cond.end562
                                        #   in Loop: Header=BB97_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB97_210:                             # %for.cond564
                                        #   Parent Loop BB97_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB97_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB97_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB97_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB97_214
.LBB97_213:                             # %cond.false572
                                        #   in Loop: Header=BB97_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB97_214:                             # %cond.end574
                                        #   in Loop: Header=BB97_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB97_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB97_220
.LBB97_216:                             # %cond.false579
                                        #   in Loop: Header=BB97_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB97_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB97_219
.LBB97_218:                             # %cond.false584
                                        #   in Loop: Header=BB97_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB97_219:                             # %cond.end586
                                        #   in Loop: Header=BB97_210 Depth=2
.LBB97_220:                             # %cond.end588
                                        #   in Loop: Header=BB97_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB97_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB97_210
.LBB97_222:                             # %for.end602
                                        #   in Loop: Header=BB97_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB97_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_199
.LBB97_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB97_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB97_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB97_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB97_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_225
.LBB97_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_231
.LBB97_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB97_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB97_237
.LBB97_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_236
.LBB97_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB97_236:                             # %cond.end650
.LBB97_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB97_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB97_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_241
.LBB97_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB97_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB97_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB97_247
.LBB97_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB97_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_246
.LBB97_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB97_246:                             # %cond.end687
.LBB97_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB97_258
.LBB97_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB97_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_251
.LBB97_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB97_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB97_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB97_257
.LBB97_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB97_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_256
.LBB97_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB97_256:                             # %cond.end724
.LBB97_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB97_258:                             # %if.end730
	jmp	.LBB97_328
.LBB97_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB97_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB97_262
.LBB97_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB97_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB97_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB97_265
.LBB97_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB97_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB97_271
.LBB97_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB97_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB97_270
.LBB97_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB97_270:                             # %cond.end753
.LBB97_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB97_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB97_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB97_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB97_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB97_276
.LBB97_275:                             # %cond.false765
                                        #   in Loop: Header=BB97_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB97_276:                             # %cond.end767
                                        #   in Loop: Header=BB97_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB97_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_282
.LBB97_278:                             # %cond.false772
                                        #   in Loop: Header=BB97_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB97_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB97_281
.LBB97_280:                             # %cond.false777
                                        #   in Loop: Header=BB97_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB97_281:                             # %cond.end779
                                        #   in Loop: Header=BB97_272 Depth=1
.LBB97_282:                             # %cond.end781
                                        #   in Loop: Header=BB97_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB97_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_272
.LBB97_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_287
.LBB97_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB97_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB97_293
.LBB97_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_292
.LBB97_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB97_292:                             # %cond.end822
.LBB97_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB97_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB97_296
.LBB97_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB97_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB97_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB97_299
.LBB97_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB97_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB97_305
.LBB97_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB97_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB97_304
.LBB97_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB97_304:                             # %cond.end847
.LBB97_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB97_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB97_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB97_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB97_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB97_310
.LBB97_309:                             # %cond.false859
                                        #   in Loop: Header=BB97_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB97_310:                             # %cond.end861
                                        #   in Loop: Header=BB97_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB97_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_316
.LBB97_312:                             # %cond.false866
                                        #   in Loop: Header=BB97_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB97_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB97_315
.LBB97_314:                             # %cond.false871
                                        #   in Loop: Header=BB97_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB97_315:                             # %cond.end873
                                        #   in Loop: Header=BB97_306 Depth=1
.LBB97_316:                             # %cond.end875
                                        #   in Loop: Header=BB97_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB97_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB97_306
.LBB97_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_321
.LBB97_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB97_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB97_327
.LBB97_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_326
.LBB97_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB97_326:                             # %cond.end916
.LBB97_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB97_328:                             # %if.end922
	jmp	.LBB97_329
.LBB97_329:                             # %if.end923
	jmp	.LBB97_330
.LBB97_330:                             # %if.end924
	jmp	.LBB97_331
.LBB97_331:                             # %if.end925
	jmp	.LBB97_332
.LBB97_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$529382445, -104(%rbp)  # imm = 0x1F8DBC2D
	jne	.LBB97_334
.LBB97_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_333
.Lfunc_end97:
	.size	Get_Reference_Pixel.87, .Lfunc_end97-Get_Reference_Pixel.87
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.88       # -- Begin function DecOneForthPix.88
	.p2align	4, 0x90
	.type	DecOneForthPix.88,@function
DecOneForthPix.88:                      # @DecOneForthPix.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2104001298, -12(%rbp)  # imm = 0x7D688312
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB98_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB98_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB98_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB98_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_1
.LBB98_4:                               # %for.end
	cmpl	$2104001298, -12(%rbp)  # imm = 0x7D688312
	jne	.LBB98_6
.LBB98_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_5
.Lfunc_end98:
	.size	DecOneForthPix.88, .Lfunc_end98-DecOneForthPix.88
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.89        # -- Begin function Conceal_Error.89
	.p2align	4, 0x90
	.type	Conceal_Error.89,@function
Conceal_Error.89:                       # @Conceal_Error.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1549946037, -68(%rbp)  # imm = 0x5C624CB5
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB99_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB99_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB99_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB99_4:                               # %land.end
.LBB99_5:                               # %lor.end
.LBB99_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB99_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB99_9
.LBB99_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB99_14
.LBB99_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB99_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB99_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB99_12:                              # %land.end51
.LBB99_13:                              # %lor.end53
.LBB99_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB99_180
# %bb.15:                               # %land.end54
	movq	.LJTI99_0(,%rax,8), %rax
	jmpq	*%rax
.LBB99_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB99_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB99_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB99_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB99_18 Depth=1
	movl	$0, -4(%rbp)
.LBB99_20:                              # %for.cond68
                                        #   Parent Loop BB99_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB99_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB99_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB99_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_20
.LBB99_23:                              # %for.end
                                        #   in Loop: Header=BB99_18 Depth=1
	jmp	.LBB99_24
.LBB99_24:                              # %for.inc85
                                        #   in Loop: Header=BB99_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_18
.LBB99_25:                              # %for.end87
	jmp	.LBB99_35
.LBB99_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB99_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB99_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB99_27 Depth=1
	movl	$0, -4(%rbp)
.LBB99_29:                              # %for.cond92
                                        #   Parent Loop BB99_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB99_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB99_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB99_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_29
.LBB99_32:                              # %for.end104
                                        #   in Loop: Header=BB99_27 Depth=1
	jmp	.LBB99_33
.LBB99_33:                              # %for.inc105
                                        #   in Loop: Header=BB99_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_27
.LBB99_34:                              # %for.end107
	jmp	.LBB99_35
.LBB99_35:                              # %if.end
	jmp	.LBB99_180
.LBB99_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB99_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_39 Depth 2
                                        #       Child Loop BB99_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB99_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB99_37 Depth=1
	movl	$0, -12(%rbp)
.LBB99_39:                              # %for.cond113
                                        #   Parent Loop BB99_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB99_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB99_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB99_39 Depth=2
	movl	$0, -4(%rbp)
.LBB99_41:                              # %for.cond117
                                        #   Parent Loop BB99_37 Depth=1
                                        #     Parent Loop BB99_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB99_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB99_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB99_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_41
.LBB99_44:                              # %for.end141
                                        #   in Loop: Header=BB99_39 Depth=2
	jmp	.LBB99_45
.LBB99_45:                              # %for.inc142
                                        #   in Loop: Header=BB99_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB99_39
.LBB99_46:                              # %for.end144
                                        #   in Loop: Header=BB99_37 Depth=1
	jmp	.LBB99_47
.LBB99_47:                              # %for.inc145
                                        #   in Loop: Header=BB99_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB99_37
.LBB99_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB99_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB99_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB99_49 Depth=1
	movl	$0, -8(%rbp)
.LBB99_51:                              # %for.cond152
                                        #   Parent Loop BB99_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB99_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB99_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB99_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_51
.LBB99_54:                              # %for.end162
                                        #   in Loop: Header=BB99_49 Depth=1
	jmp	.LBB99_55
.LBB99_55:                              # %for.inc163
                                        #   in Loop: Header=BB99_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_49
.LBB99_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB99_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB99_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB99_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB99_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB99_59 Depth=1
	movl	$0, -4(%rbp)
.LBB99_61:                              # %for.cond175
                                        #   Parent Loop BB99_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB99_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB99_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB99_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_61
.LBB99_64:                              # %for.end195
                                        #   in Loop: Header=BB99_59 Depth=1
	jmp	.LBB99_65
.LBB99_65:                              # %for.inc196
                                        #   in Loop: Header=BB99_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_59
.LBB99_66:                              # %for.end198
	jmp	.LBB99_95
.LBB99_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB99_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB99_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_71 Depth 2
                                        #       Child Loop BB99_73 Depth 3
                                        #         Child Loop BB99_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB99_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB99_71:                              # %for.cond210
                                        #   Parent Loop BB99_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB99_73 Depth 3
                                        #         Child Loop BB99_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB99_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB99_73:                              # %for.cond236
                                        #   Parent Loop BB99_69 Depth=1
                                        #     Parent Loop BB99_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB99_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB99_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB99_73 Depth=3
	movl	$0, -4(%rbp)
.LBB99_75:                              # %for.cond240
                                        #   Parent Loop BB99_69 Depth=1
                                        #     Parent Loop BB99_71 Depth=2
                                        #       Parent Loop BB99_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB99_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB99_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB99_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_75
.LBB99_78:                              # %for.end259
                                        #   in Loop: Header=BB99_73 Depth=3
	jmp	.LBB99_79
.LBB99_79:                              # %for.inc260
                                        #   in Loop: Header=BB99_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_73
.LBB99_80:                              # %for.end262
                                        #   in Loop: Header=BB99_71 Depth=2
	jmp	.LBB99_81
.LBB99_81:                              # %for.inc263
                                        #   in Loop: Header=BB99_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB99_71
.LBB99_82:                              # %for.end265
                                        #   in Loop: Header=BB99_69 Depth=1
	jmp	.LBB99_83
.LBB99_83:                              # %for.inc266
                                        #   in Loop: Header=BB99_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB99_69
.LBB99_84:                              # %for.end268
	jmp	.LBB99_94
.LBB99_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB99_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB99_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB99_86 Depth=1
	movl	$0, -4(%rbp)
.LBB99_88:                              # %for.cond274
                                        #   Parent Loop BB99_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB99_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB99_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB99_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_88
.LBB99_91:                              # %for.end294
                                        #   in Loop: Header=BB99_86 Depth=1
	jmp	.LBB99_92
.LBB99_92:                              # %for.inc295
                                        #   in Loop: Header=BB99_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_86
.LBB99_93:                              # %for.end297
	jmp	.LBB99_94
.LBB99_94:                              # %if.end298
	jmp	.LBB99_95
.LBB99_95:                              # %if.end299
	jmp	.LBB99_105
.LBB99_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB99_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB99_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB99_97 Depth=1
	movl	$0, -4(%rbp)
.LBB99_99:                              # %for.cond305
                                        #   Parent Loop BB99_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB99_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB99_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB99_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_99
.LBB99_102:                             # %for.end317
                                        #   in Loop: Header=BB99_97 Depth=1
	jmp	.LBB99_103
.LBB99_103:                             # %for.inc318
                                        #   in Loop: Header=BB99_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_97
.LBB99_104:                             # %for.end320
	jmp	.LBB99_105
.LBB99_105:                             # %if.end321
	jmp	.LBB99_180
.LBB99_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB99_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB99_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_110 Depth 2
                                        #       Child Loop BB99_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB99_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB99_108 Depth=1
	movl	$0, -12(%rbp)
.LBB99_110:                             # %for.cond331
                                        #   Parent Loop BB99_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB99_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB99_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB99_110 Depth=2
	movl	$0, -4(%rbp)
.LBB99_112:                             # %for.cond335
                                        #   Parent Loop BB99_108 Depth=1
                                        #     Parent Loop BB99_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB99_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB99_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB99_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_112
.LBB99_115:                             # %for.end359
                                        #   in Loop: Header=BB99_110 Depth=2
	jmp	.LBB99_116
.LBB99_116:                             # %for.inc360
                                        #   in Loop: Header=BB99_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB99_110
.LBB99_117:                             # %for.end362
                                        #   in Loop: Header=BB99_108 Depth=1
	jmp	.LBB99_118
.LBB99_118:                             # %for.inc363
                                        #   in Loop: Header=BB99_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB99_108
.LBB99_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB99_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB99_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB99_120 Depth=1
	movl	$0, -8(%rbp)
.LBB99_122:                             # %for.cond370
                                        #   Parent Loop BB99_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB99_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB99_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB99_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_122
.LBB99_125:                             # %for.end380
                                        #   in Loop: Header=BB99_120 Depth=1
	jmp	.LBB99_126
.LBB99_126:                             # %for.inc381
                                        #   in Loop: Header=BB99_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_120
.LBB99_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB99_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB99_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB99_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB99_129 Depth=1
	movl	$0, -4(%rbp)
.LBB99_131:                             # %for.cond390
                                        #   Parent Loop BB99_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB99_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB99_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB99_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_131
.LBB99_134:                             # %for.end410
                                        #   in Loop: Header=BB99_129 Depth=1
	jmp	.LBB99_135
.LBB99_135:                             # %for.inc411
                                        #   in Loop: Header=BB99_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_129
.LBB99_136:                             # %for.end413
	jmp	.LBB99_156
.LBB99_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB99_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB99_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_141 Depth 2
                                        #       Child Loop BB99_143 Depth 3
                                        #         Child Loop BB99_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB99_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB99_141:                             # %for.cond425
                                        #   Parent Loop BB99_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB99_143 Depth 3
                                        #         Child Loop BB99_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB99_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB99_143:                             # %for.cond452
                                        #   Parent Loop BB99_139 Depth=1
                                        #     Parent Loop BB99_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB99_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB99_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB99_143 Depth=3
	movl	$0, -4(%rbp)
.LBB99_145:                             # %for.cond456
                                        #   Parent Loop BB99_139 Depth=1
                                        #     Parent Loop BB99_141 Depth=2
                                        #       Parent Loop BB99_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB99_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB99_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB99_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_145
.LBB99_148:                             # %for.end475
                                        #   in Loop: Header=BB99_143 Depth=3
	jmp	.LBB99_149
.LBB99_149:                             # %for.inc476
                                        #   in Loop: Header=BB99_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_143
.LBB99_150:                             # %for.end478
                                        #   in Loop: Header=BB99_141 Depth=2
	jmp	.LBB99_151
.LBB99_151:                             # %for.inc479
                                        #   in Loop: Header=BB99_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB99_141
.LBB99_152:                             # %for.end481
                                        #   in Loop: Header=BB99_139 Depth=1
	jmp	.LBB99_153
.LBB99_153:                             # %for.inc482
                                        #   in Loop: Header=BB99_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB99_139
.LBB99_154:                             # %for.end484
	jmp	.LBB99_155
.LBB99_155:                             # %if.end485
	jmp	.LBB99_156
.LBB99_156:                             # %if.end486
	jmp	.LBB99_157
.LBB99_157:                             # %if.end487
	jmp	.LBB99_180
.LBB99_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB99_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB99_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB99_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB99_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB99_161 Depth=1
	movl	$0, -4(%rbp)
.LBB99_163:                             # %for.cond499
                                        #   Parent Loop BB99_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB99_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB99_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB99_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_163
.LBB99_166:                             # %for.end519
                                        #   in Loop: Header=BB99_161 Depth=1
	jmp	.LBB99_167
.LBB99_167:                             # %for.inc520
                                        #   in Loop: Header=BB99_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_161
.LBB99_168:                             # %for.end522
	jmp	.LBB99_169
.LBB99_169:                             # %if.end523
	jmp	.LBB99_179
.LBB99_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB99_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB99_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB99_171 Depth=1
	movl	$0, -4(%rbp)
.LBB99_173:                             # %for.cond529
                                        #   Parent Loop BB99_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB99_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB99_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB99_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_173
.LBB99_176:                             # %for.end541
                                        #   in Loop: Header=BB99_171 Depth=1
	jmp	.LBB99_177
.LBB99_177:                             # %for.inc542
                                        #   in Loop: Header=BB99_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_171
.LBB99_178:                             # %for.end544
	jmp	.LBB99_179
.LBB99_179:                             # %if.end545
	jmp	.LBB99_180
.LBB99_180:                             # %sw.epilog
	cmpl	$1549946037, -68(%rbp)  # imm = 0x5C624CB5
	jne	.LBB99_182
.LBB99_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_181
.Lfunc_end99:
	.size	Conceal_Error.89, .Lfunc_end99-Conceal_Error.89
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI99_0:
	.quad	.LBB99_16
	.quad	.LBB99_158
	.quad	.LBB99_106
	.quad	.LBB99_180
	.quad	.LBB99_36
                                        # -- End function
	.text
	.globl	decode_one_b8block.90   # -- Begin function decode_one_b8block.90
	.p2align	4, 0x90
	.type	decode_one_b8block.90,@function
decode_one_b8block.90:                  # @decode_one_b8block.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$703546054, -84(%rbp)   # imm = 0x29EF42C6
	movl	%edi, -44(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB100_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB100_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB100_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_4:                              # %for.cond9
                                        #   Parent Loop BB100_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB100_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB100_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB100_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_4
.LBB100_7:                              # %for.end
                                        #   in Loop: Header=BB100_2 Depth=1
	jmp	.LBB100_8
.LBB100_8:                              # %for.inc26
                                        #   in Loop: Header=BB100_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_2
.LBB100_9:                              # %for.end28
	jmp	.LBB100_96
.LBB100_10:                             # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB100_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB100_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB100_31
.LBB100_14:                             # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB100_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB100_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_17:                             # %for.cond40
                                        #   Parent Loop BB100_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB100_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB100_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB100_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_17
.LBB100_20:                             # %for.end49
                                        #   in Loop: Header=BB100_15 Depth=1
	jmp	.LBB100_21
.LBB100_21:                             # %for.inc50
                                        #   in Loop: Header=BB100_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_15
.LBB100_22:                             # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB100_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB100_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB100_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB100_25:                             # %for.cond56
                                        #   Parent Loop BB100_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB100_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB100_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB100_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_25
.LBB100_28:                             # %for.end71
                                        #   in Loop: Header=BB100_23 Depth=1
	jmp	.LBB100_29
.LBB100_29:                             # %for.inc72
                                        #   in Loop: Header=BB100_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_23
.LBB100_30:                             # %for.end74
	jmp	.LBB100_60
.LBB100_31:                             # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB100_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB100_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB100_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB100_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB100_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB100_36:                             # %for.cond83
                                        #   Parent Loop BB100_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB100_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB100_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB100_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_36
.LBB100_39:                             # %for.end120
                                        #   in Loop: Header=BB100_34 Depth=1
	jmp	.LBB100_40
.LBB100_40:                             # %for.inc121
                                        #   in Loop: Header=BB100_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_34
.LBB100_41:                             # %for.end123
	jmp	.LBB100_51
.LBB100_42:                             # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB100_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB100_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB100_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB100_45:                             # %for.cond129
                                        #   Parent Loop BB100_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB100_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB100_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB100_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_45
.LBB100_48:                             # %for.end145
                                        #   in Loop: Header=BB100_43 Depth=1
	jmp	.LBB100_49
.LBB100_49:                             # %for.inc146
                                        #   in Loop: Header=BB100_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_43
.LBB100_50:                             # %for.end148
	jmp	.LBB100_51
.LBB100_51:                             # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB100_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB100_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_54:                             # %for.cond153
                                        #   Parent Loop BB100_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB100_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB100_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB100_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_54
.LBB100_57:                             # %for.end167
                                        #   in Loop: Header=BB100_52 Depth=1
	jmp	.LBB100_58
.LBB100_58:                             # %for.inc168
                                        #   in Loop: Header=BB100_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_52
.LBB100_59:                             # %for.end170
	jmp	.LBB100_60
.LBB100_60:                             # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB100_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB100_66
.LBB100_62:                             # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB100_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB100_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB100_86
.LBB100_66:                             # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB100_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_69 Depth 2
                                        #       Child Loop BB100_74 Depth 3
                                        #         Child Loop BB100_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB100_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB100_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB100_69:                             # %for.cond197
                                        #   Parent Loop BB100_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_74 Depth 3
                                        #         Child Loop BB100_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB100_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB100_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB100_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB100_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB100_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB100_73:                             # %if.end218
                                        #   in Loop: Header=BB100_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB100_74:                             # %for.cond233
                                        #   Parent Loop BB100_67 Depth=1
                                        #     Parent Loop BB100_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB100_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB100_74 Depth=3
	movl	$0, -8(%rbp)
.LBB100_76:                             # %for.cond237
                                        #   Parent Loop BB100_67 Depth=1
                                        #     Parent Loop BB100_69 Depth=2
                                        #       Parent Loop BB100_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB100_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB100_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB100_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_76
.LBB100_79:                             # %for.end269
                                        #   in Loop: Header=BB100_74 Depth=3
	jmp	.LBB100_80
.LBB100_80:                             # %for.inc270
                                        #   in Loop: Header=BB100_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_74
.LBB100_81:                             # %for.end272
                                        #   in Loop: Header=BB100_69 Depth=2
	jmp	.LBB100_82
.LBB100_82:                             # %for.inc273
                                        #   in Loop: Header=BB100_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_69
.LBB100_83:                             # %for.end275
                                        #   in Loop: Header=BB100_67 Depth=1
	jmp	.LBB100_84
.LBB100_84:                             # %for.inc276
                                        #   in Loop: Header=BB100_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_67
.LBB100_85:                             # %for.end278
	jmp	.LBB100_95
.LBB100_86:                             # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB100_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB100_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_89:                             # %for.cond284
                                        #   Parent Loop BB100_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB100_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB100_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB100_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_89
.LBB100_92:                             # %for.end310
                                        #   in Loop: Header=BB100_87 Depth=1
	jmp	.LBB100_93
.LBB100_93:                             # %for.inc311
                                        #   in Loop: Header=BB100_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_87
.LBB100_94:                             # %for.end313
	jmp	.LBB100_95
.LBB100_95:                             # %if.end314
	jmp	.LBB100_96
.LBB100_96:                             # %if.end315
	cmpl	$703546054, -84(%rbp)   # imm = 0x29EF42C6
	jne	.LBB100_98
.LBB100_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_97
.Lfunc_end100:
	.size	decode_one_b8block.90, .Lfunc_end100-decode_one_b8block.90
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.91       # -- Begin function DecOneForthPix.91
	.p2align	4, 0x90
	.type	DecOneForthPix.91,@function
DecOneForthPix.91:                      # @DecOneForthPix.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$475704382, -8(%rbp)    # imm = 0x1C5AAC3E
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB101_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB101_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB101_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_1
.LBB101_4:                              # %for.end
	cmpl	$475704382, -8(%rbp)    # imm = 0x1C5AAC3E
	jne	.LBB101_6
.LBB101_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_5
.Lfunc_end101:
	.size	DecOneForthPix.91, .Lfunc_end101-DecOneForthPix.91
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.92   # -- Begin function decode_one_b8block.92
	.p2align	4, 0x90
	.type	decode_one_b8block.92,@function
decode_one_b8block.92:                  # @decode_one_b8block.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1057544282, -84(%rbp)  # imm = 0x3F08D85A
	movl	%edi, -56(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB102_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB102_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB102_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB102_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_4:                              # %for.cond9
                                        #   Parent Loop BB102_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB102_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB102_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB102_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_4
.LBB102_7:                              # %for.end
                                        #   in Loop: Header=BB102_2 Depth=1
	jmp	.LBB102_8
.LBB102_8:                              # %for.inc26
                                        #   in Loop: Header=BB102_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_2
.LBB102_9:                              # %for.end28
	jmp	.LBB102_96
.LBB102_10:                             # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB102_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB102_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB102_31
.LBB102_14:                             # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB102_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB102_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB102_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_17:                             # %for.cond40
                                        #   Parent Loop BB102_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB102_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB102_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB102_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_17
.LBB102_20:                             # %for.end49
                                        #   in Loop: Header=BB102_15 Depth=1
	jmp	.LBB102_21
.LBB102_21:                             # %for.inc50
                                        #   in Loop: Header=BB102_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_15
.LBB102_22:                             # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB102_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB102_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB102_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB102_25:                             # %for.cond56
                                        #   Parent Loop BB102_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB102_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB102_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB102_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_25
.LBB102_28:                             # %for.end71
                                        #   in Loop: Header=BB102_23 Depth=1
	jmp	.LBB102_29
.LBB102_29:                             # %for.inc72
                                        #   in Loop: Header=BB102_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_23
.LBB102_30:                             # %for.end74
	jmp	.LBB102_60
.LBB102_31:                             # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB102_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB102_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB102_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB102_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB102_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB102_36:                             # %for.cond83
                                        #   Parent Loop BB102_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB102_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB102_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB102_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_36
.LBB102_39:                             # %for.end120
                                        #   in Loop: Header=BB102_34 Depth=1
	jmp	.LBB102_40
.LBB102_40:                             # %for.inc121
                                        #   in Loop: Header=BB102_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_34
.LBB102_41:                             # %for.end123
	jmp	.LBB102_51
.LBB102_42:                             # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB102_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB102_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB102_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB102_45:                             # %for.cond129
                                        #   Parent Loop BB102_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB102_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB102_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB102_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_45
.LBB102_48:                             # %for.end145
                                        #   in Loop: Header=BB102_43 Depth=1
	jmp	.LBB102_49
.LBB102_49:                             # %for.inc146
                                        #   in Loop: Header=BB102_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_43
.LBB102_50:                             # %for.end148
	jmp	.LBB102_51
.LBB102_51:                             # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB102_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB102_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB102_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_54:                             # %for.cond153
                                        #   Parent Loop BB102_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB102_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB102_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB102_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_54
.LBB102_57:                             # %for.end167
                                        #   in Loop: Header=BB102_52 Depth=1
	jmp	.LBB102_58
.LBB102_58:                             # %for.inc168
                                        #   in Loop: Header=BB102_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_52
.LBB102_59:                             # %for.end170
	jmp	.LBB102_60
.LBB102_60:                             # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB102_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB102_66
.LBB102_62:                             # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB102_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB102_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB102_86
.LBB102_66:                             # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB102_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_69 Depth 2
                                        #       Child Loop BB102_74 Depth 3
                                        #         Child Loop BB102_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB102_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB102_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB102_69:                             # %for.cond197
                                        #   Parent Loop BB102_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_74 Depth 3
                                        #         Child Loop BB102_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB102_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB102_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB102_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB102_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB102_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB102_73:                             # %if.end218
                                        #   in Loop: Header=BB102_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB102_74:                             # %for.cond233
                                        #   Parent Loop BB102_67 Depth=1
                                        #     Parent Loop BB102_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB102_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB102_74 Depth=3
	movl	$0, -8(%rbp)
.LBB102_76:                             # %for.cond237
                                        #   Parent Loop BB102_67 Depth=1
                                        #     Parent Loop BB102_69 Depth=2
                                        #       Parent Loop BB102_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB102_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB102_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB102_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_76
.LBB102_79:                             # %for.end269
                                        #   in Loop: Header=BB102_74 Depth=3
	jmp	.LBB102_80
.LBB102_80:                             # %for.inc270
                                        #   in Loop: Header=BB102_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_74
.LBB102_81:                             # %for.end272
                                        #   in Loop: Header=BB102_69 Depth=2
	jmp	.LBB102_82
.LBB102_82:                             # %for.inc273
                                        #   in Loop: Header=BB102_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_69
.LBB102_83:                             # %for.end275
                                        #   in Loop: Header=BB102_67 Depth=1
	jmp	.LBB102_84
.LBB102_84:                             # %for.inc276
                                        #   in Loop: Header=BB102_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_67
.LBB102_85:                             # %for.end278
	jmp	.LBB102_95
.LBB102_86:                             # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB102_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB102_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB102_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_89:                             # %for.cond284
                                        #   Parent Loop BB102_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB102_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB102_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB102_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_89
.LBB102_92:                             # %for.end310
                                        #   in Loop: Header=BB102_87 Depth=1
	jmp	.LBB102_93
.LBB102_93:                             # %for.inc311
                                        #   in Loop: Header=BB102_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_87
.LBB102_94:                             # %for.end313
	jmp	.LBB102_95
.LBB102_95:                             # %if.end314
	jmp	.LBB102_96
.LBB102_96:                             # %if.end315
	cmpl	$1057544282, -84(%rbp)  # imm = 0x3F08D85A
	jne	.LBB102_98
.LBB102_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_97
.Lfunc_end102:
	.size	decode_one_b8block.92, .Lfunc_end102-decode_one_b8block.92
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.93       # -- Begin function DecOneForthPix.93
	.p2align	4, 0x90
	.type	DecOneForthPix.93,@function
DecOneForthPix.93:                      # @DecOneForthPix.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$719107590, -8(%rbp)    # imm = 0x2ADCB606
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB103_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB103_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB103_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB103_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_1
.LBB103_4:                              # %for.end
	cmpl	$719107590, -8(%rbp)    # imm = 0x2ADCB606
	jne	.LBB103_6
.LBB103_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_5
.Lfunc_end103:
	.size	DecOneForthPix.93, .Lfunc_end103-DecOneForthPix.93
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.94  # -- Begin function Get_Reference_Block.94
	.p2align	4, 0x90
	.type	Get_Reference_Block.94,@function
Get_Reference_Block.94:                 # @Get_Reference_Block.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1758640619, -20(%rbp)  # imm = 0x68D2B9EB
	movq	%rdi, -48(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -12(%rbp)
	movq	%r9, -56(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -8(%rbp)
.LBB104_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB104_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB104_1 Depth=1
	movl	$0, -4(%rbp)
.LBB104_3:                              # %for.cond5
                                        #   Parent Loop BB104_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB104_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB104_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-36(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-28(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB104_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_3
.LBB104_6:                              # %for.end
                                        #   in Loop: Header=BB104_1 Depth=1
	jmp	.LBB104_7
.LBB104_7:                              # %for.inc14
                                        #   in Loop: Header=BB104_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_1
.LBB104_8:                              # %for.end16
	cmpl	$1758640619, -20(%rbp)  # imm = 0x68D2B9EB
	jne	.LBB104_10
.LBB104_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_9
.Lfunc_end104:
	.size	Get_Reference_Block.94, .Lfunc_end104-Get_Reference_Block.94
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.95 # -- Begin function compute_residue_b8block.95
	.p2align	4, 0x90
	.type	compute_residue_b8block.95,@function
compute_residue_b8block.95:             # @compute_residue_b8block.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2085452161, -36(%rbp)  # imm = 0x7C4D7981
	movl	%edi, -20(%rbp)
	movl	%esi, -32(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB105_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB105_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB105_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB105_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB105_4:                              # %for.cond4
                                        #   Parent Loop BB105_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB105_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB105_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB105_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_4
.LBB105_7:                              # %for.end
                                        #   in Loop: Header=BB105_2 Depth=1
	jmp	.LBB105_8
.LBB105_8:                              # %for.inc22
                                        #   in Loop: Header=BB105_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_2
.LBB105_9:                              # %for.end24
	jmp	.LBB105_19
.LBB105_10:                             # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB105_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB105_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB105_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB105_13:                             # %for.cond29
                                        #   Parent Loop BB105_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB105_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB105_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB105_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_13
.LBB105_16:                             # %for.end56
                                        #   in Loop: Header=BB105_11 Depth=1
	jmp	.LBB105_17
.LBB105_17:                             # %for.inc57
                                        #   in Loop: Header=BB105_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_11
.LBB105_18:                             # %for.end59
	jmp	.LBB105_19
.LBB105_19:                             # %if.end
	cmpl	$2085452161, -36(%rbp)  # imm = 0x7C4D7981
	jne	.LBB105_21
.LBB105_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_20
.Lfunc_end105:
	.size	compute_residue_b8block.95, .Lfunc_end105-compute_residue_b8block.95
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.96   # -- Begin function decode_one_b8block.96
	.p2align	4, 0x90
	.type	decode_one_b8block.96,@function
decode_one_b8block.96:                  # @decode_one_b8block.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1917476110, -84(%rbp)  # imm = 0x724A5D0E
	movl	%edi, -52(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB106_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB106_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB106_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB106_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB106_4:                              # %for.cond9
                                        #   Parent Loop BB106_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB106_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB106_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB106_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_4
.LBB106_7:                              # %for.end
                                        #   in Loop: Header=BB106_2 Depth=1
	jmp	.LBB106_8
.LBB106_8:                              # %for.inc26
                                        #   in Loop: Header=BB106_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_2
.LBB106_9:                              # %for.end28
	jmp	.LBB106_96
.LBB106_10:                             # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB106_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB106_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB106_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB106_31
.LBB106_14:                             # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB106_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB106_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB106_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB106_17:                             # %for.cond40
                                        #   Parent Loop BB106_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB106_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB106_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB106_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_17
.LBB106_20:                             # %for.end49
                                        #   in Loop: Header=BB106_15 Depth=1
	jmp	.LBB106_21
.LBB106_21:                             # %for.inc50
                                        #   in Loop: Header=BB106_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_15
.LBB106_22:                             # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB106_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB106_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB106_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB106_25:                             # %for.cond56
                                        #   Parent Loop BB106_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB106_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB106_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB106_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_25
.LBB106_28:                             # %for.end71
                                        #   in Loop: Header=BB106_23 Depth=1
	jmp	.LBB106_29
.LBB106_29:                             # %for.inc72
                                        #   in Loop: Header=BB106_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_23
.LBB106_30:                             # %for.end74
	jmp	.LBB106_60
.LBB106_31:                             # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB106_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB106_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB106_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB106_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB106_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB106_36:                             # %for.cond83
                                        #   Parent Loop BB106_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB106_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB106_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB106_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_36
.LBB106_39:                             # %for.end120
                                        #   in Loop: Header=BB106_34 Depth=1
	jmp	.LBB106_40
.LBB106_40:                             # %for.inc121
                                        #   in Loop: Header=BB106_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_34
.LBB106_41:                             # %for.end123
	jmp	.LBB106_51
.LBB106_42:                             # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB106_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB106_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB106_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB106_45:                             # %for.cond129
                                        #   Parent Loop BB106_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB106_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB106_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB106_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_45
.LBB106_48:                             # %for.end145
                                        #   in Loop: Header=BB106_43 Depth=1
	jmp	.LBB106_49
.LBB106_49:                             # %for.inc146
                                        #   in Loop: Header=BB106_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_43
.LBB106_50:                             # %for.end148
	jmp	.LBB106_51
.LBB106_51:                             # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB106_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB106_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB106_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB106_54:                             # %for.cond153
                                        #   Parent Loop BB106_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB106_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB106_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB106_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_54
.LBB106_57:                             # %for.end167
                                        #   in Loop: Header=BB106_52 Depth=1
	jmp	.LBB106_58
.LBB106_58:                             # %for.inc168
                                        #   in Loop: Header=BB106_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_52
.LBB106_59:                             # %for.end170
	jmp	.LBB106_60
.LBB106_60:                             # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB106_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB106_66
.LBB106_62:                             # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB106_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB106_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB106_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB106_86
.LBB106_66:                             # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB106_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_69 Depth 2
                                        #       Child Loop BB106_74 Depth 3
                                        #         Child Loop BB106_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB106_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB106_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB106_69:                             # %for.cond197
                                        #   Parent Loop BB106_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB106_74 Depth 3
                                        #         Child Loop BB106_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB106_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB106_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB106_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB106_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB106_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB106_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB106_73:                             # %if.end218
                                        #   in Loop: Header=BB106_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB106_74:                             # %for.cond233
                                        #   Parent Loop BB106_67 Depth=1
                                        #     Parent Loop BB106_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB106_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB106_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB106_74 Depth=3
	movl	$0, -4(%rbp)
.LBB106_76:                             # %for.cond237
                                        #   Parent Loop BB106_67 Depth=1
                                        #     Parent Loop BB106_69 Depth=2
                                        #       Parent Loop BB106_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB106_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB106_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB106_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_76
.LBB106_79:                             # %for.end269
                                        #   in Loop: Header=BB106_74 Depth=3
	jmp	.LBB106_80
.LBB106_80:                             # %for.inc270
                                        #   in Loop: Header=BB106_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_74
.LBB106_81:                             # %for.end272
                                        #   in Loop: Header=BB106_69 Depth=2
	jmp	.LBB106_82
.LBB106_82:                             # %for.inc273
                                        #   in Loop: Header=BB106_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_69
.LBB106_83:                             # %for.end275
                                        #   in Loop: Header=BB106_67 Depth=1
	jmp	.LBB106_84
.LBB106_84:                             # %for.inc276
                                        #   in Loop: Header=BB106_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_67
.LBB106_85:                             # %for.end278
	jmp	.LBB106_95
.LBB106_86:                             # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB106_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB106_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB106_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB106_89:                             # %for.cond284
                                        #   Parent Loop BB106_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB106_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB106_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB106_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_89
.LBB106_92:                             # %for.end310
                                        #   in Loop: Header=BB106_87 Depth=1
	jmp	.LBB106_93
.LBB106_93:                             # %for.inc311
                                        #   in Loop: Header=BB106_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_87
.LBB106_94:                             # %for.end313
	jmp	.LBB106_95
.LBB106_95:                             # %if.end314
	jmp	.LBB106_96
.LBB106_96:                             # %if.end315
	cmpl	$1917476110, -84(%rbp)  # imm = 0x724A5D0E
	jne	.LBB106_98
.LBB106_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_97
.Lfunc_end106:
	.size	decode_one_b8block.96, .Lfunc_end106-decode_one_b8block.96
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.97        # -- Begin function Conceal_Error.97
	.p2align	4, 0x90
	.type	Conceal_Error.97,@function
Conceal_Error.97:                       # @Conceal_Error.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1689801831, -68(%rbp)  # imm = 0x64B85467
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB107_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB107_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB107_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB107_4:                              # %land.end
.LBB107_5:                              # %lor.end
.LBB107_6:                              # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB107_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB107_9
.LBB107_8:                              # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB107_14
.LBB107_9:                              # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB107_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB107_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB107_12:                             # %land.end51
.LBB107_13:                             # %lor.end53
.LBB107_14:                             # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB107_180
# %bb.15:                               # %land.end54
	movq	.LJTI107_0(,%rax,8), %rax
	jmpq	*%rax
.LBB107_16:                             # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB107_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB107_18:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB107_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB107_18 Depth=1
	movl	$0, -4(%rbp)
.LBB107_20:                             # %for.cond68
                                        #   Parent Loop BB107_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB107_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB107_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB107_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_20
.LBB107_23:                             # %for.end
                                        #   in Loop: Header=BB107_18 Depth=1
	jmp	.LBB107_24
.LBB107_24:                             # %for.inc85
                                        #   in Loop: Header=BB107_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_18
.LBB107_25:                             # %for.end87
	jmp	.LBB107_35
.LBB107_26:                             # %if.else
	movl	$0, -8(%rbp)
.LBB107_27:                             # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB107_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB107_27 Depth=1
	movl	$0, -4(%rbp)
.LBB107_29:                             # %for.cond92
                                        #   Parent Loop BB107_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB107_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB107_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB107_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_29
.LBB107_32:                             # %for.end104
                                        #   in Loop: Header=BB107_27 Depth=1
	jmp	.LBB107_33
.LBB107_33:                             # %for.inc105
                                        #   in Loop: Header=BB107_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_27
.LBB107_34:                             # %for.end107
	jmp	.LBB107_35
.LBB107_35:                             # %if.end
	jmp	.LBB107_180
.LBB107_36:                             # %sw.bb108
	movl	$0, -16(%rbp)
.LBB107_37:                             # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_39 Depth 2
                                        #       Child Loop BB107_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB107_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB107_37 Depth=1
	movl	$0, -12(%rbp)
.LBB107_39:                             # %for.cond113
                                        #   Parent Loop BB107_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB107_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB107_39 Depth=2
	movl	$0, -4(%rbp)
.LBB107_41:                             # %for.cond117
                                        #   Parent Loop BB107_37 Depth=1
                                        #     Parent Loop BB107_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB107_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB107_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB107_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_41
.LBB107_44:                             # %for.end141
                                        #   in Loop: Header=BB107_39 Depth=2
	jmp	.LBB107_45
.LBB107_45:                             # %for.inc142
                                        #   in Loop: Header=BB107_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_39
.LBB107_46:                             # %for.end144
                                        #   in Loop: Header=BB107_37 Depth=1
	jmp	.LBB107_47
.LBB107_47:                             # %for.inc145
                                        #   in Loop: Header=BB107_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_37
.LBB107_48:                             # %for.end147
	movl	$0, -4(%rbp)
.LBB107_49:                             # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB107_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB107_49 Depth=1
	movl	$0, -8(%rbp)
.LBB107_51:                             # %for.cond152
                                        #   Parent Loop BB107_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB107_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB107_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB107_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_51
.LBB107_54:                             # %for.end162
                                        #   in Loop: Header=BB107_49 Depth=1
	jmp	.LBB107_55
.LBB107_55:                             # %for.inc163
                                        #   in Loop: Header=BB107_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_49
.LBB107_56:                             # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB107_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB107_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB107_59:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB107_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB107_59 Depth=1
	movl	$0, -4(%rbp)
.LBB107_61:                             # %for.cond175
                                        #   Parent Loop BB107_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB107_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB107_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB107_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_61
.LBB107_64:                             # %for.end195
                                        #   in Loop: Header=BB107_59 Depth=1
	jmp	.LBB107_65
.LBB107_65:                             # %for.inc196
                                        #   in Loop: Header=BB107_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_59
.LBB107_66:                             # %for.end198
	jmp	.LBB107_95
.LBB107_67:                             # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB107_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB107_69:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_71 Depth 2
                                        #       Child Loop BB107_73 Depth 3
                                        #         Child Loop BB107_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB107_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB107_71:                             # %for.cond210
                                        #   Parent Loop BB107_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_73 Depth 3
                                        #         Child Loop BB107_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB107_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB107_73:                             # %for.cond236
                                        #   Parent Loop BB107_69 Depth=1
                                        #     Parent Loop BB107_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB107_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB107_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB107_73 Depth=3
	movl	$0, -4(%rbp)
.LBB107_75:                             # %for.cond240
                                        #   Parent Loop BB107_69 Depth=1
                                        #     Parent Loop BB107_71 Depth=2
                                        #       Parent Loop BB107_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB107_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB107_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB107_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_75
.LBB107_78:                             # %for.end259
                                        #   in Loop: Header=BB107_73 Depth=3
	jmp	.LBB107_79
.LBB107_79:                             # %for.inc260
                                        #   in Loop: Header=BB107_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_73
.LBB107_80:                             # %for.end262
                                        #   in Loop: Header=BB107_71 Depth=2
	jmp	.LBB107_81
.LBB107_81:                             # %for.inc263
                                        #   in Loop: Header=BB107_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_71
.LBB107_82:                             # %for.end265
                                        #   in Loop: Header=BB107_69 Depth=1
	jmp	.LBB107_83
.LBB107_83:                             # %for.inc266
                                        #   in Loop: Header=BB107_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_69
.LBB107_84:                             # %for.end268
	jmp	.LBB107_94
.LBB107_85:                             # %if.else269
	movl	$0, -8(%rbp)
.LBB107_86:                             # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB107_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB107_86 Depth=1
	movl	$0, -4(%rbp)
.LBB107_88:                             # %for.cond274
                                        #   Parent Loop BB107_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB107_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB107_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB107_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_88
.LBB107_91:                             # %for.end294
                                        #   in Loop: Header=BB107_86 Depth=1
	jmp	.LBB107_92
.LBB107_92:                             # %for.inc295
                                        #   in Loop: Header=BB107_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_86
.LBB107_93:                             # %for.end297
	jmp	.LBB107_94
.LBB107_94:                             # %if.end298
	jmp	.LBB107_95
.LBB107_95:                             # %if.end299
	jmp	.LBB107_105
.LBB107_96:                             # %if.else300
	movl	$0, -8(%rbp)
.LBB107_97:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB107_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB107_97 Depth=1
	movl	$0, -4(%rbp)
.LBB107_99:                             # %for.cond305
                                        #   Parent Loop BB107_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB107_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB107_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB107_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_99
.LBB107_102:                            # %for.end317
                                        #   in Loop: Header=BB107_97 Depth=1
	jmp	.LBB107_103
.LBB107_103:                            # %for.inc318
                                        #   in Loop: Header=BB107_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_97
.LBB107_104:                            # %for.end320
	jmp	.LBB107_105
.LBB107_105:                            # %if.end321
	jmp	.LBB107_180
.LBB107_106:                            # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB107_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB107_108:                            # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_110 Depth 2
                                        #       Child Loop BB107_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB107_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	$0, -12(%rbp)
.LBB107_110:                            # %for.cond331
                                        #   Parent Loop BB107_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB107_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB107_110 Depth=2
	movl	$0, -4(%rbp)
.LBB107_112:                            # %for.cond335
                                        #   Parent Loop BB107_108 Depth=1
                                        #     Parent Loop BB107_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB107_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB107_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB107_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_112
.LBB107_115:                            # %for.end359
                                        #   in Loop: Header=BB107_110 Depth=2
	jmp	.LBB107_116
.LBB107_116:                            # %for.inc360
                                        #   in Loop: Header=BB107_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_110
.LBB107_117:                            # %for.end362
                                        #   in Loop: Header=BB107_108 Depth=1
	jmp	.LBB107_118
.LBB107_118:                            # %for.inc363
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_108
.LBB107_119:                            # %for.end365
	movl	$0, -4(%rbp)
.LBB107_120:                            # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB107_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB107_120 Depth=1
	movl	$0, -8(%rbp)
.LBB107_122:                            # %for.cond370
                                        #   Parent Loop BB107_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB107_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB107_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB107_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_122
.LBB107_125:                            # %for.end380
                                        #   in Loop: Header=BB107_120 Depth=1
	jmp	.LBB107_126
.LBB107_126:                            # %for.inc381
                                        #   in Loop: Header=BB107_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_120
.LBB107_127:                            # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB107_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB107_129:                            # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB107_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB107_129 Depth=1
	movl	$0, -4(%rbp)
.LBB107_131:                            # %for.cond390
                                        #   Parent Loop BB107_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB107_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB107_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB107_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_131
.LBB107_134:                            # %for.end410
                                        #   in Loop: Header=BB107_129 Depth=1
	jmp	.LBB107_135
.LBB107_135:                            # %for.inc411
                                        #   in Loop: Header=BB107_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_129
.LBB107_136:                            # %for.end413
	jmp	.LBB107_156
.LBB107_137:                            # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB107_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB107_139:                            # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_141 Depth 2
                                        #       Child Loop BB107_143 Depth 3
                                        #         Child Loop BB107_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB107_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB107_141:                            # %for.cond425
                                        #   Parent Loop BB107_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_143 Depth 3
                                        #         Child Loop BB107_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB107_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB107_143:                            # %for.cond452
                                        #   Parent Loop BB107_139 Depth=1
                                        #     Parent Loop BB107_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB107_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB107_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB107_143 Depth=3
	movl	$0, -4(%rbp)
.LBB107_145:                            # %for.cond456
                                        #   Parent Loop BB107_139 Depth=1
                                        #     Parent Loop BB107_141 Depth=2
                                        #       Parent Loop BB107_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB107_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB107_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB107_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_145
.LBB107_148:                            # %for.end475
                                        #   in Loop: Header=BB107_143 Depth=3
	jmp	.LBB107_149
.LBB107_149:                            # %for.inc476
                                        #   in Loop: Header=BB107_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_143
.LBB107_150:                            # %for.end478
                                        #   in Loop: Header=BB107_141 Depth=2
	jmp	.LBB107_151
.LBB107_151:                            # %for.inc479
                                        #   in Loop: Header=BB107_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_141
.LBB107_152:                            # %for.end481
                                        #   in Loop: Header=BB107_139 Depth=1
	jmp	.LBB107_153
.LBB107_153:                            # %for.inc482
                                        #   in Loop: Header=BB107_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_139
.LBB107_154:                            # %for.end484
	jmp	.LBB107_155
.LBB107_155:                            # %if.end485
	jmp	.LBB107_156
.LBB107_156:                            # %if.end486
	jmp	.LBB107_157
.LBB107_157:                            # %if.end487
	jmp	.LBB107_180
.LBB107_158:                            # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB107_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB107_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB107_161:                            # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB107_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB107_161 Depth=1
	movl	$0, -4(%rbp)
.LBB107_163:                            # %for.cond499
                                        #   Parent Loop BB107_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB107_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB107_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB107_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_163
.LBB107_166:                            # %for.end519
                                        #   in Loop: Header=BB107_161 Depth=1
	jmp	.LBB107_167
.LBB107_167:                            # %for.inc520
                                        #   in Loop: Header=BB107_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_161
.LBB107_168:                            # %for.end522
	jmp	.LBB107_169
.LBB107_169:                            # %if.end523
	jmp	.LBB107_179
.LBB107_170:                            # %if.else524
	movl	$0, -8(%rbp)
.LBB107_171:                            # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB107_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB107_171 Depth=1
	movl	$0, -4(%rbp)
.LBB107_173:                            # %for.cond529
                                        #   Parent Loop BB107_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB107_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB107_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB107_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_173
.LBB107_176:                            # %for.end541
                                        #   in Loop: Header=BB107_171 Depth=1
	jmp	.LBB107_177
.LBB107_177:                            # %for.inc542
                                        #   in Loop: Header=BB107_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_171
.LBB107_178:                            # %for.end544
	jmp	.LBB107_179
.LBB107_179:                            # %if.end545
	jmp	.LBB107_180
.LBB107_180:                            # %sw.epilog
	cmpl	$1689801831, -68(%rbp)  # imm = 0x64B85467
	jne	.LBB107_182
.LBB107_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_182:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_181
.Lfunc_end107:
	.size	Conceal_Error.97, .Lfunc_end107-Conceal_Error.97
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI107_0:
	.quad	.LBB107_16
	.quad	.LBB107_158
	.quad	.LBB107_106
	.quad	.LBB107_180
	.quad	.LBB107_36
                                        # -- End function
	.text
	.globl	decode_one_b8block.98   # -- Begin function decode_one_b8block.98
	.p2align	4, 0x90
	.type	decode_one_b8block.98,@function
decode_one_b8block.98:                  # @decode_one_b8block.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1329452666, -84(%rbp)  # imm = 0x4F3DD67A
	movl	%edi, -48(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -64(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB108_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB108_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB108_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB108_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB108_4:                              # %for.cond9
                                        #   Parent Loop BB108_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB108_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB108_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB108_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_4
.LBB108_7:                              # %for.end
                                        #   in Loop: Header=BB108_2 Depth=1
	jmp	.LBB108_8
.LBB108_8:                              # %for.inc26
                                        #   in Loop: Header=BB108_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_2
.LBB108_9:                              # %for.end28
	jmp	.LBB108_96
.LBB108_10:                             # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB108_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB108_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB108_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB108_31
.LBB108_14:                             # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB108_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB108_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB108_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB108_17:                             # %for.cond40
                                        #   Parent Loop BB108_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB108_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB108_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB108_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_17
.LBB108_20:                             # %for.end49
                                        #   in Loop: Header=BB108_15 Depth=1
	jmp	.LBB108_21
.LBB108_21:                             # %for.inc50
                                        #   in Loop: Header=BB108_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_15
.LBB108_22:                             # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB108_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB108_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB108_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB108_25:                             # %for.cond56
                                        #   Parent Loop BB108_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB108_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB108_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB108_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_25
.LBB108_28:                             # %for.end71
                                        #   in Loop: Header=BB108_23 Depth=1
	jmp	.LBB108_29
.LBB108_29:                             # %for.inc72
                                        #   in Loop: Header=BB108_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_23
.LBB108_30:                             # %for.end74
	jmp	.LBB108_60
.LBB108_31:                             # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB108_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB108_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB108_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB108_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB108_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB108_36:                             # %for.cond83
                                        #   Parent Loop BB108_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB108_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB108_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB108_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_36
.LBB108_39:                             # %for.end120
                                        #   in Loop: Header=BB108_34 Depth=1
	jmp	.LBB108_40
.LBB108_40:                             # %for.inc121
                                        #   in Loop: Header=BB108_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_34
.LBB108_41:                             # %for.end123
	jmp	.LBB108_51
.LBB108_42:                             # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB108_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB108_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB108_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB108_45:                             # %for.cond129
                                        #   Parent Loop BB108_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB108_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB108_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB108_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_45
.LBB108_48:                             # %for.end145
                                        #   in Loop: Header=BB108_43 Depth=1
	jmp	.LBB108_49
.LBB108_49:                             # %for.inc146
                                        #   in Loop: Header=BB108_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_43
.LBB108_50:                             # %for.end148
	jmp	.LBB108_51
.LBB108_51:                             # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB108_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB108_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB108_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB108_54:                             # %for.cond153
                                        #   Parent Loop BB108_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB108_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB108_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB108_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_54
.LBB108_57:                             # %for.end167
                                        #   in Loop: Header=BB108_52 Depth=1
	jmp	.LBB108_58
.LBB108_58:                             # %for.inc168
                                        #   in Loop: Header=BB108_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_52
.LBB108_59:                             # %for.end170
	jmp	.LBB108_60
.LBB108_60:                             # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB108_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB108_66
.LBB108_62:                             # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB108_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB108_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB108_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB108_86
.LBB108_66:                             # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB108_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_69 Depth 2
                                        #       Child Loop BB108_74 Depth 3
                                        #         Child Loop BB108_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB108_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB108_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB108_69:                             # %for.cond197
                                        #   Parent Loop BB108_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_74 Depth 3
                                        #         Child Loop BB108_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB108_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB108_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB108_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB108_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB108_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB108_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB108_73:                             # %if.end218
                                        #   in Loop: Header=BB108_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB108_74:                             # %for.cond233
                                        #   Parent Loop BB108_67 Depth=1
                                        #     Parent Loop BB108_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB108_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB108_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB108_74 Depth=3
	movl	$0, -4(%rbp)
.LBB108_76:                             # %for.cond237
                                        #   Parent Loop BB108_67 Depth=1
                                        #     Parent Loop BB108_69 Depth=2
                                        #       Parent Loop BB108_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB108_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB108_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB108_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_76
.LBB108_79:                             # %for.end269
                                        #   in Loop: Header=BB108_74 Depth=3
	jmp	.LBB108_80
.LBB108_80:                             # %for.inc270
                                        #   in Loop: Header=BB108_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_74
.LBB108_81:                             # %for.end272
                                        #   in Loop: Header=BB108_69 Depth=2
	jmp	.LBB108_82
.LBB108_82:                             # %for.inc273
                                        #   in Loop: Header=BB108_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_69
.LBB108_83:                             # %for.end275
                                        #   in Loop: Header=BB108_67 Depth=1
	jmp	.LBB108_84
.LBB108_84:                             # %for.inc276
                                        #   in Loop: Header=BB108_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_67
.LBB108_85:                             # %for.end278
	jmp	.LBB108_95
.LBB108_86:                             # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB108_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB108_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB108_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB108_89:                             # %for.cond284
                                        #   Parent Loop BB108_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB108_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB108_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB108_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_89
.LBB108_92:                             # %for.end310
                                        #   in Loop: Header=BB108_87 Depth=1
	jmp	.LBB108_93
.LBB108_93:                             # %for.inc311
                                        #   in Loop: Header=BB108_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_87
.LBB108_94:                             # %for.end313
	jmp	.LBB108_95
.LBB108_95:                             # %if.end314
	jmp	.LBB108_96
.LBB108_96:                             # %if.end315
	cmpl	$1329452666, -84(%rbp)  # imm = 0x4F3DD67A
	jne	.LBB108_98
.LBB108_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_97
.Lfunc_end108:
	.size	decode_one_b8block.98, .Lfunc_end108-decode_one_b8block.98
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.99  # -- Begin function Get_Reference_Pixel.99
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.99,@function
Get_Reference_Pixel.99:                 # @Get_Reference_Pixel.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1439509399, -104(%rbp) # imm = 0x55CD2B97
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB109_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB109_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB109_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB109_5
.LBB109_4:                              # %cond.false
	movl	-28(%rbp), %ecx
.LBB109_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB109_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB109_11
.LBB109_7:                              # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB109_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB109_10
.LBB109_9:                              # %cond.false13
	movl	-28(%rbp), %ecx
.LBB109_10:                             # %cond.end14
.LBB109_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB109_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB109_14
.LBB109_13:                             # %cond.false20
	movl	-24(%rbp), %ecx
.LBB109_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB109_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB109_20
.LBB109_16:                             # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB109_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB109_19
.LBB109_18:                             # %cond.false28
	movl	-24(%rbp), %ecx
.LBB109_19:                             # %cond.end29
.LBB109_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_332
.LBB109_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB109_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB109_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB109_25
.LBB109_24:                             # %cond.false41
	movl	-28(%rbp), %eax
.LBB109_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB109_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB109_31
.LBB109_27:                             # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB109_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB109_30
.LBB109_29:                             # %cond.false51
	movl	-28(%rbp), %eax
.LBB109_30:                             # %cond.end52
.LBB109_31:                             # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB109_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB109_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB109_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB109_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB109_36
.LBB109_35:                             # %cond.false61
                                        #   in Loop: Header=BB109_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB109_36:                             # %cond.end63
                                        #   in Loop: Header=BB109_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB109_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB109_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB109_42
.LBB109_38:                             # %cond.false68
                                        #   in Loop: Header=BB109_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB109_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB109_41
.LBB109_40:                             # %cond.false73
                                        #   in Loop: Header=BB109_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB109_41:                             # %cond.end75
                                        #   in Loop: Header=BB109_32 Depth=1
.LBB109_42:                             # %cond.end77
                                        #   in Loop: Header=BB109_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB109_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_32
.LBB109_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB109_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_47
.LBB109_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB109_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB109_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB109_53
.LBB109_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB109_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_52
.LBB109_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB109_52:                             # %cond.end113
.LBB109_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB109_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB109_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB109_57
.LBB109_56:                             # %cond.false125
	movl	-24(%rbp), %edx
.LBB109_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB109_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB109_63
.LBB109_59:                             # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB109_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB109_62
.LBB109_61:                             # %cond.false135
	movl	-24(%rbp), %edx
.LBB109_62:                             # %cond.end136
.LBB109_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB109_76
.LBB109_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB109_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB109_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB109_68
.LBB109_67:                             # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB109_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB109_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB109_74
.LBB109_70:                             # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB109_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB109_73
.LBB109_72:                             # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB109_73:                             # %cond.end169
.LBB109_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB109_75:                             # %if.end
	jmp	.LBB109_76
.LBB109_76:                             # %if.end178
	jmp	.LBB109_331
.LBB109_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB109_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB109_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB109_81
.LBB109_80:                             # %cond.false186
	movl	-24(%rbp), %eax
.LBB109_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB109_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB109_87
.LBB109_83:                             # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB109_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB109_86
.LBB109_85:                             # %cond.false196
	movl	-24(%rbp), %eax
.LBB109_86:                             # %cond.end197
.LBB109_87:                             # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB109_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB109_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB109_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB109_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB109_92
.LBB109_91:                             # %cond.false209
                                        #   in Loop: Header=BB109_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB109_92:                             # %cond.end211
                                        #   in Loop: Header=BB109_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB109_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB109_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB109_98
.LBB109_94:                             # %cond.false216
                                        #   in Loop: Header=BB109_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB109_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB109_97
.LBB109_96:                             # %cond.false221
                                        #   in Loop: Header=BB109_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB109_97:                             # %cond.end223
                                        #   in Loop: Header=BB109_88 Depth=1
.LBB109_98:                             # %cond.end225
                                        #   in Loop: Header=BB109_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB109_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_88
.LBB109_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB109_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_103
.LBB109_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB109_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB109_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB109_109
.LBB109_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB109_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_108
.LBB109_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB109_108:                            # %cond.end266
.LBB109_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB109_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB109_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB109_113
.LBB109_112:                            # %cond.false276
	movl	-28(%rbp), %edx
.LBB109_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB109_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB109_119
.LBB109_115:                            # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB109_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB109_118
.LBB109_117:                            # %cond.false286
	movl	-28(%rbp), %edx
.LBB109_118:                            # %cond.end287
.LBB109_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB109_132
.LBB109_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB109_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB109_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB109_124
.LBB109_123:                            # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB109_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB109_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB109_130
.LBB109_126:                            # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB109_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB109_129
.LBB109_128:                            # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB109_129:                            # %cond.end320
.LBB109_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB109_131:                            # %if.end331
	jmp	.LBB109_132
.LBB109_132:                            # %if.end332
	jmp	.LBB109_330
.LBB109_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB109_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB109_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB109_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB109_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB109_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB109_139
.LBB109_138:                            # %cond.false345
                                        #   in Loop: Header=BB109_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB109_139:                            # %cond.end347
                                        #   in Loop: Header=BB109_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB109_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB109_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB109_145
.LBB109_141:                            # %cond.false352
                                        #   in Loop: Header=BB109_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB109_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB109_144
.LBB109_143:                            # %cond.false357
                                        #   in Loop: Header=BB109_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB109_144:                            # %cond.end359
                                        #   in Loop: Header=BB109_135 Depth=1
.LBB109_145:                            # %cond.end361
                                        #   in Loop: Header=BB109_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB109_146:                            # %for.cond363
                                        #   Parent Loop BB109_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB109_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB109_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB109_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB109_150
.LBB109_149:                            # %cond.false371
                                        #   in Loop: Header=BB109_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB109_150:                            # %cond.end373
                                        #   in Loop: Header=BB109_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB109_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB109_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB109_156
.LBB109_152:                            # %cond.false378
                                        #   in Loop: Header=BB109_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB109_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB109_155
.LBB109_154:                            # %cond.false383
                                        #   in Loop: Header=BB109_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB109_155:                            # %cond.end385
                                        #   in Loop: Header=BB109_146 Depth=2
.LBB109_156:                            # %cond.end387
                                        #   in Loop: Header=BB109_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB109_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_146
.LBB109_158:                            # %for.end401
                                        #   in Loop: Header=BB109_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB109_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_135
.LBB109_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB109_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB109_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB109_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB109_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_161
.LBB109_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB109_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_167
.LBB109_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB109_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB109_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB109_173
.LBB109_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB109_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_172
.LBB109_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB109_172:                            # %cond.end449
.LBB109_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB109_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB109_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_177
.LBB109_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB109_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB109_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB109_183
.LBB109_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB109_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_182
.LBB109_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB109_182:                            # %cond.end486
.LBB109_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB109_196
.LBB109_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB109_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB109_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_188
.LBB109_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB109_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB109_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB109_194
.LBB109_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB109_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_193
.LBB109_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB109_193:                            # %cond.end526
.LBB109_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB109_195:                            # %if.end532
	jmp	.LBB109_196
.LBB109_196:                            # %if.end533
	jmp	.LBB109_329
.LBB109_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB109_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB109_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB109_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB109_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB109_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB109_203
.LBB109_202:                            # %cond.false546
                                        #   in Loop: Header=BB109_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB109_203:                            # %cond.end548
                                        #   in Loop: Header=BB109_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB109_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB109_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB109_209
.LBB109_205:                            # %cond.false553
                                        #   in Loop: Header=BB109_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB109_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB109_208
.LBB109_207:                            # %cond.false558
                                        #   in Loop: Header=BB109_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB109_208:                            # %cond.end560
                                        #   in Loop: Header=BB109_199 Depth=1
.LBB109_209:                            # %cond.end562
                                        #   in Loop: Header=BB109_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB109_210:                            # %for.cond564
                                        #   Parent Loop BB109_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB109_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB109_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB109_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB109_214
.LBB109_213:                            # %cond.false572
                                        #   in Loop: Header=BB109_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB109_214:                            # %cond.end574
                                        #   in Loop: Header=BB109_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB109_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB109_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB109_220
.LBB109_216:                            # %cond.false579
                                        #   in Loop: Header=BB109_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB109_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB109_219
.LBB109_218:                            # %cond.false584
                                        #   in Loop: Header=BB109_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB109_219:                            # %cond.end586
                                        #   in Loop: Header=BB109_210 Depth=2
.LBB109_220:                            # %cond.end588
                                        #   in Loop: Header=BB109_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB109_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_210
.LBB109_222:                            # %for.end602
                                        #   in Loop: Header=BB109_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB109_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_199
.LBB109_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB109_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB109_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB109_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB109_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_225
.LBB109_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB109_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_231
.LBB109_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB109_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB109_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB109_237
.LBB109_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB109_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_236
.LBB109_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB109_236:                            # %cond.end650
.LBB109_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB109_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB109_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_241
.LBB109_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB109_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB109_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB109_247
.LBB109_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB109_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_246
.LBB109_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB109_246:                            # %cond.end687
.LBB109_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB109_258
.LBB109_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB109_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_251
.LBB109_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB109_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB109_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB109_257
.LBB109_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB109_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_256
.LBB109_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB109_256:                            # %cond.end724
.LBB109_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB109_258:                            # %if.end730
	jmp	.LBB109_328
.LBB109_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB109_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB109_262
.LBB109_261:                            # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB109_262:                            # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB109_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB109_265
.LBB109_264:                            # %cond.false742
	movl	-40(%rbp), %eax
.LBB109_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB109_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB109_271
.LBB109_267:                            # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB109_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB109_270
.LBB109_269:                            # %cond.false752
	movl	-40(%rbp), %eax
.LBB109_270:                            # %cond.end753
.LBB109_271:                            # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB109_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB109_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB109_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB109_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB109_276
.LBB109_275:                            # %cond.false765
                                        #   in Loop: Header=BB109_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB109_276:                            # %cond.end767
                                        #   in Loop: Header=BB109_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB109_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB109_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB109_282
.LBB109_278:                            # %cond.false772
                                        #   in Loop: Header=BB109_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB109_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB109_281
.LBB109_280:                            # %cond.false777
                                        #   in Loop: Header=BB109_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB109_281:                            # %cond.end779
                                        #   in Loop: Header=BB109_272 Depth=1
.LBB109_282:                            # %cond.end781
                                        #   in Loop: Header=BB109_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB109_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_272
.LBB109_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB109_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_287
.LBB109_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB109_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB109_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB109_293
.LBB109_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB109_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_292
.LBB109_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB109_292:                            # %cond.end822
.LBB109_293:                            # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB109_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB109_296
.LBB109_295:                            # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB109_296:                            # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB109_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB109_299
.LBB109_298:                            # %cond.false836
	movl	-44(%rbp), %eax
.LBB109_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB109_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB109_305
.LBB109_301:                            # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB109_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB109_304
.LBB109_303:                            # %cond.false846
	movl	-44(%rbp), %eax
.LBB109_304:                            # %cond.end847
.LBB109_305:                            # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB109_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB109_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB109_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB109_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB109_310
.LBB109_309:                            # %cond.false859
                                        #   in Loop: Header=BB109_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB109_310:                            # %cond.end861
                                        #   in Loop: Header=BB109_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB109_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB109_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB109_316
.LBB109_312:                            # %cond.false866
                                        #   in Loop: Header=BB109_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB109_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB109_315
.LBB109_314:                            # %cond.false871
                                        #   in Loop: Header=BB109_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB109_315:                            # %cond.end873
                                        #   in Loop: Header=BB109_306 Depth=1
.LBB109_316:                            # %cond.end875
                                        #   in Loop: Header=BB109_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB109_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_306
.LBB109_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB109_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_321
.LBB109_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB109_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB109_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB109_327
.LBB109_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB109_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_326
.LBB109_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB109_326:                            # %cond.end916
.LBB109_327:                            # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB109_328:                            # %if.end922
	jmp	.LBB109_329
.LBB109_329:                            # %if.end923
	jmp	.LBB109_330
.LBB109_330:                            # %if.end924
	jmp	.LBB109_331
.LBB109_331:                            # %if.end925
	jmp	.LBB109_332
.LBB109_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1439509399, -104(%rbp) # imm = 0x55CD2B97
	jne	.LBB109_334
.LBB109_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_333
.Lfunc_end109:
	.size	Get_Reference_Pixel.99, .Lfunc_end109-Get_Reference_Pixel.99
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.100
.LCPI110_0:
	.quad	4636737291354636288     # double 100
.LCPI110_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.100
	.p2align	4, 0x90
	.type	Build_Status_Map.100,@function
Build_Status_Map.100:                   # @Build_Status_Map.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$688468786, -40(%rbp)   # imm = 0x29093332
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -12(%rbp)
.LBB110_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB110_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	$0, -8(%rbp)
.LBB110_3:                              # %for.cond2
                                        #   Parent Loop BB110_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB110_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB110_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB110_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB110_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB110_13
.LBB110_6:                              # %if.then
                                        #   in Loop: Header=BB110_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI110_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI110_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB110_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB110_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB110_8:                              # %if.end
                                        #   in Loop: Header=BB110_3 Depth=2
	callq	rand
	vmovsd	.LCPI110_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI110_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB110_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB110_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB110_10:                             # %if.end20
                                        #   in Loop: Header=BB110_3 Depth=2
	callq	rand
	vmovsd	.LCPI110_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI110_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB110_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB110_3 Depth=2
	movl	$1, -4(%rbp)
.LBB110_12:                             # %if.end29
                                        #   in Loop: Header=BB110_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB110_13:                             # %if.end30
                                        #   in Loop: Header=BB110_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB110_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB110_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB110_18
.LBB110_15:                             # %if.else
                                        #   in Loop: Header=BB110_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB110_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB110_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB110_17:                             # %if.end49
                                        #   in Loop: Header=BB110_3 Depth=2
	jmp	.LBB110_18
.LBB110_18:                             # %if.end50
                                        #   in Loop: Header=BB110_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB110_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_3
.LBB110_20:                             # %for.end
                                        #   in Loop: Header=BB110_1 Depth=1
	jmp	.LBB110_21
.LBB110_21:                             # %for.inc53
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_1
.LBB110_22:                             # %for.end55
	cmpl	$688468786, -40(%rbp)   # imm = 0x29093332
	jne	.LBB110_24
.LBB110_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_23
.Lfunc_end110:
	.size	Build_Status_Map.100, .Lfunc_end110-Build_Status_Map.100
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.101   # -- Begin function Error_Concealment.101
	.p2align	4, 0x90
	.type	Error_Concealment.101,@function
Error_Concealment.101:                  # @Error_Concealment.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1489208430, -12(%rbp)  # imm = 0x58C3846E
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB111_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB111_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB111_1 Depth=1
	movl	$0, -8(%rbp)
.LBB111_3:                              # %for.cond2
                                        #   Parent Loop BB111_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB111_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB111_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB111_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB111_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB111_6:                              # %if.end
                                        #   in Loop: Header=BB111_3 Depth=2
	jmp	.LBB111_7
.LBB111_7:                              # %for.inc
                                        #   in Loop: Header=BB111_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_3
.LBB111_8:                              # %for.end
                                        #   in Loop: Header=BB111_1 Depth=1
	jmp	.LBB111_9
.LBB111_9:                              # %for.inc7
                                        #   in Loop: Header=BB111_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_1
.LBB111_10:                             # %for.end9
	cmpl	$1489208430, -12(%rbp)  # imm = 0x58C3846E
	jne	.LBB111_12
.LBB111_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_11
.Lfunc_end111:
	.size	Error_Concealment.101, .Lfunc_end111-Error_Concealment.101
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.102 # -- Begin function Get_Reference_Pixel.102
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.102,@function
Get_Reference_Pixel.102:                # @Get_Reference_Pixel.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1106532595, -100(%rbp) # imm = 0x41F458F3
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB112_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB112_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB112_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB112_5
.LBB112_4:                              # %cond.false
	movl	-24(%rbp), %ecx
.LBB112_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB112_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB112_11
.LBB112_7:                              # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB112_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB112_10
.LBB112_9:                              # %cond.false13
	movl	-24(%rbp), %ecx
.LBB112_10:                             # %cond.end14
.LBB112_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB112_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB112_14
.LBB112_13:                             # %cond.false20
	movl	-28(%rbp), %ecx
.LBB112_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB112_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB112_20
.LBB112_16:                             # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB112_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB112_19
.LBB112_18:                             # %cond.false28
	movl	-28(%rbp), %ecx
.LBB112_19:                             # %cond.end29
.LBB112_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_332
.LBB112_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB112_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB112_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB112_25
.LBB112_24:                             # %cond.false41
	movl	-24(%rbp), %eax
.LBB112_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB112_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB112_31
.LBB112_27:                             # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB112_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB112_30
.LBB112_29:                             # %cond.false51
	movl	-24(%rbp), %eax
.LBB112_30:                             # %cond.end52
.LBB112_31:                             # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB112_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB112_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB112_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB112_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB112_36
.LBB112_35:                             # %cond.false61
                                        #   in Loop: Header=BB112_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB112_36:                             # %cond.end63
                                        #   in Loop: Header=BB112_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB112_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB112_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB112_42
.LBB112_38:                             # %cond.false68
                                        #   in Loop: Header=BB112_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB112_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB112_41
.LBB112_40:                             # %cond.false73
                                        #   in Loop: Header=BB112_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB112_41:                             # %cond.end75
                                        #   in Loop: Header=BB112_32 Depth=1
.LBB112_42:                             # %cond.end77
                                        #   in Loop: Header=BB112_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB112_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_32
.LBB112_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB112_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB112_47
.LBB112_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB112_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB112_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB112_53
.LBB112_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB112_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB112_52
.LBB112_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB112_52:                             # %cond.end113
.LBB112_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB112_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB112_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB112_57
.LBB112_56:                             # %cond.false125
	movl	-28(%rbp), %edx
.LBB112_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB112_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB112_63
.LBB112_59:                             # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB112_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB112_62
.LBB112_61:                             # %cond.false135
	movl	-28(%rbp), %edx
.LBB112_62:                             # %cond.end136
.LBB112_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB112_76
.LBB112_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB112_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB112_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB112_68
.LBB112_67:                             # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB112_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB112_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB112_74
.LBB112_70:                             # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB112_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB112_73
.LBB112_72:                             # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB112_73:                             # %cond.end169
.LBB112_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB112_75:                             # %if.end
	jmp	.LBB112_76
.LBB112_76:                             # %if.end178
	jmp	.LBB112_331
.LBB112_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB112_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB112_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB112_81
.LBB112_80:                             # %cond.false186
	movl	-28(%rbp), %eax
.LBB112_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB112_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB112_87
.LBB112_83:                             # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB112_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB112_86
.LBB112_85:                             # %cond.false196
	movl	-28(%rbp), %eax
.LBB112_86:                             # %cond.end197
.LBB112_87:                             # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB112_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB112_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB112_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB112_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB112_92
.LBB112_91:                             # %cond.false209
                                        #   in Loop: Header=BB112_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB112_92:                             # %cond.end211
                                        #   in Loop: Header=BB112_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB112_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB112_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB112_98
.LBB112_94:                             # %cond.false216
                                        #   in Loop: Header=BB112_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB112_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB112_97
.LBB112_96:                             # %cond.false221
                                        #   in Loop: Header=BB112_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB112_97:                             # %cond.end223
                                        #   in Loop: Header=BB112_88 Depth=1
.LBB112_98:                             # %cond.end225
                                        #   in Loop: Header=BB112_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB112_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB112_88
.LBB112_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB112_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB112_103
.LBB112_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB112_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB112_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB112_109
.LBB112_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB112_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB112_108
.LBB112_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB112_108:                            # %cond.end266
.LBB112_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB112_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB112_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB112_113
.LBB112_112:                            # %cond.false276
	movl	-24(%rbp), %edx
.LBB112_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB112_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB112_119
.LBB112_115:                            # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB112_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB112_118
.LBB112_117:                            # %cond.false286
	movl	-24(%rbp), %edx
.LBB112_118:                            # %cond.end287
.LBB112_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB112_132
.LBB112_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB112_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB112_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB112_124
.LBB112_123:                            # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB112_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB112_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB112_130
.LBB112_126:                            # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB112_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB112_129
.LBB112_128:                            # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB112_129:                            # %cond.end320
.LBB112_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB112_131:                            # %if.end331
	jmp	.LBB112_132
.LBB112_132:                            # %if.end332
	jmp	.LBB112_330
.LBB112_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB112_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB112_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB112_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB112_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB112_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB112_139
.LBB112_138:                            # %cond.false345
                                        #   in Loop: Header=BB112_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB112_139:                            # %cond.end347
                                        #   in Loop: Header=BB112_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB112_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB112_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB112_145
.LBB112_141:                            # %cond.false352
                                        #   in Loop: Header=BB112_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB112_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB112_144
.LBB112_143:                            # %cond.false357
                                        #   in Loop: Header=BB112_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB112_144:                            # %cond.end359
                                        #   in Loop: Header=BB112_135 Depth=1
.LBB112_145:                            # %cond.end361
                                        #   in Loop: Header=BB112_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB112_146:                            # %for.cond363
                                        #   Parent Loop BB112_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB112_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB112_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB112_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB112_150
.LBB112_149:                            # %cond.false371
                                        #   in Loop: Header=BB112_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB112_150:                            # %cond.end373
                                        #   in Loop: Header=BB112_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB112_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB112_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB112_156
.LBB112_152:                            # %cond.false378
                                        #   in Loop: Header=BB112_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB112_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB112_155
.LBB112_154:                            # %cond.false383
                                        #   in Loop: Header=BB112_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB112_155:                            # %cond.end385
                                        #   in Loop: Header=BB112_146 Depth=2
.LBB112_156:                            # %cond.end387
                                        #   in Loop: Header=BB112_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB112_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_146
.LBB112_158:                            # %for.end401
                                        #   in Loop: Header=BB112_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB112_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB112_135
.LBB112_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB112_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB112_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB112_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB112_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB112_161
.LBB112_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB112_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB112_167
.LBB112_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB112_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB112_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB112_173
.LBB112_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB112_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB112_172
.LBB112_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB112_172:                            # %cond.end449
.LBB112_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB112_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB112_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB112_177
.LBB112_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB112_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB112_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB112_183
.LBB112_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB112_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB112_182
.LBB112_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB112_182:                            # %cond.end486
.LBB112_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB112_196
.LBB112_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB112_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB112_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB112_188
.LBB112_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB112_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB112_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB112_194
.LBB112_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB112_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB112_193
.LBB112_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB112_193:                            # %cond.end526
.LBB112_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB112_195:                            # %if.end532
	jmp	.LBB112_196
.LBB112_196:                            # %if.end533
	jmp	.LBB112_329
.LBB112_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB112_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB112_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB112_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB112_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB112_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB112_203
.LBB112_202:                            # %cond.false546
                                        #   in Loop: Header=BB112_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB112_203:                            # %cond.end548
                                        #   in Loop: Header=BB112_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB112_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB112_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB112_209
.LBB112_205:                            # %cond.false553
                                        #   in Loop: Header=BB112_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB112_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB112_208
.LBB112_207:                            # %cond.false558
                                        #   in Loop: Header=BB112_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB112_208:                            # %cond.end560
                                        #   in Loop: Header=BB112_199 Depth=1
.LBB112_209:                            # %cond.end562
                                        #   in Loop: Header=BB112_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB112_210:                            # %for.cond564
                                        #   Parent Loop BB112_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB112_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB112_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB112_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB112_214
.LBB112_213:                            # %cond.false572
                                        #   in Loop: Header=BB112_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB112_214:                            # %cond.end574
                                        #   in Loop: Header=BB112_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB112_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB112_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB112_220
.LBB112_216:                            # %cond.false579
                                        #   in Loop: Header=BB112_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB112_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB112_219
.LBB112_218:                            # %cond.false584
                                        #   in Loop: Header=BB112_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB112_219:                            # %cond.end586
                                        #   in Loop: Header=BB112_210 Depth=2
.LBB112_220:                            # %cond.end588
                                        #   in Loop: Header=BB112_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB112_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB112_210
.LBB112_222:                            # %for.end602
                                        #   in Loop: Header=BB112_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB112_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_199
.LBB112_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB112_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB112_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB112_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB112_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_225
.LBB112_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB112_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB112_231
.LBB112_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB112_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB112_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB112_237
.LBB112_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB112_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB112_236
.LBB112_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB112_236:                            # %cond.end650
.LBB112_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB112_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB112_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB112_241
.LBB112_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB112_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB112_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB112_247
.LBB112_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB112_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB112_246
.LBB112_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB112_246:                            # %cond.end687
.LBB112_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB112_258
.LBB112_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB112_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB112_251
.LBB112_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB112_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB112_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB112_257
.LBB112_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB112_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB112_256
.LBB112_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB112_256:                            # %cond.end724
.LBB112_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB112_258:                            # %if.end730
	jmp	.LBB112_328
.LBB112_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB112_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB112_262
.LBB112_261:                            # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB112_262:                            # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB112_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB112_265
.LBB112_264:                            # %cond.false742
	movl	-44(%rbp), %eax
.LBB112_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB112_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB112_271
.LBB112_267:                            # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB112_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB112_270
.LBB112_269:                            # %cond.false752
	movl	-44(%rbp), %eax
.LBB112_270:                            # %cond.end753
.LBB112_271:                            # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB112_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB112_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB112_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB112_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB112_276
.LBB112_275:                            # %cond.false765
                                        #   in Loop: Header=BB112_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB112_276:                            # %cond.end767
                                        #   in Loop: Header=BB112_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB112_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB112_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB112_282
.LBB112_278:                            # %cond.false772
                                        #   in Loop: Header=BB112_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB112_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB112_281
.LBB112_280:                            # %cond.false777
                                        #   in Loop: Header=BB112_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB112_281:                            # %cond.end779
                                        #   in Loop: Header=BB112_272 Depth=1
.LBB112_282:                            # %cond.end781
                                        #   in Loop: Header=BB112_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB112_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_272
.LBB112_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB112_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB112_287
.LBB112_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB112_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB112_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB112_293
.LBB112_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB112_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB112_292
.LBB112_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB112_292:                            # %cond.end822
.LBB112_293:                            # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB112_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB112_296
.LBB112_295:                            # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB112_296:                            # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB112_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB112_299
.LBB112_298:                            # %cond.false836
	movl	-40(%rbp), %eax
.LBB112_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB112_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB112_305
.LBB112_301:                            # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB112_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB112_304
.LBB112_303:                            # %cond.false846
	movl	-40(%rbp), %eax
.LBB112_304:                            # %cond.end847
.LBB112_305:                            # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB112_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB112_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB112_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB112_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB112_310
.LBB112_309:                            # %cond.false859
                                        #   in Loop: Header=BB112_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB112_310:                            # %cond.end861
                                        #   in Loop: Header=BB112_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB112_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB112_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB112_316
.LBB112_312:                            # %cond.false866
                                        #   in Loop: Header=BB112_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB112_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB112_315
.LBB112_314:                            # %cond.false871
                                        #   in Loop: Header=BB112_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB112_315:                            # %cond.end873
                                        #   in Loop: Header=BB112_306 Depth=1
.LBB112_316:                            # %cond.end875
                                        #   in Loop: Header=BB112_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB112_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB112_306
.LBB112_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB112_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB112_321
.LBB112_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB112_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB112_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB112_327
.LBB112_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB112_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB112_326
.LBB112_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB112_326:                            # %cond.end916
.LBB112_327:                            # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB112_328:                            # %if.end922
	jmp	.LBB112_329
.LBB112_329:                            # %if.end923
	jmp	.LBB112_330
.LBB112_330:                            # %if.end924
	jmp	.LBB112_331
.LBB112_331:                            # %if.end925
	jmp	.LBB112_332
.LBB112_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1106532595, -100(%rbp) # imm = 0x41F458F3
	jne	.LBB112_334
.LBB112_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_333
.Lfunc_end112:
	.size	Get_Reference_Pixel.102, .Lfunc_end112-Get_Reference_Pixel.102
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.103 # -- Begin function Get_Reference_Block.103
	.p2align	4, 0x90
	.type	Get_Reference_Block.103,@function
Get_Reference_Block.103:                # @Get_Reference_Block.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$716304063, -36(%rbp)   # imm = 0x2AB1EEBF
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -16(%rbp)
	movq	%r9, -56(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB113_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB113_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB113_1 Depth=1
	movl	$0, -8(%rbp)
.LBB113_3:                              # %for.cond5
                                        #   Parent Loop BB113_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB113_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB113_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-32(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB113_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_3
.LBB113_6:                              # %for.end
                                        #   in Loop: Header=BB113_1 Depth=1
	jmp	.LBB113_7
.LBB113_7:                              # %for.inc14
                                        #   in Loop: Header=BB113_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_1
.LBB113_8:                              # %for.end16
	cmpl	$716304063, -36(%rbp)   # imm = 0x2AB1EEBF
	jne	.LBB113_10
.LBB113_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_9
.Lfunc_end113:
	.size	Get_Reference_Block.103, .Lfunc_end113-Get_Reference_Block.103
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.104 # -- Begin function compute_residue_b8block.104
	.p2align	4, 0x90
	.type	compute_residue_b8block.104,@function
compute_residue_b8block.104:            # @compute_residue_b8block.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2143266728, -36(%rbp)  # imm = 0x7FBFA7A8
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB114_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB114_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB114_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_4:                              # %for.cond4
                                        #   Parent Loop BB114_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB114_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB114_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB114_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_4
.LBB114_7:                              # %for.end
                                        #   in Loop: Header=BB114_2 Depth=1
	jmp	.LBB114_8
.LBB114_8:                              # %for.inc22
                                        #   in Loop: Header=BB114_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_2
.LBB114_9:                              # %for.end24
	jmp	.LBB114_19
.LBB114_10:                             # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB114_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB114_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_13:                             # %for.cond29
                                        #   Parent Loop BB114_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB114_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB114_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB114_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_13
.LBB114_16:                             # %for.end56
                                        #   in Loop: Header=BB114_11 Depth=1
	jmp	.LBB114_17
.LBB114_17:                             # %for.inc57
                                        #   in Loop: Header=BB114_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_11
.LBB114_18:                             # %for.end59
	jmp	.LBB114_19
.LBB114_19:                             # %if.end
	cmpl	$2143266728, -36(%rbp)  # imm = 0x7FBFA7A8
	jne	.LBB114_21
.LBB114_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_20
.Lfunc_end114:
	.size	compute_residue_b8block.104, .Lfunc_end114-compute_residue_b8block.104
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.105
.LCPI115_0:
	.quad	4636737291354636288     # double 100
.LCPI115_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.105
	.p2align	4, 0x90
	.type	Build_Status_Map.105,@function
Build_Status_Map.105:                   # @Build_Status_Map.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1653101006, -36(%rbp)  # imm = 0x628851CE
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB115_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB115_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB115_1 Depth=1
	movl	$0, -12(%rbp)
.LBB115_3:                              # %for.cond2
                                        #   Parent Loop BB115_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB115_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB115_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB115_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB115_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB115_13
.LBB115_6:                              # %if.then
                                        #   in Loop: Header=BB115_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI115_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI115_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB115_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB115_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB115_8:                              # %if.end
                                        #   in Loop: Header=BB115_3 Depth=2
	callq	rand
	vmovsd	.LCPI115_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI115_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB115_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB115_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB115_10:                             # %if.end20
                                        #   in Loop: Header=BB115_3 Depth=2
	callq	rand
	vmovsd	.LCPI115_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI115_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB115_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB115_3 Depth=2
	movl	$1, -4(%rbp)
.LBB115_12:                             # %if.end29
                                        #   in Loop: Header=BB115_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB115_13:                             # %if.end30
                                        #   in Loop: Header=BB115_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB115_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB115_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB115_18
.LBB115_15:                             # %if.else
                                        #   in Loop: Header=BB115_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB115_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB115_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB115_17:                             # %if.end49
                                        #   in Loop: Header=BB115_3 Depth=2
	jmp	.LBB115_18
.LBB115_18:                             # %if.end50
                                        #   in Loop: Header=BB115_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB115_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_3
.LBB115_20:                             # %for.end
                                        #   in Loop: Header=BB115_1 Depth=1
	jmp	.LBB115_21
.LBB115_21:                             # %for.inc53
                                        #   in Loop: Header=BB115_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_1
.LBB115_22:                             # %for.end55
	cmpl	$1653101006, -36(%rbp)  # imm = 0x628851CE
	jne	.LBB115_24
.LBB115_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_23
.Lfunc_end115:
	.size	Build_Status_Map.105, .Lfunc_end115-Build_Status_Map.105
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.106  # -- Begin function decode_one_b8block.106
	.p2align	4, 0x90
	.type	decode_one_b8block.106,@function
decode_one_b8block.106:                 # @decode_one_b8block.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1934624283, -84(%rbp)  # imm = 0x7350061B
	movl	%edi, -52(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB116_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB116_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB116_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB116_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB116_4:                              # %for.cond9
                                        #   Parent Loop BB116_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB116_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB116_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB116_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_4
.LBB116_7:                              # %for.end
                                        #   in Loop: Header=BB116_2 Depth=1
	jmp	.LBB116_8
.LBB116_8:                              # %for.inc26
                                        #   in Loop: Header=BB116_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_2
.LBB116_9:                              # %for.end28
	jmp	.LBB116_96
.LBB116_10:                             # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB116_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB116_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB116_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB116_31
.LBB116_14:                             # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB116_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB116_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB116_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB116_17:                             # %for.cond40
                                        #   Parent Loop BB116_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB116_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB116_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB116_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_17
.LBB116_20:                             # %for.end49
                                        #   in Loop: Header=BB116_15 Depth=1
	jmp	.LBB116_21
.LBB116_21:                             # %for.inc50
                                        #   in Loop: Header=BB116_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_15
.LBB116_22:                             # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB116_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB116_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB116_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB116_25:                             # %for.cond56
                                        #   Parent Loop BB116_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB116_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB116_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB116_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_25
.LBB116_28:                             # %for.end71
                                        #   in Loop: Header=BB116_23 Depth=1
	jmp	.LBB116_29
.LBB116_29:                             # %for.inc72
                                        #   in Loop: Header=BB116_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_23
.LBB116_30:                             # %for.end74
	jmp	.LBB116_60
.LBB116_31:                             # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB116_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB116_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB116_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB116_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB116_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB116_36:                             # %for.cond83
                                        #   Parent Loop BB116_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB116_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB116_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB116_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_36
.LBB116_39:                             # %for.end120
                                        #   in Loop: Header=BB116_34 Depth=1
	jmp	.LBB116_40
.LBB116_40:                             # %for.inc121
                                        #   in Loop: Header=BB116_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_34
.LBB116_41:                             # %for.end123
	jmp	.LBB116_51
.LBB116_42:                             # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB116_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB116_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB116_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB116_45:                             # %for.cond129
                                        #   Parent Loop BB116_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB116_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB116_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB116_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_45
.LBB116_48:                             # %for.end145
                                        #   in Loop: Header=BB116_43 Depth=1
	jmp	.LBB116_49
.LBB116_49:                             # %for.inc146
                                        #   in Loop: Header=BB116_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_43
.LBB116_50:                             # %for.end148
	jmp	.LBB116_51
.LBB116_51:                             # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB116_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB116_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB116_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB116_54:                             # %for.cond153
                                        #   Parent Loop BB116_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB116_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB116_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB116_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_54
.LBB116_57:                             # %for.end167
                                        #   in Loop: Header=BB116_52 Depth=1
	jmp	.LBB116_58
.LBB116_58:                             # %for.inc168
                                        #   in Loop: Header=BB116_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_52
.LBB116_59:                             # %for.end170
	jmp	.LBB116_60
.LBB116_60:                             # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB116_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB116_66
.LBB116_62:                             # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB116_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB116_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB116_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB116_86
.LBB116_66:                             # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB116_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_69 Depth 2
                                        #       Child Loop BB116_74 Depth 3
                                        #         Child Loop BB116_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB116_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB116_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB116_69:                             # %for.cond197
                                        #   Parent Loop BB116_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_74 Depth 3
                                        #         Child Loop BB116_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB116_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB116_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB116_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB116_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB116_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB116_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB116_73:                             # %if.end218
                                        #   in Loop: Header=BB116_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB116_74:                             # %for.cond233
                                        #   Parent Loop BB116_67 Depth=1
                                        #     Parent Loop BB116_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB116_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB116_74 Depth=3
	movl	$0, -4(%rbp)
.LBB116_76:                             # %for.cond237
                                        #   Parent Loop BB116_67 Depth=1
                                        #     Parent Loop BB116_69 Depth=2
                                        #       Parent Loop BB116_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB116_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB116_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB116_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_76
.LBB116_79:                             # %for.end269
                                        #   in Loop: Header=BB116_74 Depth=3
	jmp	.LBB116_80
.LBB116_80:                             # %for.inc270
                                        #   in Loop: Header=BB116_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_74
.LBB116_81:                             # %for.end272
                                        #   in Loop: Header=BB116_69 Depth=2
	jmp	.LBB116_82
.LBB116_82:                             # %for.inc273
                                        #   in Loop: Header=BB116_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_69
.LBB116_83:                             # %for.end275
                                        #   in Loop: Header=BB116_67 Depth=1
	jmp	.LBB116_84
.LBB116_84:                             # %for.inc276
                                        #   in Loop: Header=BB116_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_67
.LBB116_85:                             # %for.end278
	jmp	.LBB116_95
.LBB116_86:                             # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB116_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB116_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB116_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB116_89:                             # %for.cond284
                                        #   Parent Loop BB116_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB116_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB116_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB116_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_89
.LBB116_92:                             # %for.end310
                                        #   in Loop: Header=BB116_87 Depth=1
	jmp	.LBB116_93
.LBB116_93:                             # %for.inc311
                                        #   in Loop: Header=BB116_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_87
.LBB116_94:                             # %for.end313
	jmp	.LBB116_95
.LBB116_95:                             # %if.end314
	jmp	.LBB116_96
.LBB116_96:                             # %if.end315
	cmpl	$1934624283, -84(%rbp)  # imm = 0x7350061B
	jne	.LBB116_98
.LBB116_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_97
.Lfunc_end116:
	.size	decode_one_b8block.106, .Lfunc_end116-decode_one_b8block.106
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.107 # -- Begin function compute_residue_b8block.107
	.p2align	4, 0x90
	.type	compute_residue_b8block.107,@function
compute_residue_b8block.107:            # @compute_residue_b8block.107
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2084150064, -36(%rbp)  # imm = 0x7C399B30
	movl	%edi, -20(%rbp)
	movl	%esi, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB117_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB117_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB117_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB117_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB117_4:                              # %for.cond4
                                        #   Parent Loop BB117_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB117_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB117_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB117_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_4
.LBB117_7:                              # %for.end
                                        #   in Loop: Header=BB117_2 Depth=1
	jmp	.LBB117_8
.LBB117_8:                              # %for.inc22
                                        #   in Loop: Header=BB117_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_2
.LBB117_9:                              # %for.end24
	jmp	.LBB117_19
.LBB117_10:                             # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB117_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB117_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB117_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB117_13:                             # %for.cond29
                                        #   Parent Loop BB117_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB117_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB117_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB117_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_13
.LBB117_16:                             # %for.end56
                                        #   in Loop: Header=BB117_11 Depth=1
	jmp	.LBB117_17
.LBB117_17:                             # %for.inc57
                                        #   in Loop: Header=BB117_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_11
.LBB117_18:                             # %for.end59
	jmp	.LBB117_19
.LBB117_19:                             # %if.end
	cmpl	$2084150064, -36(%rbp)  # imm = 0x7C399B30
	jne	.LBB117_21
.LBB117_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_20
.Lfunc_end117:
	.size	compute_residue_b8block.107, .Lfunc_end117-compute_residue_b8block.107
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.108  # -- Begin function decode_one_b8block.108
	.p2align	4, 0x90
	.type	decode_one_b8block.108,@function
decode_one_b8block.108:                 # @decode_one_b8block.108
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1220037393, -84(%rbp)  # imm = 0x48B84B11
	movl	%edi, -56(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB118_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB118_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB118_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB118_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB118_4:                              # %for.cond9
                                        #   Parent Loop BB118_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB118_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB118_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB118_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_4
.LBB118_7:                              # %for.end
                                        #   in Loop: Header=BB118_2 Depth=1
	jmp	.LBB118_8
.LBB118_8:                              # %for.inc26
                                        #   in Loop: Header=BB118_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_2
.LBB118_9:                              # %for.end28
	jmp	.LBB118_96
.LBB118_10:                             # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB118_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB118_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB118_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB118_31
.LBB118_14:                             # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB118_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB118_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB118_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB118_17:                             # %for.cond40
                                        #   Parent Loop BB118_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB118_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB118_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB118_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_17
.LBB118_20:                             # %for.end49
                                        #   in Loop: Header=BB118_15 Depth=1
	jmp	.LBB118_21
.LBB118_21:                             # %for.inc50
                                        #   in Loop: Header=BB118_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_15
.LBB118_22:                             # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB118_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB118_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB118_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB118_25:                             # %for.cond56
                                        #   Parent Loop BB118_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB118_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB118_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB118_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_25
.LBB118_28:                             # %for.end71
                                        #   in Loop: Header=BB118_23 Depth=1
	jmp	.LBB118_29
.LBB118_29:                             # %for.inc72
                                        #   in Loop: Header=BB118_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_23
.LBB118_30:                             # %for.end74
	jmp	.LBB118_60
.LBB118_31:                             # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB118_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB118_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB118_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB118_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB118_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB118_36:                             # %for.cond83
                                        #   Parent Loop BB118_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB118_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB118_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB118_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_36
.LBB118_39:                             # %for.end120
                                        #   in Loop: Header=BB118_34 Depth=1
	jmp	.LBB118_40
.LBB118_40:                             # %for.inc121
                                        #   in Loop: Header=BB118_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_34
.LBB118_41:                             # %for.end123
	jmp	.LBB118_51
.LBB118_42:                             # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB118_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB118_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB118_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB118_45:                             # %for.cond129
                                        #   Parent Loop BB118_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB118_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB118_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB118_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_45
.LBB118_48:                             # %for.end145
                                        #   in Loop: Header=BB118_43 Depth=1
	jmp	.LBB118_49
.LBB118_49:                             # %for.inc146
                                        #   in Loop: Header=BB118_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_43
.LBB118_50:                             # %for.end148
	jmp	.LBB118_51
.LBB118_51:                             # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB118_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB118_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB118_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB118_54:                             # %for.cond153
                                        #   Parent Loop BB118_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB118_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB118_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB118_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_54
.LBB118_57:                             # %for.end167
                                        #   in Loop: Header=BB118_52 Depth=1
	jmp	.LBB118_58
.LBB118_58:                             # %for.inc168
                                        #   in Loop: Header=BB118_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_52
.LBB118_59:                             # %for.end170
	jmp	.LBB118_60
.LBB118_60:                             # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB118_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB118_66
.LBB118_62:                             # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB118_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB118_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB118_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB118_86
.LBB118_66:                             # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB118_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_69 Depth 2
                                        #       Child Loop BB118_74 Depth 3
                                        #         Child Loop BB118_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB118_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB118_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB118_69:                             # %for.cond197
                                        #   Parent Loop BB118_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB118_74 Depth 3
                                        #         Child Loop BB118_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB118_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB118_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB118_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB118_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB118_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB118_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB118_73:                             # %if.end218
                                        #   in Loop: Header=BB118_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB118_74:                             # %for.cond233
                                        #   Parent Loop BB118_67 Depth=1
                                        #     Parent Loop BB118_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB118_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB118_74 Depth=3
	movl	$0, -4(%rbp)
.LBB118_76:                             # %for.cond237
                                        #   Parent Loop BB118_67 Depth=1
                                        #     Parent Loop BB118_69 Depth=2
                                        #       Parent Loop BB118_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB118_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB118_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB118_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_76
.LBB118_79:                             # %for.end269
                                        #   in Loop: Header=BB118_74 Depth=3
	jmp	.LBB118_80
.LBB118_80:                             # %for.inc270
                                        #   in Loop: Header=BB118_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_74
.LBB118_81:                             # %for.end272
                                        #   in Loop: Header=BB118_69 Depth=2
	jmp	.LBB118_82
.LBB118_82:                             # %for.inc273
                                        #   in Loop: Header=BB118_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_69
.LBB118_83:                             # %for.end275
                                        #   in Loop: Header=BB118_67 Depth=1
	jmp	.LBB118_84
.LBB118_84:                             # %for.inc276
                                        #   in Loop: Header=BB118_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_67
.LBB118_85:                             # %for.end278
	jmp	.LBB118_95
.LBB118_86:                             # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB118_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB118_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB118_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB118_89:                             # %for.cond284
                                        #   Parent Loop BB118_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB118_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB118_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB118_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_89
.LBB118_92:                             # %for.end310
                                        #   in Loop: Header=BB118_87 Depth=1
	jmp	.LBB118_93
.LBB118_93:                             # %for.inc311
                                        #   in Loop: Header=BB118_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_87
.LBB118_94:                             # %for.end313
	jmp	.LBB118_95
.LBB118_95:                             # %if.end314
	jmp	.LBB118_96
.LBB118_96:                             # %if.end315
	cmpl	$1220037393, -84(%rbp)  # imm = 0x48B84B11
	jne	.LBB118_98
.LBB118_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_97
.Lfunc_end118:
	.size	decode_one_b8block.108, .Lfunc_end118-decode_one_b8block.108
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.109 # -- Begin function compute_residue_b8block.109
	.p2align	4, 0x90
	.type	compute_residue_b8block.109,@function
compute_residue_b8block.109:            # @compute_residue_b8block.109
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$984512210, -36(%rbp)   # imm = 0x3AAE76D2
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB119_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB119_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB119_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB119_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB119_4:                              # %for.cond4
                                        #   Parent Loop BB119_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB119_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB119_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB119_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_4
.LBB119_7:                              # %for.end
                                        #   in Loop: Header=BB119_2 Depth=1
	jmp	.LBB119_8
.LBB119_8:                              # %for.inc22
                                        #   in Loop: Header=BB119_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_2
.LBB119_9:                              # %for.end24
	jmp	.LBB119_19
.LBB119_10:                             # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB119_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB119_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB119_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB119_13:                             # %for.cond29
                                        #   Parent Loop BB119_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB119_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB119_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB119_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_13
.LBB119_16:                             # %for.end56
                                        #   in Loop: Header=BB119_11 Depth=1
	jmp	.LBB119_17
.LBB119_17:                             # %for.inc57
                                        #   in Loop: Header=BB119_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_11
.LBB119_18:                             # %for.end59
	jmp	.LBB119_19
.LBB119_19:                             # %if.end
	cmpl	$984512210, -36(%rbp)   # imm = 0x3AAE76D2
	jne	.LBB119_21
.LBB119_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_20
.Lfunc_end119:
	.size	compute_residue_b8block.109, .Lfunc_end119-compute_residue_b8block.109
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.110 # -- Begin function compute_residue_b8block.110
	.p2align	4, 0x90
	.type	compute_residue_b8block.110,@function
compute_residue_b8block.110:            # @compute_residue_b8block.110
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1855238350, -36(%rbp)  # imm = 0x6E94B0CE
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB120_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB120_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB120_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB120_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB120_4:                              # %for.cond4
                                        #   Parent Loop BB120_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB120_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB120_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB120_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_4
.LBB120_7:                              # %for.end
                                        #   in Loop: Header=BB120_2 Depth=1
	jmp	.LBB120_8
.LBB120_8:                              # %for.inc22
                                        #   in Loop: Header=BB120_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_2
.LBB120_9:                              # %for.end24
	jmp	.LBB120_19
.LBB120_10:                             # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB120_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB120_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB120_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB120_13:                             # %for.cond29
                                        #   Parent Loop BB120_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB120_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB120_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB120_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_13
.LBB120_16:                             # %for.end56
                                        #   in Loop: Header=BB120_11 Depth=1
	jmp	.LBB120_17
.LBB120_17:                             # %for.inc57
                                        #   in Loop: Header=BB120_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_11
.LBB120_18:                             # %for.end59
	jmp	.LBB120_19
.LBB120_19:                             # %if.end
	cmpl	$1855238350, -36(%rbp)  # imm = 0x6E94B0CE
	jne	.LBB120_21
.LBB120_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_20
.Lfunc_end120:
	.size	compute_residue_b8block.110, .Lfunc_end120-compute_residue_b8block.110
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.111   # -- Begin function Error_Concealment.111
	.p2align	4, 0x90
	.type	Error_Concealment.111,@function
Error_Concealment.111:                  # @Error_Concealment.111
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1135204135, -20(%rbp)  # imm = 0x43A9D727
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB121_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB121_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	$0, -4(%rbp)
.LBB121_3:                              # %for.cond2
                                        #   Parent Loop BB121_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB121_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB121_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB121_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB121_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB121_6:                              # %if.end
                                        #   in Loop: Header=BB121_3 Depth=2
	jmp	.LBB121_7
.LBB121_7:                              # %for.inc
                                        #   in Loop: Header=BB121_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_3
.LBB121_8:                              # %for.end
                                        #   in Loop: Header=BB121_1 Depth=1
	jmp	.LBB121_9
.LBB121_9:                              # %for.inc7
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_1
.LBB121_10:                             # %for.end9
	cmpl	$1135204135, -20(%rbp)  # imm = 0x43A9D727
	jne	.LBB121_12
.LBB121_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_11
.Lfunc_end121:
	.size	Error_Concealment.111, .Lfunc_end121-Error_Concealment.111
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.112 # -- Begin function Get_Reference_Block.112
	.p2align	4, 0x90
	.type	Get_Reference_Block.112,@function
Get_Reference_Block.112:                # @Get_Reference_Block.112
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$976120098, -20(%rbp)   # imm = 0x3A2E6922
	movq	%rdi, -56(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -32(%rbp)
	movq	%r9, -48(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB122_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB122_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB122_1 Depth=1
	movl	$0, -4(%rbp)
.LBB122_3:                              # %for.cond5
                                        #   Parent Loop BB122_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB122_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB122_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-24(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB122_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_3
.LBB122_6:                              # %for.end
                                        #   in Loop: Header=BB122_1 Depth=1
	jmp	.LBB122_7
.LBB122_7:                              # %for.inc14
                                        #   in Loop: Header=BB122_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_1
.LBB122_8:                              # %for.end16
	cmpl	$976120098, -20(%rbp)   # imm = 0x3A2E6922
	jne	.LBB122_10
.LBB122_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_9
.Lfunc_end122:
	.size	Get_Reference_Block.112, .Lfunc_end122-Get_Reference_Block.112
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.113   # -- Begin function Error_Concealment.113
	.p2align	4, 0x90
	.type	Error_Concealment.113,@function
Error_Concealment.113:                  # @Error_Concealment.113
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$685409114, -16(%rbp)   # imm = 0x28DA835A
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB123_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB123_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB123_1 Depth=1
	movl	$0, -8(%rbp)
.LBB123_3:                              # %for.cond2
                                        #   Parent Loop BB123_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB123_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB123_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB123_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB123_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB123_6:                              # %if.end
                                        #   in Loop: Header=BB123_3 Depth=2
	jmp	.LBB123_7
.LBB123_7:                              # %for.inc
                                        #   in Loop: Header=BB123_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_3
.LBB123_8:                              # %for.end
                                        #   in Loop: Header=BB123_1 Depth=1
	jmp	.LBB123_9
.LBB123_9:                              # %for.inc7
                                        #   in Loop: Header=BB123_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_1
.LBB123_10:                             # %for.end9
	cmpl	$685409114, -16(%rbp)   # imm = 0x28DA835A
	jne	.LBB123_12
.LBB123_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_11
.Lfunc_end123:
	.size	Error_Concealment.113, .Lfunc_end123-Error_Concealment.113
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.114 # -- Begin function Get_Reference_Block.114
	.p2align	4, 0x90
	.type	Get_Reference_Block.114,@function
Get_Reference_Block.114:                # @Get_Reference_Block.114
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$586970065, -12(%rbp)   # imm = 0x22FC73D1
	movq	%rdi, -56(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -16(%rbp)
	movq	%r9, -48(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB124_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB124_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB124_1 Depth=1
	movl	$0, -8(%rbp)
.LBB124_3:                              # %for.cond5
                                        #   Parent Loop BB124_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB124_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB124_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-36(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-24(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB124_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_3
.LBB124_6:                              # %for.end
                                        #   in Loop: Header=BB124_1 Depth=1
	jmp	.LBB124_7
.LBB124_7:                              # %for.inc14
                                        #   in Loop: Header=BB124_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_1
.LBB124_8:                              # %for.end16
	cmpl	$586970065, -12(%rbp)   # imm = 0x22FC73D1
	jne	.LBB124_10
.LBB124_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_9
.Lfunc_end124:
	.size	Get_Reference_Block.114, .Lfunc_end124-Get_Reference_Block.114
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.115
.LCPI125_0:
	.quad	4636737291354636288     # double 100
.LCPI125_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.115
	.p2align	4, 0x90
	.type	Build_Status_Map.115,@function
Build_Status_Map.115:                   # @Build_Status_Map.115
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$868922351, -40(%rbp)   # imm = 0x33CAB3EF
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB125_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB125_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB125_1 Depth=1
	movl	$0, -12(%rbp)
.LBB125_3:                              # %for.cond2
                                        #   Parent Loop BB125_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB125_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB125_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB125_13
.LBB125_6:                              # %if.then
                                        #   in Loop: Header=BB125_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI125_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI125_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB125_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB125_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB125_8:                              # %if.end
                                        #   in Loop: Header=BB125_3 Depth=2
	callq	rand
	vmovsd	.LCPI125_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI125_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB125_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB125_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB125_10:                             # %if.end20
                                        #   in Loop: Header=BB125_3 Depth=2
	callq	rand
	vmovsd	.LCPI125_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI125_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB125_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB125_3 Depth=2
	movl	$1, -4(%rbp)
.LBB125_12:                             # %if.end29
                                        #   in Loop: Header=BB125_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB125_13:                             # %if.end30
                                        #   in Loop: Header=BB125_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB125_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB125_18
.LBB125_15:                             # %if.else
                                        #   in Loop: Header=BB125_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB125_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB125_17:                             # %if.end49
                                        #   in Loop: Header=BB125_3 Depth=2
	jmp	.LBB125_18
.LBB125_18:                             # %if.end50
                                        #   in Loop: Header=BB125_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB125_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_3
.LBB125_20:                             # %for.end
                                        #   in Loop: Header=BB125_1 Depth=1
	jmp	.LBB125_21
.LBB125_21:                             # %for.inc53
                                        #   in Loop: Header=BB125_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_1
.LBB125_22:                             # %for.end55
	cmpl	$868922351, -40(%rbp)   # imm = 0x33CAB3EF
	jne	.LBB125_24
.LBB125_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_23
.Lfunc_end125:
	.size	Build_Status_Map.115, .Lfunc_end125-Build_Status_Map.115
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.116   # -- Begin function Error_Concealment.116
	.p2align	4, 0x90
	.type	Error_Concealment.116,@function
Error_Concealment.116:                  # @Error_Concealment.116
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1469401121, -16(%rbp)  # imm = 0x57954821
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB126_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB126_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	$0, -4(%rbp)
.LBB126_3:                              # %for.cond2
                                        #   Parent Loop BB126_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB126_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB126_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB126_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB126_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB126_6:                              # %if.end
                                        #   in Loop: Header=BB126_3 Depth=2
	jmp	.LBB126_7
.LBB126_7:                              # %for.inc
                                        #   in Loop: Header=BB126_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_3
.LBB126_8:                              # %for.end
                                        #   in Loop: Header=BB126_1 Depth=1
	jmp	.LBB126_9
.LBB126_9:                              # %for.inc7
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_1
.LBB126_10:                             # %for.end9
	cmpl	$1469401121, -16(%rbp)  # imm = 0x57954821
	jne	.LBB126_12
.LBB126_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_11
.Lfunc_end126:
	.size	Error_Concealment.116, .Lfunc_end126-Error_Concealment.116
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.117
.LCPI127_0:
	.quad	4636737291354636288     # double 100
.LCPI127_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.117
	.p2align	4, 0x90
	.type	Build_Status_Map.117,@function
Build_Status_Map.117:                   # @Build_Status_Map.117
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1878260897, -36(%rbp)  # imm = 0x6FF3FCA1
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -12(%rbp)
.LBB127_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB127_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB127_1 Depth=1
	movl	$0, -8(%rbp)
.LBB127_3:                              # %for.cond2
                                        #   Parent Loop BB127_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB127_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB127_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB127_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB127_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB127_13
.LBB127_6:                              # %if.then
                                        #   in Loop: Header=BB127_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI127_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI127_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB127_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB127_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB127_8:                              # %if.end
                                        #   in Loop: Header=BB127_3 Depth=2
	callq	rand
	vmovsd	.LCPI127_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI127_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB127_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB127_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB127_10:                             # %if.end20
                                        #   in Loop: Header=BB127_3 Depth=2
	callq	rand
	vmovsd	.LCPI127_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI127_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB127_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB127_3 Depth=2
	movl	$1, -4(%rbp)
.LBB127_12:                             # %if.end29
                                        #   in Loop: Header=BB127_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB127_13:                             # %if.end30
                                        #   in Loop: Header=BB127_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB127_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB127_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB127_18
.LBB127_15:                             # %if.else
                                        #   in Loop: Header=BB127_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB127_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB127_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB127_17:                             # %if.end49
                                        #   in Loop: Header=BB127_3 Depth=2
	jmp	.LBB127_18
.LBB127_18:                             # %if.end50
                                        #   in Loop: Header=BB127_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB127_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_3
.LBB127_20:                             # %for.end
                                        #   in Loop: Header=BB127_1 Depth=1
	jmp	.LBB127_21
.LBB127_21:                             # %for.inc53
                                        #   in Loop: Header=BB127_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_1
.LBB127_22:                             # %for.end55
	cmpl	$1878260897, -36(%rbp)  # imm = 0x6FF3FCA1
	jne	.LBB127_24
.LBB127_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_23
.Lfunc_end127:
	.size	Build_Status_Map.117, .Lfunc_end127-Build_Status_Map.117
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.118   # -- Begin function Error_Concealment.118
	.p2align	4, 0x90
	.type	Error_Concealment.118,@function
Error_Concealment.118:                  # @Error_Concealment.118
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1408274618, -20(%rbp)  # imm = 0x53F090BA
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB128_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB128_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB128_1 Depth=1
	movl	$0, -4(%rbp)
.LBB128_3:                              # %for.cond2
                                        #   Parent Loop BB128_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB128_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB128_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB128_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB128_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB128_6:                              # %if.end
                                        #   in Loop: Header=BB128_3 Depth=2
	jmp	.LBB128_7
.LBB128_7:                              # %for.inc
                                        #   in Loop: Header=BB128_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_3
.LBB128_8:                              # %for.end
                                        #   in Loop: Header=BB128_1 Depth=1
	jmp	.LBB128_9
.LBB128_9:                              # %for.inc7
                                        #   in Loop: Header=BB128_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_1
.LBB128_10:                             # %for.end9
	cmpl	$1408274618, -20(%rbp)  # imm = 0x53F090BA
	jne	.LBB128_12
.LBB128_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_11
.Lfunc_end128:
	.size	Error_Concealment.118, .Lfunc_end128-Error_Concealment.118
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.119 # -- Begin function Get_Reference_Block.119
	.p2align	4, 0x90
	.type	Get_Reference_Block.119,@function
Get_Reference_Block.119:                # @Get_Reference_Block.119
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$606941098, -24(%rbp)   # imm = 0x242D2FAA
	movq	%rdi, -56(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -20(%rbp)
	movq	%r9, -48(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB129_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB129_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB129_1 Depth=1
	movl	$0, -8(%rbp)
.LBB129_3:                              # %for.cond5
                                        #   Parent Loop BB129_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB129_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB129_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-28(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB129_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_3
.LBB129_6:                              # %for.end
                                        #   in Loop: Header=BB129_1 Depth=1
	jmp	.LBB129_7
.LBB129_7:                              # %for.inc14
                                        #   in Loop: Header=BB129_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_1
.LBB129_8:                              # %for.end16
	cmpl	$606941098, -24(%rbp)   # imm = 0x242D2FAA
	jne	.LBB129_10
.LBB129_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_9
.Lfunc_end129:
	.size	Get_Reference_Block.119, .Lfunc_end129-Get_Reference_Block.119
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.120 # -- Begin function Get_Reference_Block.120
	.p2align	4, 0x90
	.type	Get_Reference_Block.120,@function
Get_Reference_Block.120:                # @Get_Reference_Block.120
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$699939265, -24(%rbp)   # imm = 0x29B839C1
	movq	%rdi, -56(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -32(%rbp)
	movq	%r9, -48(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB130_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB130_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB130_1 Depth=1
	movl	$0, -4(%rbp)
.LBB130_3:                              # %for.cond5
                                        #   Parent Loop BB130_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB130_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB130_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB130_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB130_3
.LBB130_6:                              # %for.end
                                        #   in Loop: Header=BB130_1 Depth=1
	jmp	.LBB130_7
.LBB130_7:                              # %for.inc14
                                        #   in Loop: Header=BB130_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB130_1
.LBB130_8:                              # %for.end16
	cmpl	$699939265, -24(%rbp)   # imm = 0x29B839C1
	jne	.LBB130_10
.LBB130_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB130_9
.Lfunc_end130:
	.size	Get_Reference_Block.120, .Lfunc_end130-Get_Reference_Block.120
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.121
.LCPI131_0:
	.quad	4636737291354636288     # double 100
.LCPI131_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.121
	.p2align	4, 0x90
	.type	Build_Status_Map.121,@function
Build_Status_Map.121:                   # @Build_Status_Map.121
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$786538497, -36(%rbp)   # imm = 0x2EE1A001
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB131_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB131_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB131_1 Depth=1
	movl	$0, -12(%rbp)
.LBB131_3:                              # %for.cond2
                                        #   Parent Loop BB131_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB131_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB131_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB131_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB131_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB131_13
.LBB131_6:                              # %if.then
                                        #   in Loop: Header=BB131_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI131_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI131_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB131_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB131_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB131_8:                              # %if.end
                                        #   in Loop: Header=BB131_3 Depth=2
	callq	rand
	vmovsd	.LCPI131_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI131_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB131_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB131_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB131_10:                             # %if.end20
                                        #   in Loop: Header=BB131_3 Depth=2
	callq	rand
	vmovsd	.LCPI131_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI131_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB131_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB131_3 Depth=2
	movl	$1, -4(%rbp)
.LBB131_12:                             # %if.end29
                                        #   in Loop: Header=BB131_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB131_13:                             # %if.end30
                                        #   in Loop: Header=BB131_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB131_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB131_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB131_18
.LBB131_15:                             # %if.else
                                        #   in Loop: Header=BB131_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB131_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB131_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB131_17:                             # %if.end49
                                        #   in Loop: Header=BB131_3 Depth=2
	jmp	.LBB131_18
.LBB131_18:                             # %if.end50
                                        #   in Loop: Header=BB131_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB131_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB131_3
.LBB131_20:                             # %for.end
                                        #   in Loop: Header=BB131_1 Depth=1
	jmp	.LBB131_21
.LBB131_21:                             # %for.inc53
                                        #   in Loop: Header=BB131_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB131_1
.LBB131_22:                             # %for.end55
	cmpl	$786538497, -36(%rbp)   # imm = 0x2EE1A001
	jne	.LBB131_24
.LBB131_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_23
.Lfunc_end131:
	.size	Build_Status_Map.121, .Lfunc_end131-Build_Status_Map.121
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.122 # -- Begin function compute_residue_b8block.122
	.p2align	4, 0x90
	.type	compute_residue_b8block.122,@function
compute_residue_b8block.122:            # @compute_residue_b8block.122
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1753715697, -36(%rbp)  # imm = 0x688793F1
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB132_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB132_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB132_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB132_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB132_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB132_4:                              # %for.cond4
                                        #   Parent Loop BB132_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB132_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB132_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB132_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB132_4
.LBB132_7:                              # %for.end
                                        #   in Loop: Header=BB132_2 Depth=1
	jmp	.LBB132_8
.LBB132_8:                              # %for.inc22
                                        #   in Loop: Header=BB132_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB132_2
.LBB132_9:                              # %for.end24
	jmp	.LBB132_19
.LBB132_10:                             # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB132_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB132_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB132_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB132_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB132_13:                             # %for.cond29
                                        #   Parent Loop BB132_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB132_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB132_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB132_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB132_13
.LBB132_16:                             # %for.end56
                                        #   in Loop: Header=BB132_11 Depth=1
	jmp	.LBB132_17
.LBB132_17:                             # %for.inc57
                                        #   in Loop: Header=BB132_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB132_11
.LBB132_18:                             # %for.end59
	jmp	.LBB132_19
.LBB132_19:                             # %if.end
	cmpl	$1753715697, -36(%rbp)  # imm = 0x688793F1
	jne	.LBB132_21
.LBB132_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_20
.Lfunc_end132:
	.size	compute_residue_b8block.122, .Lfunc_end132-compute_residue_b8block.122
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.123   # -- Begin function Error_Concealment.123
	.p2align	4, 0x90
	.type	Error_Concealment.123,@function
Error_Concealment.123:                  # @Error_Concealment.123
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1591944470, -20(%rbp)  # imm = 0x5EE32516
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB133_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB133_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB133_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB133_1 Depth=1
	movl	$0, -8(%rbp)
.LBB133_3:                              # %for.cond2
                                        #   Parent Loop BB133_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB133_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB133_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB133_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB133_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB133_6:                              # %if.end
                                        #   in Loop: Header=BB133_3 Depth=2
	jmp	.LBB133_7
.LBB133_7:                              # %for.inc
                                        #   in Loop: Header=BB133_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB133_3
.LBB133_8:                              # %for.end
                                        #   in Loop: Header=BB133_1 Depth=1
	jmp	.LBB133_9
.LBB133_9:                              # %for.inc7
                                        #   in Loop: Header=BB133_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB133_1
.LBB133_10:                             # %for.end9
	cmpl	$1591944470, -20(%rbp)  # imm = 0x5EE32516
	jne	.LBB133_12
.LBB133_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_11
.Lfunc_end133:
	.size	Error_Concealment.123, .Lfunc_end133-Error_Concealment.123
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.124 # -- Begin function compute_residue_b8block.124
	.p2align	4, 0x90
	.type	compute_residue_b8block.124,@function
compute_residue_b8block.124:            # @compute_residue_b8block.124
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$676872503, -36(%rbp)   # imm = 0x28584137
	movl	%edi, -20(%rbp)
	movl	%esi, -32(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB134_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB134_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB134_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB134_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB134_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB134_4:                              # %for.cond4
                                        #   Parent Loop BB134_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB134_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB134_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB134_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_4
.LBB134_7:                              # %for.end
                                        #   in Loop: Header=BB134_2 Depth=1
	jmp	.LBB134_8
.LBB134_8:                              # %for.inc22
                                        #   in Loop: Header=BB134_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB134_2
.LBB134_9:                              # %for.end24
	jmp	.LBB134_19
.LBB134_10:                             # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB134_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB134_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB134_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB134_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB134_13:                             # %for.cond29
                                        #   Parent Loop BB134_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB134_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB134_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB134_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_13
.LBB134_16:                             # %for.end56
                                        #   in Loop: Header=BB134_11 Depth=1
	jmp	.LBB134_17
.LBB134_17:                             # %for.inc57
                                        #   in Loop: Header=BB134_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB134_11
.LBB134_18:                             # %for.end59
	jmp	.LBB134_19
.LBB134_19:                             # %if.end
	cmpl	$676872503, -36(%rbp)   # imm = 0x28584137
	jne	.LBB134_21
.LBB134_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_20
.Lfunc_end134:
	.size	compute_residue_b8block.124, .Lfunc_end134-compute_residue_b8block.124
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.125
.LCPI135_0:
	.quad	4636737291354636288     # double 100
.LCPI135_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.125
	.p2align	4, 0x90
	.type	Build_Status_Map.125,@function
Build_Status_Map.125:                   # @Build_Status_Map.125
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$945351994, -40(%rbp)   # imm = 0x3858ED3A
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB135_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB135_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB135_1 Depth=1
	movl	$0, -12(%rbp)
.LBB135_3:                              # %for.cond2
                                        #   Parent Loop BB135_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB135_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB135_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB135_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB135_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB135_13
.LBB135_6:                              # %if.then
                                        #   in Loop: Header=BB135_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI135_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI135_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB135_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB135_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB135_8:                              # %if.end
                                        #   in Loop: Header=BB135_3 Depth=2
	callq	rand
	vmovsd	.LCPI135_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI135_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB135_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB135_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB135_10:                             # %if.end20
                                        #   in Loop: Header=BB135_3 Depth=2
	callq	rand
	vmovsd	.LCPI135_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI135_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB135_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB135_3 Depth=2
	movl	$1, -4(%rbp)
.LBB135_12:                             # %if.end29
                                        #   in Loop: Header=BB135_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB135_13:                             # %if.end30
                                        #   in Loop: Header=BB135_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB135_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB135_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB135_18
.LBB135_15:                             # %if.else
                                        #   in Loop: Header=BB135_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB135_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB135_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB135_17:                             # %if.end49
                                        #   in Loop: Header=BB135_3 Depth=2
	jmp	.LBB135_18
.LBB135_18:                             # %if.end50
                                        #   in Loop: Header=BB135_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB135_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_3
.LBB135_20:                             # %for.end
                                        #   in Loop: Header=BB135_1 Depth=1
	jmp	.LBB135_21
.LBB135_21:                             # %for.inc53
                                        #   in Loop: Header=BB135_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB135_1
.LBB135_22:                             # %for.end55
	cmpl	$945351994, -40(%rbp)   # imm = 0x3858ED3A
	jne	.LBB135_24
.LBB135_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_23
.Lfunc_end135:
	.size	Build_Status_Map.125, .Lfunc_end135-Build_Status_Map.125
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.126 # -- Begin function compute_residue_b8block.126
	.p2align	4, 0x90
	.type	compute_residue_b8block.126,@function
compute_residue_b8block.126:            # @compute_residue_b8block.126
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1501985140, -36(%rbp)  # imm = 0x59867974
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB136_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB136_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB136_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB136_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB136_4:                              # %for.cond4
                                        #   Parent Loop BB136_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB136_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB136_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB136_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_4
.LBB136_7:                              # %for.end
                                        #   in Loop: Header=BB136_2 Depth=1
	jmp	.LBB136_8
.LBB136_8:                              # %for.inc22
                                        #   in Loop: Header=BB136_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_2
.LBB136_9:                              # %for.end24
	jmp	.LBB136_19
.LBB136_10:                             # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB136_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB136_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB136_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB136_13:                             # %for.cond29
                                        #   Parent Loop BB136_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB136_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB136_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB136_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_13
.LBB136_16:                             # %for.end56
                                        #   in Loop: Header=BB136_11 Depth=1
	jmp	.LBB136_17
.LBB136_17:                             # %for.inc57
                                        #   in Loop: Header=BB136_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_11
.LBB136_18:                             # %for.end59
	jmp	.LBB136_19
.LBB136_19:                             # %if.end
	cmpl	$1501985140, -36(%rbp)  # imm = 0x59867974
	jne	.LBB136_21
.LBB136_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_20
.Lfunc_end136:
	.size	compute_residue_b8block.126, .Lfunc_end136-compute_residue_b8block.126
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.127 # -- Begin function compute_residue_b8block.127
	.p2align	4, 0x90
	.type	compute_residue_b8block.127,@function
compute_residue_b8block.127:            # @compute_residue_b8block.127
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$423661445, -36(%rbp)   # imm = 0x19408F85
	movl	%edi, -32(%rbp)
	movl	%esi, -20(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB137_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB137_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB137_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB137_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB137_4:                              # %for.cond4
                                        #   Parent Loop BB137_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB137_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB137_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB137_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_4
.LBB137_7:                              # %for.end
                                        #   in Loop: Header=BB137_2 Depth=1
	jmp	.LBB137_8
.LBB137_8:                              # %for.inc22
                                        #   in Loop: Header=BB137_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_2
.LBB137_9:                              # %for.end24
	jmp	.LBB137_19
.LBB137_10:                             # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB137_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB137_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB137_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB137_13:                             # %for.cond29
                                        #   Parent Loop BB137_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB137_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB137_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB137_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_13
.LBB137_16:                             # %for.end56
                                        #   in Loop: Header=BB137_11 Depth=1
	jmp	.LBB137_17
.LBB137_17:                             # %for.inc57
                                        #   in Loop: Header=BB137_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_11
.LBB137_18:                             # %for.end59
	jmp	.LBB137_19
.LBB137_19:                             # %if.end
	cmpl	$423661445, -36(%rbp)   # imm = 0x19408F85
	jne	.LBB137_21
.LBB137_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_20
.Lfunc_end137:
	.size	compute_residue_b8block.127, .Lfunc_end137-compute_residue_b8block.127
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.128
.LCPI138_0:
	.quad	4636737291354636288     # double 100
.LCPI138_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.128
	.p2align	4, 0x90
	.type	Build_Status_Map.128,@function
Build_Status_Map.128:                   # @Build_Status_Map.128
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$64439810, -44(%rbp)    # imm = 0x3D74602
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB138_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB138_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB138_1 Depth=1
	movl	$0, -12(%rbp)
.LBB138_3:                              # %for.cond2
                                        #   Parent Loop BB138_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB138_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB138_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB138_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB138_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB138_13
.LBB138_6:                              # %if.then
                                        #   in Loop: Header=BB138_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI138_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI138_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB138_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB138_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB138_8:                              # %if.end
                                        #   in Loop: Header=BB138_3 Depth=2
	callq	rand
	vmovsd	.LCPI138_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI138_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB138_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB138_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB138_10:                             # %if.end20
                                        #   in Loop: Header=BB138_3 Depth=2
	callq	rand
	vmovsd	.LCPI138_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI138_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB138_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB138_3 Depth=2
	movl	$1, -4(%rbp)
.LBB138_12:                             # %if.end29
                                        #   in Loop: Header=BB138_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB138_13:                             # %if.end30
                                        #   in Loop: Header=BB138_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB138_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB138_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB138_18
.LBB138_15:                             # %if.else
                                        #   in Loop: Header=BB138_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB138_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB138_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB138_17:                             # %if.end49
                                        #   in Loop: Header=BB138_3 Depth=2
	jmp	.LBB138_18
.LBB138_18:                             # %if.end50
                                        #   in Loop: Header=BB138_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB138_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_3
.LBB138_20:                             # %for.end
                                        #   in Loop: Header=BB138_1 Depth=1
	jmp	.LBB138_21
.LBB138_21:                             # %for.inc53
                                        #   in Loop: Header=BB138_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB138_1
.LBB138_22:                             # %for.end55
	cmpl	$64439810, -44(%rbp)    # imm = 0x3D74602
	jne	.LBB138_24
.LBB138_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_23
.Lfunc_end138:
	.size	Build_Status_Map.128, .Lfunc_end138-Build_Status_Map.128
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.129
.LCPI139_0:
	.quad	4636737291354636288     # double 100
.LCPI139_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.129
	.p2align	4, 0x90
	.type	Build_Status_Map.129,@function
Build_Status_Map.129:                   # @Build_Status_Map.129
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1133437737, -40(%rbp)  # imm = 0x438EE329
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB139_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB139_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB139_1 Depth=1
	movl	$0, -8(%rbp)
.LBB139_3:                              # %for.cond2
                                        #   Parent Loop BB139_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB139_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB139_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB139_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB139_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB139_13
.LBB139_6:                              # %if.then
                                        #   in Loop: Header=BB139_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI139_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI139_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB139_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB139_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB139_8:                              # %if.end
                                        #   in Loop: Header=BB139_3 Depth=2
	callq	rand
	vmovsd	.LCPI139_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI139_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB139_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB139_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB139_10:                             # %if.end20
                                        #   in Loop: Header=BB139_3 Depth=2
	callq	rand
	vmovsd	.LCPI139_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI139_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB139_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB139_3 Depth=2
	movl	$1, -4(%rbp)
.LBB139_12:                             # %if.end29
                                        #   in Loop: Header=BB139_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB139_13:                             # %if.end30
                                        #   in Loop: Header=BB139_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB139_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB139_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB139_18
.LBB139_15:                             # %if.else
                                        #   in Loop: Header=BB139_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB139_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB139_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB139_17:                             # %if.end49
                                        #   in Loop: Header=BB139_3 Depth=2
	jmp	.LBB139_18
.LBB139_18:                             # %if.end50
                                        #   in Loop: Header=BB139_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB139_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB139_3
.LBB139_20:                             # %for.end
                                        #   in Loop: Header=BB139_1 Depth=1
	jmp	.LBB139_21
.LBB139_21:                             # %for.inc53
                                        #   in Loop: Header=BB139_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB139_1
.LBB139_22:                             # %for.end55
	cmpl	$1133437737, -40(%rbp)  # imm = 0x438EE329
	jne	.LBB139_24
.LBB139_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_23
.Lfunc_end139:
	.size	Build_Status_Map.129, .Lfunc_end139-Build_Status_Map.129
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.130
.LCPI140_0:
	.quad	4636737291354636288     # double 100
.LCPI140_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.130
	.p2align	4, 0x90
	.type	Build_Status_Map.130,@function
Build_Status_Map.130:                   # @Build_Status_Map.130
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1936891476, -36(%rbp)  # imm = 0x73729E54
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB140_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB140_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB140_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB140_1 Depth=1
	movl	$0, -12(%rbp)
.LBB140_3:                              # %for.cond2
                                        #   Parent Loop BB140_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB140_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB140_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB140_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB140_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB140_13
.LBB140_6:                              # %if.then
                                        #   in Loop: Header=BB140_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI140_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI140_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB140_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB140_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB140_8:                              # %if.end
                                        #   in Loop: Header=BB140_3 Depth=2
	callq	rand
	vmovsd	.LCPI140_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI140_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB140_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB140_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB140_10:                             # %if.end20
                                        #   in Loop: Header=BB140_3 Depth=2
	callq	rand
	vmovsd	.LCPI140_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI140_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB140_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB140_3 Depth=2
	movl	$1, -4(%rbp)
.LBB140_12:                             # %if.end29
                                        #   in Loop: Header=BB140_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB140_13:                             # %if.end30
                                        #   in Loop: Header=BB140_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB140_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB140_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB140_18
.LBB140_15:                             # %if.else
                                        #   in Loop: Header=BB140_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB140_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB140_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB140_17:                             # %if.end49
                                        #   in Loop: Header=BB140_3 Depth=2
	jmp	.LBB140_18
.LBB140_18:                             # %if.end50
                                        #   in Loop: Header=BB140_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB140_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB140_3
.LBB140_20:                             # %for.end
                                        #   in Loop: Header=BB140_1 Depth=1
	jmp	.LBB140_21
.LBB140_21:                             # %for.inc53
                                        #   in Loop: Header=BB140_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB140_1
.LBB140_22:                             # %for.end55
	cmpl	$1936891476, -36(%rbp)  # imm = 0x73729E54
	jne	.LBB140_24
.LBB140_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_23
.Lfunc_end140:
	.size	Build_Status_Map.130, .Lfunc_end140-Build_Status_Map.130
	.cfi_endproc
                                        # -- End function
	.type	Get_Reference_Pixel.COEF,@object # @Get_Reference_Pixel.COEF
	.section	.rodata,"a",@progbits
	.p2align	4
Get_Reference_Pixel.COEF:
	.long	1                       # 0x1
	.long	4294967291              # 0xfffffffb
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	4294967291              # 0xfffffffb
	.long	1                       # 0x1
	.size	Get_Reference_Pixel.COEF, 24

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
