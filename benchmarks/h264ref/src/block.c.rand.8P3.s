	.text
	.file	"block.c"
	.globl	intrapred_luma          # -- Begin function intrapred_luma
	.p2align	4, 0x90
	.type	intrapred_luma,@function
intrapred_luma:                         # @intrapred_luma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r8, %r14
	movq	%rcx, %r15
	movq	%rdx, %r12
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB0_9
# %bb.1:                                # %func_intrapred_luma.10
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.10
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_intrapred_luma.31
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.31
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_intrapred_luma.37
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.37
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_intrapred_luma.43
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.43
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_intrapred_luma.52
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.52
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_intrapred_luma.56
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.56
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_intrapred_luma.63
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.63
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_intrapred_luma.64
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.64
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
	jmp	.LBB0_8
.Lfunc_end0:
	.size	intrapred_luma, .Lfunc_end0-intrapred_luma
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16    # -- Begin function intrapred_luma_16x16
	.p2align	4, 0x90
	.type	intrapred_luma_16x16,@function
intrapred_luma_16x16:                   # @intrapred_luma_16x16
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB1_9
# %bb.1:                                # %func_intrapred_luma_16x16.1
	callq	intrapred_luma_16x16.1
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_intrapred_luma_16x16.14
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_intrapred_luma_16x16.18
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.18
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_intrapred_luma_16x16.20
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.20
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %func_intrapred_luma_16x16.29
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.29
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_6:                                # %func_intrapred_luma_16x16.33
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.33
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_7:                                # %func_intrapred_luma_16x16.38
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.38
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_8:                                # %func_intrapred_luma_16x16.42
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.42
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB1_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB1_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB1_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB1_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB1_7
	jmp	.LBB1_8
.Lfunc_end1:
	.size	intrapred_luma_16x16, .Lfunc_end1-intrapred_luma_16x16
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16          # -- Begin function dct_luma_16x16
	.p2align	4, 0x90
	.type	dct_luma_16x16,@function
dct_luma_16x16:                         # @dct_luma_16x16
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_9
# %bb.1:                                # %func_dct_luma_16x16.2
	movl	%ebx, %edi
	callq	dct_luma_16x16.2
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_dct_luma_16x16.5
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.5
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_dct_luma_16x16.8
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.8
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_dct_luma_16x16.11
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.11
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %func_dct_luma_16x16.19
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.19
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_6:                                # %func_dct_luma_16x16.23
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.23
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_7:                                # %func_dct_luma_16x16.32
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.32
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_8:                                # %func_dct_luma_16x16.48
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.48
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB2_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB2_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB2_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB2_7
	jmp	.LBB2_8
.Lfunc_end2:
	.size	dct_luma_16x16, .Lfunc_end2-dct_luma_16x16
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma                # -- Begin function dct_luma
	.p2align	4, 0x90
	.type	dct_luma,@function
dct_luma:                               # @dct_luma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movq	%rdx, %r15
	movl	%esi, %r12d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_9
# %bb.1:                                # %func_dct_luma.3
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.3
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_dct_luma.41
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.41
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_dct_luma.72
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.72
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_dct_luma.73
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.73
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_dct_luma.75
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.75
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_dct_luma.78
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.78
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_dct_luma.79
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.79
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_dct_luma.80
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.80
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
	jmp	.LBB3_8
.Lfunc_end3:
	.size	dct_luma, .Lfunc_end3-dct_luma
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma              # -- Begin function dct_chroma
	.p2align	4, 0x90
	.type	dct_chroma,@function
dct_chroma:                             # @dct_chroma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB4_9
# %bb.1:                                # %func_dct_chroma.6
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.6
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_dct_chroma.13
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.13
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_dct_chroma.16
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.16
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_dct_chroma.27
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.27
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %func_dct_chroma.34
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.34
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_6:                                # %func_dct_chroma.36
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.36
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_7:                                # %func_dct_chroma.45
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.45
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_8:                                # %func_dct_chroma.47
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.47
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB4_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB4_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB4_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB4_7
	jmp	.LBB4_8
.Lfunc_end4:
	.size	dct_chroma, .Lfunc_end4-dct_chroma
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4           # -- Begin function dct_chroma4x4
	.p2align	4, 0x90
	.type	dct_chroma4x4,@function
dct_chroma4x4:                          # @dct_chroma4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB5_9
# %bb.1:                                # %func_dct_chroma4x4.24
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.24
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_dct_chroma4x4.28
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.28
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_dct_chroma4x4.50
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.50
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_dct_chroma4x4.55
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.55
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_dct_chroma4x4.57
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.57
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_dct_chroma4x4.67
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.67
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_dct_chroma4x4.68
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.68
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_dct_chroma4x4.69
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.69
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
	jmp	.LBB5_8
.Lfunc_end5:
	.size	dct_chroma4x4, .Lfunc_end5-dct_chroma4x4
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC           # -- Begin function dct_chroma_DC
	.p2align	4, 0x90
	.type	dct_chroma_DC,@function
dct_chroma_DC:                          # @dct_chroma_DC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB6_9
# %bb.1:                                # %func_dct_chroma_DC.17
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.17
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_dct_chroma_DC.22
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.22
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_dct_chroma_DC.59
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.59
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_dct_chroma_DC.70
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.70
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_dct_chroma_DC.71
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.71
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_dct_chroma_DC.74
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.74
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %func_dct_chroma_DC.76
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.76
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_8:                                # %func_dct_chroma_DC.77
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.77
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB6_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB6_7
	jmp	.LBB6_8
.Lfunc_end6:
	.size	dct_chroma_DC, .Lfunc_end6-dct_chroma_DC
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_sp             # -- Begin function dct_luma_sp
	.p2align	4, 0x90
	.type	dct_luma_sp,@function
dct_luma_sp:                            # @dct_luma_sp
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB7_9
# %bb.1:                                # %func_dct_luma_sp.4
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.4
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_dct_luma_sp.21
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.21
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_dct_luma_sp.25
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.25
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_dct_luma_sp.30
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.30
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_dct_luma_sp.51
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.51
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_dct_luma_sp.61
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.61
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %func_dct_luma_sp.65
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.65
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_8:                                # %func_dct_luma_sp.66
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.66
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB7_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB7_7
	jmp	.LBB7_8
.Lfunc_end7:
	.size	dct_luma_sp, .Lfunc_end7-dct_luma_sp
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_sp           # -- Begin function dct_chroma_sp
	.p2align	4, 0x90
	.type	dct_chroma_sp,@function
dct_chroma_sp:                          # @dct_chroma_sp
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB8_9
# %bb.1:                                # %func_dct_chroma_sp.15
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.15
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_dct_chroma_sp.39
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.39
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_dct_chroma_sp.44
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.44
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_dct_chroma_sp.49
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.49
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %func_dct_chroma_sp.53
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.53
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_6:                                # %func_dct_chroma_sp.58
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.58
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_7:                                # %func_dct_chroma_sp.60
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.60
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_8:                                # %func_dct_chroma_sp.62
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.62
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB8_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB8_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB8_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB8_7
	jmp	.LBB8_8
.Lfunc_end8:
	.size	dct_chroma_sp, .Lfunc_end8-dct_chroma_sp
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp            # -- Begin function copyblock_sp
	.p2align	4, 0x90
	.type	copyblock_sp,@function
copyblock_sp:                           # @copyblock_sp
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB9_9
# %bb.1:                                # %func_copyblock_sp.7
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.7
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_copyblock_sp.9
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.9
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_copyblock_sp.12
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.12
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_copyblock_sp.26
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.26
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %func_copyblock_sp.35
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.35
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_6:                                # %func_copyblock_sp.40
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.40
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_7:                                # %func_copyblock_sp.46
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.46
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_8:                                # %func_copyblock_sp.54
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.54
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB9_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB9_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB9_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB9_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB9_7
	jmp	.LBB9_8
.Lfunc_end9:
	.size	copyblock_sp, .Lfunc_end9-copyblock_sp
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.1  # -- Begin function intrapred_luma_16x16.1
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.1,@function
intrapred_luma_16x16.1:                 # @intrapred_luma_16x16.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$1574754239, -92(%rbp)  # imm = 0x5DDCD7BF
	movl	$0, -32(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -60(%rbp)
	movl	$0, -4(%rbp)
.LBB10_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB10_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	-60(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_1
.LBB10_4:                               # %for.end
	movl	-60(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB10_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB10_20
.LBB10_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB10_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB10_9
.LBB10_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB10_9
.LBB10_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB10_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB10_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB10_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB10_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB10_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB10_14
.LBB10_13:                              # %cond.false23
                                        #   in Loop: Header=BB10_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB10_14
.LBB10_14:                              # %cond.end24
                                        #   in Loop: Header=BB10_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB10_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_10
.LBB10_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB10_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB10_19
.LBB10_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB10_19
.LBB10_19:                              # %cond.end39
	movl	%eax, -64(%rbp)
.LBB10_20:                              # %if.end
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB10_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB10_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB10_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB10_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB10_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB10_24:                              # %if.end51
                                        #   in Loop: Header=BB10_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB10_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB10_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB10_26:                              # %if.end68
                                        #   in Loop: Header=BB10_21 Depth=1
	jmp	.LBB10_27
.LBB10_27:                              # %for.inc69
                                        #   in Loop: Header=BB10_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_21
.LBB10_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB10_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB10_31
# %bb.30:                               # %if.then74
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB10_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB10_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB10_34
# %bb.33:                               # %if.then81
	movl	-40(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB10_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB10_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB10_37
# %bb.36:                               # %if.then88
	movl	-36(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB10_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB10_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB10_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB10_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB10_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB10_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB10_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB10_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB10_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB10_44:                              # %if.end114
                                        #   in Loop: Header=BB10_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB10_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB10_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB10_46:                              # %if.end133
                                        #   in Loop: Header=BB10_41 Depth=1
	jmp	.LBB10_47
.LBB10_47:                              # %for.inc134
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_41
.LBB10_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB10_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB10_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB10_49 Depth=1
	movl	$0, -4(%rbp)
.LBB10_51:                              # %for.cond141
                                        #   Parent Loop BB10_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB10_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB10_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB10_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_51
.LBB10_54:                              # %for.end173
                                        #   in Loop: Header=BB10_49 Depth=1
	jmp	.LBB10_55
.LBB10_55:                              # %for.inc174
                                        #   in Loop: Header=BB10_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_49
.LBB10_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB10_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB10_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -64(%rbp)
	jne	.LBB10_60
.LBB10_59:                              # %if.then181
	jmp	.LBB10_85
.LBB10_60:                              # %if.end182
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB10_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB10_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB10_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB10_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB10_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB10_65
.LBB10_64:                              # %if.else210
                                        #   in Loop: Header=BB10_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB10_65:                              # %if.end232
                                        #   in Loop: Header=BB10_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB10_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_61
.LBB10_67:                              # %for.end264
	imull	$5, -28(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -52(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -48(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB10_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB10_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB10_68 Depth=1
	movl	$0, -4(%rbp)
.LBB10_70:                              # %for.cond293
                                        #   Parent Loop BB10_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB10_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB10_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-48(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB10_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB10_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB10_74
.LBB10_73:                              # %cond.false309
                                        #   in Loop: Header=BB10_70 Depth=2
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-48(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB10_74:                              # %cond.end318
                                        #   in Loop: Header=BB10_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB10_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB10_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB10_80
.LBB10_76:                              # %cond.false323
                                        #   in Loop: Header=BB10_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-48(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB10_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB10_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB10_79
.LBB10_78:                              # %cond.false337
                                        #   in Loop: Header=BB10_70 Depth=2
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-48(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB10_79:                              # %cond.end346
                                        #   in Loop: Header=BB10_70 Depth=2
.LBB10_80:                              # %cond.end348
                                        #   in Loop: Header=BB10_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB10_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_70
.LBB10_82:                              # %for.end359
                                        #   in Loop: Header=BB10_68 Depth=1
	jmp	.LBB10_83
.LBB10_83:                              # %for.inc360
                                        #   in Loop: Header=BB10_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_68
.LBB10_84:                              # %for.end362.loopexit
	jmp	.LBB10_85
.LBB10_85:                              # %for.end362
	cmpl	$1574754239, -92(%rbp)  # imm = 0x5DDCD7BF
	jne	.LBB10_87
.LBB10_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB10_86
.Lfunc_end10:
	.size	intrapred_luma_16x16.1, .Lfunc_end10-intrapred_luma_16x16.1
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.2        # -- Begin function dct_luma_16x16.2
	.p2align	4, 0x90
	.type	dct_luma_16x16.2,@function
dct_luma_16x16.2:                       # @dct_luma_16x16.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$965364292, -132(%rbp)  # imm = 0x398A4A44
	movl	%edi, -104(%rbp)
	movl	$0, -120(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -144(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -232(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB11_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB11_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
.LBB11_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB11_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	$0, -16(%rbp)
.LBB11_5:                               # %for.cond16
                                        #   Parent Loop BB11_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB11_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB11_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB11_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB11_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB11_9
.LBB11_8:                               # %if.else
                                        #   in Loop: Header=BB11_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB11_9:                               # %if.end
                                        #   in Loop: Header=BB11_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB11_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_5
.LBB11_11:                              # %for.end
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_12
.LBB11_12:                              # %for.inc61
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_3
.LBB11_13:                              # %for.end63
	movl	$0, -20(%rbp)
.LBB11_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_18 Depth 2
                                        #       Child Loop BB11_20 Depth 3
                                        #         Child Loop BB11_22 Depth 4
                                        #       Child Loop BB11_28 Depth 3
                                        #         Child Loop BB11_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -20(%rbp)
	jge	.LBB11_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB11_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB11_16:                              # %land.end69
                                        #   in Loop: Header=BB11_14 Depth=1
	testb	$1, %al
	jne	.LBB11_17
	jmp	.LBB11_39
.LBB11_17:                              # %for.body71
                                        #   in Loop: Header=BB11_14 Depth=1
	movl	$0, -24(%rbp)
.LBB11_18:                              # %for.cond72
                                        #   Parent Loop BB11_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB11_20 Depth 3
                                        #         Child Loop BB11_22 Depth 4
                                        #       Child Loop BB11_28 Depth 3
                                        #         Child Loop BB11_30 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB11_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB11_18 Depth=2
	movl	$0, -12(%rbp)
.LBB11_20:                              # %for.cond76
                                        #   Parent Loop BB11_14 Depth=1
                                        #     Parent Loop BB11_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB11_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB11_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB11_20 Depth=3
	movl	$0, -16(%rbp)
.LBB11_22:                              # %for.cond80
                                        #   Parent Loop BB11_14 Depth=1
                                        #     Parent Loop BB11_18 Depth=2
                                        #       Parent Loop BB11_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB11_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB11_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB11_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_22
.LBB11_25:                              # %for.end125
                                        #   in Loop: Header=BB11_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB11_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_20
.LBB11_27:                              # %for.end169
                                        #   in Loop: Header=BB11_18 Depth=2
	movl	$0, -16(%rbp)
.LBB11_28:                              # %for.cond170
                                        #   Parent Loop BB11_14 Depth=1
                                        #     Parent Loop BB11_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB11_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB11_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB11_28 Depth=3
	movl	$0, -12(%rbp)
.LBB11_30:                              # %for.cond174
                                        #   Parent Loop BB11_14 Depth=1
                                        #     Parent Loop BB11_18 Depth=2
                                        #       Parent Loop BB11_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB11_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB11_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB11_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_30
.LBB11_33:                              # %for.end219
                                        #   in Loop: Header=BB11_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB11_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_28
.LBB11_35:                              # %for.end264
                                        #   in Loop: Header=BB11_18 Depth=2
	jmp	.LBB11_36
.LBB11_36:                              # %for.inc265
                                        #   in Loop: Header=BB11_18 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB11_18
.LBB11_37:                              # %for.end267
                                        #   in Loop: Header=BB11_14 Depth=1
	jmp	.LBB11_38
.LBB11_38:                              # %for.inc268
                                        #   in Loop: Header=BB11_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB11_14
.LBB11_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB11_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB11_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB11_40 Depth=1
	movl	$0, -16(%rbp)
.LBB11_42:                              # %for.cond275
                                        #   Parent Loop BB11_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB11_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB11_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB11_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_42
.LBB11_45:                              # %for.end291
                                        #   in Loop: Header=BB11_40 Depth=1
	jmp	.LBB11_46
.LBB11_46:                              # %for.inc292
                                        #   in Loop: Header=BB11_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_40
.LBB11_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB11_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB11_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB11_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB11_50:                              # %land.end301
                                        #   in Loop: Header=BB11_48 Depth=1
	testb	$1, %al
	jne	.LBB11_51
	jmp	.LBB11_57
.LBB11_51:                              # %for.body303
                                        #   in Loop: Header=BB11_48 Depth=1
	movl	$0, -16(%rbp)
.LBB11_52:                              # %for.cond304
                                        #   Parent Loop BB11_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB11_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB11_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB11_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_52
.LBB11_55:                              # %for.end333
                                        #   in Loop: Header=BB11_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB11_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_48
.LBB11_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB11_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB11_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB11_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB11_60:                              # %land.end367
                                        #   in Loop: Header=BB11_58 Depth=1
	testb	$1, %al
	jne	.LBB11_61
	jmp	.LBB11_67
.LBB11_61:                              # %for.body369
                                        #   in Loop: Header=BB11_58 Depth=1
	movl	$0, -12(%rbp)
.LBB11_62:                              # %for.cond370
                                        #   Parent Loop BB11_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB11_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB11_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB11_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_62
.LBB11_65:                              # %for.end399
                                        #   in Loop: Header=BB11_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB11_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_58
.LBB11_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -60(%rbp)
.LBB11_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -60(%rbp)
	jge	.LBB11_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB11_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB11_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB11_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB11_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB11_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB11_73
.LBB11_72:                              # %if.then437
                                        #   in Loop: Header=BB11_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_74
.LBB11_73:                              # %if.else446
                                        #   in Loop: Header=BB11_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB11_74:                              # %if.end455
                                        #   in Loop: Header=BB11_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB11_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB11_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB11_77
.LBB11_76:                              # %if.else463
                                        #   in Loop: Header=BB11_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-108(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB11_77:                              # %if.end481
                                        #   in Loop: Header=BB11_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB11_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB11_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB11_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB11_68 Depth=1
	cmpl	$2063, -64(%rbp)        # imm = 0x80F
	jle	.LBB11_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB11_68 Depth=1
	movl	$2063, -64(%rbp)        # imm = 0x80F
.LBB11_81:                              # %if.end492
                                        #   in Loop: Header=BB11_68 Depth=1
	jmp	.LBB11_82
.LBB11_82:                              # %if.end493
                                        #   in Loop: Header=BB11_68 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB11_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB11_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB11_84:                              # %if.end507
                                        #   in Loop: Header=BB11_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB11_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB11_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB11_86:                              # %if.end519
                                        #   in Loop: Header=BB11_68 Depth=1
	jmp	.LBB11_87
.LBB11_87:                              # %for.inc520
                                        #   in Loop: Header=BB11_68 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB11_68
.LBB11_88:                              # %for.end522
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB11_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_93 Depth 2
                                        #     Child Loop BB11_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB11_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB11_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB11_91:                              # %land.end531
                                        #   in Loop: Header=BB11_89 Depth=1
	testb	$1, %al
	jne	.LBB11_92
	jmp	.LBB11_102
.LBB11_92:                              # %for.body533
                                        #   in Loop: Header=BB11_89 Depth=1
	movl	$0, -16(%rbp)
.LBB11_93:                              # %for.cond534
                                        #   Parent Loop BB11_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB11_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB11_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB11_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_93
.LBB11_96:                              # %for.end546
                                        #   in Loop: Header=BB11_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB11_97:                              # %for.cond563
                                        #   Parent Loop BB11_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB11_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB11_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-56(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB11_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_97
.LBB11_100:                             # %for.end588
                                        #   in Loop: Header=BB11_89 Depth=1
	jmp	.LBB11_101
.LBB11_101:                             # %for.inc589
                                        #   in Loop: Header=BB11_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_89
.LBB11_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB11_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_107 Depth 2
                                        #     Child Loop BB11_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB11_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB11_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB11_105:                             # %land.end598
                                        #   in Loop: Header=BB11_103 Depth=1
	testb	$1, %al
	jne	.LBB11_106
	jmp	.LBB11_119
.LBB11_106:                             # %for.body600
                                        #   in Loop: Header=BB11_103 Depth=1
	movl	$0, -12(%rbp)
.LBB11_107:                             # %for.cond601
                                        #   Parent Loop BB11_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB11_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB11_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB11_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_107
.LBB11_110:                             # %for.end613
                                        #   in Loop: Header=BB11_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB11_111:                             # %for.cond630
                                        #   Parent Loop BB11_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB11_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB11_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -68(%rbp)
	jge	.LBB11_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB11_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-68(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-68(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB11_115
.LBB11_114:                             # %if.else680
                                        #   in Loop: Header=BB11_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB11_115:                             # %if.end717
                                        #   in Loop: Header=BB11_111 Depth=2
	jmp	.LBB11_116
.LBB11_116:                             # %for.inc718
                                        #   in Loop: Header=BB11_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_111
.LBB11_117:                             # %for.end720
                                        #   in Loop: Header=BB11_103 Depth=1
	jmp	.LBB11_118
.LBB11_118:                             # %for.inc721
                                        #   in Loop: Header=BB11_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_103
.LBB11_119:                             # %for.end723
	movl	$0, -20(%rbp)
.LBB11_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_122 Depth 2
                                        #       Child Loop BB11_124 Depth 3
                                        #       Child Loop BB11_143 Depth 3
                                        #         Child Loop BB11_147 Depth 4
                                        #         Child Loop BB11_151 Depth 4
                                        #       Child Loop BB11_157 Depth 3
                                        #         Child Loop BB11_161 Depth 4
                                        #         Child Loop BB11_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB11_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB11_120 Depth=1
	movl	$0, -24(%rbp)
.LBB11_122:                             # %for.cond728
                                        #   Parent Loop BB11_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB11_124 Depth 3
                                        #       Child Loop BB11_143 Depth 3
                                        #         Child Loop BB11_147 Depth 4
                                        #         Child Loop BB11_151 Depth 4
                                        #       Child Loop BB11_157 Depth 3
                                        #         Child Loop BB11_161 Depth 4
                                        #         Child Loop BB11_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB11_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB11_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -116(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -240(%rbp)
	movl	$1, -60(%rbp)
.LBB11_124:                             # %for.cond751
                                        #   Parent Loop BB11_120 Depth=1
                                        #     Parent Loop BB11_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -60(%rbp)
	jge	.LBB11_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB11_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB11_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB11_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB11_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB11_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB11_129
.LBB11_128:                             # %if.then762
                                        #   in Loop: Header=BB11_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_130
.LBB11_129:                             # %if.else771
                                        #   in Loop: Header=BB11_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB11_130:                             # %if.end780
                                        #   in Loop: Header=BB11_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB11_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB11_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB11_133
.LBB11_132:                             # %if.else793
                                        #   in Loop: Header=BB11_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB11_133:                             # %if.end818
                                        #   in Loop: Header=BB11_124 Depth=3
	cmpl	$0, -64(%rbp)
	je	.LBB11_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB11_124 Depth=3
	movl	$15, -120(%rbp)
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB11_135:                             # %if.end836
                                        #   in Loop: Header=BB11_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB11_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB11_124 Depth=3
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -64(%rbp)
	cmpl	$4, -68(%rbp)
	jge	.LBB11_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB11_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB11_139
.LBB11_138:                             # %if.else871
                                        #   in Loop: Header=BB11_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB11_139:                             # %if.end889
                                        #   in Loop: Header=BB11_124 Depth=3
	jmp	.LBB11_140
.LBB11_140:                             # %if.end890
                                        #   in Loop: Header=BB11_124 Depth=3
	jmp	.LBB11_141
.LBB11_141:                             # %for.inc891
                                        #   in Loop: Header=BB11_124 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB11_124
.LBB11_142:                             # %for.end893
                                        #   in Loop: Header=BB11_122 Depth=2
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB11_143:                             # %for.cond896
                                        #   Parent Loop BB11_120 Depth=1
                                        #     Parent Loop BB11_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB11_147 Depth 4
                                        #         Child Loop BB11_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB11_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB11_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB11_145:                             # %land.end902
                                        #   in Loop: Header=BB11_143 Depth=3
	testb	$1, %al
	jne	.LBB11_146
	jmp	.LBB11_156
.LBB11_146:                             # %for.body904
                                        #   in Loop: Header=BB11_143 Depth=3
	movl	$0, -16(%rbp)
.LBB11_147:                             # %for.cond905
                                        #   Parent Loop BB11_120 Depth=1
                                        #     Parent Loop BB11_122 Depth=2
                                        #       Parent Loop BB11_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB11_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB11_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB11_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_147
.LBB11_150:                             # %for.end921
                                        #   in Loop: Header=BB11_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB11_151:                             # %for.cond940
                                        #   Parent Loop BB11_120 Depth=1
                                        #     Parent Loop BB11_122 Depth=2
                                        #       Parent Loop BB11_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB11_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB11_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-56(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB11_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_151
.LBB11_154:                             # %for.end973
                                        #   in Loop: Header=BB11_143 Depth=3
	jmp	.LBB11_155
.LBB11_155:                             # %for.inc974
                                        #   in Loop: Header=BB11_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_143
.LBB11_156:                             # %for.end976
                                        #   in Loop: Header=BB11_122 Depth=2
	movl	$0, -16(%rbp)
.LBB11_157:                             # %for.cond977
                                        #   Parent Loop BB11_120 Depth=1
                                        #     Parent Loop BB11_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB11_161 Depth 4
                                        #         Child Loop BB11_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB11_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB11_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB11_159:                             # %land.end983
                                        #   in Loop: Header=BB11_157 Depth=3
	testb	$1, %al
	jne	.LBB11_160
	jmp	.LBB11_170
.LBB11_160:                             # %for.body985
                                        #   in Loop: Header=BB11_157 Depth=3
	movl	$0, -12(%rbp)
.LBB11_161:                             # %for.cond986
                                        #   Parent Loop BB11_120 Depth=1
                                        #     Parent Loop BB11_122 Depth=2
                                        #       Parent Loop BB11_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB11_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB11_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB11_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_161
.LBB11_164:                             # %for.end1002
                                        #   in Loop: Header=BB11_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB11_165:                             # %for.cond1021
                                        #   Parent Loop BB11_120 Depth=1
                                        #     Parent Loop BB11_122 Depth=2
                                        #       Parent Loop BB11_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB11_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB11_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB11_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_165
.LBB11_168:                             # %for.end1054
                                        #   in Loop: Header=BB11_157 Depth=3
	jmp	.LBB11_169
.LBB11_169:                             # %for.inc1055
                                        #   in Loop: Header=BB11_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_157
.LBB11_170:                             # %for.end1057
                                        #   in Loop: Header=BB11_122 Depth=2
	jmp	.LBB11_171
.LBB11_171:                             # %for.inc1058
                                        #   in Loop: Header=BB11_122 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB11_122
.LBB11_172:                             # %for.end1060
                                        #   in Loop: Header=BB11_120 Depth=1
	jmp	.LBB11_173
.LBB11_173:                             # %for.inc1061
                                        #   in Loop: Header=BB11_120 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB11_120
.LBB11_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB11_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB11_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB11_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB11_176 Depth=1
	movl	$0, -16(%rbp)
.LBB11_178:                             # %for.cond1071
                                        #   Parent Loop BB11_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB11_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB11_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB11_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_178
.LBB11_181:                             # %for.end1093
                                        #   in Loop: Header=BB11_176 Depth=1
	jmp	.LBB11_182
.LBB11_182:                             # %for.inc1094
                                        #   in Loop: Header=BB11_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_176
.LBB11_183:                             # %for.end1096
	jmp	.LBB11_196
.LBB11_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB11_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB11_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB11_185 Depth=1
	movl	$0, -16(%rbp)
.LBB11_187:                             # %for.cond1102
                                        #   Parent Loop BB11_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB11_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB11_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB11_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB11_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB11_191
.LBB11_190:                             # %if.else1125
                                        #   in Loop: Header=BB11_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB11_191:                             # %if.end1145
                                        #   in Loop: Header=BB11_187 Depth=2
	jmp	.LBB11_192
.LBB11_192:                             # %for.inc1146
                                        #   in Loop: Header=BB11_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_187
.LBB11_193:                             # %for.end1148
                                        #   in Loop: Header=BB11_185 Depth=1
	jmp	.LBB11_194
.LBB11_194:                             # %for.inc1149
                                        #   in Loop: Header=BB11_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_185
.LBB11_195:                             # %for.end1151
	jmp	.LBB11_196
.LBB11_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB11_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB11_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB11_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB11_198 Depth=1
	movl	$0, -16(%rbp)
.LBB11_200:                             # %for.cond1160
                                        #   Parent Loop BB11_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB11_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB11_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB11_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB11_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB11_213
.LBB11_203:                             # %if.else1186
                                        #   in Loop: Header=BB11_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB11_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB11_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB11_206
.LBB11_205:                             # %cond.false
                                        #   in Loop: Header=BB11_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB11_206:                             # %cond.end
                                        #   in Loop: Header=BB11_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB11_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB11_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB11_212
.LBB11_208:                             # %cond.false1229
                                        #   in Loop: Header=BB11_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB11_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB11_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB11_211
.LBB11_210:                             # %cond.false1250
                                        #   in Loop: Header=BB11_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB11_211:                             # %cond.end1268
                                        #   in Loop: Header=BB11_200 Depth=2
.LBB11_212:                             # %cond.end1270
                                        #   in Loop: Header=BB11_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB11_213:                             # %if.end1282
                                        #   in Loop: Header=BB11_200 Depth=2
	jmp	.LBB11_214
.LBB11_214:                             # %for.inc1283
                                        #   in Loop: Header=BB11_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_200
.LBB11_215:                             # %for.end1285
                                        #   in Loop: Header=BB11_198 Depth=1
	jmp	.LBB11_216
.LBB11_216:                             # %for.inc1286
                                        #   in Loop: Header=BB11_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_198
.LBB11_217:                             # %for.end1288
	jmp	.LBB11_218
.LBB11_218:                             # %if.end1289
	movl	-120(%rbp), %ebx
	cmpl	$965364292, -132(%rbp)  # imm = 0x398A4A44
	jne	.LBB11_220
.LBB11_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_219
.Lfunc_end11:
	.size	dct_luma_16x16.2, .Lfunc_end11-dct_luma_16x16.2
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.3              # -- Begin function dct_luma.3
	.p2align	4, 0x90
	.type	dct_luma.3,@function
dct_luma.3:                             # @dct_luma.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$947667861, -148(%rbp)  # imm = 0x387C4395
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movq	%rdx, -160(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -128(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -112(%rbp)
	movl	-124(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB12_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB12_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -92(%rbp)
	movl	-36(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB12_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB12_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB12_3 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB12_5:                               # %land.end32
                                        #   in Loop: Header=BB12_3 Depth=1
	testb	$1, %al
	jne	.LBB12_6
	jmp	.LBB12_12
.LBB12_6:                               # %for.body
                                        #   in Loop: Header=BB12_3 Depth=1
	movl	$0, -16(%rbp)
.LBB12_7:                               # %for.cond34
                                        #   Parent Loop BB12_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB12_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB12_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB12_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_7
.LBB12_10:                              # %for.end
                                        #   in Loop: Header=BB12_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB12_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_3
.LBB12_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB12_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB12_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB12_13 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB12_15:                              # %land.end101
                                        #   in Loop: Header=BB12_13 Depth=1
	testb	$1, %al
	jne	.LBB12_16
	jmp	.LBB12_22
.LBB12_16:                              # %for.body103
                                        #   in Loop: Header=BB12_13 Depth=1
	movl	$0, -12(%rbp)
.LBB12_17:                              # %for.cond104
                                        #   Parent Loop BB12_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB12_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB12_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB12_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_17
.LBB12_20:                              # %for.end136
                                        #   in Loop: Header=BB12_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB12_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_13
.LBB12_22:                              # %for.end169
	movl	$0, -116(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -88(%rbp)
.LBB12_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -88(%rbp)
	jge	.LBB12_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB12_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB12_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB12_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB12_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB12_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB12_28
.LBB12_27:                              # %if.then
                                        #   in Loop: Header=BB12_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_29
.LBB12_28:                              # %if.else
                                        #   in Loop: Header=BB12_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB12_29:                              # %if.end
                                        #   in Loop: Header=BB12_23 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB12_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB12_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	jmp	.LBB12_35
.LBB12_31:                              # %if.else199
                                        #   in Loop: Header=BB12_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB12_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB12_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB12_34
.LBB12_33:                              # %if.else223
                                        #   in Loop: Header=BB12_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -32(%rbp)
.LBB12_34:                              # %if.end245
                                        #   in Loop: Header=BB12_23 Depth=1
	jmp	.LBB12_35
.LBB12_35:                              # %if.end246
                                        #   in Loop: Header=BB12_23 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB12_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB12_23 Depth=1
	movl	$1, -116(%rbp)
	cmpl	$1, -32(%rbp)
	jg	.LBB12_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB12_23 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB12_39
.LBB12_38:                              # %if.then254
                                        #   in Loop: Header=BB12_23 Depth=1
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB12_40
.LBB12_39:                              # %if.else256
                                        #   in Loop: Header=BB12_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-104(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-160(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB12_40:                              # %if.end263
                                        #   in Loop: Header=BB12_23 Depth=1
	movl	-32(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-168(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -104(%rbp)
	movl	-32(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -32(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB12_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB12_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB12_52
.LBB12_42:                              # %if.else283
                                        #   in Loop: Header=BB12_23 Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB12_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB12_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB12_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB12_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB12_46
.LBB12_45:                              # %if.else301
                                        #   in Loop: Header=BB12_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB12_46:                              # %if.end314
                                        #   in Loop: Header=BB12_23 Depth=1
	jmp	.LBB12_51
.LBB12_47:                              # %if.else315
                                        #   in Loop: Header=BB12_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB12_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB12_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB12_50
.LBB12_49:                              # %if.else328
                                        #   in Loop: Header=BB12_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB12_50:                              # %if.end338
                                        #   in Loop: Header=BB12_23 Depth=1
	jmp	.LBB12_51
.LBB12_51:                              # %if.end339
                                        #   in Loop: Header=BB12_23 Depth=1
	jmp	.LBB12_52
.LBB12_52:                              # %if.end340
                                        #   in Loop: Header=BB12_23 Depth=1
	jmp	.LBB12_53
.LBB12_53:                              # %if.end341
                                        #   in Loop: Header=BB12_23 Depth=1
	cmpl	$0, -40(%rbp)
	jne	.LBB12_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB12_23 Depth=1
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB12_55:                              # %if.end349
                                        #   in Loop: Header=BB12_23 Depth=1
	jmp	.LBB12_56
.LBB12_56:                              # %for.inc350
                                        #   in Loop: Header=BB12_23 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB12_23
.LBB12_57:                              # %for.end352
	movq	-168(%rbp), %rax
	movslq	-100(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB12_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_62 Depth 2
                                        #     Child Loop BB12_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB12_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB12_58 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB12_60:                              # %land.end361
                                        #   in Loop: Header=BB12_58 Depth=1
	testb	$1, %al
	jne	.LBB12_61
	jmp	.LBB12_71
.LBB12_61:                              # %for.body363
                                        #   in Loop: Header=BB12_58 Depth=1
	movl	$0, -16(%rbp)
.LBB12_62:                              # %for.cond364
                                        #   Parent Loop BB12_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB12_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB12_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB12_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_62
.LBB12_65:                              # %for.end377
                                        #   in Loop: Header=BB12_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB12_66:                              # %for.cond396
                                        #   Parent Loop BB12_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB12_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB12_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB12_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_66
.LBB12_69:                              # %for.end423
                                        #   in Loop: Header=BB12_58 Depth=1
	jmp	.LBB12_70
.LBB12_70:                              # %for.inc424
                                        #   in Loop: Header=BB12_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_58
.LBB12_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB12_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_76 Depth 2
                                        #     Child Loop BB12_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB12_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB12_72 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB12_74:                              # %land.end433
                                        #   in Loop: Header=BB12_72 Depth=1
	testb	$1, %al
	jne	.LBB12_75
	jmp	.LBB12_109
.LBB12_75:                              # %for.body435
                                        #   in Loop: Header=BB12_72 Depth=1
	movl	$0, -12(%rbp)
.LBB12_76:                              # %for.cond436
                                        #   Parent Loop BB12_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB12_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB12_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB12_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_76
.LBB12_79:                              # %for.end449
                                        #   in Loop: Header=BB12_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB12_80:                              # %for.cond468
                                        #   Parent Loop BB12_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB12_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB12_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB12_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB12_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB12_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB12_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB12_85
.LBB12_84:                              # %cond.false
                                        #   in Loop: Header=BB12_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB12_85:                              # %cond.end
                                        #   in Loop: Header=BB12_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB12_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB12_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB12_91
.LBB12_87:                              # %cond.false518
                                        #   in Loop: Header=BB12_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB12_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB12_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB12_90
.LBB12_89:                              # %cond.false540
                                        #   in Loop: Header=BB12_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB12_90:                              # %cond.end559
                                        #   in Loop: Header=BB12_80 Depth=2
.LBB12_91:                              # %cond.end561
                                        #   in Loop: Header=BB12_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB12_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB12_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB12_94
.LBB12_93:                              # %cond.false592
                                        #   in Loop: Header=BB12_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB12_94:                              # %cond.end611
                                        #   in Loop: Header=BB12_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB12_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB12_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB12_100
.LBB12_96:                              # %cond.false618
                                        #   in Loop: Header=BB12_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB12_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB12_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB12_99
.LBB12_98:                              # %cond.false640
                                        #   in Loop: Header=BB12_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB12_99:                              # %cond.end659
                                        #   in Loop: Header=BB12_80 Depth=2
.LBB12_100:                             # %cond.end661
                                        #   in Loop: Header=BB12_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB12_105
.LBB12_101:                             # %if.else669
                                        #   in Loop: Header=BB12_80 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB12_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB12_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB12_104
.LBB12_103:                             # %if.else692
                                        #   in Loop: Header=BB12_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB12_104:                             # %if.end717
                                        #   in Loop: Header=BB12_80 Depth=2
	jmp	.LBB12_105
.LBB12_105:                             # %if.end718
                                        #   in Loop: Header=BB12_80 Depth=2
	jmp	.LBB12_106
.LBB12_106:                             # %for.inc719
                                        #   in Loop: Header=BB12_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_80
.LBB12_107:                             # %for.end721
                                        #   in Loop: Header=BB12_72 Depth=1
	jmp	.LBB12_108
.LBB12_108:                             # %for.inc722
                                        #   in Loop: Header=BB12_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_72
.LBB12_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB12_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB12_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB12_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB12_111 Depth=1
	movl	$0, -16(%rbp)
.LBB12_113:                             # %for.cond732
                                        #   Parent Loop BB12_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB12_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB12_113 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB12_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB12_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB12_117
.LBB12_116:                             # %if.else761
                                        #   in Loop: Header=BB12_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB12_117:                             # %if.end779
                                        #   in Loop: Header=BB12_113 Depth=2
	jmp	.LBB12_118
.LBB12_118:                             # %for.inc780
                                        #   in Loop: Header=BB12_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_113
.LBB12_119:                             # %for.end782
                                        #   in Loop: Header=BB12_111 Depth=1
	jmp	.LBB12_120
.LBB12_120:                             # %for.inc783
                                        #   in Loop: Header=BB12_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_111
.LBB12_121:                             # %for.end785
	jmp	.LBB12_122
.LBB12_122:                             # %if.end786
	movl	-116(%rbp), %ebx
	cmpl	$947667861, -148(%rbp)  # imm = 0x387C4395
	jne	.LBB12_124
.LBB12_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_123
.Lfunc_end12:
	.size	dct_luma.3, .Lfunc_end12-dct_luma.3
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.4
.LCPI13_0:
	.quad	4616189618054758400     # double 4
.LCPI13_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI13_2:
	.quad	4611686018427387904     # double 2
.LCPI13_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.4
	.p2align	4, 0x90
	.type	dct_luma_sp.4,@function
dct_luma_sp.4:                          # @dct_luma_sp.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI13_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI13_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$57285010, -212(%rbp)   # imm = 0x36A1992
	movl	%edi, -140(%rbp)
	movl	%esi, -116(%rbp)
	movq	%rdx, -240(%rbp)
	movl	-140(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -196(%rbp)
	movl	-116(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -200(%rbp)
	movl	-200(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-196(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -204(%rbp)
	movl	-200(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-196(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -184(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-184(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-184(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI13_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI13_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -232(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -128(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -112(%rbp)
	movl	-128(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -144(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -192(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -124(%rbp)
	movl	-192(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -132(%rbp)
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -208(%rbp)
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -180(%rbp)
	movl	$0, -12(%rbp)
.LBB13_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB13_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -16(%rbp)
.LBB13_3:                               # %for.cond38
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB13_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB13_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-140(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-140(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB13_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_3
.LBB13_6:                               # %for.end
                                        #   in Loop: Header=BB13_1 Depth=1
	jmp	.LBB13_7
.LBB13_7:                               # %for.inc66
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_1
.LBB13_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB13_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB13_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB13_9 Depth=1
	movl	$0, -16(%rbp)
.LBB13_11:                              # %for.cond73
                                        #   Parent Loop BB13_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB13_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB13_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB13_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_11
.LBB13_14:                              # %for.end106
                                        #   in Loop: Header=BB13_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB13_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_9
.LBB13_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB13_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB13_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB13_17 Depth=1
	movl	$0, -12(%rbp)
.LBB13_19:                              # %for.cond144
                                        #   Parent Loop BB13_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB13_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB13_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB13_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_19
.LBB13_22:                              # %for.end177
                                        #   in Loop: Header=BB13_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB13_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_17
.LBB13_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB13_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB13_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB13_25 Depth=1
	movl	$0, -16(%rbp)
.LBB13_27:                              # %for.cond215
                                        #   Parent Loop BB13_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB13_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB13_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB13_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_27
.LBB13_30:                              # %for.end244
                                        #   in Loop: Header=BB13_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB13_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_25
.LBB13_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB13_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB13_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB13_33 Depth=1
	movl	$0, -12(%rbp)
.LBB13_35:                              # %for.cond278
                                        #   Parent Loop BB13_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB13_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB13_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB13_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_35
.LBB13_38:                              # %for.end307
                                        #   in Loop: Header=BB13_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB13_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_33
.LBB13_40:                              # %for.end336
	movl	$0, -188(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -64(%rbp)
.LBB13_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -64(%rbp)
	jge	.LBB13_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB13_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB13_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB13_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB13_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB13_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB13_46
.LBB13_45:                              # %if.then
                                        #   in Loop: Header=BB13_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_47
.LBB13_46:                              # %if.else
                                        #   in Loop: Header=BB13_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB13_47:                              # %if.end
                                        #   in Loop: Header=BB13_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -108(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-180(%rbp), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-112(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-208(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -136(%rbp)
	movl	-136(%rbp), %edi
	callq	abs
	movslq	-112(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-208(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -60(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-60(%rbp), %eax
	je	.LBB13_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB13_41 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB13_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB13_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB13_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB13_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-112(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-24(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-232(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-60(%rbp), %edi
	movl	-136(%rbp), %esi
	callq	sign
	movslq	-112(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-60(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-232(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-160(%rbp), %xmm0
	jne	.LBB13_55
	jp	.LBB13_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB13_41 Depth=1
	movl	-24(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-60(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB13_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB13_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB13_54
.LBB13_53:                              # %cond.false
                                        #   in Loop: Header=BB13_41 Depth=1
	movl	-60(%rbp), %eax
.LBB13_54:                              # %cond.end
                                        #   in Loop: Header=BB13_41 Depth=1
	movl	%eax, -56(%rbp)
	jmp	.LBB13_59
.LBB13_55:                              # %if.else500
                                        #   in Loop: Header=BB13_41 Depth=1
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-160(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB13_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB13_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB13_58
.LBB13_57:                              # %if.else504
                                        #   in Loop: Header=BB13_41 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB13_58:                              # %if.end505
                                        #   in Loop: Header=BB13_41 Depth=1
	jmp	.LBB13_59
.LBB13_59:                              # %if.end506
                                        #   in Loop: Header=BB13_41 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB13_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB13_41 Depth=1
	movl	-100(%rbp), %eax
	jmp	.LBB13_62
.LBB13_61:                              # %cond.false510
                                        #   in Loop: Header=BB13_41 Depth=1
	movl	-136(%rbp), %eax
.LBB13_62:                              # %cond.end511
                                        #   in Loop: Header=BB13_41 Depth=1
	movl	%eax, -120(%rbp)
	jmp	.LBB13_73
.LBB13_63:                              # %if.else513
                                        #   in Loop: Header=BB13_41 Depth=1
	movl	-24(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB13_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB13_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB13_72
.LBB13_65:                              # %if.else517
                                        #   in Loop: Header=BB13_41 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB13_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB13_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB13_68
.LBB13_67:                              # %cond.false521
                                        #   in Loop: Header=BB13_41 Depth=1
	movl	-60(%rbp), %eax
.LBB13_68:                              # %cond.end522
                                        #   in Loop: Header=BB13_41 Depth=1
	movl	%eax, -56(%rbp)
	cmpl	$0, -24(%rbp)
	jne	.LBB13_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB13_41 Depth=1
	movl	-100(%rbp), %eax
	jmp	.LBB13_71
.LBB13_70:                              # %cond.false527
                                        #   in Loop: Header=BB13_41 Depth=1
	movl	-136(%rbp), %eax
.LBB13_71:                              # %cond.end528
                                        #   in Loop: Header=BB13_41 Depth=1
	movl	%eax, -120(%rbp)
.LBB13_72:                              # %if.end530
                                        #   in Loop: Header=BB13_41 Depth=1
	jmp	.LBB13_73
.LBB13_73:                              # %if.end531
                                        #   in Loop: Header=BB13_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB13_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB13_41 Depth=1
	movl	$1, -188(%rbp)
	cmpl	$1, -56(%rbp)
	jle	.LBB13_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB13_41 Depth=1
	movq	-240(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB13_77
.LBB13_76:                              # %if.else539
                                        #   in Loop: Header=BB13_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-240(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB13_77:                              # %if.end546
                                        #   in Loop: Header=BB13_41 Depth=1
	movl	-56(%rbp), %edi
	movl	-120(%rbp), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -68(%rbp)
	movl	-56(%rbp), %edi
	movl	-120(%rbp), %esi
	callq	sign
	movslq	-112(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -108(%rbp)
.LBB13_78:                              # %if.end568
                                        #   in Loop: Header=BB13_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-108(%rbp), %edi
	callq	abs
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-180(%rbp), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-108(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-192(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB13_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB13_41
.LBB13_80:                              # %for.end600
	movq	-224(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB13_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_83 Depth 2
                                        #     Child Loop BB13_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB13_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB13_81 Depth=1
	movl	$0, -16(%rbp)
.LBB13_83:                              # %for.cond607
                                        #   Parent Loop BB13_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB13_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB13_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB13_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_83
.LBB13_86:                              # %for.end620
                                        #   in Loop: Header=BB13_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB13_87:                              # %for.cond639
                                        #   Parent Loop BB13_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB13_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB13_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB13_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_87
.LBB13_90:                              # %for.end666
                                        #   in Loop: Header=BB13_81 Depth=1
	jmp	.LBB13_91
.LBB13_91:                              # %for.inc667
                                        #   in Loop: Header=BB13_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_81
.LBB13_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB13_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_95 Depth 2
                                        #     Child Loop BB13_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB13_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB13_93 Depth=1
	movl	$0, -12(%rbp)
.LBB13_95:                              # %for.cond674
                                        #   Parent Loop BB13_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB13_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB13_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB13_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_95
.LBB13_98:                              # %for.end687
                                        #   in Loop: Header=BB13_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB13_99:                              # %for.cond706
                                        #   Parent Loop BB13_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB13_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB13_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB13_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB13_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB13_103
.LBB13_102:                             # %cond.false721
                                        #   in Loop: Header=BB13_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB13_103:                             # %cond.end729
                                        #   in Loop: Header=BB13_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB13_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB13_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_109
.LBB13_105:                             # %cond.false735
                                        #   in Loop: Header=BB13_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB13_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB13_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB13_108
.LBB13_107:                             # %cond.false746
                                        #   in Loop: Header=BB13_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB13_108:                             # %cond.end754
                                        #   in Loop: Header=BB13_99 Depth=2
.LBB13_109:                             # %cond.end756
                                        #   in Loop: Header=BB13_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB13_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB13_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB13_112
.LBB13_111:                             # %cond.false774
                                        #   in Loop: Header=BB13_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB13_112:                             # %cond.end782
                                        #   in Loop: Header=BB13_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB13_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB13_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_118
.LBB13_114:                             # %cond.false788
                                        #   in Loop: Header=BB13_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB13_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB13_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB13_117
.LBB13_116:                             # %cond.false799
                                        #   in Loop: Header=BB13_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB13_117:                             # %cond.end807
                                        #   in Loop: Header=BB13_99 Depth=2
.LBB13_118:                             # %cond.end809
                                        #   in Loop: Header=BB13_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB13_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_99
.LBB13_120:                             # %for.end818
                                        #   in Loop: Header=BB13_93 Depth=1
	jmp	.LBB13_121
.LBB13_121:                             # %for.inc819
                                        #   in Loop: Header=BB13_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_93
.LBB13_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB13_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB13_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB13_123 Depth=1
	movl	$0, -16(%rbp)
.LBB13_125:                             # %for.cond826
                                        #   Parent Loop BB13_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB13_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB13_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-116(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-140(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB13_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_125
.LBB13_128:                             # %for.end846
                                        #   in Loop: Header=BB13_123 Depth=1
	jmp	.LBB13_129
.LBB13_129:                             # %for.inc847
                                        #   in Loop: Header=BB13_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_123
.LBB13_130:                             # %for.end849
	movl	-188(%rbp), %ebx
	cmpl	$57285010, -212(%rbp)   # imm = 0x36A1992
	jne	.LBB13_132
.LBB13_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_131
.Lfunc_end13:
	.size	dct_luma_sp.4, .Lfunc_end13-dct_luma_sp.4
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.5        # -- Begin function dct_luma_16x16.5
	.p2align	4, 0x90
	.type	dct_luma_16x16.5,@function
dct_luma_16x16.5:                       # @dct_luma_16x16.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$829566133, -132(%rbp)  # imm = 0x31722CB5
	movl	%edi, -104(%rbp)
	movl	$0, -120(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -144(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -232(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB14_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB14_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-64(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB14_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB14_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB14_3 Depth=1
	movl	$0, -16(%rbp)
.LBB14_5:                               # %for.cond16
                                        #   Parent Loop BB14_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB14_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB14_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB14_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB14_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB14_9
.LBB14_8:                               # %if.else
                                        #   in Loop: Header=BB14_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB14_9:                               # %if.end
                                        #   in Loop: Header=BB14_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB14_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_5
.LBB14_11:                              # %for.end
                                        #   in Loop: Header=BB14_3 Depth=1
	jmp	.LBB14_12
.LBB14_12:                              # %for.inc61
                                        #   in Loop: Header=BB14_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_3
.LBB14_13:                              # %for.end63
	movl	$0, -24(%rbp)
.LBB14_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_18 Depth 2
                                        #       Child Loop BB14_20 Depth 3
                                        #         Child Loop BB14_22 Depth 4
                                        #       Child Loop BB14_28 Depth 3
                                        #         Child Loop BB14_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -24(%rbp)
	jge	.LBB14_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB14_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB14_16:                              # %land.end69
                                        #   in Loop: Header=BB14_14 Depth=1
	testb	$1, %al
	jne	.LBB14_17
	jmp	.LBB14_39
.LBB14_17:                              # %for.body71
                                        #   in Loop: Header=BB14_14 Depth=1
	movl	$0, -20(%rbp)
.LBB14_18:                              # %for.cond72
                                        #   Parent Loop BB14_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_20 Depth 3
                                        #         Child Loop BB14_22 Depth 4
                                        #       Child Loop BB14_28 Depth 3
                                        #         Child Loop BB14_30 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB14_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB14_18 Depth=2
	movl	$0, -12(%rbp)
.LBB14_20:                              # %for.cond76
                                        #   Parent Loop BB14_14 Depth=1
                                        #     Parent Loop BB14_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB14_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB14_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB14_20 Depth=3
	movl	$0, -16(%rbp)
.LBB14_22:                              # %for.cond80
                                        #   Parent Loop BB14_14 Depth=1
                                        #     Parent Loop BB14_18 Depth=2
                                        #       Parent Loop BB14_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB14_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB14_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB14_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_22
.LBB14_25:                              # %for.end125
                                        #   in Loop: Header=BB14_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB14_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_20
.LBB14_27:                              # %for.end169
                                        #   in Loop: Header=BB14_18 Depth=2
	movl	$0, -16(%rbp)
.LBB14_28:                              # %for.cond170
                                        #   Parent Loop BB14_14 Depth=1
                                        #     Parent Loop BB14_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB14_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB14_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB14_28 Depth=3
	movl	$0, -12(%rbp)
.LBB14_30:                              # %for.cond174
                                        #   Parent Loop BB14_14 Depth=1
                                        #     Parent Loop BB14_18 Depth=2
                                        #       Parent Loop BB14_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB14_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB14_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB14_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_30
.LBB14_33:                              # %for.end219
                                        #   in Loop: Header=BB14_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB14_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_28
.LBB14_35:                              # %for.end264
                                        #   in Loop: Header=BB14_18 Depth=2
	jmp	.LBB14_36
.LBB14_36:                              # %for.inc265
                                        #   in Loop: Header=BB14_18 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_18
.LBB14_37:                              # %for.end267
                                        #   in Loop: Header=BB14_14 Depth=1
	jmp	.LBB14_38
.LBB14_38:                              # %for.inc268
                                        #   in Loop: Header=BB14_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_14
.LBB14_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB14_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB14_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB14_40 Depth=1
	movl	$0, -16(%rbp)
.LBB14_42:                              # %for.cond275
                                        #   Parent Loop BB14_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB14_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB14_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB14_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_42
.LBB14_45:                              # %for.end291
                                        #   in Loop: Header=BB14_40 Depth=1
	jmp	.LBB14_46
.LBB14_46:                              # %for.inc292
                                        #   in Loop: Header=BB14_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_40
.LBB14_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB14_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB14_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB14_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB14_50:                              # %land.end301
                                        #   in Loop: Header=BB14_48 Depth=1
	testb	$1, %al
	jne	.LBB14_51
	jmp	.LBB14_57
.LBB14_51:                              # %for.body303
                                        #   in Loop: Header=BB14_48 Depth=1
	movl	$0, -16(%rbp)
.LBB14_52:                              # %for.cond304
                                        #   Parent Loop BB14_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB14_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB14_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB14_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_52
.LBB14_55:                              # %for.end333
                                        #   in Loop: Header=BB14_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB14_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_48
.LBB14_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB14_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB14_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB14_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB14_60:                              # %land.end367
                                        #   in Loop: Header=BB14_58 Depth=1
	testb	$1, %al
	jne	.LBB14_61
	jmp	.LBB14_67
.LBB14_61:                              # %for.body369
                                        #   in Loop: Header=BB14_58 Depth=1
	movl	$0, -12(%rbp)
.LBB14_62:                              # %for.cond370
                                        #   Parent Loop BB14_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB14_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB14_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB14_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_62
.LBB14_65:                              # %for.end399
                                        #   in Loop: Header=BB14_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB14_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_58
.LBB14_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -60(%rbp)
.LBB14_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -60(%rbp)
	jge	.LBB14_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB14_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB14_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB14_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB14_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB14_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB14_73
.LBB14_72:                              # %if.then437
                                        #   in Loop: Header=BB14_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_74
.LBB14_73:                              # %if.else446
                                        #   in Loop: Header=BB14_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB14_74:                              # %if.end455
                                        #   in Loop: Header=BB14_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB14_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB14_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB14_77
.LBB14_76:                              # %if.else463
                                        #   in Loop: Header=BB14_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB14_77:                              # %if.end481
                                        #   in Loop: Header=BB14_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB14_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB14_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB14_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB14_68 Depth=1
	cmpl	$2063, -68(%rbp)        # imm = 0x80F
	jle	.LBB14_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB14_68 Depth=1
	movl	$2063, -68(%rbp)        # imm = 0x80F
.LBB14_81:                              # %if.end492
                                        #   in Loop: Header=BB14_68 Depth=1
	jmp	.LBB14_82
.LBB14_82:                              # %if.end493
                                        #   in Loop: Header=BB14_68 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB14_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB14_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB14_84:                              # %if.end507
                                        #   in Loop: Header=BB14_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB14_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB14_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB14_86:                              # %if.end519
                                        #   in Loop: Header=BB14_68 Depth=1
	jmp	.LBB14_87
.LBB14_87:                              # %for.inc520
                                        #   in Loop: Header=BB14_68 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB14_68
.LBB14_88:                              # %for.end522
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB14_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_93 Depth 2
                                        #     Child Loop BB14_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB14_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB14_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB14_91:                              # %land.end531
                                        #   in Loop: Header=BB14_89 Depth=1
	testb	$1, %al
	jne	.LBB14_92
	jmp	.LBB14_102
.LBB14_92:                              # %for.body533
                                        #   in Loop: Header=BB14_89 Depth=1
	movl	$0, -16(%rbp)
.LBB14_93:                              # %for.cond534
                                        #   Parent Loop BB14_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB14_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB14_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB14_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_93
.LBB14_96:                              # %for.end546
                                        #   in Loop: Header=BB14_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB14_97:                              # %for.cond563
                                        #   Parent Loop BB14_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB14_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB14_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-56(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB14_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_97
.LBB14_100:                             # %for.end588
                                        #   in Loop: Header=BB14_89 Depth=1
	jmp	.LBB14_101
.LBB14_101:                             # %for.inc589
                                        #   in Loop: Header=BB14_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_89
.LBB14_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB14_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_107 Depth 2
                                        #     Child Loop BB14_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB14_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB14_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB14_105:                             # %land.end598
                                        #   in Loop: Header=BB14_103 Depth=1
	testb	$1, %al
	jne	.LBB14_106
	jmp	.LBB14_119
.LBB14_106:                             # %for.body600
                                        #   in Loop: Header=BB14_103 Depth=1
	movl	$0, -12(%rbp)
.LBB14_107:                             # %for.cond601
                                        #   Parent Loop BB14_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB14_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB14_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB14_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_107
.LBB14_110:                             # %for.end613
                                        #   in Loop: Header=BB14_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB14_111:                             # %for.cond630
                                        #   Parent Loop BB14_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB14_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB14_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -64(%rbp)
	jge	.LBB14_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB14_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-64(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-64(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB14_115
.LBB14_114:                             # %if.else680
                                        #   in Loop: Header=BB14_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB14_115:                             # %if.end717
                                        #   in Loop: Header=BB14_111 Depth=2
	jmp	.LBB14_116
.LBB14_116:                             # %for.inc718
                                        #   in Loop: Header=BB14_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_111
.LBB14_117:                             # %for.end720
                                        #   in Loop: Header=BB14_103 Depth=1
	jmp	.LBB14_118
.LBB14_118:                             # %for.inc721
                                        #   in Loop: Header=BB14_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_103
.LBB14_119:                             # %for.end723
	movl	$0, -24(%rbp)
.LBB14_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_122 Depth 2
                                        #       Child Loop BB14_124 Depth 3
                                        #       Child Loop BB14_143 Depth 3
                                        #         Child Loop BB14_147 Depth 4
                                        #         Child Loop BB14_151 Depth 4
                                        #       Child Loop BB14_157 Depth 3
                                        #         Child Loop BB14_161 Depth 4
                                        #         Child Loop BB14_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB14_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB14_120 Depth=1
	movl	$0, -20(%rbp)
.LBB14_122:                             # %for.cond728
                                        #   Parent Loop BB14_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_124 Depth 3
                                        #       Child Loop BB14_143 Depth 3
                                        #         Child Loop BB14_147 Depth 4
                                        #         Child Loop BB14_151 Depth 4
                                        #       Child Loop BB14_157 Depth 3
                                        #         Child Loop BB14_161 Depth 4
                                        #         Child Loop BB14_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB14_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB14_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -116(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -108(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -240(%rbp)
	movl	$1, -60(%rbp)
.LBB14_124:                             # %for.cond751
                                        #   Parent Loop BB14_120 Depth=1
                                        #     Parent Loop BB14_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -60(%rbp)
	jge	.LBB14_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB14_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB14_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB14_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB14_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB14_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB14_129
.LBB14_128:                             # %if.then762
                                        #   in Loop: Header=BB14_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_130
.LBB14_129:                             # %if.else771
                                        #   in Loop: Header=BB14_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB14_130:                             # %if.end780
                                        #   in Loop: Header=BB14_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB14_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB14_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB14_133
.LBB14_132:                             # %if.else793
                                        #   in Loop: Header=BB14_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB14_133:                             # %if.end818
                                        #   in Loop: Header=BB14_124 Depth=3
	cmpl	$0, -68(%rbp)
	je	.LBB14_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB14_124 Depth=3
	movl	$15, -120(%rbp)
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB14_135:                             # %if.end836
                                        #   in Loop: Header=BB14_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB14_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB14_124 Depth=3
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -68(%rbp)
	cmpl	$4, -64(%rbp)
	jge	.LBB14_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB14_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB14_139
.LBB14_138:                             # %if.else871
                                        #   in Loop: Header=BB14_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-64(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB14_139:                             # %if.end889
                                        #   in Loop: Header=BB14_124 Depth=3
	jmp	.LBB14_140
.LBB14_140:                             # %if.end890
                                        #   in Loop: Header=BB14_124 Depth=3
	jmp	.LBB14_141
.LBB14_141:                             # %for.inc891
                                        #   in Loop: Header=BB14_124 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB14_124
.LBB14_142:                             # %for.end893
                                        #   in Loop: Header=BB14_122 Depth=2
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB14_143:                             # %for.cond896
                                        #   Parent Loop BB14_120 Depth=1
                                        #     Parent Loop BB14_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB14_147 Depth 4
                                        #         Child Loop BB14_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB14_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB14_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB14_145:                             # %land.end902
                                        #   in Loop: Header=BB14_143 Depth=3
	testb	$1, %al
	jne	.LBB14_146
	jmp	.LBB14_156
.LBB14_146:                             # %for.body904
                                        #   in Loop: Header=BB14_143 Depth=3
	movl	$0, -16(%rbp)
.LBB14_147:                             # %for.cond905
                                        #   Parent Loop BB14_120 Depth=1
                                        #     Parent Loop BB14_122 Depth=2
                                        #       Parent Loop BB14_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB14_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB14_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB14_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_147
.LBB14_150:                             # %for.end921
                                        #   in Loop: Header=BB14_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB14_151:                             # %for.cond940
                                        #   Parent Loop BB14_120 Depth=1
                                        #     Parent Loop BB14_122 Depth=2
                                        #       Parent Loop BB14_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB14_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB14_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-56(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB14_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_151
.LBB14_154:                             # %for.end973
                                        #   in Loop: Header=BB14_143 Depth=3
	jmp	.LBB14_155
.LBB14_155:                             # %for.inc974
                                        #   in Loop: Header=BB14_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_143
.LBB14_156:                             # %for.end976
                                        #   in Loop: Header=BB14_122 Depth=2
	movl	$0, -16(%rbp)
.LBB14_157:                             # %for.cond977
                                        #   Parent Loop BB14_120 Depth=1
                                        #     Parent Loop BB14_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB14_161 Depth 4
                                        #         Child Loop BB14_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB14_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB14_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB14_159:                             # %land.end983
                                        #   in Loop: Header=BB14_157 Depth=3
	testb	$1, %al
	jne	.LBB14_160
	jmp	.LBB14_170
.LBB14_160:                             # %for.body985
                                        #   in Loop: Header=BB14_157 Depth=3
	movl	$0, -12(%rbp)
.LBB14_161:                             # %for.cond986
                                        #   Parent Loop BB14_120 Depth=1
                                        #     Parent Loop BB14_122 Depth=2
                                        #       Parent Loop BB14_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB14_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB14_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB14_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_161
.LBB14_164:                             # %for.end1002
                                        #   in Loop: Header=BB14_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB14_165:                             # %for.cond1021
                                        #   Parent Loop BB14_120 Depth=1
                                        #     Parent Loop BB14_122 Depth=2
                                        #       Parent Loop BB14_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB14_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB14_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB14_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_165
.LBB14_168:                             # %for.end1054
                                        #   in Loop: Header=BB14_157 Depth=3
	jmp	.LBB14_169
.LBB14_169:                             # %for.inc1055
                                        #   in Loop: Header=BB14_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_157
.LBB14_170:                             # %for.end1057
                                        #   in Loop: Header=BB14_122 Depth=2
	jmp	.LBB14_171
.LBB14_171:                             # %for.inc1058
                                        #   in Loop: Header=BB14_122 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_122
.LBB14_172:                             # %for.end1060
                                        #   in Loop: Header=BB14_120 Depth=1
	jmp	.LBB14_173
.LBB14_173:                             # %for.inc1061
                                        #   in Loop: Header=BB14_120 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_120
.LBB14_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB14_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB14_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB14_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB14_176 Depth=1
	movl	$0, -16(%rbp)
.LBB14_178:                             # %for.cond1071
                                        #   Parent Loop BB14_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB14_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB14_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB14_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_178
.LBB14_181:                             # %for.end1093
                                        #   in Loop: Header=BB14_176 Depth=1
	jmp	.LBB14_182
.LBB14_182:                             # %for.inc1094
                                        #   in Loop: Header=BB14_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_176
.LBB14_183:                             # %for.end1096
	jmp	.LBB14_196
.LBB14_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB14_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB14_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB14_185 Depth=1
	movl	$0, -16(%rbp)
.LBB14_187:                             # %for.cond1102
                                        #   Parent Loop BB14_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB14_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB14_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB14_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB14_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB14_191
.LBB14_190:                             # %if.else1125
                                        #   in Loop: Header=BB14_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB14_191:                             # %if.end1145
                                        #   in Loop: Header=BB14_187 Depth=2
	jmp	.LBB14_192
.LBB14_192:                             # %for.inc1146
                                        #   in Loop: Header=BB14_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_187
.LBB14_193:                             # %for.end1148
                                        #   in Loop: Header=BB14_185 Depth=1
	jmp	.LBB14_194
.LBB14_194:                             # %for.inc1149
                                        #   in Loop: Header=BB14_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_185
.LBB14_195:                             # %for.end1151
	jmp	.LBB14_196
.LBB14_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB14_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB14_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB14_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB14_198 Depth=1
	movl	$0, -16(%rbp)
.LBB14_200:                             # %for.cond1160
                                        #   Parent Loop BB14_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB14_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB14_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB14_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB14_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB14_213
.LBB14_203:                             # %if.else1186
                                        #   in Loop: Header=BB14_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB14_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB14_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB14_206
.LBB14_205:                             # %cond.false
                                        #   in Loop: Header=BB14_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB14_206:                             # %cond.end
                                        #   in Loop: Header=BB14_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB14_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB14_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB14_212
.LBB14_208:                             # %cond.false1229
                                        #   in Loop: Header=BB14_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB14_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB14_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB14_211
.LBB14_210:                             # %cond.false1250
                                        #   in Loop: Header=BB14_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB14_211:                             # %cond.end1268
                                        #   in Loop: Header=BB14_200 Depth=2
.LBB14_212:                             # %cond.end1270
                                        #   in Loop: Header=BB14_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB14_213:                             # %if.end1282
                                        #   in Loop: Header=BB14_200 Depth=2
	jmp	.LBB14_214
.LBB14_214:                             # %for.inc1283
                                        #   in Loop: Header=BB14_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_200
.LBB14_215:                             # %for.end1285
                                        #   in Loop: Header=BB14_198 Depth=1
	jmp	.LBB14_216
.LBB14_216:                             # %for.inc1286
                                        #   in Loop: Header=BB14_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_198
.LBB14_217:                             # %for.end1288
	jmp	.LBB14_218
.LBB14_218:                             # %if.end1289
	movl	-120(%rbp), %ebx
	cmpl	$829566133, -132(%rbp)  # imm = 0x31722CB5
	jne	.LBB14_220
.LBB14_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_219
.Lfunc_end14:
	.size	dct_luma_16x16.5, .Lfunc_end14-dct_luma_16x16.5
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.6            # -- Begin function dct_chroma.6
	.p2align	4, 0x90
	.type	dct_chroma.6,@function
dct_chroma.6:                           # @dct_chroma.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$1692894044, -380(%rbp) # imm = 0x64E7835C
	movl	%edi, -20(%rbp)
	movl	%esi, -132(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB15_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB15_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB15_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -128(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -200(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -140(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -212(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB15_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB15_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -104(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB15_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB15_11
.LBB15_7:                               # %cond.false
	cmpl	$51, -124(%rbp)
	jle	.LBB15_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB15_10
.LBB15_9:                               # %cond.false25
	movl	-124(%rbp), %eax
.LBB15_10:                              # %cond.end
.LBB15_11:                              # %cond.end26
	movl	%eax, -124(%rbp)
	cmpl	$0, -124(%rbp)
	jge	.LBB15_13
# %bb.12:                               # %cond.true29
	movl	-124(%rbp), %eax
	jmp	.LBB15_14
.LBB15_13:                              # %cond.false30
	movl	-124(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB15_14:                              # %cond.end34
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB15_16
# %bb.15:                               # %if.then
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -108(%rbp)
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -136(%rbp)
	movl	-108(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -212(%rbp)
.LBB15_16:                              # %if.end
	movl	$0, -28(%rbp)
.LBB15_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_19 Depth 2
                                        #       Child Loop BB15_21 Depth 3
                                        #         Child Loop BB15_25 Depth 4
                                        #       Child Loop BB15_31 Depth 3
                                        #         Child Loop BB15_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB15_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB15_17 Depth=1
	movl	$0, -24(%rbp)
.LBB15_19:                              # %for.cond56
                                        #   Parent Loop BB15_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_21 Depth 3
                                        #         Child Loop BB15_25 Depth 4
                                        #       Child Loop BB15_31 Depth 3
                                        #         Child Loop BB15_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB15_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB15_19 Depth=2
	movl	$0, -12(%rbp)
.LBB15_21:                              # %for.cond60
                                        #   Parent Loop BB15_17 Depth=1
                                        #     Parent Loop BB15_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB15_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB15_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB15_21 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_23:                              # %land.end64
                                        #   in Loop: Header=BB15_21 Depth=3
	testb	$1, %al
	jne	.LBB15_24
	jmp	.LBB15_30
.LBB15_24:                              # %for.body66
                                        #   in Loop: Header=BB15_21 Depth=3
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB15_25:                              # %for.cond68
                                        #   Parent Loop BB15_17 Depth=1
                                        #     Parent Loop BB15_19 Depth=2
                                        #       Parent Loop BB15_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB15_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB15_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB15_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_25
.LBB15_28:                              # %for.end
                                        #   in Loop: Header=BB15_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB15_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_21
.LBB15_30:                              # %for.end141
                                        #   in Loop: Header=BB15_19 Depth=2
	movl	$0, -16(%rbp)
.LBB15_31:                              # %for.cond142
                                        #   Parent Loop BB15_17 Depth=1
                                        #     Parent Loop BB15_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB15_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB15_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB15_31 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_33:                              # %land.end148
                                        #   in Loop: Header=BB15_31 Depth=3
	testb	$1, %al
	jne	.LBB15_34
	jmp	.LBB15_40
.LBB15_34:                              # %for.body150
                                        #   in Loop: Header=BB15_31 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB15_35:                              # %for.cond152
                                        #   Parent Loop BB15_17 Depth=1
                                        #     Parent Loop BB15_19 Depth=2
                                        #       Parent Loop BB15_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB15_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB15_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB15_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_35
.LBB15_38:                              # %for.end189
                                        #   in Loop: Header=BB15_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB15_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_31
.LBB15_40:                              # %for.end230
                                        #   in Loop: Header=BB15_19 Depth=2
	jmp	.LBB15_41
.LBB15_41:                              # %for.inc231
                                        #   in Loop: Header=BB15_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_19
.LBB15_42:                              # %for.end233
                                        #   in Loop: Header=BB15_17 Depth=1
	jmp	.LBB15_43
.LBB15_43:                              # %for.inc234
                                        #   in Loop: Header=BB15_17 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB15_17
.LBB15_44:                              # %for.end236
	cmpl	$1, -140(%rbp)
	jne	.LBB15_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB15_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB15_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB15_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB15_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB15_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB15_50
.LBB15_49:                              # %if.else
                                        #   in Loop: Header=BB15_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB15_50:                              # %if.end349
                                        #   in Loop: Header=BB15_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB15_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB15_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB15_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB15_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB15_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB15_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB15_54:                              # %if.end359
                                        #   in Loop: Header=BB15_46 Depth=1
	jmp	.LBB15_55
.LBB15_55:                              # %if.end360
                                        #   in Loop: Header=BB15_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB15_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB15_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB15_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB15_46 Depth=1
	movl	$1, %eax
	jmp	.LBB15_59
.LBB15_58:                              # %cond.false370
                                        #   in Loop: Header=BB15_46 Depth=1
	movl	-132(%rbp), %eax
.LBB15_59:                              # %cond.end371
                                        #   in Loop: Header=BB15_46 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -144(%rbp)
.LBB15_60:                              # %if.end384
                                        #   in Loop: Header=BB15_46 Depth=1
	movl	-144(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB15_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB15_46
.LBB15_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB15_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB15_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB15_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB15_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB15_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB15_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB15_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB15_68
.LBB15_67:                              # %if.else447
                                        #   in Loop: Header=BB15_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB15_68:                              # %if.end461
                                        #   in Loop: Header=BB15_63 Depth=1
	jmp	.LBB15_73
.LBB15_69:                              # %if.else462
                                        #   in Loop: Header=BB15_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB15_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB15_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB15_72
.LBB15_71:                              # %if.else479
                                        #   in Loop: Header=BB15_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB15_72:                              # %if.end493
                                        #   in Loop: Header=BB15_63 Depth=1
	jmp	.LBB15_73
.LBB15_73:                              # %if.end494
                                        #   in Loop: Header=BB15_63 Depth=1
	jmp	.LBB15_74
.LBB15_74:                              # %for.inc495
                                        #   in Loop: Header=BB15_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_63
.LBB15_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB15_213
.LBB15_76:                              # %if.else514
	cmpl	$2, -140(%rbp)
	jne	.LBB15_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB15_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB15_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB15_78 Depth=1
	movl	$0, -16(%rbp)
.LBB15_80:                              # %for.cond523
                                        #   Parent Loop BB15_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB15_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB15_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB15_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_80
.LBB15_83:                              # %for.end541
                                        #   in Loop: Header=BB15_78 Depth=1
	jmp	.LBB15_84
.LBB15_84:                              # %for.inc542
                                        #   in Loop: Header=BB15_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_78
.LBB15_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB15_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB15_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB15_86 Depth=1
	movl	$0, -12(%rbp)
.LBB15_88:                              # %for.cond605
                                        #   Parent Loop BB15_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB15_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB15_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB15_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_88
.LBB15_91:                              # %for.end634
                                        #   in Loop: Header=BB15_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB15_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_86
.LBB15_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB15_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB15_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB15_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB15_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB15_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB15_98
.LBB15_97:                              # %if.else700
                                        #   in Loop: Header=BB15_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB15_98:                              # %if.end723
                                        #   in Loop: Header=BB15_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB15_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB15_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB15_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB15_94 Depth=1
	movl	$1, %eax
	jmp	.LBB15_102
.LBB15_101:                             # %cond.false735
                                        #   in Loop: Header=BB15_94 Depth=1
	movl	-132(%rbp), %eax
.LBB15_102:                             # %cond.end736
                                        #   in Loop: Header=BB15_94 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB15_103:                             # %if.end748
                                        #   in Loop: Header=BB15_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB15_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB15_94
.LBB15_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB15_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_108 Depth 2
                                        #     Child Loop BB15_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB15_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB15_106 Depth=1
	movl	$0, -12(%rbp)
.LBB15_108:                             # %for.cond823
                                        #   Parent Loop BB15_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB15_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB15_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB15_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_108
.LBB15_111:                             # %for.end835
                                        #   in Loop: Header=BB15_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB15_112:                             # %for.cond852
                                        #   Parent Loop BB15_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB15_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB15_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -108(%rbp)
	jge	.LBB15_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB15_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB15_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB15_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB15_117
.LBB15_116:                             # %if.else915
                                        #   in Loop: Header=BB15_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB15_117:                             # %if.end968
                                        #   in Loop: Header=BB15_112 Depth=2
	jmp	.LBB15_122
.LBB15_118:                             # %if.else969
                                        #   in Loop: Header=BB15_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB15_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB15_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB15_121
.LBB15_120:                             # %if.else1019
                                        #   in Loop: Header=BB15_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB15_121:                             # %if.end1066
                                        #   in Loop: Header=BB15_112 Depth=2
	jmp	.LBB15_122
.LBB15_122:                             # %if.end1067
                                        #   in Loop: Header=BB15_112 Depth=2
	jmp	.LBB15_123
.LBB15_123:                             # %for.inc1068
                                        #   in Loop: Header=BB15_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_112
.LBB15_124:                             # %for.end1070
                                        #   in Loop: Header=BB15_106 Depth=1
	jmp	.LBB15_125
.LBB15_125:                             # %for.inc1071
                                        #   in Loop: Header=BB15_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_106
.LBB15_126:                             # %for.end1073
	jmp	.LBB15_212
.LBB15_127:                             # %if.else1074
	cmpl	$3, -140(%rbp)
	jne	.LBB15_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB15_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB15_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB15_129 Depth=1
	movl	$0, -16(%rbp)
.LBB15_131:                             # %for.cond1083
                                        #   Parent Loop BB15_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB15_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB15_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB15_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_131
.LBB15_134:                             # %for.end1101
                                        #   in Loop: Header=BB15_129 Depth=1
	jmp	.LBB15_135
.LBB15_135:                             # %for.inc1102
                                        #   in Loop: Header=BB15_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_129
.LBB15_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB15_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB15_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB15_137 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_139:                             # %land.end1111
                                        #   in Loop: Header=BB15_137 Depth=1
	testb	$1, %al
	jne	.LBB15_140
	jmp	.LBB15_146
.LBB15_140:                             # %for.body1113
                                        #   in Loop: Header=BB15_137 Depth=1
	movl	$0, -16(%rbp)
.LBB15_141:                             # %for.cond1114
                                        #   Parent Loop BB15_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB15_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB15_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB15_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_141
.LBB15_144:                             # %for.end1143
                                        #   in Loop: Header=BB15_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB15_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_137
.LBB15_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB15_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB15_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB15_147 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_149:                             # %land.end1177
                                        #   in Loop: Header=BB15_147 Depth=1
	testb	$1, %al
	jne	.LBB15_150
	jmp	.LBB15_156
.LBB15_150:                             # %for.body1179
                                        #   in Loop: Header=BB15_147 Depth=1
	movl	$0, -12(%rbp)
.LBB15_151:                             # %for.cond1180
                                        #   Parent Loop BB15_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB15_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB15_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB15_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_151
.LBB15_154:                             # %for.end1209
                                        #   in Loop: Header=BB15_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB15_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_147
.LBB15_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB15_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB15_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB15_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB15_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB15_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB15_164
.LBB15_160:                             # %if.else1261
                                        #   in Loop: Header=BB15_157 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB15_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB15_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB15_163
.LBB15_162:                             # %if.else1287
                                        #   in Loop: Header=BB15_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB15_163:                             # %if.end1310
                                        #   in Loop: Header=BB15_157 Depth=1
	jmp	.LBB15_164
.LBB15_164:                             # %if.end1311
                                        #   in Loop: Header=BB15_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB15_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB15_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB15_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB15_157 Depth=1
	movl	$1, %eax
	jmp	.LBB15_168
.LBB15_167:                             # %cond.false1322
                                        #   in Loop: Header=BB15_157 Depth=1
	movl	-132(%rbp), %eax
.LBB15_168:                             # %cond.end1323
                                        #   in Loop: Header=BB15_157 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB15_169:                             # %if.end1335
                                        #   in Loop: Header=BB15_157 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB15_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB15_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB15_171:                             # %if.end1347
                                        #   in Loop: Header=BB15_157 Depth=1
	jmp	.LBB15_172
.LBB15_172:                             # %for.inc1348
                                        #   in Loop: Header=BB15_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB15_157
.LBB15_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB15_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_178 Depth 2
                                        #     Child Loop BB15_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB15_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB15_174 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_176:                             # %land.end1359
                                        #   in Loop: Header=BB15_174 Depth=1
	testb	$1, %al
	jne	.LBB15_177
	jmp	.LBB15_187
.LBB15_177:                             # %for.body1361
                                        #   in Loop: Header=BB15_174 Depth=1
	movl	$0, -16(%rbp)
.LBB15_178:                             # %for.cond1362
                                        #   Parent Loop BB15_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB15_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB15_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB15_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_178
.LBB15_181:                             # %for.end1374
                                        #   in Loop: Header=BB15_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB15_182:                             # %for.cond1391
                                        #   Parent Loop BB15_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB15_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB15_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB15_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_182
.LBB15_185:                             # %for.end1416
                                        #   in Loop: Header=BB15_174 Depth=1
	jmp	.LBB15_186
.LBB15_186:                             # %for.inc1417
                                        #   in Loop: Header=BB15_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_174
.LBB15_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB15_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_192 Depth 2
                                        #     Child Loop BB15_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB15_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB15_188 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_190:                             # %land.end1426
                                        #   in Loop: Header=BB15_188 Depth=1
	testb	$1, %al
	jne	.LBB15_191
	jmp	.LBB15_210
.LBB15_191:                             # %for.body1428
                                        #   in Loop: Header=BB15_188 Depth=1
	movl	$0, -12(%rbp)
.LBB15_192:                             # %for.cond1429
                                        #   Parent Loop BB15_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB15_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB15_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB15_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_192
.LBB15_195:                             # %for.end1441
                                        #   in Loop: Header=BB15_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB15_196:                             # %for.cond1458
                                        #   Parent Loop BB15_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB15_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB15_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB15_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB15_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB15_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB15_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB15_201
.LBB15_200:                             # %if.else1521
                                        #   in Loop: Header=BB15_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB15_201:                             # %if.end1574
                                        #   in Loop: Header=BB15_196 Depth=2
	jmp	.LBB15_206
.LBB15_202:                             # %if.else1575
                                        #   in Loop: Header=BB15_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB15_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB15_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB15_205
.LBB15_204:                             # %if.else1625
                                        #   in Loop: Header=BB15_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB15_205:                             # %if.end1672
                                        #   in Loop: Header=BB15_196 Depth=2
	jmp	.LBB15_206
.LBB15_206:                             # %if.end1673
                                        #   in Loop: Header=BB15_196 Depth=2
	jmp	.LBB15_207
.LBB15_207:                             # %for.inc1674
                                        #   in Loop: Header=BB15_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_196
.LBB15_208:                             # %for.end1676
                                        #   in Loop: Header=BB15_188 Depth=1
	jmp	.LBB15_209
.LBB15_209:                             # %for.inc1677
                                        #   in Loop: Header=BB15_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_188
.LBB15_210:                             # %for.end1679
	jmp	.LBB15_211
.LBB15_211:                             # %if.end1680
	jmp	.LBB15_212
.LBB15_212:                             # %if.end1681
	jmp	.LBB15_213
.LBB15_213:                             # %if.end1682
	movl	$0, -196(%rbp)
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB15_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_216 Depth 2
                                        #       Child Loop BB15_218 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB15_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB15_214 Depth=1
	movl	$0, -112(%rbp)
.LBB15_216:                             # %for.cond1689
                                        #   Parent Loop BB15_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_218 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB15_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB15_216 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$1, -36(%rbp)
.LBB15_218:                             # %for.cond1722
                                        #   Parent Loop BB15_214 Depth=1
                                        #     Parent Loop BB15_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB15_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB15_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB15_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB15_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB15_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB15_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB15_223
.LBB15_222:                             # %if.then1731
                                        #   in Loop: Header=BB15_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_224
.LBB15_223:                             # %if.else1740
                                        #   in Loop: Header=BB15_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB15_224:                             # %if.end1749
                                        #   in Loop: Header=BB15_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB15_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB15_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB15_230
.LBB15_226:                             # %if.else1761
                                        #   in Loop: Header=BB15_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB15_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB15_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB15_229
.LBB15_228:                             # %if.else1792
                                        #   in Loop: Header=BB15_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB15_229:                             # %if.end1820
                                        #   in Loop: Header=BB15_218 Depth=3
	jmp	.LBB15_230
.LBB15_230:                             # %if.end1821
                                        #   in Loop: Header=BB15_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB15_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB15_218 Depth=3
	movl	-116(%rbp), %eax
	addl	-200(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB15_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB15_218 Depth=3
	cmpl	$0, -104(%rbp)
	je	.LBB15_234
.LBB15_233:                             # %if.then1839
                                        #   in Loop: Header=BB15_218 Depth=3
	movl	-196(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -196(%rbp)
	jmp	.LBB15_235
.LBB15_234:                             # %if.else1841
                                        #   in Loop: Header=BB15_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -196(%rbp)
.LBB15_235:                             # %if.end1848
                                        #   in Loop: Header=BB15_218 Depth=3
	movl	$2, -208(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB15_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB15_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB15_247
.LBB15_237:                             # %if.else1872
                                        #   in Loop: Header=BB15_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB15_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB15_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB15_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB15_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB15_241
.LBB15_240:                             # %if.else1893
                                        #   in Loop: Header=BB15_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB15_241:                             # %if.end1908
                                        #   in Loop: Header=BB15_218 Depth=3
	jmp	.LBB15_246
.LBB15_242:                             # %if.else1909
                                        #   in Loop: Header=BB15_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB15_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB15_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB15_245
.LBB15_244:                             # %if.else1924
                                        #   in Loop: Header=BB15_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB15_245:                             # %if.end1936
                                        #   in Loop: Header=BB15_218 Depth=3
	jmp	.LBB15_246
.LBB15_246:                             # %if.end1937
                                        #   in Loop: Header=BB15_218 Depth=3
	jmp	.LBB15_247
.LBB15_247:                             # %if.end1938
                                        #   in Loop: Header=BB15_218 Depth=3
	jmp	.LBB15_248
.LBB15_248:                             # %if.end1939
                                        #   in Loop: Header=BB15_218 Depth=3
	cmpl	$0, -104(%rbp)
	jne	.LBB15_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB15_218 Depth=3
	movl	-144(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB15_250:                             # %if.end1949
                                        #   in Loop: Header=BB15_218 Depth=3
	jmp	.LBB15_251
.LBB15_251:                             # %for.inc1950
                                        #   in Loop: Header=BB15_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB15_218
.LBB15_252:                             # %for.end1952
                                        #   in Loop: Header=BB15_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB15_216 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB15_216
.LBB15_254:                             # %for.end1957
                                        #   in Loop: Header=BB15_214 Depth=1
	jmp	.LBB15_255
.LBB15_255:                             # %for.inc1958
                                        #   in Loop: Header=BB15_214 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB15_214
.LBB15_256:                             # %for.end1960
	cmpl	$4, -196(%rbp)
	jge	.LBB15_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -104(%rbp)
	jne	.LBB15_278
# %bb.258:                              # %if.then1965
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB15_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_261 Depth 2
                                        #       Child Loop BB15_265 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB15_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB15_259 Depth=1
	movl	$0, -112(%rbp)
.LBB15_261:                             # %for.cond1972
                                        #   Parent Loop BB15_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_265 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB15_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB15_261 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB15_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB15_261 Depth=2
	movslq	-140(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-140(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB15_264:                             # %if.end2016
                                        #   in Loop: Header=BB15_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB15_265:                             # %for.cond2018
                                        #   Parent Loop BB15_259 Depth=1
                                        #     Parent Loop BB15_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB15_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB15_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB15_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB15_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB15_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB15_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB15_270
.LBB15_269:                             # %if.then2030
                                        #   in Loop: Header=BB15_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_271
.LBB15_270:                             # %if.else2039
                                        #   in Loop: Header=BB15_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB15_271:                             # %if.end2048
                                        #   in Loop: Header=BB15_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB15_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB15_265
.LBB15_273:                             # %for.end2060
                                        #   in Loop: Header=BB15_261 Depth=2
	jmp	.LBB15_274
.LBB15_274:                             # %for.inc2061
                                        #   in Loop: Header=BB15_261 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB15_261
.LBB15_275:                             # %for.end2063
                                        #   in Loop: Header=BB15_259 Depth=1
	jmp	.LBB15_276
.LBB15_276:                             # %for.inc2064
                                        #   in Loop: Header=BB15_259 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB15_259
.LBB15_277:                             # %for.end2066
	jmp	.LBB15_278
.LBB15_278:                             # %if.end2067
	cmpl	$2, -208(%rbp)
	jne	.LBB15_280
# %bb.279:                              # %if.then2070
	movl	$2, -132(%rbp)
.LBB15_280:                             # %if.end2071
	movl	$0, -28(%rbp)
.LBB15_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_285 Depth 2
                                        #       Child Loop BB15_287 Depth 3
                                        #         Child Loop BB15_289 Depth 4
                                        #         Child Loop BB15_293 Depth 4
                                        #       Child Loop BB15_299 Depth 3
                                        #         Child Loop BB15_303 Depth 4
                                        #         Child Loop BB15_307 Depth 4
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB15_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB15_281 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_283:                             # %land.end2079
                                        #   in Loop: Header=BB15_281 Depth=1
	testb	$1, %al
	jne	.LBB15_284
	jmp	.LBB15_340
.LBB15_284:                             # %for.body2081
                                        #   in Loop: Header=BB15_281 Depth=1
	movl	$0, -24(%rbp)
.LBB15_285:                             # %for.cond2082
                                        #   Parent Loop BB15_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_287 Depth 3
                                        #         Child Loop BB15_289 Depth 4
                                        #         Child Loop BB15_293 Depth 4
                                        #       Child Loop BB15_299 Depth 3
                                        #         Child Loop BB15_303 Depth 4
                                        #         Child Loop BB15_307 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB15_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB15_285 Depth=2
	movl	$0, -12(%rbp)
.LBB15_287:                             # %for.cond2087
                                        #   Parent Loop BB15_281 Depth=1
                                        #     Parent Loop BB15_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB15_289 Depth 4
                                        #         Child Loop BB15_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB15_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB15_287 Depth=3
	movl	$0, -16(%rbp)
.LBB15_289:                             # %for.cond2091
                                        #   Parent Loop BB15_281 Depth=1
                                        #     Parent Loop BB15_285 Depth=2
                                        #       Parent Loop BB15_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB15_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB15_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB15_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_289
.LBB15_292:                             # %for.end2106
                                        #   in Loop: Header=BB15_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB15_293:                             # %for.cond2125
                                        #   Parent Loop BB15_281 Depth=1
                                        #     Parent Loop BB15_285 Depth=2
                                        #       Parent Loop BB15_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB15_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB15_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB15_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_293
.LBB15_296:                             # %for.end2156
                                        #   in Loop: Header=BB15_287 Depth=3
	jmp	.LBB15_297
.LBB15_297:                             # %for.inc2157
                                        #   in Loop: Header=BB15_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_287
.LBB15_298:                             # %for.end2159
                                        #   in Loop: Header=BB15_285 Depth=2
	movl	$0, -16(%rbp)
.LBB15_299:                             # %for.cond2160
                                        #   Parent Loop BB15_281 Depth=1
                                        #     Parent Loop BB15_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB15_303 Depth 4
                                        #         Child Loop BB15_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB15_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB15_299 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_301:                             # %land.end2166
                                        #   in Loop: Header=BB15_299 Depth=3
	testb	$1, %al
	jne	.LBB15_302
	jmp	.LBB15_336
.LBB15_302:                             # %for.body2168
                                        #   in Loop: Header=BB15_299 Depth=3
	movl	$0, -12(%rbp)
.LBB15_303:                             # %for.cond2169
                                        #   Parent Loop BB15_281 Depth=1
                                        #     Parent Loop BB15_285 Depth=2
                                        #       Parent Loop BB15_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB15_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB15_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB15_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_303
.LBB15_306:                             # %for.end2184
                                        #   in Loop: Header=BB15_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB15_307:                             # %for.cond2203
                                        #   Parent Loop BB15_281 Depth=1
                                        #     Parent Loop BB15_285 Depth=2
                                        #       Parent Loop BB15_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB15_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB15_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB15_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB15_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB15_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB15_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB15_312
.LBB15_311:                             # %cond.false2231
                                        #   in Loop: Header=BB15_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB15_312:                             # %cond.end2250
                                        #   in Loop: Header=BB15_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB15_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB15_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB15_318
.LBB15_314:                             # %cond.false2257
                                        #   in Loop: Header=BB15_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB15_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB15_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB15_317
.LBB15_316:                             # %cond.false2279
                                        #   in Loop: Header=BB15_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB15_317:                             # %cond.end2298
                                        #   in Loop: Header=BB15_307 Depth=4
.LBB15_318:                             # %cond.end2300
                                        #   in Loop: Header=BB15_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB15_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB15_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB15_321
.LBB15_320:                             # %cond.false2333
                                        #   in Loop: Header=BB15_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB15_321:                             # %cond.end2352
                                        #   in Loop: Header=BB15_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB15_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB15_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB15_327
.LBB15_323:                             # %cond.false2359
                                        #   in Loop: Header=BB15_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB15_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB15_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB15_326
.LBB15_325:                             # %cond.false2381
                                        #   in Loop: Header=BB15_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB15_326:                             # %cond.end2400
                                        #   in Loop: Header=BB15_307 Depth=4
.LBB15_327:                             # %cond.end2402
                                        #   in Loop: Header=BB15_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB15_332
.LBB15_328:                             # %if.else2412
                                        #   in Loop: Header=BB15_307 Depth=4
	cmpl	$0, -104(%rbp)
	je	.LBB15_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB15_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB15_331
.LBB15_330:                             # %if.else2439
                                        #   in Loop: Header=BB15_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB15_331:                             # %if.end2468
                                        #   in Loop: Header=BB15_307 Depth=4
	jmp	.LBB15_332
.LBB15_332:                             # %if.end2469
                                        #   in Loop: Header=BB15_307 Depth=4
	jmp	.LBB15_333
.LBB15_333:                             # %for.inc2470
                                        #   in Loop: Header=BB15_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_307
.LBB15_334:                             # %for.end2472
                                        #   in Loop: Header=BB15_299 Depth=3
	jmp	.LBB15_335
.LBB15_335:                             # %for.inc2473
                                        #   in Loop: Header=BB15_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_299
.LBB15_336:                             # %for.end2475
                                        #   in Loop: Header=BB15_285 Depth=2
	jmp	.LBB15_337
.LBB15_337:                             # %for.inc2476
                                        #   in Loop: Header=BB15_285 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_285
.LBB15_338:                             # %for.end2478
                                        #   in Loop: Header=BB15_281 Depth=1
	jmp	.LBB15_339
.LBB15_339:                             # %for.inc2479
                                        #   in Loop: Header=BB15_281 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB15_281
.LBB15_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB15_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB15_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB15_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB15_342 Depth=1
	movl	$0, -16(%rbp)
.LBB15_344:                             # %for.cond2490
                                        #   Parent Loop BB15_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB15_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB15_344 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB15_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB15_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB15_348
.LBB15_347:                             # %if.else2518
                                        #   in Loop: Header=BB15_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB15_348:                             # %if.end2536
                                        #   in Loop: Header=BB15_344 Depth=2
	jmp	.LBB15_349
.LBB15_349:                             # %for.inc2537
                                        #   in Loop: Header=BB15_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_344
.LBB15_350:                             # %for.end2539
                                        #   in Loop: Header=BB15_342 Depth=1
	jmp	.LBB15_351
.LBB15_351:                             # %for.inc2540
                                        #   in Loop: Header=BB15_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_342
.LBB15_352:                             # %for.end2542
	jmp	.LBB15_353
.LBB15_353:                             # %if.end2543
	movl	-132(%rbp), %ebx
	cmpl	$1692894044, -380(%rbp) # imm = 0x64E7835C
	jne	.LBB15_355
.LBB15_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_354
.Lfunc_end15:
	.size	dct_chroma.6, .Lfunc_end15-dct_chroma.6
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.7          # -- Begin function copyblock_sp.7
	.p2align	4, 0x90
	.type	copyblock_sp.7,@function
copyblock_sp.7:                         # @copyblock_sp.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1696601081, -88(%rbp)  # imm = 0x652013F9
	movl	%edi, -72(%rbp)
	movl	%esi, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -80(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-80(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movl	$0, -4(%rbp)
.LBB16_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB16_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_3:                               # %for.cond4
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB16_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB16_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-68(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_3
.LBB16_6:                               # %for.end
                                        #   in Loop: Header=BB16_1 Depth=1
	jmp	.LBB16_7
.LBB16_7:                               # %for.inc17
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_1
.LBB16_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB16_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB16_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB16_9 Depth=1
	movl	$0, -8(%rbp)
.LBB16_11:                              # %for.cond24
                                        #   Parent Loop BB16_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB16_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB16_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB16_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_11
.LBB16_14:                              # %for.end53
                                        #   in Loop: Header=BB16_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB16_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_9
.LBB16_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB16_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB16_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB16_17 Depth=1
	movl	$0, -4(%rbp)
.LBB16_19:                              # %for.cond86
                                        #   Parent Loop BB16_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB16_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB16_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB16_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_19
.LBB16_22:                              # %for.end115
                                        #   in Loop: Header=BB16_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB16_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_17
.LBB16_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB16_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB16_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB16_25 Depth=1
	movl	$0, -8(%rbp)
.LBB16_27:                              # %for.cond149
                                        #   Parent Loop BB16_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB16_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB16_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-80(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB16_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_27
.LBB16_30:                              # %for.end184
                                        #   in Loop: Header=BB16_25 Depth=1
	jmp	.LBB16_31
.LBB16_31:                              # %for.inc185
                                        #   in Loop: Header=BB16_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_25
.LBB16_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB16_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_35 Depth 2
                                        #     Child Loop BB16_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB16_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB16_33 Depth=1
	movl	$0, -8(%rbp)
.LBB16_35:                              # %for.cond192
                                        #   Parent Loop BB16_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB16_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB16_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB16_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_35
.LBB16_38:                              # %for.end205
                                        #   in Loop: Header=BB16_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB16_39:                              # %for.cond224
                                        #   Parent Loop BB16_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB16_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB16_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB16_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_39
.LBB16_42:                              # %for.end251
                                        #   in Loop: Header=BB16_33 Depth=1
	jmp	.LBB16_43
.LBB16_43:                              # %for.inc252
                                        #   in Loop: Header=BB16_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_33
.LBB16_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB16_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_47 Depth 2
                                        #     Child Loop BB16_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB16_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB16_45 Depth=1
	movl	$0, -4(%rbp)
.LBB16_47:                              # %for.cond259
                                        #   Parent Loop BB16_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB16_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB16_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB16_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_47
.LBB16_50:                              # %for.end272
                                        #   in Loop: Header=BB16_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB16_51:                              # %for.cond291
                                        #   Parent Loop BB16_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB16_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB16_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB16_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB16_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB16_55
.LBB16_54:                              # %cond.false
                                        #   in Loop: Header=BB16_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB16_55:                              # %cond.end
                                        #   in Loop: Header=BB16_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB16_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB16_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB16_61
.LBB16_57:                              # %cond.false316
                                        #   in Loop: Header=BB16_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB16_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB16_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB16_60
.LBB16_59:                              # %cond.false327
                                        #   in Loop: Header=BB16_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB16_60:                              # %cond.end335
                                        #   in Loop: Header=BB16_51 Depth=2
.LBB16_61:                              # %cond.end337
                                        #   in Loop: Header=BB16_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB16_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB16_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB16_64
.LBB16_63:                              # %cond.false355
                                        #   in Loop: Header=BB16_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB16_64:                              # %cond.end363
                                        #   in Loop: Header=BB16_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB16_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB16_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB16_70
.LBB16_66:                              # %cond.false369
                                        #   in Loop: Header=BB16_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB16_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB16_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB16_69
.LBB16_68:                              # %cond.false380
                                        #   in Loop: Header=BB16_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB16_69:                              # %cond.end388
                                        #   in Loop: Header=BB16_51 Depth=2
.LBB16_70:                              # %cond.end390
                                        #   in Loop: Header=BB16_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB16_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_51
.LBB16_72:                              # %for.end399
                                        #   in Loop: Header=BB16_45 Depth=1
	jmp	.LBB16_73
.LBB16_73:                              # %for.inc400
                                        #   in Loop: Header=BB16_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_45
.LBB16_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB16_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB16_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB16_75 Depth=1
	movl	$0, -8(%rbp)
.LBB16_77:                              # %for.cond407
                                        #   Parent Loop BB16_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB16_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB16_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-68(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-72(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB16_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_77
.LBB16_80:                              # %for.end427
                                        #   in Loop: Header=BB16_75 Depth=1
	jmp	.LBB16_81
.LBB16_81:                              # %for.inc428
                                        #   in Loop: Header=BB16_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_75
.LBB16_82:                              # %for.end430
	cmpl	$1696601081, -88(%rbp)  # imm = 0x652013F9
	jne	.LBB16_84
.LBB16_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_83
.Lfunc_end16:
	.size	copyblock_sp.7, .Lfunc_end16-copyblock_sp.7
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.8        # -- Begin function dct_luma_16x16.8
	.p2align	4, 0x90
	.type	dct_luma_16x16.8,@function
dct_luma_16x16.8:                       # @dct_luma_16x16.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$932348731, -132(%rbp)  # imm = 0x3792833B
	movl	%edi, -104(%rbp)
	movl	$0, -112(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -152(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -240(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB17_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB17_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-64(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -12(%rbp)
.LBB17_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB17_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB17_3 Depth=1
	movl	$0, -16(%rbp)
.LBB17_5:                               # %for.cond16
                                        #   Parent Loop BB17_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB17_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB17_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB17_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB17_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB17_9
.LBB17_8:                               # %if.else
                                        #   in Loop: Header=BB17_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB17_9:                               # %if.end
                                        #   in Loop: Header=BB17_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB17_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_5
.LBB17_11:                              # %for.end
                                        #   in Loop: Header=BB17_3 Depth=1
	jmp	.LBB17_12
.LBB17_12:                              # %for.inc61
                                        #   in Loop: Header=BB17_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_3
.LBB17_13:                              # %for.end63
	movl	$0, -20(%rbp)
.LBB17_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_18 Depth 2
                                        #       Child Loop BB17_20 Depth 3
                                        #         Child Loop BB17_22 Depth 4
                                        #       Child Loop BB17_28 Depth 3
                                        #         Child Loop BB17_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -20(%rbp)
	jge	.LBB17_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB17_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB17_16:                              # %land.end69
                                        #   in Loop: Header=BB17_14 Depth=1
	testb	$1, %al
	jne	.LBB17_17
	jmp	.LBB17_39
.LBB17_17:                              # %for.body71
                                        #   in Loop: Header=BB17_14 Depth=1
	movl	$0, -24(%rbp)
.LBB17_18:                              # %for.cond72
                                        #   Parent Loop BB17_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_20 Depth 3
                                        #         Child Loop BB17_22 Depth 4
                                        #       Child Loop BB17_28 Depth 3
                                        #         Child Loop BB17_30 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB17_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB17_18 Depth=2
	movl	$0, -12(%rbp)
.LBB17_20:                              # %for.cond76
                                        #   Parent Loop BB17_14 Depth=1
                                        #     Parent Loop BB17_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB17_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB17_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB17_20 Depth=3
	movl	$0, -16(%rbp)
.LBB17_22:                              # %for.cond80
                                        #   Parent Loop BB17_14 Depth=1
                                        #     Parent Loop BB17_18 Depth=2
                                        #       Parent Loop BB17_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB17_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB17_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB17_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_22
.LBB17_25:                              # %for.end125
                                        #   in Loop: Header=BB17_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB17_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_20
.LBB17_27:                              # %for.end169
                                        #   in Loop: Header=BB17_18 Depth=2
	movl	$0, -16(%rbp)
.LBB17_28:                              # %for.cond170
                                        #   Parent Loop BB17_14 Depth=1
                                        #     Parent Loop BB17_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB17_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB17_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB17_28 Depth=3
	movl	$0, -12(%rbp)
.LBB17_30:                              # %for.cond174
                                        #   Parent Loop BB17_14 Depth=1
                                        #     Parent Loop BB17_18 Depth=2
                                        #       Parent Loop BB17_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB17_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB17_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB17_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_30
.LBB17_33:                              # %for.end219
                                        #   in Loop: Header=BB17_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB17_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_28
.LBB17_35:                              # %for.end264
                                        #   in Loop: Header=BB17_18 Depth=2
	jmp	.LBB17_36
.LBB17_36:                              # %for.inc265
                                        #   in Loop: Header=BB17_18 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_18
.LBB17_37:                              # %for.end267
                                        #   in Loop: Header=BB17_14 Depth=1
	jmp	.LBB17_38
.LBB17_38:                              # %for.inc268
                                        #   in Loop: Header=BB17_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB17_14
.LBB17_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB17_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB17_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB17_40 Depth=1
	movl	$0, -16(%rbp)
.LBB17_42:                              # %for.cond275
                                        #   Parent Loop BB17_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB17_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB17_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB17_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_42
.LBB17_45:                              # %for.end291
                                        #   in Loop: Header=BB17_40 Depth=1
	jmp	.LBB17_46
.LBB17_46:                              # %for.inc292
                                        #   in Loop: Header=BB17_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_40
.LBB17_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB17_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB17_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB17_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB17_50:                              # %land.end301
                                        #   in Loop: Header=BB17_48 Depth=1
	testb	$1, %al
	jne	.LBB17_51
	jmp	.LBB17_57
.LBB17_51:                              # %for.body303
                                        #   in Loop: Header=BB17_48 Depth=1
	movl	$0, -16(%rbp)
.LBB17_52:                              # %for.cond304
                                        #   Parent Loop BB17_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB17_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB17_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB17_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_52
.LBB17_55:                              # %for.end333
                                        #   in Loop: Header=BB17_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB17_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_48
.LBB17_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB17_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB17_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB17_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB17_60:                              # %land.end367
                                        #   in Loop: Header=BB17_58 Depth=1
	testb	$1, %al
	jne	.LBB17_61
	jmp	.LBB17_67
.LBB17_61:                              # %for.body369
                                        #   in Loop: Header=BB17_58 Depth=1
	movl	$0, -12(%rbp)
.LBB17_62:                              # %for.cond370
                                        #   Parent Loop BB17_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB17_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB17_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB17_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_62
.LBB17_65:                              # %for.end399
                                        #   in Loop: Header=BB17_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB17_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_58
.LBB17_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -60(%rbp)
.LBB17_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -60(%rbp)
	jge	.LBB17_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB17_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB17_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB17_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB17_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB17_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB17_73
.LBB17_72:                              # %if.then437
                                        #   in Loop: Header=BB17_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_74
.LBB17_73:                              # %if.else446
                                        #   in Loop: Header=BB17_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB17_74:                              # %if.end455
                                        #   in Loop: Header=BB17_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB17_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB17_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB17_77
.LBB17_76:                              # %if.else463
                                        #   in Loop: Header=BB17_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB17_77:                              # %if.end481
                                        #   in Loop: Header=BB17_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB17_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB17_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB17_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB17_68 Depth=1
	cmpl	$2063, -68(%rbp)        # imm = 0x80F
	jle	.LBB17_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB17_68 Depth=1
	movl	$2063, -68(%rbp)        # imm = 0x80F
.LBB17_81:                              # %if.end492
                                        #   in Loop: Header=BB17_68 Depth=1
	jmp	.LBB17_82
.LBB17_82:                              # %if.end493
                                        #   in Loop: Header=BB17_68 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB17_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB17_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB17_84:                              # %if.end507
                                        #   in Loop: Header=BB17_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB17_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB17_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB17_86:                              # %if.end519
                                        #   in Loop: Header=BB17_68 Depth=1
	jmp	.LBB17_87
.LBB17_87:                              # %for.inc520
                                        #   in Loop: Header=BB17_68 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB17_68
.LBB17_88:                              # %for.end522
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB17_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_93 Depth 2
                                        #     Child Loop BB17_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB17_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB17_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB17_91:                              # %land.end531
                                        #   in Loop: Header=BB17_89 Depth=1
	testb	$1, %al
	jne	.LBB17_92
	jmp	.LBB17_102
.LBB17_92:                              # %for.body533
                                        #   in Loop: Header=BB17_89 Depth=1
	movl	$0, -16(%rbp)
.LBB17_93:                              # %for.cond534
                                        #   Parent Loop BB17_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB17_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB17_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB17_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_93
.LBB17_96:                              # %for.end546
                                        #   in Loop: Header=BB17_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB17_97:                              # %for.cond563
                                        #   Parent Loop BB17_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB17_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB17_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-56(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB17_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_97
.LBB17_100:                             # %for.end588
                                        #   in Loop: Header=BB17_89 Depth=1
	jmp	.LBB17_101
.LBB17_101:                             # %for.inc589
                                        #   in Loop: Header=BB17_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_89
.LBB17_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB17_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_107 Depth 2
                                        #     Child Loop BB17_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB17_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB17_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB17_105:                             # %land.end598
                                        #   in Loop: Header=BB17_103 Depth=1
	testb	$1, %al
	jne	.LBB17_106
	jmp	.LBB17_119
.LBB17_106:                             # %for.body600
                                        #   in Loop: Header=BB17_103 Depth=1
	movl	$0, -12(%rbp)
.LBB17_107:                             # %for.cond601
                                        #   Parent Loop BB17_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB17_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB17_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB17_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_107
.LBB17_110:                             # %for.end613
                                        #   in Loop: Header=BB17_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB17_111:                             # %for.cond630
                                        #   Parent Loop BB17_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB17_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB17_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -64(%rbp)
	jge	.LBB17_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB17_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-64(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-64(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB17_115
.LBB17_114:                             # %if.else680
                                        #   in Loop: Header=BB17_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB17_115:                             # %if.end717
                                        #   in Loop: Header=BB17_111 Depth=2
	jmp	.LBB17_116
.LBB17_116:                             # %for.inc718
                                        #   in Loop: Header=BB17_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_111
.LBB17_117:                             # %for.end720
                                        #   in Loop: Header=BB17_103 Depth=1
	jmp	.LBB17_118
.LBB17_118:                             # %for.inc721
                                        #   in Loop: Header=BB17_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_103
.LBB17_119:                             # %for.end723
	movl	$0, -20(%rbp)
.LBB17_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_122 Depth 2
                                        #       Child Loop BB17_124 Depth 3
                                        #       Child Loop BB17_143 Depth 3
                                        #         Child Loop BB17_147 Depth 4
                                        #         Child Loop BB17_151 Depth 4
                                        #       Child Loop BB17_157 Depth 3
                                        #         Child Loop BB17_161 Depth 4
                                        #         Child Loop BB17_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB17_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB17_120 Depth=1
	movl	$0, -24(%rbp)
.LBB17_122:                             # %for.cond728
                                        #   Parent Loop BB17_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_124 Depth 3
                                        #       Child Loop BB17_143 Depth 3
                                        #         Child Loop BB17_147 Depth 4
                                        #         Child Loop BB17_151 Depth 4
                                        #       Child Loop BB17_157 Depth 3
                                        #         Child Loop BB17_161 Depth 4
                                        #         Child Loop BB17_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB17_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB17_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -108(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -116(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -232(%rbp)
	movl	$1, -60(%rbp)
.LBB17_124:                             # %for.cond751
                                        #   Parent Loop BB17_120 Depth=1
                                        #     Parent Loop BB17_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -60(%rbp)
	jge	.LBB17_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB17_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB17_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB17_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB17_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB17_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB17_129
.LBB17_128:                             # %if.then762
                                        #   in Loop: Header=BB17_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_130
.LBB17_129:                             # %if.else771
                                        #   in Loop: Header=BB17_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB17_130:                             # %if.end780
                                        #   in Loop: Header=BB17_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB17_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB17_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB17_133
.LBB17_132:                             # %if.else793
                                        #   in Loop: Header=BB17_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB17_133:                             # %if.end818
                                        #   in Loop: Header=BB17_124 Depth=3
	cmpl	$0, -68(%rbp)
	je	.LBB17_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB17_124 Depth=3
	movl	$15, -112(%rbp)
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB17_135:                             # %if.end836
                                        #   in Loop: Header=BB17_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB17_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB17_124 Depth=3
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -68(%rbp)
	cmpl	$4, -64(%rbp)
	jge	.LBB17_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB17_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB17_139
.LBB17_138:                             # %if.else871
                                        #   in Loop: Header=BB17_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-64(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB17_139:                             # %if.end889
                                        #   in Loop: Header=BB17_124 Depth=3
	jmp	.LBB17_140
.LBB17_140:                             # %if.end890
                                        #   in Loop: Header=BB17_124 Depth=3
	jmp	.LBB17_141
.LBB17_141:                             # %for.inc891
                                        #   in Loop: Header=BB17_124 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB17_124
.LBB17_142:                             # %for.end893
                                        #   in Loop: Header=BB17_122 Depth=2
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB17_143:                             # %for.cond896
                                        #   Parent Loop BB17_120 Depth=1
                                        #     Parent Loop BB17_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB17_147 Depth 4
                                        #         Child Loop BB17_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB17_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB17_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB17_145:                             # %land.end902
                                        #   in Loop: Header=BB17_143 Depth=3
	testb	$1, %al
	jne	.LBB17_146
	jmp	.LBB17_156
.LBB17_146:                             # %for.body904
                                        #   in Loop: Header=BB17_143 Depth=3
	movl	$0, -16(%rbp)
.LBB17_147:                             # %for.cond905
                                        #   Parent Loop BB17_120 Depth=1
                                        #     Parent Loop BB17_122 Depth=2
                                        #       Parent Loop BB17_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB17_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB17_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB17_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_147
.LBB17_150:                             # %for.end921
                                        #   in Loop: Header=BB17_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB17_151:                             # %for.cond940
                                        #   Parent Loop BB17_120 Depth=1
                                        #     Parent Loop BB17_122 Depth=2
                                        #       Parent Loop BB17_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB17_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB17_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-56(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB17_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_151
.LBB17_154:                             # %for.end973
                                        #   in Loop: Header=BB17_143 Depth=3
	jmp	.LBB17_155
.LBB17_155:                             # %for.inc974
                                        #   in Loop: Header=BB17_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_143
.LBB17_156:                             # %for.end976
                                        #   in Loop: Header=BB17_122 Depth=2
	movl	$0, -16(%rbp)
.LBB17_157:                             # %for.cond977
                                        #   Parent Loop BB17_120 Depth=1
                                        #     Parent Loop BB17_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB17_161 Depth 4
                                        #         Child Loop BB17_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB17_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB17_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB17_159:                             # %land.end983
                                        #   in Loop: Header=BB17_157 Depth=3
	testb	$1, %al
	jne	.LBB17_160
	jmp	.LBB17_170
.LBB17_160:                             # %for.body985
                                        #   in Loop: Header=BB17_157 Depth=3
	movl	$0, -12(%rbp)
.LBB17_161:                             # %for.cond986
                                        #   Parent Loop BB17_120 Depth=1
                                        #     Parent Loop BB17_122 Depth=2
                                        #       Parent Loop BB17_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB17_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB17_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB17_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_161
.LBB17_164:                             # %for.end1002
                                        #   in Loop: Header=BB17_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB17_165:                             # %for.cond1021
                                        #   Parent Loop BB17_120 Depth=1
                                        #     Parent Loop BB17_122 Depth=2
                                        #       Parent Loop BB17_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB17_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB17_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB17_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_165
.LBB17_168:                             # %for.end1054
                                        #   in Loop: Header=BB17_157 Depth=3
	jmp	.LBB17_169
.LBB17_169:                             # %for.inc1055
                                        #   in Loop: Header=BB17_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_157
.LBB17_170:                             # %for.end1057
                                        #   in Loop: Header=BB17_122 Depth=2
	jmp	.LBB17_171
.LBB17_171:                             # %for.inc1058
                                        #   in Loop: Header=BB17_122 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_122
.LBB17_172:                             # %for.end1060
                                        #   in Loop: Header=BB17_120 Depth=1
	jmp	.LBB17_173
.LBB17_173:                             # %for.inc1061
                                        #   in Loop: Header=BB17_120 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB17_120
.LBB17_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB17_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB17_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB17_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB17_176 Depth=1
	movl	$0, -16(%rbp)
.LBB17_178:                             # %for.cond1071
                                        #   Parent Loop BB17_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB17_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB17_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB17_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_178
.LBB17_181:                             # %for.end1093
                                        #   in Loop: Header=BB17_176 Depth=1
	jmp	.LBB17_182
.LBB17_182:                             # %for.inc1094
                                        #   in Loop: Header=BB17_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_176
.LBB17_183:                             # %for.end1096
	jmp	.LBB17_196
.LBB17_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB17_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB17_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB17_185 Depth=1
	movl	$0, -16(%rbp)
.LBB17_187:                             # %for.cond1102
                                        #   Parent Loop BB17_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB17_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB17_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB17_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB17_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB17_191
.LBB17_190:                             # %if.else1125
                                        #   in Loop: Header=BB17_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB17_191:                             # %if.end1145
                                        #   in Loop: Header=BB17_187 Depth=2
	jmp	.LBB17_192
.LBB17_192:                             # %for.inc1146
                                        #   in Loop: Header=BB17_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_187
.LBB17_193:                             # %for.end1148
                                        #   in Loop: Header=BB17_185 Depth=1
	jmp	.LBB17_194
.LBB17_194:                             # %for.inc1149
                                        #   in Loop: Header=BB17_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_185
.LBB17_195:                             # %for.end1151
	jmp	.LBB17_196
.LBB17_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB17_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB17_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB17_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB17_198 Depth=1
	movl	$0, -16(%rbp)
.LBB17_200:                             # %for.cond1160
                                        #   Parent Loop BB17_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB17_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB17_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB17_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB17_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB17_213
.LBB17_203:                             # %if.else1186
                                        #   in Loop: Header=BB17_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB17_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB17_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB17_206
.LBB17_205:                             # %cond.false
                                        #   in Loop: Header=BB17_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB17_206:                             # %cond.end
                                        #   in Loop: Header=BB17_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB17_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB17_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB17_212
.LBB17_208:                             # %cond.false1229
                                        #   in Loop: Header=BB17_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB17_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB17_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB17_211
.LBB17_210:                             # %cond.false1250
                                        #   in Loop: Header=BB17_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB17_211:                             # %cond.end1268
                                        #   in Loop: Header=BB17_200 Depth=2
.LBB17_212:                             # %cond.end1270
                                        #   in Loop: Header=BB17_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB17_213:                             # %if.end1282
                                        #   in Loop: Header=BB17_200 Depth=2
	jmp	.LBB17_214
.LBB17_214:                             # %for.inc1283
                                        #   in Loop: Header=BB17_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_200
.LBB17_215:                             # %for.end1285
                                        #   in Loop: Header=BB17_198 Depth=1
	jmp	.LBB17_216
.LBB17_216:                             # %for.inc1286
                                        #   in Loop: Header=BB17_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_198
.LBB17_217:                             # %for.end1288
	jmp	.LBB17_218
.LBB17_218:                             # %if.end1289
	movl	-112(%rbp), %ebx
	cmpl	$932348731, -132(%rbp)  # imm = 0x3792833B
	jne	.LBB17_220
.LBB17_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_219
.Lfunc_end17:
	.size	dct_luma_16x16.8, .Lfunc_end17-dct_luma_16x16.8
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.9          # -- Begin function copyblock_sp.9
	.p2align	4, 0x90
	.type	copyblock_sp.9,@function
copyblock_sp.9:                         # @copyblock_sp.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$553941731, -88(%rbp)   # imm = 0x21047AE3
	movl	%edi, -68(%rbp)
	movl	%esi, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -76(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -72(%rbp)
	movl	-76(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movl	$0, -4(%rbp)
.LBB18_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB18_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -8(%rbp)
.LBB18_3:                               # %for.cond4
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB18_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB18_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-68(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB18_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_3
.LBB18_6:                               # %for.end
                                        #   in Loop: Header=BB18_1 Depth=1
	jmp	.LBB18_7
.LBB18_7:                               # %for.inc17
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_1
.LBB18_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB18_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB18_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB18_9 Depth=1
	movl	$0, -8(%rbp)
.LBB18_11:                              # %for.cond24
                                        #   Parent Loop BB18_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB18_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB18_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB18_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_11
.LBB18_14:                              # %for.end53
                                        #   in Loop: Header=BB18_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB18_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_9
.LBB18_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB18_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB18_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB18_17 Depth=1
	movl	$0, -4(%rbp)
.LBB18_19:                              # %for.cond86
                                        #   Parent Loop BB18_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB18_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB18_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB18_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_19
.LBB18_22:                              # %for.end115
                                        #   in Loop: Header=BB18_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB18_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_17
.LBB18_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB18_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB18_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB18_25 Depth=1
	movl	$0, -8(%rbp)
.LBB18_27:                              # %for.cond149
                                        #   Parent Loop BB18_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB18_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB18_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-72(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-72(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB18_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_27
.LBB18_30:                              # %for.end184
                                        #   in Loop: Header=BB18_25 Depth=1
	jmp	.LBB18_31
.LBB18_31:                              # %for.inc185
                                        #   in Loop: Header=BB18_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_25
.LBB18_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB18_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_35 Depth 2
                                        #     Child Loop BB18_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB18_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB18_33 Depth=1
	movl	$0, -8(%rbp)
.LBB18_35:                              # %for.cond192
                                        #   Parent Loop BB18_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB18_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB18_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB18_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_35
.LBB18_38:                              # %for.end205
                                        #   in Loop: Header=BB18_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB18_39:                              # %for.cond224
                                        #   Parent Loop BB18_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB18_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB18_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB18_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_39
.LBB18_42:                              # %for.end251
                                        #   in Loop: Header=BB18_33 Depth=1
	jmp	.LBB18_43
.LBB18_43:                              # %for.inc252
                                        #   in Loop: Header=BB18_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_33
.LBB18_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB18_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_47 Depth 2
                                        #     Child Loop BB18_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB18_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB18_45 Depth=1
	movl	$0, -4(%rbp)
.LBB18_47:                              # %for.cond259
                                        #   Parent Loop BB18_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB18_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB18_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB18_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_47
.LBB18_50:                              # %for.end272
                                        #   in Loop: Header=BB18_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB18_51:                              # %for.cond291
                                        #   Parent Loop BB18_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB18_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB18_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB18_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB18_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB18_55
.LBB18_54:                              # %cond.false
                                        #   in Loop: Header=BB18_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB18_55:                              # %cond.end
                                        #   in Loop: Header=BB18_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB18_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB18_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_61
.LBB18_57:                              # %cond.false316
                                        #   in Loop: Header=BB18_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB18_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB18_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB18_60
.LBB18_59:                              # %cond.false327
                                        #   in Loop: Header=BB18_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB18_60:                              # %cond.end335
                                        #   in Loop: Header=BB18_51 Depth=2
.LBB18_61:                              # %cond.end337
                                        #   in Loop: Header=BB18_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB18_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB18_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB18_64
.LBB18_63:                              # %cond.false355
                                        #   in Loop: Header=BB18_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB18_64:                              # %cond.end363
                                        #   in Loop: Header=BB18_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB18_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB18_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_70
.LBB18_66:                              # %cond.false369
                                        #   in Loop: Header=BB18_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB18_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB18_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB18_69
.LBB18_68:                              # %cond.false380
                                        #   in Loop: Header=BB18_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB18_69:                              # %cond.end388
                                        #   in Loop: Header=BB18_51 Depth=2
.LBB18_70:                              # %cond.end390
                                        #   in Loop: Header=BB18_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB18_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_51
.LBB18_72:                              # %for.end399
                                        #   in Loop: Header=BB18_45 Depth=1
	jmp	.LBB18_73
.LBB18_73:                              # %for.inc400
                                        #   in Loop: Header=BB18_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_45
.LBB18_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB18_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB18_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB18_75 Depth=1
	movl	$0, -8(%rbp)
.LBB18_77:                              # %for.cond407
                                        #   Parent Loop BB18_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB18_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB18_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-80(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-68(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB18_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_77
.LBB18_80:                              # %for.end427
                                        #   in Loop: Header=BB18_75 Depth=1
	jmp	.LBB18_81
.LBB18_81:                              # %for.inc428
                                        #   in Loop: Header=BB18_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_75
.LBB18_82:                              # %for.end430
	cmpl	$553941731, -88(%rbp)   # imm = 0x21047AE3
	jne	.LBB18_84
.LBB18_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_83
.Lfunc_end18:
	.size	copyblock_sp.9, .Lfunc_end18-copyblock_sp.9
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.10       # -- Begin function intrapred_luma.10
	.p2align	4, 0x90
	.type	intrapred_luma.10,@function
intrapred_luma.10:                      # @intrapred_luma.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$1461758564, -172(%rbp) # imm = 0x5720AA64
	movl	%edi, -108(%rbp)
	movl	%esi, -112(%rbp)
	movq	%rdx, -216(%rbp)
	movq	%rcx, -184(%rbp)
	movq	%r8, -224(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -100(%rbp)
	movl	$0, -4(%rbp)
.LBB19_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB19_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_1
.LBB19_4:                               # %for.end
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	addl	$4, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-208(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB19_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -88(%rbp)
	je	.LBB19_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -88(%rbp)
	jne	.LBB19_10
.LBB19_7:                               # %land.rhs10
	cmpl	$4, -84(%rbp)
	movb	$1, %al
	je	.LBB19_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -84(%rbp)
	sete	%al
.LBB19_9:                               # %lor.end
.LBB19_10:                              # %land.end
	xorb	$-1, %al
.LBB19_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB19_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB19_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB19_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB19_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB19_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB19_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB19_17
.LBB19_16:                              # %cond.false
                                        #   in Loop: Header=BB19_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB19_17
.LBB19_17:                              # %cond.end
                                        #   in Loop: Header=BB19_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB19_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_13
.LBB19_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB19_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB19_22
.LBB19_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB19_22
.LBB19_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB19_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB19_25
.LBB19_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB19_25
.LBB19_25:                              # %cond.end49
	movl	%eax, -116(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB19_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB19_28
.LBB19_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB19_28
.LBB19_28:                              # %cond.end59
	movl	%eax, -104(%rbp)
	jmp	.LBB19_30
.LBB19_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -104(%rbp)
.LBB19_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-216(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-184(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB19_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB19_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -104(%rbp)
	setne	%al
.LBB19_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-224(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB19_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB19_36
.LBB19_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB19_36:                              # %if.end114
	cmpl	$0, -116(%rbp)
	je	.LBB19_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB19_39
.LBB19_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB19_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB19_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_42
.LBB19_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB19_42:                              # %if.end208
	cmpl	$0, -104(%rbp)
	je	.LBB19_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-192(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB19_45
.LBB19_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB19_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB19_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB19_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB19_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB19_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_46
.LBB19_49:                              # %for.end233
	movl	$0, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB19_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB19_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB19_61
.LBB19_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB19_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB19_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB19_60
.LBB19_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB19_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB19_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB19_59
.LBB19_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -96(%rbp)
.LBB19_59:                              # %if.end284
	jmp	.LBB19_60
.LBB19_60:                              # %if.end285
	jmp	.LBB19_61
.LBB19_61:                              # %if.end286
	movl	$0, -92(%rbp)
.LBB19_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_64 Depth 2
	cmpl	$4, -92(%rbp)
	jge	.LBB19_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB19_62 Depth=1
	movl	$0, -4(%rbp)
.LBB19_64:                              # %for.cond291
                                        #   Parent Loop BB19_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB19_64 Depth=2
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-92(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB19_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_64
.LBB19_67:                              # %for.end304
                                        #   in Loop: Header=BB19_62 Depth=1
	jmp	.LBB19_68
.LBB19_68:                              # %for.inc305
                                        #   in Loop: Header=BB19_62 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB19_62
.LBB19_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB19_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB19_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB19_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB19_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_70
.LBB19_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB19_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB19_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB19_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB19_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB19_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB19_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB19_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB19_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB19_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB19_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -104(%rbp)
	je	.LBB19_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB19_85:                              # %if.end1174
	cmpl	$1461758564, -172(%rbp) # imm = 0x5720AA64
	jne	.LBB19_87
.LBB19_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_86
.Lfunc_end19:
	.size	intrapred_luma.10, .Lfunc_end19-intrapred_luma.10
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.11       # -- Begin function dct_luma_16x16.11
	.p2align	4, 0x90
	.type	dct_luma_16x16.11,@function
dct_luma_16x16.11:                      # @dct_luma_16x16.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$481709905, -132(%rbp)  # imm = 0x1CB64F51
	movl	%edi, -104(%rbp)
	movl	$0, -120(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -152(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -240(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB20_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB20_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB20_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB20_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB20_3 Depth=1
	movl	$0, -16(%rbp)
.LBB20_5:                               # %for.cond16
                                        #   Parent Loop BB20_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB20_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB20_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB20_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB20_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB20_9
.LBB20_8:                               # %if.else
                                        #   in Loop: Header=BB20_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB20_9:                               # %if.end
                                        #   in Loop: Header=BB20_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB20_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_5
.LBB20_11:                              # %for.end
                                        #   in Loop: Header=BB20_3 Depth=1
	jmp	.LBB20_12
.LBB20_12:                              # %for.inc61
                                        #   in Loop: Header=BB20_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_3
.LBB20_13:                              # %for.end63
	movl	$0, -20(%rbp)
.LBB20_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_18 Depth 2
                                        #       Child Loop BB20_20 Depth 3
                                        #         Child Loop BB20_22 Depth 4
                                        #       Child Loop BB20_28 Depth 3
                                        #         Child Loop BB20_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -20(%rbp)
	jge	.LBB20_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB20_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB20_16:                              # %land.end69
                                        #   in Loop: Header=BB20_14 Depth=1
	testb	$1, %al
	jne	.LBB20_17
	jmp	.LBB20_39
.LBB20_17:                              # %for.body71
                                        #   in Loop: Header=BB20_14 Depth=1
	movl	$0, -24(%rbp)
.LBB20_18:                              # %for.cond72
                                        #   Parent Loop BB20_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_20 Depth 3
                                        #         Child Loop BB20_22 Depth 4
                                        #       Child Loop BB20_28 Depth 3
                                        #         Child Loop BB20_30 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB20_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB20_18 Depth=2
	movl	$0, -12(%rbp)
.LBB20_20:                              # %for.cond76
                                        #   Parent Loop BB20_14 Depth=1
                                        #     Parent Loop BB20_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB20_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB20_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB20_20 Depth=3
	movl	$0, -16(%rbp)
.LBB20_22:                              # %for.cond80
                                        #   Parent Loop BB20_14 Depth=1
                                        #     Parent Loop BB20_18 Depth=2
                                        #       Parent Loop BB20_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB20_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB20_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-60(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB20_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_22
.LBB20_25:                              # %for.end125
                                        #   in Loop: Header=BB20_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB20_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_20
.LBB20_27:                              # %for.end169
                                        #   in Loop: Header=BB20_18 Depth=2
	movl	$0, -16(%rbp)
.LBB20_28:                              # %for.cond170
                                        #   Parent Loop BB20_14 Depth=1
                                        #     Parent Loop BB20_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB20_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB20_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB20_28 Depth=3
	movl	$0, -12(%rbp)
.LBB20_30:                              # %for.cond174
                                        #   Parent Loop BB20_14 Depth=1
                                        #     Parent Loop BB20_18 Depth=2
                                        #       Parent Loop BB20_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB20_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB20_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB20_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_30
.LBB20_33:                              # %for.end219
                                        #   in Loop: Header=BB20_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB20_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_28
.LBB20_35:                              # %for.end264
                                        #   in Loop: Header=BB20_18 Depth=2
	jmp	.LBB20_36
.LBB20_36:                              # %for.inc265
                                        #   in Loop: Header=BB20_18 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB20_18
.LBB20_37:                              # %for.end267
                                        #   in Loop: Header=BB20_14 Depth=1
	jmp	.LBB20_38
.LBB20_38:                              # %for.inc268
                                        #   in Loop: Header=BB20_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_14
.LBB20_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB20_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB20_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB20_40 Depth=1
	movl	$0, -16(%rbp)
.LBB20_42:                              # %for.cond275
                                        #   Parent Loop BB20_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB20_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB20_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB20_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_42
.LBB20_45:                              # %for.end291
                                        #   in Loop: Header=BB20_40 Depth=1
	jmp	.LBB20_46
.LBB20_46:                              # %for.inc292
                                        #   in Loop: Header=BB20_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_40
.LBB20_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB20_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB20_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB20_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB20_50:                              # %land.end301
                                        #   in Loop: Header=BB20_48 Depth=1
	testb	$1, %al
	jne	.LBB20_51
	jmp	.LBB20_57
.LBB20_51:                              # %for.body303
                                        #   in Loop: Header=BB20_48 Depth=1
	movl	$0, -16(%rbp)
.LBB20_52:                              # %for.cond304
                                        #   Parent Loop BB20_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB20_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB20_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-60(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB20_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_52
.LBB20_55:                              # %for.end333
                                        #   in Loop: Header=BB20_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB20_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_48
.LBB20_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB20_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB20_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB20_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB20_60:                              # %land.end367
                                        #   in Loop: Header=BB20_58 Depth=1
	testb	$1, %al
	jne	.LBB20_61
	jmp	.LBB20_67
.LBB20_61:                              # %for.body369
                                        #   in Loop: Header=BB20_58 Depth=1
	movl	$0, -12(%rbp)
.LBB20_62:                              # %for.cond370
                                        #   Parent Loop BB20_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB20_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB20_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB20_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_62
.LBB20_65:                              # %for.end399
                                        #   in Loop: Header=BB20_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB20_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_58
.LBB20_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -56(%rbp)
.LBB20_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -56(%rbp)
	jge	.LBB20_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB20_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB20_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB20_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB20_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB20_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB20_73
.LBB20_72:                              # %if.then437
                                        #   in Loop: Header=BB20_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_74
.LBB20_73:                              # %if.else446
                                        #   in Loop: Header=BB20_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB20_74:                              # %if.end455
                                        #   in Loop: Header=BB20_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB20_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB20_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB20_77
.LBB20_76:                              # %if.else463
                                        #   in Loop: Header=BB20_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB20_77:                              # %if.end481
                                        #   in Loop: Header=BB20_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB20_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB20_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB20_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB20_68 Depth=1
	cmpl	$2063, -64(%rbp)        # imm = 0x80F
	jle	.LBB20_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB20_68 Depth=1
	movl	$2063, -64(%rbp)        # imm = 0x80F
.LBB20_81:                              # %if.end492
                                        #   in Loop: Header=BB20_68 Depth=1
	jmp	.LBB20_82
.LBB20_82:                              # %if.end493
                                        #   in Loop: Header=BB20_68 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB20_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB20_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB20_84:                              # %if.end507
                                        #   in Loop: Header=BB20_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB20_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB20_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB20_86:                              # %if.end519
                                        #   in Loop: Header=BB20_68 Depth=1
	jmp	.LBB20_87
.LBB20_87:                              # %for.inc520
                                        #   in Loop: Header=BB20_68 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB20_68
.LBB20_88:                              # %for.end522
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB20_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_93 Depth 2
                                        #     Child Loop BB20_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB20_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB20_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB20_91:                              # %land.end531
                                        #   in Loop: Header=BB20_89 Depth=1
	testb	$1, %al
	jne	.LBB20_92
	jmp	.LBB20_102
.LBB20_92:                              # %for.body533
                                        #   in Loop: Header=BB20_89 Depth=1
	movl	$0, -16(%rbp)
.LBB20_93:                              # %for.cond534
                                        #   Parent Loop BB20_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB20_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB20_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB20_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_93
.LBB20_96:                              # %for.end546
                                        #   in Loop: Header=BB20_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB20_97:                              # %for.cond563
                                        #   Parent Loop BB20_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB20_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB20_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-60(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB20_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_97
.LBB20_100:                             # %for.end588
                                        #   in Loop: Header=BB20_89 Depth=1
	jmp	.LBB20_101
.LBB20_101:                             # %for.inc589
                                        #   in Loop: Header=BB20_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_89
.LBB20_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB20_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_107 Depth 2
                                        #     Child Loop BB20_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB20_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB20_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB20_105:                             # %land.end598
                                        #   in Loop: Header=BB20_103 Depth=1
	testb	$1, %al
	jne	.LBB20_106
	jmp	.LBB20_119
.LBB20_106:                             # %for.body600
                                        #   in Loop: Header=BB20_103 Depth=1
	movl	$0, -12(%rbp)
.LBB20_107:                             # %for.cond601
                                        #   Parent Loop BB20_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB20_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB20_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB20_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_107
.LBB20_110:                             # %for.end613
                                        #   in Loop: Header=BB20_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB20_111:                             # %for.cond630
                                        #   Parent Loop BB20_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB20_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB20_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -68(%rbp)
	jge	.LBB20_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB20_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-68(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-68(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB20_115
.LBB20_114:                             # %if.else680
                                        #   in Loop: Header=BB20_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB20_115:                             # %if.end717
                                        #   in Loop: Header=BB20_111 Depth=2
	jmp	.LBB20_116
.LBB20_116:                             # %for.inc718
                                        #   in Loop: Header=BB20_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_111
.LBB20_117:                             # %for.end720
                                        #   in Loop: Header=BB20_103 Depth=1
	jmp	.LBB20_118
.LBB20_118:                             # %for.inc721
                                        #   in Loop: Header=BB20_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_103
.LBB20_119:                             # %for.end723
	movl	$0, -20(%rbp)
.LBB20_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_122 Depth 2
                                        #       Child Loop BB20_124 Depth 3
                                        #       Child Loop BB20_143 Depth 3
                                        #         Child Loop BB20_147 Depth 4
                                        #         Child Loop BB20_151 Depth 4
                                        #       Child Loop BB20_157 Depth 3
                                        #         Child Loop BB20_161 Depth 4
                                        #         Child Loop BB20_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB20_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB20_120 Depth=1
	movl	$0, -24(%rbp)
.LBB20_122:                             # %for.cond728
                                        #   Parent Loop BB20_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_124 Depth 3
                                        #       Child Loop BB20_143 Depth 3
                                        #         Child Loop BB20_147 Depth 4
                                        #         Child Loop BB20_151 Depth 4
                                        #       Child Loop BB20_157 Depth 3
                                        #         Child Loop BB20_161 Depth 4
                                        #         Child Loop BB20_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB20_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB20_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -112(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -108(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -232(%rbp)
	movl	$1, -56(%rbp)
.LBB20_124:                             # %for.cond751
                                        #   Parent Loop BB20_120 Depth=1
                                        #     Parent Loop BB20_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -56(%rbp)
	jge	.LBB20_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB20_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB20_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB20_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB20_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB20_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB20_129
.LBB20_128:                             # %if.then762
                                        #   in Loop: Header=BB20_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_130
.LBB20_129:                             # %if.else771
                                        #   in Loop: Header=BB20_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB20_130:                             # %if.end780
                                        #   in Loop: Header=BB20_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB20_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB20_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB20_133
.LBB20_132:                             # %if.else793
                                        #   in Loop: Header=BB20_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB20_133:                             # %if.end818
                                        #   in Loop: Header=BB20_124 Depth=3
	cmpl	$0, -64(%rbp)
	je	.LBB20_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB20_124 Depth=3
	movl	$15, -120(%rbp)
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB20_135:                             # %if.end836
                                        #   in Loop: Header=BB20_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB20_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB20_124 Depth=3
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -64(%rbp)
	cmpl	$4, -68(%rbp)
	jge	.LBB20_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB20_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB20_139
.LBB20_138:                             # %if.else871
                                        #   in Loop: Header=BB20_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB20_139:                             # %if.end889
                                        #   in Loop: Header=BB20_124 Depth=3
	jmp	.LBB20_140
.LBB20_140:                             # %if.end890
                                        #   in Loop: Header=BB20_124 Depth=3
	jmp	.LBB20_141
.LBB20_141:                             # %for.inc891
                                        #   in Loop: Header=BB20_124 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB20_124
.LBB20_142:                             # %for.end893
                                        #   in Loop: Header=BB20_122 Depth=2
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB20_143:                             # %for.cond896
                                        #   Parent Loop BB20_120 Depth=1
                                        #     Parent Loop BB20_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB20_147 Depth 4
                                        #         Child Loop BB20_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB20_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB20_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB20_145:                             # %land.end902
                                        #   in Loop: Header=BB20_143 Depth=3
	testb	$1, %al
	jne	.LBB20_146
	jmp	.LBB20_156
.LBB20_146:                             # %for.body904
                                        #   in Loop: Header=BB20_143 Depth=3
	movl	$0, -16(%rbp)
.LBB20_147:                             # %for.cond905
                                        #   Parent Loop BB20_120 Depth=1
                                        #     Parent Loop BB20_122 Depth=2
                                        #       Parent Loop BB20_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB20_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB20_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB20_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_147
.LBB20_150:                             # %for.end921
                                        #   in Loop: Header=BB20_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB20_151:                             # %for.cond940
                                        #   Parent Loop BB20_120 Depth=1
                                        #     Parent Loop BB20_122 Depth=2
                                        #       Parent Loop BB20_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB20_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB20_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-60(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB20_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_151
.LBB20_154:                             # %for.end973
                                        #   in Loop: Header=BB20_143 Depth=3
	jmp	.LBB20_155
.LBB20_155:                             # %for.inc974
                                        #   in Loop: Header=BB20_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_143
.LBB20_156:                             # %for.end976
                                        #   in Loop: Header=BB20_122 Depth=2
	movl	$0, -16(%rbp)
.LBB20_157:                             # %for.cond977
                                        #   Parent Loop BB20_120 Depth=1
                                        #     Parent Loop BB20_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB20_161 Depth 4
                                        #         Child Loop BB20_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB20_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB20_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB20_159:                             # %land.end983
                                        #   in Loop: Header=BB20_157 Depth=3
	testb	$1, %al
	jne	.LBB20_160
	jmp	.LBB20_170
.LBB20_160:                             # %for.body985
                                        #   in Loop: Header=BB20_157 Depth=3
	movl	$0, -12(%rbp)
.LBB20_161:                             # %for.cond986
                                        #   Parent Loop BB20_120 Depth=1
                                        #     Parent Loop BB20_122 Depth=2
                                        #       Parent Loop BB20_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB20_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB20_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB20_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_161
.LBB20_164:                             # %for.end1002
                                        #   in Loop: Header=BB20_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB20_165:                             # %for.cond1021
                                        #   Parent Loop BB20_120 Depth=1
                                        #     Parent Loop BB20_122 Depth=2
                                        #       Parent Loop BB20_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB20_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB20_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB20_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_165
.LBB20_168:                             # %for.end1054
                                        #   in Loop: Header=BB20_157 Depth=3
	jmp	.LBB20_169
.LBB20_169:                             # %for.inc1055
                                        #   in Loop: Header=BB20_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_157
.LBB20_170:                             # %for.end1057
                                        #   in Loop: Header=BB20_122 Depth=2
	jmp	.LBB20_171
.LBB20_171:                             # %for.inc1058
                                        #   in Loop: Header=BB20_122 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB20_122
.LBB20_172:                             # %for.end1060
                                        #   in Loop: Header=BB20_120 Depth=1
	jmp	.LBB20_173
.LBB20_173:                             # %for.inc1061
                                        #   in Loop: Header=BB20_120 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_120
.LBB20_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB20_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB20_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB20_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB20_176 Depth=1
	movl	$0, -16(%rbp)
.LBB20_178:                             # %for.cond1071
                                        #   Parent Loop BB20_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB20_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB20_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB20_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_178
.LBB20_181:                             # %for.end1093
                                        #   in Loop: Header=BB20_176 Depth=1
	jmp	.LBB20_182
.LBB20_182:                             # %for.inc1094
                                        #   in Loop: Header=BB20_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_176
.LBB20_183:                             # %for.end1096
	jmp	.LBB20_196
.LBB20_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB20_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB20_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB20_185 Depth=1
	movl	$0, -16(%rbp)
.LBB20_187:                             # %for.cond1102
                                        #   Parent Loop BB20_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB20_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB20_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB20_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB20_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB20_191
.LBB20_190:                             # %if.else1125
                                        #   in Loop: Header=BB20_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB20_191:                             # %if.end1145
                                        #   in Loop: Header=BB20_187 Depth=2
	jmp	.LBB20_192
.LBB20_192:                             # %for.inc1146
                                        #   in Loop: Header=BB20_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_187
.LBB20_193:                             # %for.end1148
                                        #   in Loop: Header=BB20_185 Depth=1
	jmp	.LBB20_194
.LBB20_194:                             # %for.inc1149
                                        #   in Loop: Header=BB20_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_185
.LBB20_195:                             # %for.end1151
	jmp	.LBB20_196
.LBB20_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB20_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB20_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB20_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB20_198 Depth=1
	movl	$0, -16(%rbp)
.LBB20_200:                             # %for.cond1160
                                        #   Parent Loop BB20_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB20_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB20_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB20_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB20_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB20_213
.LBB20_203:                             # %if.else1186
                                        #   in Loop: Header=BB20_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB20_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB20_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB20_206
.LBB20_205:                             # %cond.false
                                        #   in Loop: Header=BB20_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB20_206:                             # %cond.end
                                        #   in Loop: Header=BB20_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB20_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB20_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB20_212
.LBB20_208:                             # %cond.false1229
                                        #   in Loop: Header=BB20_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB20_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB20_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB20_211
.LBB20_210:                             # %cond.false1250
                                        #   in Loop: Header=BB20_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB20_211:                             # %cond.end1268
                                        #   in Loop: Header=BB20_200 Depth=2
.LBB20_212:                             # %cond.end1270
                                        #   in Loop: Header=BB20_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB20_213:                             # %if.end1282
                                        #   in Loop: Header=BB20_200 Depth=2
	jmp	.LBB20_214
.LBB20_214:                             # %for.inc1283
                                        #   in Loop: Header=BB20_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_200
.LBB20_215:                             # %for.end1285
                                        #   in Loop: Header=BB20_198 Depth=1
	jmp	.LBB20_216
.LBB20_216:                             # %for.inc1286
                                        #   in Loop: Header=BB20_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_198
.LBB20_217:                             # %for.end1288
	jmp	.LBB20_218
.LBB20_218:                             # %if.end1289
	movl	-120(%rbp), %ebx
	cmpl	$481709905, -132(%rbp)  # imm = 0x1CB64F51
	jne	.LBB20_220
.LBB20_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_219
.Lfunc_end20:
	.size	dct_luma_16x16.11, .Lfunc_end20-dct_luma_16x16.11
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.12         # -- Begin function copyblock_sp.12
	.p2align	4, 0x90
	.type	copyblock_sp.12,@function
copyblock_sp.12:                        # @copyblock_sp.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$129938859, -92(%rbp)   # imm = 0x7BEB5AB
	movl	%edi, -84(%rbp)
	movl	%esi, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -80(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -68(%rbp)
	movl	-80(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movl	$0, -4(%rbp)
.LBB21_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB21_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_3:                               # %for.cond4
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB21_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB21_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB21_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_3
.LBB21_6:                               # %for.end
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_7
.LBB21_7:                               # %for.inc17
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_1
.LBB21_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB21_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB21_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB21_9 Depth=1
	movl	$0, -8(%rbp)
.LBB21_11:                              # %for.cond24
                                        #   Parent Loop BB21_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB21_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB21_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB21_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_11
.LBB21_14:                              # %for.end53
                                        #   in Loop: Header=BB21_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB21_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_9
.LBB21_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB21_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB21_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB21_17 Depth=1
	movl	$0, -4(%rbp)
.LBB21_19:                              # %for.cond86
                                        #   Parent Loop BB21_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB21_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB21_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB21_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_19
.LBB21_22:                              # %for.end115
                                        #   in Loop: Header=BB21_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB21_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_17
.LBB21_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB21_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB21_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB21_25 Depth=1
	movl	$0, -8(%rbp)
.LBB21_27:                              # %for.cond149
                                        #   Parent Loop BB21_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB21_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB21_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-88(%rbp), %eax
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-80(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB21_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_27
.LBB21_30:                              # %for.end184
                                        #   in Loop: Header=BB21_25 Depth=1
	jmp	.LBB21_31
.LBB21_31:                              # %for.inc185
                                        #   in Loop: Header=BB21_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_25
.LBB21_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB21_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_35 Depth 2
                                        #     Child Loop BB21_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB21_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB21_33 Depth=1
	movl	$0, -8(%rbp)
.LBB21_35:                              # %for.cond192
                                        #   Parent Loop BB21_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB21_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB21_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB21_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_35
.LBB21_38:                              # %for.end205
                                        #   in Loop: Header=BB21_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB21_39:                              # %for.cond224
                                        #   Parent Loop BB21_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB21_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB21_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB21_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_39
.LBB21_42:                              # %for.end251
                                        #   in Loop: Header=BB21_33 Depth=1
	jmp	.LBB21_43
.LBB21_43:                              # %for.inc252
                                        #   in Loop: Header=BB21_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_33
.LBB21_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB21_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_47 Depth 2
                                        #     Child Loop BB21_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB21_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB21_45 Depth=1
	movl	$0, -4(%rbp)
.LBB21_47:                              # %for.cond259
                                        #   Parent Loop BB21_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB21_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB21_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB21_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_47
.LBB21_50:                              # %for.end272
                                        #   in Loop: Header=BB21_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB21_51:                              # %for.cond291
                                        #   Parent Loop BB21_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB21_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB21_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB21_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB21_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB21_55
.LBB21_54:                              # %cond.false
                                        #   in Loop: Header=BB21_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB21_55:                              # %cond.end
                                        #   in Loop: Header=BB21_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB21_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB21_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_61
.LBB21_57:                              # %cond.false316
                                        #   in Loop: Header=BB21_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB21_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB21_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB21_60
.LBB21_59:                              # %cond.false327
                                        #   in Loop: Header=BB21_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB21_60:                              # %cond.end335
                                        #   in Loop: Header=BB21_51 Depth=2
.LBB21_61:                              # %cond.end337
                                        #   in Loop: Header=BB21_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB21_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB21_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB21_64
.LBB21_63:                              # %cond.false355
                                        #   in Loop: Header=BB21_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB21_64:                              # %cond.end363
                                        #   in Loop: Header=BB21_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB21_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB21_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_70
.LBB21_66:                              # %cond.false369
                                        #   in Loop: Header=BB21_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB21_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB21_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB21_69
.LBB21_68:                              # %cond.false380
                                        #   in Loop: Header=BB21_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB21_69:                              # %cond.end388
                                        #   in Loop: Header=BB21_51 Depth=2
.LBB21_70:                              # %cond.end390
                                        #   in Loop: Header=BB21_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB21_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_51
.LBB21_72:                              # %for.end399
                                        #   in Loop: Header=BB21_45 Depth=1
	jmp	.LBB21_73
.LBB21_73:                              # %for.inc400
                                        #   in Loop: Header=BB21_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_45
.LBB21_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB21_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB21_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB21_75 Depth=1
	movl	$0, -8(%rbp)
.LBB21_77:                              # %for.cond407
                                        #   Parent Loop BB21_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB21_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB21_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-72(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-84(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB21_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_77
.LBB21_80:                              # %for.end427
                                        #   in Loop: Header=BB21_75 Depth=1
	jmp	.LBB21_81
.LBB21_81:                              # %for.inc428
                                        #   in Loop: Header=BB21_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_75
.LBB21_82:                              # %for.end430
	cmpl	$129938859, -92(%rbp)   # imm = 0x7BEB5AB
	jne	.LBB21_84
.LBB21_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_83
.Lfunc_end21:
	.size	copyblock_sp.12, .Lfunc_end21-copyblock_sp.12
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.13           # -- Begin function dct_chroma.13
	.p2align	4, 0x90
	.type	dct_chroma.13,@function
dct_chroma.13:                          # @dct_chroma.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$379104756, -380(%rbp)  # imm = 0x1698ADF4
	movl	%edi, -20(%rbp)
	movl	%esi, -132(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB22_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB22_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB22_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -124(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -200(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -140(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -212(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB22_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB22_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB22_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB22_11
.LBB22_7:                               # %cond.false
	cmpl	$51, -128(%rbp)
	jle	.LBB22_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB22_10
.LBB22_9:                               # %cond.false25
	movl	-128(%rbp), %eax
.LBB22_10:                              # %cond.end
.LBB22_11:                              # %cond.end26
	movl	%eax, -128(%rbp)
	cmpl	$0, -128(%rbp)
	jge	.LBB22_13
# %bb.12:                               # %cond.true29
	movl	-128(%rbp), %eax
	jmp	.LBB22_14
.LBB22_13:                              # %cond.false30
	movl	-128(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB22_14:                              # %cond.end34
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB22_16
# %bb.15:                               # %if.then
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -104(%rbp)
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -136(%rbp)
	movl	-104(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -212(%rbp)
.LBB22_16:                              # %if.end
	movl	$0, -28(%rbp)
.LBB22_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_19 Depth 2
                                        #       Child Loop BB22_21 Depth 3
                                        #         Child Loop BB22_25 Depth 4
                                        #       Child Loop BB22_31 Depth 3
                                        #         Child Loop BB22_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB22_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB22_17 Depth=1
	movl	$0, -24(%rbp)
.LBB22_19:                              # %for.cond56
                                        #   Parent Loop BB22_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_21 Depth 3
                                        #         Child Loop BB22_25 Depth 4
                                        #       Child Loop BB22_31 Depth 3
                                        #         Child Loop BB22_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB22_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB22_19 Depth=2
	movl	$0, -12(%rbp)
.LBB22_21:                              # %for.cond60
                                        #   Parent Loop BB22_17 Depth=1
                                        #     Parent Loop BB22_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB22_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB22_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB22_21 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB22_23:                              # %land.end64
                                        #   in Loop: Header=BB22_21 Depth=3
	testb	$1, %al
	jne	.LBB22_24
	jmp	.LBB22_30
.LBB22_24:                              # %for.body66
                                        #   in Loop: Header=BB22_21 Depth=3
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB22_25:                              # %for.cond68
                                        #   Parent Loop BB22_17 Depth=1
                                        #     Parent Loop BB22_19 Depth=2
                                        #       Parent Loop BB22_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB22_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB22_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB22_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_25
.LBB22_28:                              # %for.end
                                        #   in Loop: Header=BB22_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB22_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_21
.LBB22_30:                              # %for.end141
                                        #   in Loop: Header=BB22_19 Depth=2
	movl	$0, -16(%rbp)
.LBB22_31:                              # %for.cond142
                                        #   Parent Loop BB22_17 Depth=1
                                        #     Parent Loop BB22_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB22_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB22_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB22_31 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB22_33:                              # %land.end148
                                        #   in Loop: Header=BB22_31 Depth=3
	testb	$1, %al
	jne	.LBB22_34
	jmp	.LBB22_40
.LBB22_34:                              # %for.body150
                                        #   in Loop: Header=BB22_31 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB22_35:                              # %for.cond152
                                        #   Parent Loop BB22_17 Depth=1
                                        #     Parent Loop BB22_19 Depth=2
                                        #       Parent Loop BB22_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB22_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB22_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB22_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_35
.LBB22_38:                              # %for.end189
                                        #   in Loop: Header=BB22_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB22_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_31
.LBB22_40:                              # %for.end230
                                        #   in Loop: Header=BB22_19 Depth=2
	jmp	.LBB22_41
.LBB22_41:                              # %for.inc231
                                        #   in Loop: Header=BB22_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB22_19
.LBB22_42:                              # %for.end233
                                        #   in Loop: Header=BB22_17 Depth=1
	jmp	.LBB22_43
.LBB22_43:                              # %for.inc234
                                        #   in Loop: Header=BB22_17 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB22_17
.LBB22_44:                              # %for.end236
	cmpl	$1, -140(%rbp)
	jne	.LBB22_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB22_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB22_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB22_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB22_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB22_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB22_50
.LBB22_49:                              # %if.else
                                        #   in Loop: Header=BB22_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB22_50:                              # %if.end349
                                        #   in Loop: Header=BB22_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB22_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB22_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB22_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB22_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB22_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB22_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB22_54:                              # %if.end359
                                        #   in Loop: Header=BB22_46 Depth=1
	jmp	.LBB22_55
.LBB22_55:                              # %if.end360
                                        #   in Loop: Header=BB22_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB22_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB22_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB22_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB22_46 Depth=1
	movl	$1, %eax
	jmp	.LBB22_59
.LBB22_58:                              # %cond.false370
                                        #   in Loop: Header=BB22_46 Depth=1
	movl	-132(%rbp), %eax
.LBB22_59:                              # %cond.end371
                                        #   in Loop: Header=BB22_46 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -144(%rbp)
.LBB22_60:                              # %if.end384
                                        #   in Loop: Header=BB22_46 Depth=1
	movl	-144(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB22_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB22_46
.LBB22_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB22_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB22_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB22_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB22_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB22_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB22_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB22_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB22_68
.LBB22_67:                              # %if.else447
                                        #   in Loop: Header=BB22_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB22_68:                              # %if.end461
                                        #   in Loop: Header=BB22_63 Depth=1
	jmp	.LBB22_73
.LBB22_69:                              # %if.else462
                                        #   in Loop: Header=BB22_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB22_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB22_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB22_72
.LBB22_71:                              # %if.else479
                                        #   in Loop: Header=BB22_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB22_72:                              # %if.end493
                                        #   in Loop: Header=BB22_63 Depth=1
	jmp	.LBB22_73
.LBB22_73:                              # %if.end494
                                        #   in Loop: Header=BB22_63 Depth=1
	jmp	.LBB22_74
.LBB22_74:                              # %for.inc495
                                        #   in Loop: Header=BB22_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_63
.LBB22_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB22_213
.LBB22_76:                              # %if.else514
	cmpl	$2, -140(%rbp)
	jne	.LBB22_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB22_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB22_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB22_78 Depth=1
	movl	$0, -16(%rbp)
.LBB22_80:                              # %for.cond523
                                        #   Parent Loop BB22_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB22_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB22_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB22_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_80
.LBB22_83:                              # %for.end541
                                        #   in Loop: Header=BB22_78 Depth=1
	jmp	.LBB22_84
.LBB22_84:                              # %for.inc542
                                        #   in Loop: Header=BB22_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_78
.LBB22_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB22_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB22_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB22_86 Depth=1
	movl	$0, -12(%rbp)
.LBB22_88:                              # %for.cond605
                                        #   Parent Loop BB22_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB22_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB22_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB22_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_88
.LBB22_91:                              # %for.end634
                                        #   in Loop: Header=BB22_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB22_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_86
.LBB22_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB22_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB22_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB22_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB22_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB22_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB22_98
.LBB22_97:                              # %if.else700
                                        #   in Loop: Header=BB22_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB22_98:                              # %if.end723
                                        #   in Loop: Header=BB22_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB22_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB22_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB22_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB22_94 Depth=1
	movl	$1, %eax
	jmp	.LBB22_102
.LBB22_101:                             # %cond.false735
                                        #   in Loop: Header=BB22_94 Depth=1
	movl	-132(%rbp), %eax
.LBB22_102:                             # %cond.end736
                                        #   in Loop: Header=BB22_94 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB22_103:                             # %if.end748
                                        #   in Loop: Header=BB22_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB22_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB22_94
.LBB22_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB22_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_108 Depth 2
                                        #     Child Loop BB22_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB22_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB22_106 Depth=1
	movl	$0, -12(%rbp)
.LBB22_108:                             # %for.cond823
                                        #   Parent Loop BB22_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB22_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB22_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB22_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_108
.LBB22_111:                             # %for.end835
                                        #   in Loop: Header=BB22_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB22_112:                             # %for.cond852
                                        #   Parent Loop BB22_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB22_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB22_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -104(%rbp)
	jge	.LBB22_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB22_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB22_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB22_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB22_117
.LBB22_116:                             # %if.else915
                                        #   in Loop: Header=BB22_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB22_117:                             # %if.end968
                                        #   in Loop: Header=BB22_112 Depth=2
	jmp	.LBB22_122
.LBB22_118:                             # %if.else969
                                        #   in Loop: Header=BB22_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB22_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB22_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB22_121
.LBB22_120:                             # %if.else1019
                                        #   in Loop: Header=BB22_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB22_121:                             # %if.end1066
                                        #   in Loop: Header=BB22_112 Depth=2
	jmp	.LBB22_122
.LBB22_122:                             # %if.end1067
                                        #   in Loop: Header=BB22_112 Depth=2
	jmp	.LBB22_123
.LBB22_123:                             # %for.inc1068
                                        #   in Loop: Header=BB22_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_112
.LBB22_124:                             # %for.end1070
                                        #   in Loop: Header=BB22_106 Depth=1
	jmp	.LBB22_125
.LBB22_125:                             # %for.inc1071
                                        #   in Loop: Header=BB22_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_106
.LBB22_126:                             # %for.end1073
	jmp	.LBB22_212
.LBB22_127:                             # %if.else1074
	cmpl	$3, -140(%rbp)
	jne	.LBB22_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB22_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB22_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB22_129 Depth=1
	movl	$0, -16(%rbp)
.LBB22_131:                             # %for.cond1083
                                        #   Parent Loop BB22_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB22_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB22_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB22_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_131
.LBB22_134:                             # %for.end1101
                                        #   in Loop: Header=BB22_129 Depth=1
	jmp	.LBB22_135
.LBB22_135:                             # %for.inc1102
                                        #   in Loop: Header=BB22_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_129
.LBB22_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB22_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB22_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB22_137 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB22_139:                             # %land.end1111
                                        #   in Loop: Header=BB22_137 Depth=1
	testb	$1, %al
	jne	.LBB22_140
	jmp	.LBB22_146
.LBB22_140:                             # %for.body1113
                                        #   in Loop: Header=BB22_137 Depth=1
	movl	$0, -16(%rbp)
.LBB22_141:                             # %for.cond1114
                                        #   Parent Loop BB22_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB22_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB22_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB22_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_141
.LBB22_144:                             # %for.end1143
                                        #   in Loop: Header=BB22_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB22_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_137
.LBB22_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB22_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB22_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB22_147 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB22_149:                             # %land.end1177
                                        #   in Loop: Header=BB22_147 Depth=1
	testb	$1, %al
	jne	.LBB22_150
	jmp	.LBB22_156
.LBB22_150:                             # %for.body1179
                                        #   in Loop: Header=BB22_147 Depth=1
	movl	$0, -12(%rbp)
.LBB22_151:                             # %for.cond1180
                                        #   Parent Loop BB22_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB22_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB22_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB22_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_151
.LBB22_154:                             # %for.end1209
                                        #   in Loop: Header=BB22_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB22_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_147
.LBB22_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB22_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB22_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB22_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB22_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB22_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB22_164
.LBB22_160:                             # %if.else1261
                                        #   in Loop: Header=BB22_157 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB22_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB22_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB22_163
.LBB22_162:                             # %if.else1287
                                        #   in Loop: Header=BB22_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB22_163:                             # %if.end1310
                                        #   in Loop: Header=BB22_157 Depth=1
	jmp	.LBB22_164
.LBB22_164:                             # %if.end1311
                                        #   in Loop: Header=BB22_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB22_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB22_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB22_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB22_157 Depth=1
	movl	$1, %eax
	jmp	.LBB22_168
.LBB22_167:                             # %cond.false1322
                                        #   in Loop: Header=BB22_157 Depth=1
	movl	-132(%rbp), %eax
.LBB22_168:                             # %cond.end1323
                                        #   in Loop: Header=BB22_157 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB22_169:                             # %if.end1335
                                        #   in Loop: Header=BB22_157 Depth=1
	cmpl	$0, -108(%rbp)
	jne	.LBB22_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB22_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB22_171:                             # %if.end1347
                                        #   in Loop: Header=BB22_157 Depth=1
	jmp	.LBB22_172
.LBB22_172:                             # %for.inc1348
                                        #   in Loop: Header=BB22_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB22_157
.LBB22_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB22_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_178 Depth 2
                                        #     Child Loop BB22_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB22_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB22_174 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB22_176:                             # %land.end1359
                                        #   in Loop: Header=BB22_174 Depth=1
	testb	$1, %al
	jne	.LBB22_177
	jmp	.LBB22_187
.LBB22_177:                             # %for.body1361
                                        #   in Loop: Header=BB22_174 Depth=1
	movl	$0, -16(%rbp)
.LBB22_178:                             # %for.cond1362
                                        #   Parent Loop BB22_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB22_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB22_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB22_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_178
.LBB22_181:                             # %for.end1374
                                        #   in Loop: Header=BB22_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB22_182:                             # %for.cond1391
                                        #   Parent Loop BB22_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB22_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB22_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB22_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_182
.LBB22_185:                             # %for.end1416
                                        #   in Loop: Header=BB22_174 Depth=1
	jmp	.LBB22_186
.LBB22_186:                             # %for.inc1417
                                        #   in Loop: Header=BB22_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_174
.LBB22_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB22_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_192 Depth 2
                                        #     Child Loop BB22_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB22_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB22_188 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB22_190:                             # %land.end1426
                                        #   in Loop: Header=BB22_188 Depth=1
	testb	$1, %al
	jne	.LBB22_191
	jmp	.LBB22_210
.LBB22_191:                             # %for.body1428
                                        #   in Loop: Header=BB22_188 Depth=1
	movl	$0, -12(%rbp)
.LBB22_192:                             # %for.cond1429
                                        #   Parent Loop BB22_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB22_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB22_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB22_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_192
.LBB22_195:                             # %for.end1441
                                        #   in Loop: Header=BB22_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB22_196:                             # %for.cond1458
                                        #   Parent Loop BB22_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB22_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB22_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB22_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB22_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB22_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB22_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB22_201
.LBB22_200:                             # %if.else1521
                                        #   in Loop: Header=BB22_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB22_201:                             # %if.end1574
                                        #   in Loop: Header=BB22_196 Depth=2
	jmp	.LBB22_206
.LBB22_202:                             # %if.else1575
                                        #   in Loop: Header=BB22_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB22_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB22_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB22_205
.LBB22_204:                             # %if.else1625
                                        #   in Loop: Header=BB22_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB22_205:                             # %if.end1672
                                        #   in Loop: Header=BB22_196 Depth=2
	jmp	.LBB22_206
.LBB22_206:                             # %if.end1673
                                        #   in Loop: Header=BB22_196 Depth=2
	jmp	.LBB22_207
.LBB22_207:                             # %for.inc1674
                                        #   in Loop: Header=BB22_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_196
.LBB22_208:                             # %for.end1676
                                        #   in Loop: Header=BB22_188 Depth=1
	jmp	.LBB22_209
.LBB22_209:                             # %for.inc1677
                                        #   in Loop: Header=BB22_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_188
.LBB22_210:                             # %for.end1679
	jmp	.LBB22_211
.LBB22_211:                             # %if.end1680
	jmp	.LBB22_212
.LBB22_212:                             # %if.end1681
	jmp	.LBB22_213
.LBB22_213:                             # %if.end1682
	movl	$0, -196(%rbp)
	movl	$0, -208(%rbp)
	movl	$0, -112(%rbp)
.LBB22_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_216 Depth 2
                                        #       Child Loop BB22_218 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB22_214 Depth=1
	movl	$0, -116(%rbp)
.LBB22_216:                             # %for.cond1689
                                        #   Parent Loop BB22_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_218 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB22_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB22_216 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$1, -36(%rbp)
.LBB22_218:                             # %for.cond1722
                                        #   Parent Loop BB22_214 Depth=1
                                        #     Parent Loop BB22_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB22_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB22_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB22_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB22_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB22_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB22_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB22_223
.LBB22_222:                             # %if.then1731
                                        #   in Loop: Header=BB22_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_224
.LBB22_223:                             # %if.else1740
                                        #   in Loop: Header=BB22_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB22_224:                             # %if.end1749
                                        #   in Loop: Header=BB22_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB22_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB22_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB22_230
.LBB22_226:                             # %if.else1761
                                        #   in Loop: Header=BB22_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB22_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB22_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB22_229
.LBB22_228:                             # %if.else1792
                                        #   in Loop: Header=BB22_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB22_229:                             # %if.end1820
                                        #   in Loop: Header=BB22_218 Depth=3
	jmp	.LBB22_230
.LBB22_230:                             # %if.end1821
                                        #   in Loop: Header=BB22_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB22_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB22_218 Depth=3
	movl	-112(%rbp), %eax
	addl	-200(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB22_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB22_218 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB22_234
.LBB22_233:                             # %if.then1839
                                        #   in Loop: Header=BB22_218 Depth=3
	movl	-196(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -196(%rbp)
	jmp	.LBB22_235
.LBB22_234:                             # %if.else1841
                                        #   in Loop: Header=BB22_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -196(%rbp)
.LBB22_235:                             # %if.end1848
                                        #   in Loop: Header=BB22_218 Depth=3
	movl	$2, -208(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB22_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB22_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB22_247
.LBB22_237:                             # %if.else1872
                                        #   in Loop: Header=BB22_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB22_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB22_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB22_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB22_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB22_241
.LBB22_240:                             # %if.else1893
                                        #   in Loop: Header=BB22_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB22_241:                             # %if.end1908
                                        #   in Loop: Header=BB22_218 Depth=3
	jmp	.LBB22_246
.LBB22_242:                             # %if.else1909
                                        #   in Loop: Header=BB22_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB22_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB22_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB22_245
.LBB22_244:                             # %if.else1924
                                        #   in Loop: Header=BB22_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB22_245:                             # %if.end1936
                                        #   in Loop: Header=BB22_218 Depth=3
	jmp	.LBB22_246
.LBB22_246:                             # %if.end1937
                                        #   in Loop: Header=BB22_218 Depth=3
	jmp	.LBB22_247
.LBB22_247:                             # %if.end1938
                                        #   in Loop: Header=BB22_218 Depth=3
	jmp	.LBB22_248
.LBB22_248:                             # %if.end1939
                                        #   in Loop: Header=BB22_218 Depth=3
	cmpl	$0, -108(%rbp)
	jne	.LBB22_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB22_218 Depth=3
	movl	-144(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB22_250:                             # %if.end1949
                                        #   in Loop: Header=BB22_218 Depth=3
	jmp	.LBB22_251
.LBB22_251:                             # %for.inc1950
                                        #   in Loop: Header=BB22_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB22_218
.LBB22_252:                             # %for.end1952
                                        #   in Loop: Header=BB22_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB22_216 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB22_216
.LBB22_254:                             # %for.end1957
                                        #   in Loop: Header=BB22_214 Depth=1
	jmp	.LBB22_255
.LBB22_255:                             # %for.inc1958
                                        #   in Loop: Header=BB22_214 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB22_214
.LBB22_256:                             # %for.end1960
	cmpl	$4, -196(%rbp)
	jge	.LBB22_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -108(%rbp)
	jne	.LBB22_278
# %bb.258:                              # %if.then1965
	movl	$0, -208(%rbp)
	movl	$0, -112(%rbp)
.LBB22_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_261 Depth 2
                                        #       Child Loop BB22_265 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB22_259 Depth=1
	movl	$0, -116(%rbp)
.LBB22_261:                             # %for.cond1972
                                        #   Parent Loop BB22_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_265 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB22_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB22_261 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB22_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB22_261 Depth=2
	movslq	-140(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-140(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB22_264:                             # %if.end2016
                                        #   in Loop: Header=BB22_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB22_265:                             # %for.cond2018
                                        #   Parent Loop BB22_259 Depth=1
                                        #     Parent Loop BB22_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB22_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB22_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB22_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB22_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB22_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB22_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB22_270
.LBB22_269:                             # %if.then2030
                                        #   in Loop: Header=BB22_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_271
.LBB22_270:                             # %if.else2039
                                        #   in Loop: Header=BB22_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB22_271:                             # %if.end2048
                                        #   in Loop: Header=BB22_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB22_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB22_265
.LBB22_273:                             # %for.end2060
                                        #   in Loop: Header=BB22_261 Depth=2
	jmp	.LBB22_274
.LBB22_274:                             # %for.inc2061
                                        #   in Loop: Header=BB22_261 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB22_261
.LBB22_275:                             # %for.end2063
                                        #   in Loop: Header=BB22_259 Depth=1
	jmp	.LBB22_276
.LBB22_276:                             # %for.inc2064
                                        #   in Loop: Header=BB22_259 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB22_259
.LBB22_277:                             # %for.end2066
	jmp	.LBB22_278
.LBB22_278:                             # %if.end2067
	cmpl	$2, -208(%rbp)
	jne	.LBB22_280
# %bb.279:                              # %if.then2070
	movl	$2, -132(%rbp)
.LBB22_280:                             # %if.end2071
	movl	$0, -28(%rbp)
.LBB22_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_285 Depth 2
                                        #       Child Loop BB22_287 Depth 3
                                        #         Child Loop BB22_289 Depth 4
                                        #         Child Loop BB22_293 Depth 4
                                        #       Child Loop BB22_299 Depth 3
                                        #         Child Loop BB22_303 Depth 4
                                        #         Child Loop BB22_307 Depth 4
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB22_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB22_281 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB22_283:                             # %land.end2079
                                        #   in Loop: Header=BB22_281 Depth=1
	testb	$1, %al
	jne	.LBB22_284
	jmp	.LBB22_340
.LBB22_284:                             # %for.body2081
                                        #   in Loop: Header=BB22_281 Depth=1
	movl	$0, -24(%rbp)
.LBB22_285:                             # %for.cond2082
                                        #   Parent Loop BB22_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_287 Depth 3
                                        #         Child Loop BB22_289 Depth 4
                                        #         Child Loop BB22_293 Depth 4
                                        #       Child Loop BB22_299 Depth 3
                                        #         Child Loop BB22_303 Depth 4
                                        #         Child Loop BB22_307 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB22_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB22_285 Depth=2
	movl	$0, -12(%rbp)
.LBB22_287:                             # %for.cond2087
                                        #   Parent Loop BB22_281 Depth=1
                                        #     Parent Loop BB22_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB22_289 Depth 4
                                        #         Child Loop BB22_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB22_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB22_287 Depth=3
	movl	$0, -16(%rbp)
.LBB22_289:                             # %for.cond2091
                                        #   Parent Loop BB22_281 Depth=1
                                        #     Parent Loop BB22_285 Depth=2
                                        #       Parent Loop BB22_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB22_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB22_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB22_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_289
.LBB22_292:                             # %for.end2106
                                        #   in Loop: Header=BB22_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB22_293:                             # %for.cond2125
                                        #   Parent Loop BB22_281 Depth=1
                                        #     Parent Loop BB22_285 Depth=2
                                        #       Parent Loop BB22_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB22_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB22_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB22_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_293
.LBB22_296:                             # %for.end2156
                                        #   in Loop: Header=BB22_287 Depth=3
	jmp	.LBB22_297
.LBB22_297:                             # %for.inc2157
                                        #   in Loop: Header=BB22_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_287
.LBB22_298:                             # %for.end2159
                                        #   in Loop: Header=BB22_285 Depth=2
	movl	$0, -16(%rbp)
.LBB22_299:                             # %for.cond2160
                                        #   Parent Loop BB22_281 Depth=1
                                        #     Parent Loop BB22_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB22_303 Depth 4
                                        #         Child Loop BB22_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB22_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB22_299 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB22_301:                             # %land.end2166
                                        #   in Loop: Header=BB22_299 Depth=3
	testb	$1, %al
	jne	.LBB22_302
	jmp	.LBB22_336
.LBB22_302:                             # %for.body2168
                                        #   in Loop: Header=BB22_299 Depth=3
	movl	$0, -12(%rbp)
.LBB22_303:                             # %for.cond2169
                                        #   Parent Loop BB22_281 Depth=1
                                        #     Parent Loop BB22_285 Depth=2
                                        #       Parent Loop BB22_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB22_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB22_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB22_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_303
.LBB22_306:                             # %for.end2184
                                        #   in Loop: Header=BB22_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB22_307:                             # %for.cond2203
                                        #   Parent Loop BB22_281 Depth=1
                                        #     Parent Loop BB22_285 Depth=2
                                        #       Parent Loop BB22_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB22_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB22_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB22_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB22_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB22_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB22_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB22_312
.LBB22_311:                             # %cond.false2231
                                        #   in Loop: Header=BB22_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB22_312:                             # %cond.end2250
                                        #   in Loop: Header=BB22_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB22_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB22_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB22_318
.LBB22_314:                             # %cond.false2257
                                        #   in Loop: Header=BB22_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB22_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB22_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB22_317
.LBB22_316:                             # %cond.false2279
                                        #   in Loop: Header=BB22_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB22_317:                             # %cond.end2298
                                        #   in Loop: Header=BB22_307 Depth=4
.LBB22_318:                             # %cond.end2300
                                        #   in Loop: Header=BB22_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB22_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB22_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB22_321
.LBB22_320:                             # %cond.false2333
                                        #   in Loop: Header=BB22_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB22_321:                             # %cond.end2352
                                        #   in Loop: Header=BB22_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB22_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB22_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB22_327
.LBB22_323:                             # %cond.false2359
                                        #   in Loop: Header=BB22_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB22_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB22_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB22_326
.LBB22_325:                             # %cond.false2381
                                        #   in Loop: Header=BB22_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB22_326:                             # %cond.end2400
                                        #   in Loop: Header=BB22_307 Depth=4
.LBB22_327:                             # %cond.end2402
                                        #   in Loop: Header=BB22_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB22_332
.LBB22_328:                             # %if.else2412
                                        #   in Loop: Header=BB22_307 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB22_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB22_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB22_331
.LBB22_330:                             # %if.else2439
                                        #   in Loop: Header=BB22_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB22_331:                             # %if.end2468
                                        #   in Loop: Header=BB22_307 Depth=4
	jmp	.LBB22_332
.LBB22_332:                             # %if.end2469
                                        #   in Loop: Header=BB22_307 Depth=4
	jmp	.LBB22_333
.LBB22_333:                             # %for.inc2470
                                        #   in Loop: Header=BB22_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_307
.LBB22_334:                             # %for.end2472
                                        #   in Loop: Header=BB22_299 Depth=3
	jmp	.LBB22_335
.LBB22_335:                             # %for.inc2473
                                        #   in Loop: Header=BB22_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_299
.LBB22_336:                             # %for.end2475
                                        #   in Loop: Header=BB22_285 Depth=2
	jmp	.LBB22_337
.LBB22_337:                             # %for.inc2476
                                        #   in Loop: Header=BB22_285 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB22_285
.LBB22_338:                             # %for.end2478
                                        #   in Loop: Header=BB22_281 Depth=1
	jmp	.LBB22_339
.LBB22_339:                             # %for.inc2479
                                        #   in Loop: Header=BB22_281 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB22_281
.LBB22_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB22_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB22_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB22_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB22_342 Depth=1
	movl	$0, -16(%rbp)
.LBB22_344:                             # %for.cond2490
                                        #   Parent Loop BB22_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB22_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB22_344 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB22_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB22_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB22_348
.LBB22_347:                             # %if.else2518
                                        #   in Loop: Header=BB22_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB22_348:                             # %if.end2536
                                        #   in Loop: Header=BB22_344 Depth=2
	jmp	.LBB22_349
.LBB22_349:                             # %for.inc2537
                                        #   in Loop: Header=BB22_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_344
.LBB22_350:                             # %for.end2539
                                        #   in Loop: Header=BB22_342 Depth=1
	jmp	.LBB22_351
.LBB22_351:                             # %for.inc2540
                                        #   in Loop: Header=BB22_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_342
.LBB22_352:                             # %for.end2542
	jmp	.LBB22_353
.LBB22_353:                             # %if.end2543
	movl	-132(%rbp), %ebx
	cmpl	$379104756, -380(%rbp)  # imm = 0x1698ADF4
	jne	.LBB22_355
.LBB22_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_354
.Lfunc_end22:
	.size	dct_chroma.13, .Lfunc_end22-dct_chroma.13
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.14 # -- Begin function intrapred_luma_16x16.14
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.14,@function
intrapred_luma_16x16.14:                # @intrapred_luma_16x16.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$840689802, -92(%rbp)   # imm = 0x321BE88A
	movl	$0, -32(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB23_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB23_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	-64(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_1
.LBB23_4:                               # %for.end
	movl	-64(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB23_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB23_20
.LBB23_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB23_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB23_9
.LBB23_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB23_9
.LBB23_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB23_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB23_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB23_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB23_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB23_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB23_14
.LBB23_13:                              # %cond.false23
                                        #   in Loop: Header=BB23_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB23_14
.LBB23_14:                              # %cond.end24
                                        #   in Loop: Header=BB23_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB23_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_10
.LBB23_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB23_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB23_19
.LBB23_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB23_19
.LBB23_19:                              # %cond.end39
	movl	%eax, -60(%rbp)
.LBB23_20:                              # %if.end
	movl	$0, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB23_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB23_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB23_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB23_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB23_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB23_24:                              # %if.end51
                                        #   in Loop: Header=BB23_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB23_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB23_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB23_26:                              # %if.end68
                                        #   in Loop: Header=BB23_21 Depth=1
	jmp	.LBB23_27
.LBB23_27:                              # %for.inc69
                                        #   in Loop: Header=BB23_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_21
.LBB23_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB23_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB23_31
# %bb.30:                               # %if.then74
	movl	-40(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB23_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB23_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB23_34
# %bb.33:                               # %if.then81
	movl	-44(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB23_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB23_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB23_37
# %bb.36:                               # %if.then88
	movl	-40(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB23_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB23_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB23_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB23_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB23_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB23_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB23_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB23_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB23_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB23_44:                              # %if.end114
                                        #   in Loop: Header=BB23_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB23_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB23_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB23_46:                              # %if.end133
                                        #   in Loop: Header=BB23_41 Depth=1
	jmp	.LBB23_47
.LBB23_47:                              # %for.inc134
                                        #   in Loop: Header=BB23_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_41
.LBB23_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB23_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB23_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB23_49 Depth=1
	movl	$0, -4(%rbp)
.LBB23_51:                              # %for.cond141
                                        #   Parent Loop BB23_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB23_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB23_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB23_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_51
.LBB23_54:                              # %for.end173
                                        #   in Loop: Header=BB23_49 Depth=1
	jmp	.LBB23_55
.LBB23_55:                              # %for.inc174
                                        #   in Loop: Header=BB23_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_49
.LBB23_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB23_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB23_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -60(%rbp)
	jne	.LBB23_60
.LBB23_59:                              # %if.then181
	jmp	.LBB23_85
.LBB23_60:                              # %if.end182
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB23_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB23_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB23_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB23_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB23_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB23_65
.LBB23_64:                              # %if.else210
                                        #   in Loop: Header=BB23_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB23_65:                              # %if.end232
                                        #   in Loop: Header=BB23_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB23_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_61
.LBB23_67:                              # %for.end264
	imull	$5, -28(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -52(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -48(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB23_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB23_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB23_68 Depth=1
	movl	$0, -4(%rbp)
.LBB23_70:                              # %for.cond293
                                        #   Parent Loop BB23_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB23_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB23_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-36(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-48(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB23_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB23_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB23_74
.LBB23_73:                              # %cond.false309
                                        #   in Loop: Header=BB23_70 Depth=2
	movl	-36(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-48(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB23_74:                              # %cond.end318
                                        #   in Loop: Header=BB23_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB23_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB23_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB23_80
.LBB23_76:                              # %cond.false323
                                        #   in Loop: Header=BB23_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-36(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-48(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB23_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB23_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB23_79
.LBB23_78:                              # %cond.false337
                                        #   in Loop: Header=BB23_70 Depth=2
	movl	-36(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-48(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB23_79:                              # %cond.end346
                                        #   in Loop: Header=BB23_70 Depth=2
.LBB23_80:                              # %cond.end348
                                        #   in Loop: Header=BB23_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB23_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_70
.LBB23_82:                              # %for.end359
                                        #   in Loop: Header=BB23_68 Depth=1
	jmp	.LBB23_83
.LBB23_83:                              # %for.inc360
                                        #   in Loop: Header=BB23_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_68
.LBB23_84:                              # %for.end362.loopexit
	jmp	.LBB23_85
.LBB23_85:                              # %for.end362
	cmpl	$840689802, -92(%rbp)   # imm = 0x321BE88A
	jne	.LBB23_87
.LBB23_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_86
.Lfunc_end23:
	.size	intrapred_luma_16x16.14, .Lfunc_end23-intrapred_luma_16x16.14
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.15
.LCPI24_0:
	.quad	4616189618054758400     # double 4
.LCPI24_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI24_2:
	.quad	4611686018427387904     # double 2
.LCPI24_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.15
	.p2align	4, 0x90
	.type	dct_chroma_sp.15,@function
dct_chroma_sp.15:                       # @dct_chroma_sp.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI24_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI24_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1449598166, -268(%rbp) # imm = 0x56671CD6
	movl	%edi, -116(%rbp)
	movl	%esi, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI24_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI24_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB24_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB24_6
.LBB24_2:                               # %cond.false
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB24_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB24_5
.LBB24_4:                               # %cond.false19
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB24_5:                               # %cond.end
.LBB24_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB24_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB24_12
.LBB24_8:                               # %cond.false30
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB24_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB24_11
.LBB24_10:                              # %cond.false37
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB24_11:                              # %cond.end41
.LBB24_12:                              # %cond.end43
	movl	%eax, -220(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB24_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB24_15
.LBB24_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB24_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -120(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB24_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB24_18
.LBB24_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB24_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-120(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -224(%rbp)
	cmpl	$0, -220(%rbp)
	jge	.LBB24_20
# %bb.19:                               # %cond.true70
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB24_21
.LBB24_20:                              # %cond.false72
	movslq	-220(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB24_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -220(%rbp)
	jge	.LBB24_23
# %bb.22:                               # %cond.true82
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB24_24
.LBB24_23:                              # %cond.false84
	movslq	-220(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB24_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -216(%rbp)
	movl	$0, -12(%rbp)
.LBB24_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB24_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB24_25 Depth=1
	movl	$0, -16(%rbp)
.LBB24_27:                              # %for.cond97
                                        #   Parent Loop BB24_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB24_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB24_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB24_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_27
.LBB24_30:                              # %for.end
                                        #   in Loop: Header=BB24_25 Depth=1
	jmp	.LBB24_31
.LBB24_31:                              # %for.inc121
                                        #   in Loop: Header=BB24_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_25
.LBB24_32:                              # %for.end123
	movl	$0, -24(%rbp)
.LBB24_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_35 Depth 2
                                        #       Child Loop BB24_37 Depth 3
                                        #         Child Loop BB24_39 Depth 4
                                        #       Child Loop BB24_45 Depth 3
                                        #         Child Loop BB24_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB24_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB24_33 Depth=1
	movl	$0, -20(%rbp)
.LBB24_35:                              # %for.cond128
                                        #   Parent Loop BB24_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_37 Depth 3
                                        #         Child Loop BB24_39 Depth 4
                                        #       Child Loop BB24_45 Depth 3
                                        #         Child Loop BB24_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB24_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB24_35 Depth=2
	movl	$0, -12(%rbp)
.LBB24_37:                              # %for.cond132
                                        #   Parent Loop BB24_33 Depth=1
                                        #     Parent Loop BB24_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB24_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB24_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB24_37 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -16(%rbp)
.LBB24_39:                              # %for.cond137
                                        #   Parent Loop BB24_33 Depth=1
                                        #     Parent Loop BB24_35 Depth=2
                                        #       Parent Loop BB24_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB24_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB24_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-88(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-88(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB24_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_39
.LBB24_42:                              # %for.end174
                                        #   in Loop: Header=BB24_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB24_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_37
.LBB24_44:                              # %for.end214
                                        #   in Loop: Header=BB24_35 Depth=2
	movl	$0, -16(%rbp)
.LBB24_45:                              # %for.cond215
                                        #   Parent Loop BB24_33 Depth=1
                                        #     Parent Loop BB24_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB24_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB24_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB24_45 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB24_47:                              # %for.cond220
                                        #   Parent Loop BB24_33 Depth=1
                                        #     Parent Loop BB24_35 Depth=2
                                        #       Parent Loop BB24_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB24_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB24_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-52(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-52(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB24_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_47
.LBB24_50:                              # %for.end257
                                        #   in Loop: Header=BB24_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB24_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_45
.LBB24_52:                              # %for.end298
                                        #   in Loop: Header=BB24_35 Depth=2
	jmp	.LBB24_53
.LBB24_53:                              # %for.inc299
                                        #   in Loop: Header=BB24_35 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_35
.LBB24_54:                              # %for.end301
                                        #   in Loop: Header=BB24_33 Depth=1
	jmp	.LBB24_55
.LBB24_55:                              # %for.inc302
                                        #   in Loop: Header=BB24_33 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB24_33
.LBB24_56:                              # %for.end304
	movl	$0, -24(%rbp)
.LBB24_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_59 Depth 2
                                        #       Child Loop BB24_61 Depth 3
                                        #         Child Loop BB24_63 Depth 4
                                        #       Child Loop BB24_69 Depth 3
                                        #         Child Loop BB24_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB24_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB24_57 Depth=1
	movl	$0, -20(%rbp)
.LBB24_59:                              # %for.cond309
                                        #   Parent Loop BB24_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_61 Depth 3
                                        #         Child Loop BB24_63 Depth 4
                                        #       Child Loop BB24_69 Depth 3
                                        #         Child Loop BB24_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB24_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB24_59 Depth=2
	movl	$0, -12(%rbp)
.LBB24_61:                              # %for.cond313
                                        #   Parent Loop BB24_57 Depth=1
                                        #     Parent Loop BB24_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB24_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB24_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB24_61 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -16(%rbp)
.LBB24_63:                              # %for.cond318
                                        #   Parent Loop BB24_57 Depth=1
                                        #     Parent Loop BB24_59 Depth=2
                                        #       Parent Loop BB24_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB24_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB24_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-88(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-88(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-48(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-88(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB24_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_63
.LBB24_66:                              # %for.end351
                                        #   in Loop: Header=BB24_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB24_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_61
.LBB24_68:                              # %for.end387
                                        #   in Loop: Header=BB24_59 Depth=2
	movl	$0, -16(%rbp)
.LBB24_69:                              # %for.cond388
                                        #   Parent Loop BB24_57 Depth=1
                                        #     Parent Loop BB24_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB24_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB24_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB24_69 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB24_71:                              # %for.cond393
                                        #   Parent Loop BB24_57 Depth=1
                                        #     Parent Loop BB24_59 Depth=2
                                        #       Parent Loop BB24_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB24_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB24_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-52(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-52(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB24_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_71
.LBB24_74:                              # %for.end426
                                        #   in Loop: Header=BB24_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB24_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_69
.LBB24_76:                              # %for.end463
                                        #   in Loop: Header=BB24_59 Depth=2
	jmp	.LBB24_77
.LBB24_77:                              # %for.inc464
                                        #   in Loop: Header=BB24_59 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_59
.LBB24_78:                              # %for.end466
                                        #   in Loop: Header=BB24_57 Depth=1
	jmp	.LBB24_79
.LBB24_79:                              # %for.inc467
                                        #   in Loop: Header=BB24_57 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB24_57
.LBB24_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$0, -32(%rbp)
.LBB24_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB24_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -84(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -44(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	je	.LBB24_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB24_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB24_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB24_81 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB24_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB24_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-44(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-112(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-40(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-112(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-184(%rbp), %xmm0
	jne	.LBB24_90
	jp	.LBB24_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-40(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB24_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB24_89
.LBB24_88:                              # %cond.false691
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	-40(%rbp), %eax
.LBB24_89:                              # %cond.end692
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB24_94
.LBB24_90:                              # %if.else
                                        #   in Loop: Header=BB24_81 Depth=1
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-184(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB24_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB24_93
.LBB24_92:                              # %if.else697
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB24_93:                              # %if.end
                                        #   in Loop: Header=BB24_81 Depth=1
	jmp	.LBB24_94
.LBB24_94:                              # %if.end698
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB24_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB24_97
.LBB24_96:                              # %cond.false702
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	-100(%rbp), %eax
.LBB24_97:                              # %cond.end703
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	%eax, -104(%rbp)
	jmp	.LBB24_108
.LBB24_98:                              # %if.else705
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB24_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB24_107
.LBB24_100:                             # %if.else709
                                        #   in Loop: Header=BB24_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB24_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB24_103
.LBB24_102:                             # %cond.false713
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	-40(%rbp), %eax
.LBB24_103:                             # %cond.end714
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB24_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB24_106
.LBB24_105:                             # %cond.false719
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	-100(%rbp), %eax
.LBB24_106:                             # %cond.end720
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	%eax, -104(%rbp)
.LBB24_107:                             # %if.end722
                                        #   in Loop: Header=BB24_81 Depth=1
	jmp	.LBB24_108
.LBB24_108:                             # %if.end723
                                        #   in Loop: Header=BB24_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB24_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB24_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB24_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB24_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB24_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB24_112:                             # %if.end734
                                        #   in Loop: Header=BB24_81 Depth=1
	jmp	.LBB24_113
.LBB24_113:                             # %if.end735
                                        #   in Loop: Header=BB24_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB24_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	-116(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-204(%rbp), %eax
	jle	.LBB24_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	$1, %eax
	jmp	.LBB24_117
.LBB24_116:                             # %cond.false745
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	-204(%rbp), %eax
.LBB24_117:                             # %cond.end746
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	%eax, -204(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -84(%rbp)
.LBB24_118:                             # %if.end763
                                        #   in Loop: Header=BB24_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-84(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB24_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB24_81
.LBB24_120:                             # %for.end788
	movq	-280(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -212(%rbp)
	movl	$0, -236(%rbp)
	movl	$0, -24(%rbp)
.LBB24_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_123 Depth 2
                                        #       Child Loop BB24_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB24_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB24_121 Depth=1
	movl	$0, -20(%rbp)
.LBB24_123:                             # %for.cond839
                                        #   Parent Loop BB24_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB24_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB24_123 Depth=2
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -240(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-240(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-240(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$1, -32(%rbp)
.LBB24_125:                             # %for.cond860
                                        #   Parent Loop BB24_121 Depth=1
                                        #     Parent Loop BB24_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB24_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB24_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB24_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB24_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB24_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB24_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB24_130
.LBB24_129:                             # %if.then867
                                        #   in Loop: Header=BB24_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_131
.LBB24_130:                             # %if.else876
                                        #   in Loop: Header=BB24_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB24_131:                             # %if.end885
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -44(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	je	.LBB24_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB24_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB24_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB24_125 Depth=3
	cmpl	$0, -40(%rbp)
	je	.LBB24_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB24_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-44(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-112(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-40(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-112(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-184(%rbp), %xmm0
	jne	.LBB24_139
	jp	.LBB24_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-40(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB24_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB24_138
.LBB24_137:                             # %cond.false1047
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	-40(%rbp), %eax
.LBB24_138:                             # %cond.end1048
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB24_143
.LBB24_139:                             # %if.else1050
                                        #   in Loop: Header=BB24_125 Depth=3
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-184(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB24_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB24_142
.LBB24_141:                             # %if.else1054
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB24_142:                             # %if.end1055
                                        #   in Loop: Header=BB24_125 Depth=3
	jmp	.LBB24_143
.LBB24_143:                             # %if.end1056
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB24_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	-44(%rbp), %eax
	jmp	.LBB24_146
.LBB24_145:                             # %cond.false1060
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	-100(%rbp), %eax
.LBB24_146:                             # %cond.end1061
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	%eax, -104(%rbp)
	jmp	.LBB24_157
.LBB24_147:                             # %if.else1063
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB24_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB24_156
.LBB24_149:                             # %if.else1067
                                        #   in Loop: Header=BB24_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB24_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB24_152
.LBB24_151:                             # %cond.false1071
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	-40(%rbp), %eax
.LBB24_152:                             # %cond.end1072
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB24_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	-44(%rbp), %eax
	jmp	.LBB24_155
.LBB24_154:                             # %cond.false1077
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	-100(%rbp), %eax
.LBB24_155:                             # %cond.end1078
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	%eax, -104(%rbp)
.LBB24_156:                             # %if.end1080
                                        #   in Loop: Header=BB24_125 Depth=3
	jmp	.LBB24_157
.LBB24_157:                             # %if.end1081
                                        #   in Loop: Header=BB24_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB24_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	-116(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	-20(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB24_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	-212(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -212(%rbp)
	jmp	.LBB24_161
.LBB24_160:                             # %if.else1099
                                        #   in Loop: Header=BB24_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-212(%rbp), %eax
	movl	%eax, -212(%rbp)
.LBB24_161:                             # %if.end1106
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	$2, -236(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -84(%rbp)
.LBB24_162:                             # %if.end1128
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-84(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB24_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB24_125
.LBB24_164:                             # %for.end1164
                                        #   in Loop: Header=BB24_123 Depth=2
	movq	-288(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB24_123 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_123
.LBB24_166:                             # %for.end1169
                                        #   in Loop: Header=BB24_121 Depth=1
	jmp	.LBB24_167
.LBB24_167:                             # %for.inc1170
                                        #   in Loop: Header=BB24_121 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB24_121
.LBB24_168:                             # %for.end1172
	cmpl	$2, -236(%rbp)
	jne	.LBB24_170
# %bb.169:                              # %if.then1175
	movl	$2, -204(%rbp)
.LBB24_170:                             # %if.end1176
	movl	$0, -24(%rbp)
.LBB24_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_173 Depth 2
                                        #       Child Loop BB24_175 Depth 3
                                        #         Child Loop BB24_177 Depth 4
                                        #         Child Loop BB24_181 Depth 4
                                        #       Child Loop BB24_187 Depth 3
                                        #         Child Loop BB24_189 Depth 4
                                        #         Child Loop BB24_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB24_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB24_171 Depth=1
	movl	$0, -20(%rbp)
.LBB24_173:                             # %for.cond1181
                                        #   Parent Loop BB24_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_175 Depth 3
                                        #         Child Loop BB24_177 Depth 4
                                        #         Child Loop BB24_181 Depth 4
                                        #       Child Loop BB24_187 Depth 3
                                        #         Child Loop BB24_189 Depth 4
                                        #         Child Loop BB24_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB24_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB24_173 Depth=2
	movl	$0, -12(%rbp)
.LBB24_175:                             # %for.cond1185
                                        #   Parent Loop BB24_171 Depth=1
                                        #     Parent Loop BB24_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB24_177 Depth 4
                                        #         Child Loop BB24_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB24_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB24_175 Depth=3
	movl	$0, -16(%rbp)
.LBB24_177:                             # %for.cond1189
                                        #   Parent Loop BB24_171 Depth=1
                                        #     Parent Loop BB24_173 Depth=2
                                        #       Parent Loop BB24_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB24_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB24_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB24_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_177
.LBB24_180:                             # %for.end1204
                                        #   in Loop: Header=BB24_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB24_181:                             # %for.cond1223
                                        #   Parent Loop BB24_171 Depth=1
                                        #     Parent Loop BB24_173 Depth=2
                                        #       Parent Loop BB24_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB24_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB24_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-88(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB24_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_181
.LBB24_184:                             # %for.end1254
                                        #   in Loop: Header=BB24_175 Depth=3
	jmp	.LBB24_185
.LBB24_185:                             # %for.inc1255
                                        #   in Loop: Header=BB24_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_175
.LBB24_186:                             # %for.end1257
                                        #   in Loop: Header=BB24_173 Depth=2
	movl	$0, -16(%rbp)
.LBB24_187:                             # %for.cond1258
                                        #   Parent Loop BB24_171 Depth=1
                                        #     Parent Loop BB24_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB24_189 Depth 4
                                        #         Child Loop BB24_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB24_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB24_187 Depth=3
	movl	$0, -12(%rbp)
.LBB24_189:                             # %for.cond1262
                                        #   Parent Loop BB24_171 Depth=1
                                        #     Parent Loop BB24_173 Depth=2
                                        #       Parent Loop BB24_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB24_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB24_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB24_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_189
.LBB24_192:                             # %for.end1277
                                        #   in Loop: Header=BB24_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB24_193:                             # %for.cond1296
                                        #   Parent Loop BB24_171 Depth=1
                                        #     Parent Loop BB24_173 Depth=2
                                        #       Parent Loop BB24_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB24_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB24_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-56(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB24_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB24_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB24_197
.LBB24_196:                             # %cond.false1311
                                        #   in Loop: Header=BB24_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB24_197:                             # %cond.end1319
                                        #   in Loop: Header=BB24_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB24_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB24_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB24_203
.LBB24_199:                             # %cond.false1325
                                        #   in Loop: Header=BB24_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB24_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB24_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB24_202
.LBB24_201:                             # %cond.false1336
                                        #   in Loop: Header=BB24_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB24_202:                             # %cond.end1344
                                        #   in Loop: Header=BB24_193 Depth=4
.LBB24_203:                             # %cond.end1346
                                        #   in Loop: Header=BB24_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-20(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-56(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB24_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB24_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB24_206
.LBB24_205:                             # %cond.false1366
                                        #   in Loop: Header=BB24_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB24_206:                             # %cond.end1374
                                        #   in Loop: Header=BB24_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB24_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB24_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB24_212
.LBB24_208:                             # %cond.false1380
                                        #   in Loop: Header=BB24_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB24_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB24_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB24_211
.LBB24_210:                             # %cond.false1391
                                        #   in Loop: Header=BB24_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB24_211:                             # %cond.end1399
                                        #   in Loop: Header=BB24_193 Depth=4
.LBB24_212:                             # %cond.end1401
                                        #   in Loop: Header=BB24_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB24_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_193
.LBB24_214:                             # %for.end1412
                                        #   in Loop: Header=BB24_187 Depth=3
	jmp	.LBB24_215
.LBB24_215:                             # %for.inc1413
                                        #   in Loop: Header=BB24_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_187
.LBB24_216:                             # %for.end1415
                                        #   in Loop: Header=BB24_173 Depth=2
	jmp	.LBB24_217
.LBB24_217:                             # %for.inc1416
                                        #   in Loop: Header=BB24_173 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_173
.LBB24_218:                             # %for.end1418
                                        #   in Loop: Header=BB24_171 Depth=1
	jmp	.LBB24_219
.LBB24_219:                             # %for.inc1419
                                        #   in Loop: Header=BB24_171 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB24_171
.LBB24_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB24_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB24_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB24_221 Depth=1
	movl	$0, -16(%rbp)
.LBB24_223:                             # %for.cond1426
                                        #   Parent Loop BB24_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB24_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB24_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-116(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB24_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_223
.LBB24_226:                             # %for.end1446
                                        #   in Loop: Header=BB24_221 Depth=1
	jmp	.LBB24_227
.LBB24_227:                             # %for.inc1447
                                        #   in Loop: Header=BB24_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_221
.LBB24_228:                             # %for.end1449
	movl	-204(%rbp), %ebx
	cmpl	$1449598166, -268(%rbp) # imm = 0x56671CD6
	jne	.LBB24_230
.LBB24_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_229
.Lfunc_end24:
	.size	dct_chroma_sp.15, .Lfunc_end24-dct_chroma_sp.15
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.16           # -- Begin function dct_chroma.16
	.p2align	4, 0x90
	.type	dct_chroma.16,@function
dct_chroma.16:                          # @dct_chroma.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$1657086008, -380(%rbp) # imm = 0x62C52038
	movl	%edi, -20(%rbp)
	movl	%esi, -132(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB25_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB25_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB25_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -128(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -200(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -212(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB25_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB25_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -104(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB25_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB25_11
.LBB25_7:                               # %cond.false
	cmpl	$51, -124(%rbp)
	jle	.LBB25_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB25_10
.LBB25_9:                               # %cond.false25
	movl	-124(%rbp), %eax
.LBB25_10:                              # %cond.end
.LBB25_11:                              # %cond.end26
	movl	%eax, -124(%rbp)
	cmpl	$0, -124(%rbp)
	jge	.LBB25_13
# %bb.12:                               # %cond.true29
	movl	-124(%rbp), %eax
	jmp	.LBB25_14
.LBB25_13:                              # %cond.false30
	movl	-124(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB25_14:                              # %cond.end34
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB25_16
# %bb.15:                               # %if.then
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -108(%rbp)
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -136(%rbp)
	movl	-108(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -212(%rbp)
.LBB25_16:                              # %if.end
	movl	$0, -28(%rbp)
.LBB25_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_19 Depth 2
                                        #       Child Loop BB25_21 Depth 3
                                        #         Child Loop BB25_25 Depth 4
                                        #       Child Loop BB25_31 Depth 3
                                        #         Child Loop BB25_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB25_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB25_17 Depth=1
	movl	$0, -24(%rbp)
.LBB25_19:                              # %for.cond56
                                        #   Parent Loop BB25_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB25_21 Depth 3
                                        #         Child Loop BB25_25 Depth 4
                                        #       Child Loop BB25_31 Depth 3
                                        #         Child Loop BB25_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB25_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB25_19 Depth=2
	movl	$0, -12(%rbp)
.LBB25_21:                              # %for.cond60
                                        #   Parent Loop BB25_17 Depth=1
                                        #     Parent Loop BB25_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB25_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB25_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB25_21 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB25_23:                              # %land.end64
                                        #   in Loop: Header=BB25_21 Depth=3
	testb	$1, %al
	jne	.LBB25_24
	jmp	.LBB25_30
.LBB25_24:                              # %for.body66
                                        #   in Loop: Header=BB25_21 Depth=3
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB25_25:                              # %for.cond68
                                        #   Parent Loop BB25_17 Depth=1
                                        #     Parent Loop BB25_19 Depth=2
                                        #       Parent Loop BB25_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB25_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB25_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB25_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_25
.LBB25_28:                              # %for.end
                                        #   in Loop: Header=BB25_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB25_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_21
.LBB25_30:                              # %for.end141
                                        #   in Loop: Header=BB25_19 Depth=2
	movl	$0, -16(%rbp)
.LBB25_31:                              # %for.cond142
                                        #   Parent Loop BB25_17 Depth=1
                                        #     Parent Loop BB25_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB25_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB25_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB25_31 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB25_33:                              # %land.end148
                                        #   in Loop: Header=BB25_31 Depth=3
	testb	$1, %al
	jne	.LBB25_34
	jmp	.LBB25_40
.LBB25_34:                              # %for.body150
                                        #   in Loop: Header=BB25_31 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB25_35:                              # %for.cond152
                                        #   Parent Loop BB25_17 Depth=1
                                        #     Parent Loop BB25_19 Depth=2
                                        #       Parent Loop BB25_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB25_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB25_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB25_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_35
.LBB25_38:                              # %for.end189
                                        #   in Loop: Header=BB25_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB25_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_31
.LBB25_40:                              # %for.end230
                                        #   in Loop: Header=BB25_19 Depth=2
	jmp	.LBB25_41
.LBB25_41:                              # %for.inc231
                                        #   in Loop: Header=BB25_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB25_19
.LBB25_42:                              # %for.end233
                                        #   in Loop: Header=BB25_17 Depth=1
	jmp	.LBB25_43
.LBB25_43:                              # %for.inc234
                                        #   in Loop: Header=BB25_17 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB25_17
.LBB25_44:                              # %for.end236
	cmpl	$1, -144(%rbp)
	jne	.LBB25_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB25_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB25_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB25_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB25_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB25_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB25_50
.LBB25_49:                              # %if.else
                                        #   in Loop: Header=BB25_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB25_50:                              # %if.end349
                                        #   in Loop: Header=BB25_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB25_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB25_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB25_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB25_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB25_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB25_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB25_54:                              # %if.end359
                                        #   in Loop: Header=BB25_46 Depth=1
	jmp	.LBB25_55
.LBB25_55:                              # %if.end360
                                        #   in Loop: Header=BB25_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB25_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB25_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB25_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB25_46 Depth=1
	movl	$1, %eax
	jmp	.LBB25_59
.LBB25_58:                              # %cond.false370
                                        #   in Loop: Header=BB25_46 Depth=1
	movl	-132(%rbp), %eax
.LBB25_59:                              # %cond.end371
                                        #   in Loop: Header=BB25_46 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -140(%rbp)
.LBB25_60:                              # %if.end384
                                        #   in Loop: Header=BB25_46 Depth=1
	movl	-140(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB25_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB25_46
.LBB25_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB25_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB25_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB25_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB25_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB25_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB25_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB25_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB25_68
.LBB25_67:                              # %if.else447
                                        #   in Loop: Header=BB25_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB25_68:                              # %if.end461
                                        #   in Loop: Header=BB25_63 Depth=1
	jmp	.LBB25_73
.LBB25_69:                              # %if.else462
                                        #   in Loop: Header=BB25_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB25_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB25_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB25_72
.LBB25_71:                              # %if.else479
                                        #   in Loop: Header=BB25_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB25_72:                              # %if.end493
                                        #   in Loop: Header=BB25_63 Depth=1
	jmp	.LBB25_73
.LBB25_73:                              # %if.end494
                                        #   in Loop: Header=BB25_63 Depth=1
	jmp	.LBB25_74
.LBB25_74:                              # %for.inc495
                                        #   in Loop: Header=BB25_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_63
.LBB25_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB25_213
.LBB25_76:                              # %if.else514
	cmpl	$2, -144(%rbp)
	jne	.LBB25_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB25_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB25_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB25_78 Depth=1
	movl	$0, -16(%rbp)
.LBB25_80:                              # %for.cond523
                                        #   Parent Loop BB25_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB25_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB25_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB25_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_80
.LBB25_83:                              # %for.end541
                                        #   in Loop: Header=BB25_78 Depth=1
	jmp	.LBB25_84
.LBB25_84:                              # %for.inc542
                                        #   in Loop: Header=BB25_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_78
.LBB25_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB25_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB25_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB25_86 Depth=1
	movl	$0, -12(%rbp)
.LBB25_88:                              # %for.cond605
                                        #   Parent Loop BB25_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB25_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB25_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB25_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_88
.LBB25_91:                              # %for.end634
                                        #   in Loop: Header=BB25_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB25_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_86
.LBB25_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB25_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB25_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB25_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB25_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB25_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB25_98
.LBB25_97:                              # %if.else700
                                        #   in Loop: Header=BB25_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB25_98:                              # %if.end723
                                        #   in Loop: Header=BB25_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB25_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB25_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB25_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB25_94 Depth=1
	movl	$1, %eax
	jmp	.LBB25_102
.LBB25_101:                             # %cond.false735
                                        #   in Loop: Header=BB25_94 Depth=1
	movl	-132(%rbp), %eax
.LBB25_102:                             # %cond.end736
                                        #   in Loop: Header=BB25_94 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB25_103:                             # %if.end748
                                        #   in Loop: Header=BB25_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB25_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB25_94
.LBB25_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB25_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_108 Depth 2
                                        #     Child Loop BB25_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB25_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB25_106 Depth=1
	movl	$0, -12(%rbp)
.LBB25_108:                             # %for.cond823
                                        #   Parent Loop BB25_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB25_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB25_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB25_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_108
.LBB25_111:                             # %for.end835
                                        #   in Loop: Header=BB25_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB25_112:                             # %for.cond852
                                        #   Parent Loop BB25_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB25_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB25_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -108(%rbp)
	jge	.LBB25_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB25_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB25_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB25_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB25_117
.LBB25_116:                             # %if.else915
                                        #   in Loop: Header=BB25_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB25_117:                             # %if.end968
                                        #   in Loop: Header=BB25_112 Depth=2
	jmp	.LBB25_122
.LBB25_118:                             # %if.else969
                                        #   in Loop: Header=BB25_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB25_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB25_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB25_121
.LBB25_120:                             # %if.else1019
                                        #   in Loop: Header=BB25_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB25_121:                             # %if.end1066
                                        #   in Loop: Header=BB25_112 Depth=2
	jmp	.LBB25_122
.LBB25_122:                             # %if.end1067
                                        #   in Loop: Header=BB25_112 Depth=2
	jmp	.LBB25_123
.LBB25_123:                             # %for.inc1068
                                        #   in Loop: Header=BB25_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_112
.LBB25_124:                             # %for.end1070
                                        #   in Loop: Header=BB25_106 Depth=1
	jmp	.LBB25_125
.LBB25_125:                             # %for.inc1071
                                        #   in Loop: Header=BB25_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_106
.LBB25_126:                             # %for.end1073
	jmp	.LBB25_212
.LBB25_127:                             # %if.else1074
	cmpl	$3, -144(%rbp)
	jne	.LBB25_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB25_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB25_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB25_129 Depth=1
	movl	$0, -16(%rbp)
.LBB25_131:                             # %for.cond1083
                                        #   Parent Loop BB25_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB25_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB25_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB25_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_131
.LBB25_134:                             # %for.end1101
                                        #   in Loop: Header=BB25_129 Depth=1
	jmp	.LBB25_135
.LBB25_135:                             # %for.inc1102
                                        #   in Loop: Header=BB25_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_129
.LBB25_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB25_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB25_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB25_137 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB25_139:                             # %land.end1111
                                        #   in Loop: Header=BB25_137 Depth=1
	testb	$1, %al
	jne	.LBB25_140
	jmp	.LBB25_146
.LBB25_140:                             # %for.body1113
                                        #   in Loop: Header=BB25_137 Depth=1
	movl	$0, -16(%rbp)
.LBB25_141:                             # %for.cond1114
                                        #   Parent Loop BB25_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB25_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB25_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB25_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_141
.LBB25_144:                             # %for.end1143
                                        #   in Loop: Header=BB25_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB25_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_137
.LBB25_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB25_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB25_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB25_147 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB25_149:                             # %land.end1177
                                        #   in Loop: Header=BB25_147 Depth=1
	testb	$1, %al
	jne	.LBB25_150
	jmp	.LBB25_156
.LBB25_150:                             # %for.body1179
                                        #   in Loop: Header=BB25_147 Depth=1
	movl	$0, -12(%rbp)
.LBB25_151:                             # %for.cond1180
                                        #   Parent Loop BB25_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB25_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB25_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB25_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_151
.LBB25_154:                             # %for.end1209
                                        #   in Loop: Header=BB25_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB25_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_147
.LBB25_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB25_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB25_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB25_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB25_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB25_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB25_164
.LBB25_160:                             # %if.else1261
                                        #   in Loop: Header=BB25_157 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB25_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB25_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB25_163
.LBB25_162:                             # %if.else1287
                                        #   in Loop: Header=BB25_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB25_163:                             # %if.end1310
                                        #   in Loop: Header=BB25_157 Depth=1
	jmp	.LBB25_164
.LBB25_164:                             # %if.end1311
                                        #   in Loop: Header=BB25_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB25_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB25_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB25_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB25_157 Depth=1
	movl	$1, %eax
	jmp	.LBB25_168
.LBB25_167:                             # %cond.false1322
                                        #   in Loop: Header=BB25_157 Depth=1
	movl	-132(%rbp), %eax
.LBB25_168:                             # %cond.end1323
                                        #   in Loop: Header=BB25_157 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB25_169:                             # %if.end1335
                                        #   in Loop: Header=BB25_157 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB25_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB25_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB25_171:                             # %if.end1347
                                        #   in Loop: Header=BB25_157 Depth=1
	jmp	.LBB25_172
.LBB25_172:                             # %for.inc1348
                                        #   in Loop: Header=BB25_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB25_157
.LBB25_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB25_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_178 Depth 2
                                        #     Child Loop BB25_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB25_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB25_174 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB25_176:                             # %land.end1359
                                        #   in Loop: Header=BB25_174 Depth=1
	testb	$1, %al
	jne	.LBB25_177
	jmp	.LBB25_187
.LBB25_177:                             # %for.body1361
                                        #   in Loop: Header=BB25_174 Depth=1
	movl	$0, -16(%rbp)
.LBB25_178:                             # %for.cond1362
                                        #   Parent Loop BB25_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB25_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB25_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB25_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_178
.LBB25_181:                             # %for.end1374
                                        #   in Loop: Header=BB25_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB25_182:                             # %for.cond1391
                                        #   Parent Loop BB25_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB25_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB25_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB25_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_182
.LBB25_185:                             # %for.end1416
                                        #   in Loop: Header=BB25_174 Depth=1
	jmp	.LBB25_186
.LBB25_186:                             # %for.inc1417
                                        #   in Loop: Header=BB25_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_174
.LBB25_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB25_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_192 Depth 2
                                        #     Child Loop BB25_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB25_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB25_188 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB25_190:                             # %land.end1426
                                        #   in Loop: Header=BB25_188 Depth=1
	testb	$1, %al
	jne	.LBB25_191
	jmp	.LBB25_210
.LBB25_191:                             # %for.body1428
                                        #   in Loop: Header=BB25_188 Depth=1
	movl	$0, -12(%rbp)
.LBB25_192:                             # %for.cond1429
                                        #   Parent Loop BB25_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB25_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB25_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB25_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_192
.LBB25_195:                             # %for.end1441
                                        #   in Loop: Header=BB25_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB25_196:                             # %for.cond1458
                                        #   Parent Loop BB25_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB25_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB25_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB25_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB25_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB25_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB25_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB25_201
.LBB25_200:                             # %if.else1521
                                        #   in Loop: Header=BB25_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB25_201:                             # %if.end1574
                                        #   in Loop: Header=BB25_196 Depth=2
	jmp	.LBB25_206
.LBB25_202:                             # %if.else1575
                                        #   in Loop: Header=BB25_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB25_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB25_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB25_205
.LBB25_204:                             # %if.else1625
                                        #   in Loop: Header=BB25_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB25_205:                             # %if.end1672
                                        #   in Loop: Header=BB25_196 Depth=2
	jmp	.LBB25_206
.LBB25_206:                             # %if.end1673
                                        #   in Loop: Header=BB25_196 Depth=2
	jmp	.LBB25_207
.LBB25_207:                             # %for.inc1674
                                        #   in Loop: Header=BB25_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_196
.LBB25_208:                             # %for.end1676
                                        #   in Loop: Header=BB25_188 Depth=1
	jmp	.LBB25_209
.LBB25_209:                             # %for.inc1677
                                        #   in Loop: Header=BB25_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_188
.LBB25_210:                             # %for.end1679
	jmp	.LBB25_211
.LBB25_211:                             # %if.end1680
	jmp	.LBB25_212
.LBB25_212:                             # %if.end1681
	jmp	.LBB25_213
.LBB25_213:                             # %if.end1682
	movl	$0, -196(%rbp)
	movl	$0, -208(%rbp)
	movl	$0, -112(%rbp)
.LBB25_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_216 Depth 2
                                        #       Child Loop BB25_218 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB25_214 Depth=1
	movl	$0, -116(%rbp)
.LBB25_216:                             # %for.cond1689
                                        #   Parent Loop BB25_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB25_218 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB25_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB25_216 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$1, -36(%rbp)
.LBB25_218:                             # %for.cond1722
                                        #   Parent Loop BB25_214 Depth=1
                                        #     Parent Loop BB25_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB25_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB25_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB25_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB25_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB25_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB25_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB25_223
.LBB25_222:                             # %if.then1731
                                        #   in Loop: Header=BB25_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_224
.LBB25_223:                             # %if.else1740
                                        #   in Loop: Header=BB25_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB25_224:                             # %if.end1749
                                        #   in Loop: Header=BB25_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB25_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB25_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB25_230
.LBB25_226:                             # %if.else1761
                                        #   in Loop: Header=BB25_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB25_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB25_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB25_229
.LBB25_228:                             # %if.else1792
                                        #   in Loop: Header=BB25_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB25_229:                             # %if.end1820
                                        #   in Loop: Header=BB25_218 Depth=3
	jmp	.LBB25_230
.LBB25_230:                             # %if.end1821
                                        #   in Loop: Header=BB25_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB25_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB25_218 Depth=3
	movl	-112(%rbp), %eax
	addl	-200(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB25_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB25_218 Depth=3
	cmpl	$0, -104(%rbp)
	je	.LBB25_234
.LBB25_233:                             # %if.then1839
                                        #   in Loop: Header=BB25_218 Depth=3
	movl	-196(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -196(%rbp)
	jmp	.LBB25_235
.LBB25_234:                             # %if.else1841
                                        #   in Loop: Header=BB25_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -196(%rbp)
.LBB25_235:                             # %if.end1848
                                        #   in Loop: Header=BB25_218 Depth=3
	movl	$2, -208(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB25_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB25_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB25_247
.LBB25_237:                             # %if.else1872
                                        #   in Loop: Header=BB25_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB25_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB25_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB25_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB25_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB25_241
.LBB25_240:                             # %if.else1893
                                        #   in Loop: Header=BB25_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB25_241:                             # %if.end1908
                                        #   in Loop: Header=BB25_218 Depth=3
	jmp	.LBB25_246
.LBB25_242:                             # %if.else1909
                                        #   in Loop: Header=BB25_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB25_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB25_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB25_245
.LBB25_244:                             # %if.else1924
                                        #   in Loop: Header=BB25_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB25_245:                             # %if.end1936
                                        #   in Loop: Header=BB25_218 Depth=3
	jmp	.LBB25_246
.LBB25_246:                             # %if.end1937
                                        #   in Loop: Header=BB25_218 Depth=3
	jmp	.LBB25_247
.LBB25_247:                             # %if.end1938
                                        #   in Loop: Header=BB25_218 Depth=3
	jmp	.LBB25_248
.LBB25_248:                             # %if.end1939
                                        #   in Loop: Header=BB25_218 Depth=3
	cmpl	$0, -104(%rbp)
	jne	.LBB25_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB25_218 Depth=3
	movl	-140(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB25_250:                             # %if.end1949
                                        #   in Loop: Header=BB25_218 Depth=3
	jmp	.LBB25_251
.LBB25_251:                             # %for.inc1950
                                        #   in Loop: Header=BB25_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB25_218
.LBB25_252:                             # %for.end1952
                                        #   in Loop: Header=BB25_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB25_216 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB25_216
.LBB25_254:                             # %for.end1957
                                        #   in Loop: Header=BB25_214 Depth=1
	jmp	.LBB25_255
.LBB25_255:                             # %for.inc1958
                                        #   in Loop: Header=BB25_214 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB25_214
.LBB25_256:                             # %for.end1960
	cmpl	$4, -196(%rbp)
	jge	.LBB25_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -104(%rbp)
	jne	.LBB25_278
# %bb.258:                              # %if.then1965
	movl	$0, -208(%rbp)
	movl	$0, -112(%rbp)
.LBB25_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_261 Depth 2
                                        #       Child Loop BB25_265 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB25_259 Depth=1
	movl	$0, -116(%rbp)
.LBB25_261:                             # %for.cond1972
                                        #   Parent Loop BB25_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB25_265 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB25_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB25_261 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB25_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB25_261 Depth=2
	movslq	-144(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-144(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB25_264:                             # %if.end2016
                                        #   in Loop: Header=BB25_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB25_265:                             # %for.cond2018
                                        #   Parent Loop BB25_259 Depth=1
                                        #     Parent Loop BB25_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB25_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB25_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB25_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB25_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB25_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB25_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB25_270
.LBB25_269:                             # %if.then2030
                                        #   in Loop: Header=BB25_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_271
.LBB25_270:                             # %if.else2039
                                        #   in Loop: Header=BB25_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB25_271:                             # %if.end2048
                                        #   in Loop: Header=BB25_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB25_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB25_265
.LBB25_273:                             # %for.end2060
                                        #   in Loop: Header=BB25_261 Depth=2
	jmp	.LBB25_274
.LBB25_274:                             # %for.inc2061
                                        #   in Loop: Header=BB25_261 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB25_261
.LBB25_275:                             # %for.end2063
                                        #   in Loop: Header=BB25_259 Depth=1
	jmp	.LBB25_276
.LBB25_276:                             # %for.inc2064
                                        #   in Loop: Header=BB25_259 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB25_259
.LBB25_277:                             # %for.end2066
	jmp	.LBB25_278
.LBB25_278:                             # %if.end2067
	cmpl	$2, -208(%rbp)
	jne	.LBB25_280
# %bb.279:                              # %if.then2070
	movl	$2, -132(%rbp)
.LBB25_280:                             # %if.end2071
	movl	$0, -28(%rbp)
.LBB25_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_285 Depth 2
                                        #       Child Loop BB25_287 Depth 3
                                        #         Child Loop BB25_289 Depth 4
                                        #         Child Loop BB25_293 Depth 4
                                        #       Child Loop BB25_299 Depth 3
                                        #         Child Loop BB25_303 Depth 4
                                        #         Child Loop BB25_307 Depth 4
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB25_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB25_281 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB25_283:                             # %land.end2079
                                        #   in Loop: Header=BB25_281 Depth=1
	testb	$1, %al
	jne	.LBB25_284
	jmp	.LBB25_340
.LBB25_284:                             # %for.body2081
                                        #   in Loop: Header=BB25_281 Depth=1
	movl	$0, -24(%rbp)
.LBB25_285:                             # %for.cond2082
                                        #   Parent Loop BB25_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB25_287 Depth 3
                                        #         Child Loop BB25_289 Depth 4
                                        #         Child Loop BB25_293 Depth 4
                                        #       Child Loop BB25_299 Depth 3
                                        #         Child Loop BB25_303 Depth 4
                                        #         Child Loop BB25_307 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB25_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB25_285 Depth=2
	movl	$0, -12(%rbp)
.LBB25_287:                             # %for.cond2087
                                        #   Parent Loop BB25_281 Depth=1
                                        #     Parent Loop BB25_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB25_289 Depth 4
                                        #         Child Loop BB25_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB25_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB25_287 Depth=3
	movl	$0, -16(%rbp)
.LBB25_289:                             # %for.cond2091
                                        #   Parent Loop BB25_281 Depth=1
                                        #     Parent Loop BB25_285 Depth=2
                                        #       Parent Loop BB25_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB25_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB25_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB25_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_289
.LBB25_292:                             # %for.end2106
                                        #   in Loop: Header=BB25_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB25_293:                             # %for.cond2125
                                        #   Parent Loop BB25_281 Depth=1
                                        #     Parent Loop BB25_285 Depth=2
                                        #       Parent Loop BB25_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB25_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB25_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB25_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_293
.LBB25_296:                             # %for.end2156
                                        #   in Loop: Header=BB25_287 Depth=3
	jmp	.LBB25_297
.LBB25_297:                             # %for.inc2157
                                        #   in Loop: Header=BB25_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_287
.LBB25_298:                             # %for.end2159
                                        #   in Loop: Header=BB25_285 Depth=2
	movl	$0, -16(%rbp)
.LBB25_299:                             # %for.cond2160
                                        #   Parent Loop BB25_281 Depth=1
                                        #     Parent Loop BB25_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB25_303 Depth 4
                                        #         Child Loop BB25_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB25_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB25_299 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB25_301:                             # %land.end2166
                                        #   in Loop: Header=BB25_299 Depth=3
	testb	$1, %al
	jne	.LBB25_302
	jmp	.LBB25_336
.LBB25_302:                             # %for.body2168
                                        #   in Loop: Header=BB25_299 Depth=3
	movl	$0, -12(%rbp)
.LBB25_303:                             # %for.cond2169
                                        #   Parent Loop BB25_281 Depth=1
                                        #     Parent Loop BB25_285 Depth=2
                                        #       Parent Loop BB25_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB25_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB25_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB25_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_303
.LBB25_306:                             # %for.end2184
                                        #   in Loop: Header=BB25_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB25_307:                             # %for.cond2203
                                        #   Parent Loop BB25_281 Depth=1
                                        #     Parent Loop BB25_285 Depth=2
                                        #       Parent Loop BB25_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB25_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB25_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB25_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB25_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB25_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB25_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB25_312
.LBB25_311:                             # %cond.false2231
                                        #   in Loop: Header=BB25_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB25_312:                             # %cond.end2250
                                        #   in Loop: Header=BB25_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB25_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB25_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB25_318
.LBB25_314:                             # %cond.false2257
                                        #   in Loop: Header=BB25_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB25_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB25_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB25_317
.LBB25_316:                             # %cond.false2279
                                        #   in Loop: Header=BB25_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB25_317:                             # %cond.end2298
                                        #   in Loop: Header=BB25_307 Depth=4
.LBB25_318:                             # %cond.end2300
                                        #   in Loop: Header=BB25_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-68(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB25_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB25_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB25_321
.LBB25_320:                             # %cond.false2333
                                        #   in Loop: Header=BB25_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB25_321:                             # %cond.end2352
                                        #   in Loop: Header=BB25_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB25_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB25_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB25_327
.LBB25_323:                             # %cond.false2359
                                        #   in Loop: Header=BB25_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB25_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB25_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB25_326
.LBB25_325:                             # %cond.false2381
                                        #   in Loop: Header=BB25_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB25_326:                             # %cond.end2400
                                        #   in Loop: Header=BB25_307 Depth=4
.LBB25_327:                             # %cond.end2402
                                        #   in Loop: Header=BB25_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB25_332
.LBB25_328:                             # %if.else2412
                                        #   in Loop: Header=BB25_307 Depth=4
	cmpl	$0, -104(%rbp)
	je	.LBB25_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB25_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB25_331
.LBB25_330:                             # %if.else2439
                                        #   in Loop: Header=BB25_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB25_331:                             # %if.end2468
                                        #   in Loop: Header=BB25_307 Depth=4
	jmp	.LBB25_332
.LBB25_332:                             # %if.end2469
                                        #   in Loop: Header=BB25_307 Depth=4
	jmp	.LBB25_333
.LBB25_333:                             # %for.inc2470
                                        #   in Loop: Header=BB25_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_307
.LBB25_334:                             # %for.end2472
                                        #   in Loop: Header=BB25_299 Depth=3
	jmp	.LBB25_335
.LBB25_335:                             # %for.inc2473
                                        #   in Loop: Header=BB25_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_299
.LBB25_336:                             # %for.end2475
                                        #   in Loop: Header=BB25_285 Depth=2
	jmp	.LBB25_337
.LBB25_337:                             # %for.inc2476
                                        #   in Loop: Header=BB25_285 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB25_285
.LBB25_338:                             # %for.end2478
                                        #   in Loop: Header=BB25_281 Depth=1
	jmp	.LBB25_339
.LBB25_339:                             # %for.inc2479
                                        #   in Loop: Header=BB25_281 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB25_281
.LBB25_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB25_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB25_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB25_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB25_342 Depth=1
	movl	$0, -16(%rbp)
.LBB25_344:                             # %for.cond2490
                                        #   Parent Loop BB25_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB25_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB25_344 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB25_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB25_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB25_348
.LBB25_347:                             # %if.else2518
                                        #   in Loop: Header=BB25_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB25_348:                             # %if.end2536
                                        #   in Loop: Header=BB25_344 Depth=2
	jmp	.LBB25_349
.LBB25_349:                             # %for.inc2537
                                        #   in Loop: Header=BB25_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_344
.LBB25_350:                             # %for.end2539
                                        #   in Loop: Header=BB25_342 Depth=1
	jmp	.LBB25_351
.LBB25_351:                             # %for.inc2540
                                        #   in Loop: Header=BB25_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_342
.LBB25_352:                             # %for.end2542
	jmp	.LBB25_353
.LBB25_353:                             # %if.end2543
	movl	-132(%rbp), %ebx
	cmpl	$1657086008, -380(%rbp) # imm = 0x62C52038
	jne	.LBB25_355
.LBB25_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_354
.Lfunc_end25:
	.size	dct_chroma.16, .Lfunc_end25-dct_chroma.16
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.17        # -- Begin function dct_chroma_DC.17
	.p2align	4, 0x90
	.type	dct_chroma_DC.17,@function
dct_chroma_DC.17:                       # @dct_chroma_DC.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$271519452, -44(%rbp)   # imm = 0x102F0EDC
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
.LBB26_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -16(%rbp)
	jge	.LBB26_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB26_1 Depth=1
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB26_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$1, %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB26_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$1, %eax
	jmp	.LBB26_6
.LBB26_5:                               # %cond.false
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	-24(%rbp), %eax
.LBB26_6:                               # %cond.end
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	%eax, -24(%rbp)
	movl	-36(%rbp), %edi
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-20(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	$-1, -20(%rbp)
.LBB26_7:                               # %if.end
                                        #   in Loop: Header=BB26_1 Depth=1
	jmp	.LBB26_8
.LBB26_8:                               # %for.inc
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_1
.LBB26_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-24(%rbp), %ebx
	cmpl	$271519452, -44(%rbp)   # imm = 0x102F0EDC
	jne	.LBB26_11
.LBB26_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_10
.Lfunc_end26:
	.size	dct_chroma_DC.17, .Lfunc_end26-dct_chroma_DC.17
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.18 # -- Begin function intrapred_luma_16x16.18
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.18,@function
intrapred_luma_16x16.18:                # @intrapred_luma_16x16.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$1672454107, -92(%rbp)  # imm = 0x63AF9FDB
	movl	$0, -28(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -60(%rbp)
	movl	$0, -4(%rbp)
.LBB27_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB27_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	-60(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_1
.LBB27_4:                               # %for.end
	movl	-60(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB27_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB27_20
.LBB27_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB27_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB27_9
.LBB27_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB27_9
.LBB27_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB27_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB27_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB27_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB27_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB27_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB27_14
.LBB27_13:                              # %cond.false23
                                        #   in Loop: Header=BB27_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB27_14
.LBB27_14:                              # %cond.end24
                                        #   in Loop: Header=BB27_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB27_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_10
.LBB27_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB27_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB27_19
.LBB27_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB27_19
.LBB27_19:                              # %cond.end39
	movl	%eax, -64(%rbp)
.LBB27_20:                              # %if.end
	movl	$0, -40(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB27_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB27_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB27_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB27_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB27_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB27_24:                              # %if.end51
                                        #   in Loop: Header=BB27_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB27_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB27_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB27_26:                              # %if.end68
                                        #   in Loop: Header=BB27_21 Depth=1
	jmp	.LBB27_27
.LBB27_27:                              # %for.inc69
                                        #   in Loop: Header=BB27_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_21
.LBB27_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB27_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB27_31
# %bb.30:                               # %if.then74
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB27_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB27_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB27_34
# %bb.33:                               # %if.then81
	movl	-40(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB27_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB27_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB27_37
# %bb.36:                               # %if.then88
	movl	-52(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB27_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB27_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB27_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -28(%rbp)
.LBB27_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB27_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB27_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB27_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB27_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB27_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB27_44:                              # %if.end114
                                        #   in Loop: Header=BB27_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB27_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB27_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB27_46:                              # %if.end133
                                        #   in Loop: Header=BB27_41 Depth=1
	jmp	.LBB27_47
.LBB27_47:                              # %for.inc134
                                        #   in Loop: Header=BB27_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_41
.LBB27_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB27_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB27_49 Depth=1
	movl	$0, -4(%rbp)
.LBB27_51:                              # %for.cond141
                                        #   Parent Loop BB27_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB27_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB27_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_51
.LBB27_54:                              # %for.end173
                                        #   in Loop: Header=BB27_49 Depth=1
	jmp	.LBB27_55
.LBB27_55:                              # %for.inc174
                                        #   in Loop: Header=BB27_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_49
.LBB27_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB27_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB27_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -64(%rbp)
	jne	.LBB27_60
.LBB27_59:                              # %if.then181
	jmp	.LBB27_85
.LBB27_60:                              # %if.end182
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB27_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB27_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB27_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB27_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB27_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB27_65
.LBB27_64:                              # %if.else210
                                        #   in Loop: Header=BB27_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB27_65:                              # %if.end232
                                        #   in Loop: Header=BB27_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB27_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_61
.LBB27_67:                              # %for.end264
	imull	$5, -32(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -44(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -8(%rbp)
.LBB27_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB27_68 Depth=1
	movl	$0, -4(%rbp)
.LBB27_70:                              # %for.cond293
                                        #   Parent Loop BB27_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB27_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB27_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB27_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_74
.LBB27_73:                              # %cond.false309
                                        #   in Loop: Header=BB27_70 Depth=2
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB27_74:                              # %cond.end318
                                        #   in Loop: Header=BB27_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB27_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB27_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB27_80
.LBB27_76:                              # %cond.false323
                                        #   in Loop: Header=BB27_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB27_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB27_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_79
.LBB27_78:                              # %cond.false337
                                        #   in Loop: Header=BB27_70 Depth=2
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB27_79:                              # %cond.end346
                                        #   in Loop: Header=BB27_70 Depth=2
.LBB27_80:                              # %cond.end348
                                        #   in Loop: Header=BB27_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB27_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_70
.LBB27_82:                              # %for.end359
                                        #   in Loop: Header=BB27_68 Depth=1
	jmp	.LBB27_83
.LBB27_83:                              # %for.inc360
                                        #   in Loop: Header=BB27_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_68
.LBB27_84:                              # %for.end362.loopexit
	jmp	.LBB27_85
.LBB27_85:                              # %for.end362
	cmpl	$1672454107, -92(%rbp)  # imm = 0x63AF9FDB
	jne	.LBB27_87
.LBB27_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_86
.Lfunc_end27:
	.size	intrapred_luma_16x16.18, .Lfunc_end27-intrapred_luma_16x16.18
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.19       # -- Begin function dct_luma_16x16.19
	.p2align	4, 0x90
	.type	dct_luma_16x16.19,@function
dct_luma_16x16.19:                      # @dct_luma_16x16.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$252090707, -132(%rbp)  # imm = 0xF069953
	movl	%edi, -104(%rbp)
	movl	$0, -112(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -152(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -240(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB28_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB28_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-64(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -12(%rbp)
.LBB28_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB28_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB28_3 Depth=1
	movl	$0, -16(%rbp)
.LBB28_5:                               # %for.cond16
                                        #   Parent Loop BB28_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB28_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB28_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB28_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB28_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB28_9
.LBB28_8:                               # %if.else
                                        #   in Loop: Header=BB28_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB28_9:                               # %if.end
                                        #   in Loop: Header=BB28_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB28_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_5
.LBB28_11:                              # %for.end
                                        #   in Loop: Header=BB28_3 Depth=1
	jmp	.LBB28_12
.LBB28_12:                              # %for.inc61
                                        #   in Loop: Header=BB28_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_3
.LBB28_13:                              # %for.end63
	movl	$0, -24(%rbp)
.LBB28_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_18 Depth 2
                                        #       Child Loop BB28_20 Depth 3
                                        #         Child Loop BB28_22 Depth 4
                                        #       Child Loop BB28_28 Depth 3
                                        #         Child Loop BB28_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -24(%rbp)
	jge	.LBB28_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB28_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB28_16:                              # %land.end69
                                        #   in Loop: Header=BB28_14 Depth=1
	testb	$1, %al
	jne	.LBB28_17
	jmp	.LBB28_39
.LBB28_17:                              # %for.body71
                                        #   in Loop: Header=BB28_14 Depth=1
	movl	$0, -20(%rbp)
.LBB28_18:                              # %for.cond72
                                        #   Parent Loop BB28_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_20 Depth 3
                                        #         Child Loop BB28_22 Depth 4
                                        #       Child Loop BB28_28 Depth 3
                                        #         Child Loop BB28_30 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB28_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB28_18 Depth=2
	movl	$0, -12(%rbp)
.LBB28_20:                              # %for.cond76
                                        #   Parent Loop BB28_14 Depth=1
                                        #     Parent Loop BB28_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB28_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB28_20 Depth=3
	movl	$0, -16(%rbp)
.LBB28_22:                              # %for.cond80
                                        #   Parent Loop BB28_14 Depth=1
                                        #     Parent Loop BB28_18 Depth=2
                                        #       Parent Loop BB28_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB28_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB28_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-60(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB28_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_22
.LBB28_25:                              # %for.end125
                                        #   in Loop: Header=BB28_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB28_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_20
.LBB28_27:                              # %for.end169
                                        #   in Loop: Header=BB28_18 Depth=2
	movl	$0, -16(%rbp)
.LBB28_28:                              # %for.cond170
                                        #   Parent Loop BB28_14 Depth=1
                                        #     Parent Loop BB28_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB28_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB28_28 Depth=3
	movl	$0, -12(%rbp)
.LBB28_30:                              # %for.cond174
                                        #   Parent Loop BB28_14 Depth=1
                                        #     Parent Loop BB28_18 Depth=2
                                        #       Parent Loop BB28_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB28_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB28_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB28_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_30
.LBB28_33:                              # %for.end219
                                        #   in Loop: Header=BB28_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB28_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_28
.LBB28_35:                              # %for.end264
                                        #   in Loop: Header=BB28_18 Depth=2
	jmp	.LBB28_36
.LBB28_36:                              # %for.inc265
                                        #   in Loop: Header=BB28_18 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_18
.LBB28_37:                              # %for.end267
                                        #   in Loop: Header=BB28_14 Depth=1
	jmp	.LBB28_38
.LBB28_38:                              # %for.inc268
                                        #   in Loop: Header=BB28_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB28_14
.LBB28_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB28_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB28_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB28_40 Depth=1
	movl	$0, -16(%rbp)
.LBB28_42:                              # %for.cond275
                                        #   Parent Loop BB28_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB28_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB28_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB28_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_42
.LBB28_45:                              # %for.end291
                                        #   in Loop: Header=BB28_40 Depth=1
	jmp	.LBB28_46
.LBB28_46:                              # %for.inc292
                                        #   in Loop: Header=BB28_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_40
.LBB28_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB28_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB28_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB28_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB28_50:                              # %land.end301
                                        #   in Loop: Header=BB28_48 Depth=1
	testb	$1, %al
	jne	.LBB28_51
	jmp	.LBB28_57
.LBB28_51:                              # %for.body303
                                        #   in Loop: Header=BB28_48 Depth=1
	movl	$0, -16(%rbp)
.LBB28_52:                              # %for.cond304
                                        #   Parent Loop BB28_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB28_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB28_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-60(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB28_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_52
.LBB28_55:                              # %for.end333
                                        #   in Loop: Header=BB28_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB28_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_48
.LBB28_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB28_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB28_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB28_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB28_60:                              # %land.end367
                                        #   in Loop: Header=BB28_58 Depth=1
	testb	$1, %al
	jne	.LBB28_61
	jmp	.LBB28_67
.LBB28_61:                              # %for.body369
                                        #   in Loop: Header=BB28_58 Depth=1
	movl	$0, -12(%rbp)
.LBB28_62:                              # %for.cond370
                                        #   Parent Loop BB28_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB28_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB28_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB28_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_62
.LBB28_65:                              # %for.end399
                                        #   in Loop: Header=BB28_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB28_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_58
.LBB28_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -56(%rbp)
.LBB28_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -56(%rbp)
	jge	.LBB28_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB28_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB28_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB28_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB28_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB28_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB28_73
.LBB28_72:                              # %if.then437
                                        #   in Loop: Header=BB28_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_74
.LBB28_73:                              # %if.else446
                                        #   in Loop: Header=BB28_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB28_74:                              # %if.end455
                                        #   in Loop: Header=BB28_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB28_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB28_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB28_77
.LBB28_76:                              # %if.else463
                                        #   in Loop: Header=BB28_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB28_77:                              # %if.end481
                                        #   in Loop: Header=BB28_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB28_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB28_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB28_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB28_68 Depth=1
	cmpl	$2063, -68(%rbp)        # imm = 0x80F
	jle	.LBB28_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB28_68 Depth=1
	movl	$2063, -68(%rbp)        # imm = 0x80F
.LBB28_81:                              # %if.end492
                                        #   in Loop: Header=BB28_68 Depth=1
	jmp	.LBB28_82
.LBB28_82:                              # %if.end493
                                        #   in Loop: Header=BB28_68 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB28_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB28_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB28_84:                              # %if.end507
                                        #   in Loop: Header=BB28_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB28_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB28_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB28_86:                              # %if.end519
                                        #   in Loop: Header=BB28_68 Depth=1
	jmp	.LBB28_87
.LBB28_87:                              # %for.inc520
                                        #   in Loop: Header=BB28_68 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB28_68
.LBB28_88:                              # %for.end522
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB28_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_93 Depth 2
                                        #     Child Loop BB28_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB28_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB28_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB28_91:                              # %land.end531
                                        #   in Loop: Header=BB28_89 Depth=1
	testb	$1, %al
	jne	.LBB28_92
	jmp	.LBB28_102
.LBB28_92:                              # %for.body533
                                        #   in Loop: Header=BB28_89 Depth=1
	movl	$0, -16(%rbp)
.LBB28_93:                              # %for.cond534
                                        #   Parent Loop BB28_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB28_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB28_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB28_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_93
.LBB28_96:                              # %for.end546
                                        #   in Loop: Header=BB28_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB28_97:                              # %for.cond563
                                        #   Parent Loop BB28_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB28_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB28_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-60(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB28_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_97
.LBB28_100:                             # %for.end588
                                        #   in Loop: Header=BB28_89 Depth=1
	jmp	.LBB28_101
.LBB28_101:                             # %for.inc589
                                        #   in Loop: Header=BB28_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_89
.LBB28_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB28_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_107 Depth 2
                                        #     Child Loop BB28_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB28_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB28_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB28_105:                             # %land.end598
                                        #   in Loop: Header=BB28_103 Depth=1
	testb	$1, %al
	jne	.LBB28_106
	jmp	.LBB28_119
.LBB28_106:                             # %for.body600
                                        #   in Loop: Header=BB28_103 Depth=1
	movl	$0, -12(%rbp)
.LBB28_107:                             # %for.cond601
                                        #   Parent Loop BB28_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB28_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB28_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB28_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_107
.LBB28_110:                             # %for.end613
                                        #   in Loop: Header=BB28_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB28_111:                             # %for.cond630
                                        #   Parent Loop BB28_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB28_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB28_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -64(%rbp)
	jge	.LBB28_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB28_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-64(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-64(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB28_115
.LBB28_114:                             # %if.else680
                                        #   in Loop: Header=BB28_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB28_115:                             # %if.end717
                                        #   in Loop: Header=BB28_111 Depth=2
	jmp	.LBB28_116
.LBB28_116:                             # %for.inc718
                                        #   in Loop: Header=BB28_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_111
.LBB28_117:                             # %for.end720
                                        #   in Loop: Header=BB28_103 Depth=1
	jmp	.LBB28_118
.LBB28_118:                             # %for.inc721
                                        #   in Loop: Header=BB28_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_103
.LBB28_119:                             # %for.end723
	movl	$0, -24(%rbp)
.LBB28_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_122 Depth 2
                                        #       Child Loop BB28_124 Depth 3
                                        #       Child Loop BB28_143 Depth 3
                                        #         Child Loop BB28_147 Depth 4
                                        #         Child Loop BB28_151 Depth 4
                                        #       Child Loop BB28_157 Depth 3
                                        #         Child Loop BB28_161 Depth 4
                                        #         Child Loop BB28_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB28_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB28_120 Depth=1
	movl	$0, -20(%rbp)
.LBB28_122:                             # %for.cond728
                                        #   Parent Loop BB28_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_124 Depth 3
                                        #       Child Loop BB28_143 Depth 3
                                        #         Child Loop BB28_147 Depth 4
                                        #         Child Loop BB28_151 Depth 4
                                        #       Child Loop BB28_157 Depth 3
                                        #         Child Loop BB28_161 Depth 4
                                        #         Child Loop BB28_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB28_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB28_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -108(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -116(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -232(%rbp)
	movl	$1, -56(%rbp)
.LBB28_124:                             # %for.cond751
                                        #   Parent Loop BB28_120 Depth=1
                                        #     Parent Loop BB28_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -56(%rbp)
	jge	.LBB28_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB28_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB28_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB28_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB28_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB28_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB28_129
.LBB28_128:                             # %if.then762
                                        #   in Loop: Header=BB28_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_130
.LBB28_129:                             # %if.else771
                                        #   in Loop: Header=BB28_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB28_130:                             # %if.end780
                                        #   in Loop: Header=BB28_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB28_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB28_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB28_133
.LBB28_132:                             # %if.else793
                                        #   in Loop: Header=BB28_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB28_133:                             # %if.end818
                                        #   in Loop: Header=BB28_124 Depth=3
	cmpl	$0, -68(%rbp)
	je	.LBB28_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB28_124 Depth=3
	movl	$15, -112(%rbp)
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB28_135:                             # %if.end836
                                        #   in Loop: Header=BB28_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB28_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB28_124 Depth=3
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -68(%rbp)
	cmpl	$4, -64(%rbp)
	jge	.LBB28_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB28_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB28_139
.LBB28_138:                             # %if.else871
                                        #   in Loop: Header=BB28_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-64(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB28_139:                             # %if.end889
                                        #   in Loop: Header=BB28_124 Depth=3
	jmp	.LBB28_140
.LBB28_140:                             # %if.end890
                                        #   in Loop: Header=BB28_124 Depth=3
	jmp	.LBB28_141
.LBB28_141:                             # %for.inc891
                                        #   in Loop: Header=BB28_124 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB28_124
.LBB28_142:                             # %for.end893
                                        #   in Loop: Header=BB28_122 Depth=2
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB28_143:                             # %for.cond896
                                        #   Parent Loop BB28_120 Depth=1
                                        #     Parent Loop BB28_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_147 Depth 4
                                        #         Child Loop BB28_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB28_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB28_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB28_145:                             # %land.end902
                                        #   in Loop: Header=BB28_143 Depth=3
	testb	$1, %al
	jne	.LBB28_146
	jmp	.LBB28_156
.LBB28_146:                             # %for.body904
                                        #   in Loop: Header=BB28_143 Depth=3
	movl	$0, -16(%rbp)
.LBB28_147:                             # %for.cond905
                                        #   Parent Loop BB28_120 Depth=1
                                        #     Parent Loop BB28_122 Depth=2
                                        #       Parent Loop BB28_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB28_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB28_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB28_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_147
.LBB28_150:                             # %for.end921
                                        #   in Loop: Header=BB28_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB28_151:                             # %for.cond940
                                        #   Parent Loop BB28_120 Depth=1
                                        #     Parent Loop BB28_122 Depth=2
                                        #       Parent Loop BB28_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB28_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB28_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-60(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB28_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_151
.LBB28_154:                             # %for.end973
                                        #   in Loop: Header=BB28_143 Depth=3
	jmp	.LBB28_155
.LBB28_155:                             # %for.inc974
                                        #   in Loop: Header=BB28_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_143
.LBB28_156:                             # %for.end976
                                        #   in Loop: Header=BB28_122 Depth=2
	movl	$0, -16(%rbp)
.LBB28_157:                             # %for.cond977
                                        #   Parent Loop BB28_120 Depth=1
                                        #     Parent Loop BB28_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_161 Depth 4
                                        #         Child Loop BB28_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB28_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB28_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB28_159:                             # %land.end983
                                        #   in Loop: Header=BB28_157 Depth=3
	testb	$1, %al
	jne	.LBB28_160
	jmp	.LBB28_170
.LBB28_160:                             # %for.body985
                                        #   in Loop: Header=BB28_157 Depth=3
	movl	$0, -12(%rbp)
.LBB28_161:                             # %for.cond986
                                        #   Parent Loop BB28_120 Depth=1
                                        #     Parent Loop BB28_122 Depth=2
                                        #       Parent Loop BB28_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB28_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB28_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB28_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_161
.LBB28_164:                             # %for.end1002
                                        #   in Loop: Header=BB28_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB28_165:                             # %for.cond1021
                                        #   Parent Loop BB28_120 Depth=1
                                        #     Parent Loop BB28_122 Depth=2
                                        #       Parent Loop BB28_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB28_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB28_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB28_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_165
.LBB28_168:                             # %for.end1054
                                        #   in Loop: Header=BB28_157 Depth=3
	jmp	.LBB28_169
.LBB28_169:                             # %for.inc1055
                                        #   in Loop: Header=BB28_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_157
.LBB28_170:                             # %for.end1057
                                        #   in Loop: Header=BB28_122 Depth=2
	jmp	.LBB28_171
.LBB28_171:                             # %for.inc1058
                                        #   in Loop: Header=BB28_122 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_122
.LBB28_172:                             # %for.end1060
                                        #   in Loop: Header=BB28_120 Depth=1
	jmp	.LBB28_173
.LBB28_173:                             # %for.inc1061
                                        #   in Loop: Header=BB28_120 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB28_120
.LBB28_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB28_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB28_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB28_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB28_176 Depth=1
	movl	$0, -16(%rbp)
.LBB28_178:                             # %for.cond1071
                                        #   Parent Loop BB28_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB28_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB28_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB28_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_178
.LBB28_181:                             # %for.end1093
                                        #   in Loop: Header=BB28_176 Depth=1
	jmp	.LBB28_182
.LBB28_182:                             # %for.inc1094
                                        #   in Loop: Header=BB28_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_176
.LBB28_183:                             # %for.end1096
	jmp	.LBB28_196
.LBB28_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB28_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB28_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB28_185 Depth=1
	movl	$0, -16(%rbp)
.LBB28_187:                             # %for.cond1102
                                        #   Parent Loop BB28_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB28_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB28_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB28_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB28_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB28_191
.LBB28_190:                             # %if.else1125
                                        #   in Loop: Header=BB28_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB28_191:                             # %if.end1145
                                        #   in Loop: Header=BB28_187 Depth=2
	jmp	.LBB28_192
.LBB28_192:                             # %for.inc1146
                                        #   in Loop: Header=BB28_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_187
.LBB28_193:                             # %for.end1148
                                        #   in Loop: Header=BB28_185 Depth=1
	jmp	.LBB28_194
.LBB28_194:                             # %for.inc1149
                                        #   in Loop: Header=BB28_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_185
.LBB28_195:                             # %for.end1151
	jmp	.LBB28_196
.LBB28_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB28_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB28_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB28_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB28_198 Depth=1
	movl	$0, -16(%rbp)
.LBB28_200:                             # %for.cond1160
                                        #   Parent Loop BB28_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB28_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB28_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB28_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB28_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB28_213
.LBB28_203:                             # %if.else1186
                                        #   in Loop: Header=BB28_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB28_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB28_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB28_206
.LBB28_205:                             # %cond.false
                                        #   in Loop: Header=BB28_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB28_206:                             # %cond.end
                                        #   in Loop: Header=BB28_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB28_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB28_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB28_212
.LBB28_208:                             # %cond.false1229
                                        #   in Loop: Header=BB28_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB28_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB28_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB28_211
.LBB28_210:                             # %cond.false1250
                                        #   in Loop: Header=BB28_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB28_211:                             # %cond.end1268
                                        #   in Loop: Header=BB28_200 Depth=2
.LBB28_212:                             # %cond.end1270
                                        #   in Loop: Header=BB28_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB28_213:                             # %if.end1282
                                        #   in Loop: Header=BB28_200 Depth=2
	jmp	.LBB28_214
.LBB28_214:                             # %for.inc1283
                                        #   in Loop: Header=BB28_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_200
.LBB28_215:                             # %for.end1285
                                        #   in Loop: Header=BB28_198 Depth=1
	jmp	.LBB28_216
.LBB28_216:                             # %for.inc1286
                                        #   in Loop: Header=BB28_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_198
.LBB28_217:                             # %for.end1288
	jmp	.LBB28_218
.LBB28_218:                             # %if.end1289
	movl	-112(%rbp), %ebx
	cmpl	$252090707, -132(%rbp)  # imm = 0xF069953
	jne	.LBB28_220
.LBB28_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_219
.Lfunc_end28:
	.size	dct_luma_16x16.19, .Lfunc_end28-dct_luma_16x16.19
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.20 # -- Begin function intrapred_luma_16x16.20
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.20,@function
intrapred_luma_16x16.20:                # @intrapred_luma_16x16.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$1855866066, -92(%rbp)  # imm = 0x6E9E44D2
	movl	$0, -28(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -60(%rbp)
	movl	$0, -4(%rbp)
.LBB29_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB29_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	-60(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_1
.LBB29_4:                               # %for.end
	movl	-60(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB29_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB29_20
.LBB29_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB29_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB29_9
.LBB29_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB29_9
.LBB29_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB29_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB29_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB29_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB29_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB29_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB29_14
.LBB29_13:                              # %cond.false23
                                        #   in Loop: Header=BB29_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB29_14
.LBB29_14:                              # %cond.end24
                                        #   in Loop: Header=BB29_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB29_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_10
.LBB29_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB29_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB29_19
.LBB29_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB29_19
.LBB29_19:                              # %cond.end39
	movl	%eax, -64(%rbp)
.LBB29_20:                              # %if.end
	movl	$0, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB29_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB29_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB29_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB29_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB29_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB29_24:                              # %if.end51
                                        #   in Loop: Header=BB29_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB29_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB29_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB29_26:                              # %if.end68
                                        #   in Loop: Header=BB29_21 Depth=1
	jmp	.LBB29_27
.LBB29_27:                              # %for.inc69
                                        #   in Loop: Header=BB29_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_21
.LBB29_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB29_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB29_31
# %bb.30:                               # %if.then74
	movl	-40(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB29_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB29_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB29_34
# %bb.33:                               # %if.then81
	movl	-44(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB29_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB29_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB29_37
# %bb.36:                               # %if.then88
	movl	-40(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB29_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB29_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB29_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -28(%rbp)
.LBB29_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB29_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB29_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB29_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB29_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB29_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB29_44:                              # %if.end114
                                        #   in Loop: Header=BB29_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB29_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB29_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB29_46:                              # %if.end133
                                        #   in Loop: Header=BB29_41 Depth=1
	jmp	.LBB29_47
.LBB29_47:                              # %for.inc134
                                        #   in Loop: Header=BB29_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_41
.LBB29_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB29_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB29_49 Depth=1
	movl	$0, -4(%rbp)
.LBB29_51:                              # %for.cond141
                                        #   Parent Loop BB29_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB29_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB29_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_51
.LBB29_54:                              # %for.end173
                                        #   in Loop: Header=BB29_49 Depth=1
	jmp	.LBB29_55
.LBB29_55:                              # %for.inc174
                                        #   in Loop: Header=BB29_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_49
.LBB29_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB29_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB29_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -64(%rbp)
	jne	.LBB29_60
.LBB29_59:                              # %if.then181
	jmp	.LBB29_85
.LBB29_60:                              # %if.end182
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB29_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB29_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB29_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB29_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB29_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB29_65
.LBB29_64:                              # %if.else210
                                        #   in Loop: Header=BB29_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB29_65:                              # %if.end232
                                        #   in Loop: Header=BB29_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB29_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_61
.LBB29_67:                              # %for.end264
	imull	$5, -32(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -52(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -8(%rbp)
.LBB29_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB29_68 Depth=1
	movl	$0, -4(%rbp)
.LBB29_70:                              # %for.cond293
                                        #   Parent Loop BB29_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB29_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB29_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB29_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB29_74
.LBB29_73:                              # %cond.false309
                                        #   in Loop: Header=BB29_70 Depth=2
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB29_74:                              # %cond.end318
                                        #   in Loop: Header=BB29_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB29_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB29_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB29_80
.LBB29_76:                              # %cond.false323
                                        #   in Loop: Header=BB29_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB29_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB29_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB29_79
.LBB29_78:                              # %cond.false337
                                        #   in Loop: Header=BB29_70 Depth=2
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB29_79:                              # %cond.end346
                                        #   in Loop: Header=BB29_70 Depth=2
.LBB29_80:                              # %cond.end348
                                        #   in Loop: Header=BB29_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB29_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_70
.LBB29_82:                              # %for.end359
                                        #   in Loop: Header=BB29_68 Depth=1
	jmp	.LBB29_83
.LBB29_83:                              # %for.inc360
                                        #   in Loop: Header=BB29_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_68
.LBB29_84:                              # %for.end362.loopexit
	jmp	.LBB29_85
.LBB29_85:                              # %for.end362
	cmpl	$1855866066, -92(%rbp)  # imm = 0x6E9E44D2
	jne	.LBB29_87
.LBB29_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_86
.Lfunc_end29:
	.size	intrapred_luma_16x16.20, .Lfunc_end29-intrapred_luma_16x16.20
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.21
.LCPI30_0:
	.quad	4616189618054758400     # double 4
.LCPI30_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI30_2:
	.quad	4611686018427387904     # double 2
.LCPI30_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.21
	.p2align	4, 0x90
	.type	dct_luma_sp.21,@function
dct_luma_sp.21:                         # @dct_luma_sp.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI30_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI30_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$8386917, -216(%rbp)    # imm = 0x7FF965
	movl	%edi, -128(%rbp)
	movl	%esi, -124(%rbp)
	movq	%rdx, -240(%rbp)
	movl	-128(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -204(%rbp)
	movl	-124(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -192(%rbp)
	movl	-192(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-204(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -184(%rbp)
	movl	-192(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-204(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -180(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-184(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-180(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-184(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-180(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -160(%rbp)
	movq	-160(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI30_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI30_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -224(%rbp)
	movq	-160(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -132(%rbp)
	movq	-160(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -104(%rbp)
	movl	-132(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -144(%rbp)
	movq	-160(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -196(%rbp)
	movq	-160(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -140(%rbp)
	movl	-196(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -200(%rbp)
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -208(%rbp)
	movl	$0, -12(%rbp)
.LBB30_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB30_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$0, -16(%rbp)
.LBB30_3:                               # %for.cond38
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB30_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB30_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-124(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-124(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB30_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_3
.LBB30_6:                               # %for.end
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_7
.LBB30_7:                               # %for.inc66
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_1
.LBB30_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB30_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB30_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB30_9 Depth=1
	movl	$0, -16(%rbp)
.LBB30_11:                              # %for.cond73
                                        #   Parent Loop BB30_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB30_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB30_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB30_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_11
.LBB30_14:                              # %for.end106
                                        #   in Loop: Header=BB30_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB30_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_9
.LBB30_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB30_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB30_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB30_17 Depth=1
	movl	$0, -12(%rbp)
.LBB30_19:                              # %for.cond144
                                        #   Parent Loop BB30_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB30_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB30_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB30_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_19
.LBB30_22:                              # %for.end177
                                        #   in Loop: Header=BB30_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB30_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_17
.LBB30_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB30_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB30_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB30_25 Depth=1
	movl	$0, -16(%rbp)
.LBB30_27:                              # %for.cond215
                                        #   Parent Loop BB30_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB30_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB30_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB30_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_27
.LBB30_30:                              # %for.end244
                                        #   in Loop: Header=BB30_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB30_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_25
.LBB30_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB30_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB30_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB30_33 Depth=1
	movl	$0, -12(%rbp)
.LBB30_35:                              # %for.cond278
                                        #   Parent Loop BB30_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB30_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB30_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB30_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_35
.LBB30_38:                              # %for.end307
                                        #   in Loop: Header=BB30_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB30_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_33
.LBB30_40:                              # %for.end336
	movl	$0, -188(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -112(%rbp)
	movl	$0, -68(%rbp)
.LBB30_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -68(%rbp)
	jge	.LBB30_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB30_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB30_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB30_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB30_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB30_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB30_46
.LBB30_45:                              # %if.then
                                        #   in Loop: Header=BB30_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_47
.LBB30_46:                              # %if.else
                                        #   in Loop: Header=BB30_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB30_47:                              # %if.end
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -108(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-140(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-208(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-140(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-200(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -136(%rbp)
	movl	-136(%rbp), %edi
	callq	abs
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-200(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-56(%rbp), %eax
	je	.LBB30_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB30_41 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB30_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB30_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB30_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB30_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-24(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-56(%rbp), %edi
	movl	-136(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	movl	-56(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-168(%rbp), %xmm0
	jne	.LBB30_55
	jp	.LBB30_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	-24(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-56(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB30_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB30_54
.LBB30_53:                              # %cond.false
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	-56(%rbp), %eax
.LBB30_54:                              # %cond.end
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	%eax, -60(%rbp)
	jmp	.LBB30_59
.LBB30_55:                              # %if.else500
                                        #   in Loop: Header=BB30_41 Depth=1
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-168(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB30_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB30_58
.LBB30_57:                              # %if.else504
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB30_58:                              # %if.end505
                                        #   in Loop: Header=BB30_41 Depth=1
	jmp	.LBB30_59
.LBB30_59:                              # %if.end506
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB30_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	-100(%rbp), %eax
	jmp	.LBB30_62
.LBB30_61:                              # %cond.false510
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	-136(%rbp), %eax
.LBB30_62:                              # %cond.end511
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	%eax, -116(%rbp)
	jmp	.LBB30_73
.LBB30_63:                              # %if.else513
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	-24(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.LBB30_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB30_72
.LBB30_65:                              # %if.else517
                                        #   in Loop: Header=BB30_41 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB30_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB30_68
.LBB30_67:                              # %cond.false521
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	-56(%rbp), %eax
.LBB30_68:                              # %cond.end522
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	%eax, -60(%rbp)
	cmpl	$0, -24(%rbp)
	jne	.LBB30_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	-100(%rbp), %eax
	jmp	.LBB30_71
.LBB30_70:                              # %cond.false527
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	-136(%rbp), %eax
.LBB30_71:                              # %cond.end528
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	%eax, -116(%rbp)
.LBB30_72:                              # %if.end530
                                        #   in Loop: Header=BB30_41 Depth=1
	jmp	.LBB30_73
.LBB30_73:                              # %if.end531
                                        #   in Loop: Header=BB30_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB30_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	$1, -188(%rbp)
	cmpl	$1, -60(%rbp)
	jle	.LBB30_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB30_41 Depth=1
	movq	-240(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB30_77
.LBB30_76:                              # %if.else539
                                        #   in Loop: Header=BB30_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-240(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB30_77:                              # %if.end546
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	-60(%rbp), %edi
	movl	-116(%rbp), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-112(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-112(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	movl	$-1, -64(%rbp)
	movl	-60(%rbp), %edi
	movl	-116(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -108(%rbp)
.LBB30_78:                              # %if.end568
                                        #   in Loop: Header=BB30_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-108(%rbp), %edi
	callq	abs
	movslq	-140(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-208(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-108(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-140(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-196(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB30_41
.LBB30_80:                              # %for.end600
	movq	-232(%rbp), %rax
	movslq	-112(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB30_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_83 Depth 2
                                        #     Child Loop BB30_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB30_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB30_81 Depth=1
	movl	$0, -16(%rbp)
.LBB30_83:                              # %for.cond607
                                        #   Parent Loop BB30_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB30_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB30_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB30_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_83
.LBB30_86:                              # %for.end620
                                        #   in Loop: Header=BB30_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB30_87:                              # %for.cond639
                                        #   Parent Loop BB30_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB30_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB30_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB30_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_87
.LBB30_90:                              # %for.end666
                                        #   in Loop: Header=BB30_81 Depth=1
	jmp	.LBB30_91
.LBB30_91:                              # %for.inc667
                                        #   in Loop: Header=BB30_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_81
.LBB30_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB30_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_95 Depth 2
                                        #     Child Loop BB30_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB30_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB30_93 Depth=1
	movl	$0, -12(%rbp)
.LBB30_95:                              # %for.cond674
                                        #   Parent Loop BB30_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB30_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB30_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB30_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_95
.LBB30_98:                              # %for.end687
                                        #   in Loop: Header=BB30_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB30_99:                              # %for.cond706
                                        #   Parent Loop BB30_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB30_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB30_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB30_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB30_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB30_103
.LBB30_102:                             # %cond.false721
                                        #   in Loop: Header=BB30_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB30_103:                             # %cond.end729
                                        #   in Loop: Header=BB30_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB30_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB30_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_109
.LBB30_105:                             # %cond.false735
                                        #   in Loop: Header=BB30_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB30_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB30_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB30_108
.LBB30_107:                             # %cond.false746
                                        #   in Loop: Header=BB30_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB30_108:                             # %cond.end754
                                        #   in Loop: Header=BB30_99 Depth=2
.LBB30_109:                             # %cond.end756
                                        #   in Loop: Header=BB30_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB30_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB30_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB30_112
.LBB30_111:                             # %cond.false774
                                        #   in Loop: Header=BB30_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB30_112:                             # %cond.end782
                                        #   in Loop: Header=BB30_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB30_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB30_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_118
.LBB30_114:                             # %cond.false788
                                        #   in Loop: Header=BB30_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB30_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB30_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB30_117
.LBB30_116:                             # %cond.false799
                                        #   in Loop: Header=BB30_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB30_117:                             # %cond.end807
                                        #   in Loop: Header=BB30_99 Depth=2
.LBB30_118:                             # %cond.end809
                                        #   in Loop: Header=BB30_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB30_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_99
.LBB30_120:                             # %for.end818
                                        #   in Loop: Header=BB30_93 Depth=1
	jmp	.LBB30_121
.LBB30_121:                             # %for.inc819
                                        #   in Loop: Header=BB30_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_93
.LBB30_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB30_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB30_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB30_123 Depth=1
	movl	$0, -16(%rbp)
.LBB30_125:                             # %for.cond826
                                        #   Parent Loop BB30_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB30_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB30_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-124(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-128(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB30_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_125
.LBB30_128:                             # %for.end846
                                        #   in Loop: Header=BB30_123 Depth=1
	jmp	.LBB30_129
.LBB30_129:                             # %for.inc847
                                        #   in Loop: Header=BB30_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_123
.LBB30_130:                             # %for.end849
	movl	-188(%rbp), %ebx
	cmpl	$8386917, -216(%rbp)    # imm = 0x7FF965
	jne	.LBB30_132
.LBB30_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_131
.Lfunc_end30:
	.size	dct_luma_sp.21, .Lfunc_end30-dct_luma_sp.21
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.22        # -- Begin function dct_chroma_DC.22
	.p2align	4, 0x90
	.type	dct_chroma_DC.22,@function
dct_chroma_DC.22:                       # @dct_chroma_DC.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1972710947, -44(%rbp)  # imm = 0x75952E23
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -28(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB31_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB31_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB31_1 Depth=1
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB31_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$1, %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB31_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$1, %eax
	jmp	.LBB31_6
.LBB31_5:                               # %cond.false
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-20(%rbp), %eax
.LBB31_6:                               # %cond.end
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	%eax, -20(%rbp)
	movl	-36(%rbp), %edi
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-28(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	$-1, -28(%rbp)
.LBB31_7:                               # %if.end
                                        #   in Loop: Header=BB31_1 Depth=1
	jmp	.LBB31_8
.LBB31_8:                               # %for.inc
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_1
.LBB31_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-20(%rbp), %ebx
	cmpl	$1972710947, -44(%rbp)  # imm = 0x75952E23
	jne	.LBB31_11
.LBB31_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_10
.Lfunc_end31:
	.size	dct_chroma_DC.22, .Lfunc_end31-dct_chroma_DC.22
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.23       # -- Begin function dct_luma_16x16.23
	.p2align	4, 0x90
	.type	dct_luma_16x16.23,@function
dct_luma_16x16.23:                      # @dct_luma_16x16.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$465827064, -132(%rbp)  # imm = 0x1BC3F4F8
	movl	%edi, -104(%rbp)
	movl	$0, -116(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -152(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -232(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB32_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB32_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-64(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
.LBB32_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB32_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB32_3 Depth=1
	movl	$0, -16(%rbp)
.LBB32_5:                               # %for.cond16
                                        #   Parent Loop BB32_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB32_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB32_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB32_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB32_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB32_9
.LBB32_8:                               # %if.else
                                        #   in Loop: Header=BB32_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB32_9:                               # %if.end
                                        #   in Loop: Header=BB32_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB32_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_5
.LBB32_11:                              # %for.end
                                        #   in Loop: Header=BB32_3 Depth=1
	jmp	.LBB32_12
.LBB32_12:                              # %for.inc61
                                        #   in Loop: Header=BB32_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_3
.LBB32_13:                              # %for.end63
	movl	$0, -24(%rbp)
.LBB32_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_18 Depth 2
                                        #       Child Loop BB32_20 Depth 3
                                        #         Child Loop BB32_22 Depth 4
                                        #       Child Loop BB32_28 Depth 3
                                        #         Child Loop BB32_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -24(%rbp)
	jge	.LBB32_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB32_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB32_16:                              # %land.end69
                                        #   in Loop: Header=BB32_14 Depth=1
	testb	$1, %al
	jne	.LBB32_17
	jmp	.LBB32_39
.LBB32_17:                              # %for.body71
                                        #   in Loop: Header=BB32_14 Depth=1
	movl	$0, -20(%rbp)
.LBB32_18:                              # %for.cond72
                                        #   Parent Loop BB32_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_20 Depth 3
                                        #         Child Loop BB32_22 Depth 4
                                        #       Child Loop BB32_28 Depth 3
                                        #         Child Loop BB32_30 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB32_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB32_18 Depth=2
	movl	$0, -12(%rbp)
.LBB32_20:                              # %for.cond76
                                        #   Parent Loop BB32_14 Depth=1
                                        #     Parent Loop BB32_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB32_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB32_20 Depth=3
	movl	$0, -16(%rbp)
.LBB32_22:                              # %for.cond80
                                        #   Parent Loop BB32_14 Depth=1
                                        #     Parent Loop BB32_18 Depth=2
                                        #       Parent Loop BB32_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB32_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB32_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB32_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_22
.LBB32_25:                              # %for.end125
                                        #   in Loop: Header=BB32_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB32_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_20
.LBB32_27:                              # %for.end169
                                        #   in Loop: Header=BB32_18 Depth=2
	movl	$0, -16(%rbp)
.LBB32_28:                              # %for.cond170
                                        #   Parent Loop BB32_14 Depth=1
                                        #     Parent Loop BB32_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB32_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB32_28 Depth=3
	movl	$0, -12(%rbp)
.LBB32_30:                              # %for.cond174
                                        #   Parent Loop BB32_14 Depth=1
                                        #     Parent Loop BB32_18 Depth=2
                                        #       Parent Loop BB32_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB32_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB32_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB32_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_30
.LBB32_33:                              # %for.end219
                                        #   in Loop: Header=BB32_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB32_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_28
.LBB32_35:                              # %for.end264
                                        #   in Loop: Header=BB32_18 Depth=2
	jmp	.LBB32_36
.LBB32_36:                              # %for.inc265
                                        #   in Loop: Header=BB32_18 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_18
.LBB32_37:                              # %for.end267
                                        #   in Loop: Header=BB32_14 Depth=1
	jmp	.LBB32_38
.LBB32_38:                              # %for.inc268
                                        #   in Loop: Header=BB32_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_14
.LBB32_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB32_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB32_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB32_40 Depth=1
	movl	$0, -16(%rbp)
.LBB32_42:                              # %for.cond275
                                        #   Parent Loop BB32_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB32_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB32_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB32_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_42
.LBB32_45:                              # %for.end291
                                        #   in Loop: Header=BB32_40 Depth=1
	jmp	.LBB32_46
.LBB32_46:                              # %for.inc292
                                        #   in Loop: Header=BB32_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_40
.LBB32_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB32_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB32_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB32_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB32_50:                              # %land.end301
                                        #   in Loop: Header=BB32_48 Depth=1
	testb	$1, %al
	jne	.LBB32_51
	jmp	.LBB32_57
.LBB32_51:                              # %for.body303
                                        #   in Loop: Header=BB32_48 Depth=1
	movl	$0, -16(%rbp)
.LBB32_52:                              # %for.cond304
                                        #   Parent Loop BB32_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB32_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB32_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB32_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_52
.LBB32_55:                              # %for.end333
                                        #   in Loop: Header=BB32_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB32_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_48
.LBB32_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB32_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB32_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB32_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB32_60:                              # %land.end367
                                        #   in Loop: Header=BB32_58 Depth=1
	testb	$1, %al
	jne	.LBB32_61
	jmp	.LBB32_67
.LBB32_61:                              # %for.body369
                                        #   in Loop: Header=BB32_58 Depth=1
	movl	$0, -12(%rbp)
.LBB32_62:                              # %for.cond370
                                        #   Parent Loop BB32_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB32_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB32_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB32_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_62
.LBB32_65:                              # %for.end399
                                        #   in Loop: Header=BB32_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB32_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_58
.LBB32_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -60(%rbp)
.LBB32_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -60(%rbp)
	jge	.LBB32_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB32_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB32_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB32_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB32_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB32_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB32_73
.LBB32_72:                              # %if.then437
                                        #   in Loop: Header=BB32_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_74
.LBB32_73:                              # %if.else446
                                        #   in Loop: Header=BB32_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB32_74:                              # %if.end455
                                        #   in Loop: Header=BB32_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB32_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB32_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB32_77
.LBB32_76:                              # %if.else463
                                        #   in Loop: Header=BB32_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-108(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB32_77:                              # %if.end481
                                        #   in Loop: Header=BB32_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB32_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB32_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB32_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB32_68 Depth=1
	cmpl	$2063, -68(%rbp)        # imm = 0x80F
	jle	.LBB32_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB32_68 Depth=1
	movl	$2063, -68(%rbp)        # imm = 0x80F
.LBB32_81:                              # %if.end492
                                        #   in Loop: Header=BB32_68 Depth=1
	jmp	.LBB32_82
.LBB32_82:                              # %if.end493
                                        #   in Loop: Header=BB32_68 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB32_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB32_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB32_84:                              # %if.end507
                                        #   in Loop: Header=BB32_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB32_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB32_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB32_86:                              # %if.end519
                                        #   in Loop: Header=BB32_68 Depth=1
	jmp	.LBB32_87
.LBB32_87:                              # %for.inc520
                                        #   in Loop: Header=BB32_68 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB32_68
.LBB32_88:                              # %for.end522
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB32_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_93 Depth 2
                                        #     Child Loop BB32_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB32_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB32_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB32_91:                              # %land.end531
                                        #   in Loop: Header=BB32_89 Depth=1
	testb	$1, %al
	jne	.LBB32_92
	jmp	.LBB32_102
.LBB32_92:                              # %for.body533
                                        #   in Loop: Header=BB32_89 Depth=1
	movl	$0, -16(%rbp)
.LBB32_93:                              # %for.cond534
                                        #   Parent Loop BB32_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB32_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB32_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB32_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_93
.LBB32_96:                              # %for.end546
                                        #   in Loop: Header=BB32_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB32_97:                              # %for.cond563
                                        #   Parent Loop BB32_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB32_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB32_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-56(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB32_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_97
.LBB32_100:                             # %for.end588
                                        #   in Loop: Header=BB32_89 Depth=1
	jmp	.LBB32_101
.LBB32_101:                             # %for.inc589
                                        #   in Loop: Header=BB32_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_89
.LBB32_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB32_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_107 Depth 2
                                        #     Child Loop BB32_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB32_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB32_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB32_105:                             # %land.end598
                                        #   in Loop: Header=BB32_103 Depth=1
	testb	$1, %al
	jne	.LBB32_106
	jmp	.LBB32_119
.LBB32_106:                             # %for.body600
                                        #   in Loop: Header=BB32_103 Depth=1
	movl	$0, -12(%rbp)
.LBB32_107:                             # %for.cond601
                                        #   Parent Loop BB32_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB32_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB32_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB32_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_107
.LBB32_110:                             # %for.end613
                                        #   in Loop: Header=BB32_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB32_111:                             # %for.cond630
                                        #   Parent Loop BB32_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB32_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB32_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -64(%rbp)
	jge	.LBB32_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB32_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-64(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-64(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB32_115
.LBB32_114:                             # %if.else680
                                        #   in Loop: Header=BB32_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB32_115:                             # %if.end717
                                        #   in Loop: Header=BB32_111 Depth=2
	jmp	.LBB32_116
.LBB32_116:                             # %for.inc718
                                        #   in Loop: Header=BB32_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_111
.LBB32_117:                             # %for.end720
                                        #   in Loop: Header=BB32_103 Depth=1
	jmp	.LBB32_118
.LBB32_118:                             # %for.inc721
                                        #   in Loop: Header=BB32_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_103
.LBB32_119:                             # %for.end723
	movl	$0, -24(%rbp)
.LBB32_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_122 Depth 2
                                        #       Child Loop BB32_124 Depth 3
                                        #       Child Loop BB32_143 Depth 3
                                        #         Child Loop BB32_147 Depth 4
                                        #         Child Loop BB32_151 Depth 4
                                        #       Child Loop BB32_157 Depth 3
                                        #         Child Loop BB32_161 Depth 4
                                        #         Child Loop BB32_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB32_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB32_120 Depth=1
	movl	$0, -20(%rbp)
.LBB32_122:                             # %for.cond728
                                        #   Parent Loop BB32_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_124 Depth 3
                                        #       Child Loop BB32_143 Depth 3
                                        #         Child Loop BB32_147 Depth 4
                                        #         Child Loop BB32_151 Depth 4
                                        #       Child Loop BB32_157 Depth 3
                                        #         Child Loop BB32_161 Depth 4
                                        #         Child Loop BB32_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB32_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB32_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -112(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -240(%rbp)
	movl	$1, -60(%rbp)
.LBB32_124:                             # %for.cond751
                                        #   Parent Loop BB32_120 Depth=1
                                        #     Parent Loop BB32_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -60(%rbp)
	jge	.LBB32_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB32_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB32_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB32_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB32_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB32_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB32_129
.LBB32_128:                             # %if.then762
                                        #   in Loop: Header=BB32_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_130
.LBB32_129:                             # %if.else771
                                        #   in Loop: Header=BB32_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB32_130:                             # %if.end780
                                        #   in Loop: Header=BB32_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB32_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB32_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB32_133
.LBB32_132:                             # %if.else793
                                        #   in Loop: Header=BB32_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB32_133:                             # %if.end818
                                        #   in Loop: Header=BB32_124 Depth=3
	cmpl	$0, -68(%rbp)
	je	.LBB32_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB32_124 Depth=3
	movl	$15, -116(%rbp)
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB32_135:                             # %if.end836
                                        #   in Loop: Header=BB32_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB32_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB32_124 Depth=3
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -68(%rbp)
	cmpl	$4, -64(%rbp)
	jge	.LBB32_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB32_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB32_139
.LBB32_138:                             # %if.else871
                                        #   in Loop: Header=BB32_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-64(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB32_139:                             # %if.end889
                                        #   in Loop: Header=BB32_124 Depth=3
	jmp	.LBB32_140
.LBB32_140:                             # %if.end890
                                        #   in Loop: Header=BB32_124 Depth=3
	jmp	.LBB32_141
.LBB32_141:                             # %for.inc891
                                        #   in Loop: Header=BB32_124 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB32_124
.LBB32_142:                             # %for.end893
                                        #   in Loop: Header=BB32_122 Depth=2
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB32_143:                             # %for.cond896
                                        #   Parent Loop BB32_120 Depth=1
                                        #     Parent Loop BB32_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_147 Depth 4
                                        #         Child Loop BB32_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB32_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB32_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB32_145:                             # %land.end902
                                        #   in Loop: Header=BB32_143 Depth=3
	testb	$1, %al
	jne	.LBB32_146
	jmp	.LBB32_156
.LBB32_146:                             # %for.body904
                                        #   in Loop: Header=BB32_143 Depth=3
	movl	$0, -16(%rbp)
.LBB32_147:                             # %for.cond905
                                        #   Parent Loop BB32_120 Depth=1
                                        #     Parent Loop BB32_122 Depth=2
                                        #       Parent Loop BB32_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB32_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB32_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB32_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_147
.LBB32_150:                             # %for.end921
                                        #   in Loop: Header=BB32_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB32_151:                             # %for.cond940
                                        #   Parent Loop BB32_120 Depth=1
                                        #     Parent Loop BB32_122 Depth=2
                                        #       Parent Loop BB32_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB32_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB32_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-56(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB32_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_151
.LBB32_154:                             # %for.end973
                                        #   in Loop: Header=BB32_143 Depth=3
	jmp	.LBB32_155
.LBB32_155:                             # %for.inc974
                                        #   in Loop: Header=BB32_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_143
.LBB32_156:                             # %for.end976
                                        #   in Loop: Header=BB32_122 Depth=2
	movl	$0, -16(%rbp)
.LBB32_157:                             # %for.cond977
                                        #   Parent Loop BB32_120 Depth=1
                                        #     Parent Loop BB32_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_161 Depth 4
                                        #         Child Loop BB32_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB32_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB32_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB32_159:                             # %land.end983
                                        #   in Loop: Header=BB32_157 Depth=3
	testb	$1, %al
	jne	.LBB32_160
	jmp	.LBB32_170
.LBB32_160:                             # %for.body985
                                        #   in Loop: Header=BB32_157 Depth=3
	movl	$0, -12(%rbp)
.LBB32_161:                             # %for.cond986
                                        #   Parent Loop BB32_120 Depth=1
                                        #     Parent Loop BB32_122 Depth=2
                                        #       Parent Loop BB32_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB32_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB32_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB32_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_161
.LBB32_164:                             # %for.end1002
                                        #   in Loop: Header=BB32_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB32_165:                             # %for.cond1021
                                        #   Parent Loop BB32_120 Depth=1
                                        #     Parent Loop BB32_122 Depth=2
                                        #       Parent Loop BB32_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB32_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB32_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB32_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_165
.LBB32_168:                             # %for.end1054
                                        #   in Loop: Header=BB32_157 Depth=3
	jmp	.LBB32_169
.LBB32_169:                             # %for.inc1055
                                        #   in Loop: Header=BB32_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_157
.LBB32_170:                             # %for.end1057
                                        #   in Loop: Header=BB32_122 Depth=2
	jmp	.LBB32_171
.LBB32_171:                             # %for.inc1058
                                        #   in Loop: Header=BB32_122 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_122
.LBB32_172:                             # %for.end1060
                                        #   in Loop: Header=BB32_120 Depth=1
	jmp	.LBB32_173
.LBB32_173:                             # %for.inc1061
                                        #   in Loop: Header=BB32_120 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_120
.LBB32_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB32_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB32_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB32_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB32_176 Depth=1
	movl	$0, -16(%rbp)
.LBB32_178:                             # %for.cond1071
                                        #   Parent Loop BB32_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB32_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB32_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB32_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_178
.LBB32_181:                             # %for.end1093
                                        #   in Loop: Header=BB32_176 Depth=1
	jmp	.LBB32_182
.LBB32_182:                             # %for.inc1094
                                        #   in Loop: Header=BB32_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_176
.LBB32_183:                             # %for.end1096
	jmp	.LBB32_196
.LBB32_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB32_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB32_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB32_185 Depth=1
	movl	$0, -16(%rbp)
.LBB32_187:                             # %for.cond1102
                                        #   Parent Loop BB32_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB32_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB32_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB32_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB32_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB32_191
.LBB32_190:                             # %if.else1125
                                        #   in Loop: Header=BB32_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB32_191:                             # %if.end1145
                                        #   in Loop: Header=BB32_187 Depth=2
	jmp	.LBB32_192
.LBB32_192:                             # %for.inc1146
                                        #   in Loop: Header=BB32_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_187
.LBB32_193:                             # %for.end1148
                                        #   in Loop: Header=BB32_185 Depth=1
	jmp	.LBB32_194
.LBB32_194:                             # %for.inc1149
                                        #   in Loop: Header=BB32_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_185
.LBB32_195:                             # %for.end1151
	jmp	.LBB32_196
.LBB32_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB32_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB32_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB32_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB32_198 Depth=1
	movl	$0, -16(%rbp)
.LBB32_200:                             # %for.cond1160
                                        #   Parent Loop BB32_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB32_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB32_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB32_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB32_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB32_213
.LBB32_203:                             # %if.else1186
                                        #   in Loop: Header=BB32_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB32_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB32_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB32_206
.LBB32_205:                             # %cond.false
                                        #   in Loop: Header=BB32_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB32_206:                             # %cond.end
                                        #   in Loop: Header=BB32_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB32_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB32_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB32_212
.LBB32_208:                             # %cond.false1229
                                        #   in Loop: Header=BB32_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB32_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB32_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB32_211
.LBB32_210:                             # %cond.false1250
                                        #   in Loop: Header=BB32_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB32_211:                             # %cond.end1268
                                        #   in Loop: Header=BB32_200 Depth=2
.LBB32_212:                             # %cond.end1270
                                        #   in Loop: Header=BB32_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB32_213:                             # %if.end1282
                                        #   in Loop: Header=BB32_200 Depth=2
	jmp	.LBB32_214
.LBB32_214:                             # %for.inc1283
                                        #   in Loop: Header=BB32_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_200
.LBB32_215:                             # %for.end1285
                                        #   in Loop: Header=BB32_198 Depth=1
	jmp	.LBB32_216
.LBB32_216:                             # %for.inc1286
                                        #   in Loop: Header=BB32_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_198
.LBB32_217:                             # %for.end1288
	jmp	.LBB32_218
.LBB32_218:                             # %if.end1289
	movl	-116(%rbp), %ebx
	cmpl	$465827064, -132(%rbp)  # imm = 0x1BC3F4F8
	jne	.LBB32_220
.LBB32_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_219
.Lfunc_end32:
	.size	dct_luma_16x16.23, .Lfunc_end32-dct_luma_16x16.23
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.24        # -- Begin function dct_chroma4x4.24
	.p2align	4, 0x90
	.type	dct_chroma4x4.24,@function
dct_chroma4x4.24:                       # @dct_chroma4x4.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$498711997, -148(%rbp)  # imm = 0x1DB9BDBD
	movl	%edi, -28(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -108(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB33_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB33_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB33_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -84(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB33_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB33_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-28(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -88(%rbp)
	jge	.LBB33_7
# %bb.6:                                # %cond.true
	movl	-88(%rbp), %eax
	jmp	.LBB33_8
.LBB33_7:                               # %cond.false
	movl	-88(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB33_8:                               # %cond.end
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-88(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB33_18
# %bb.9:                                # %if.then
	movl	$0, -16(%rbp)
.LBB33_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_12 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB33_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB33_10 Depth=1
	movl	$0, -12(%rbp)
.LBB33_12:                              # %for.cond31
                                        #   Parent Loop BB33_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB33_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB33_12 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB33_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_12
.LBB33_15:                              # %for.end
                                        #   in Loop: Header=BB33_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB33_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_10
.LBB33_17:                              # %for.end92
	jmp	.LBB33_18
.LBB33_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB33_28
# %bb.19:                               # %if.then94
	movl	$0, -12(%rbp)
.LBB33_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_22 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB33_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB33_20 Depth=1
	movl	$0, -16(%rbp)
.LBB33_22:                              # %for.cond99
                                        #   Parent Loop BB33_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB33_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB33_22 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB33_22 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_22
.LBB33_25:                              # %for.end132
                                        #   in Loop: Header=BB33_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB33_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_20
.LBB33_27:                              # %for.end165
	jmp	.LBB33_28
.LBB33_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB33_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB33_34
.LBB33_30:                              # %if.else
	cmpl	$1, -84(%rbp)
	jne	.LBB33_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB33_33
.LBB33_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB33_33:                              # %if.end213
	jmp	.LBB33_34
.LBB33_34:                              # %if.end214
	movl	-28(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-80(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-80(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB33_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB33_46
.LBB33_36:                              # %if.else245
	cmpl	$4, -24(%rbp)
	jge	.LBB33_41
# %bb.37:                               # %if.then248
	cmpl	$1, -84(%rbp)
	jne	.LBB33_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB33_40
.LBB33_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB33_40:                              # %if.end290
	jmp	.LBB33_45
.LBB33_41:                              # %if.else291
	cmpl	$1, -84(%rbp)
	jne	.LBB33_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB33_44
.LBB33_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB33_44:                              # %if.end328
	jmp	.LBB33_45
.LBB33_45:                              # %if.end329
	jmp	.LBB33_46
.LBB33_46:                              # %if.end330
	movl	$1, -96(%rbp)
.LBB33_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -96(%rbp)
	jge	.LBB33_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB33_47 Depth=1
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -76(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB33_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB33_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB33_54
.LBB33_50:                              # %if.else352
                                        #   in Loop: Header=BB33_47 Depth=1
	cmpl	$1, -84(%rbp)
	jne	.LBB33_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB33_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB33_53
.LBB33_52:                              # %if.else381
                                        #   in Loop: Header=BB33_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB33_53:                              # %if.end407
                                        #   in Loop: Header=BB33_47 Depth=1
	jmp	.LBB33_54
.LBB33_54:                              # %if.end408
                                        #   in Loop: Header=BB33_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB33_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB33_47 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB33_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB33_47 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB33_58
.LBB33_57:                              # %if.then415
                                        #   in Loop: Header=BB33_47 Depth=1
	movl	$1, -132(%rbp)
.LBB33_58:                              # %if.end416
                                        #   in Loop: Header=BB33_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -100(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB33_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB33_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB33_70
.LBB33_60:                              # %if.else436
                                        #   in Loop: Header=BB33_47 Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB33_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB33_47 Depth=1
	cmpl	$1, -84(%rbp)
	jne	.LBB33_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB33_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB33_64
.LBB33_63:                              # %if.else457
                                        #   in Loop: Header=BB33_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -76(%rbp)
.LBB33_64:                              # %if.end472
                                        #   in Loop: Header=BB33_47 Depth=1
	jmp	.LBB33_69
.LBB33_65:                              # %if.else473
                                        #   in Loop: Header=BB33_47 Depth=1
	cmpl	$1, -84(%rbp)
	jne	.LBB33_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB33_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB33_68
.LBB33_67:                              # %if.else488
                                        #   in Loop: Header=BB33_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
.LBB33_68:                              # %if.end500
                                        #   in Loop: Header=BB33_47 Depth=1
	jmp	.LBB33_69
.LBB33_69:                              # %if.end501
                                        #   in Loop: Header=BB33_47 Depth=1
	jmp	.LBB33_70
.LBB33_70:                              # %if.end502
                                        #   in Loop: Header=BB33_47 Depth=1
	jmp	.LBB33_71
.LBB33_71:                              # %if.end503
                                        #   in Loop: Header=BB33_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB33_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB33_47 Depth=1
	movl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB33_73:                              # %if.end511
                                        #   in Loop: Header=BB33_47 Depth=1
	jmp	.LBB33_74
.LBB33_74:                              # %for.inc512
                                        #   in Loop: Header=BB33_47 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB33_47
.LBB33_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB33_89
# %bb.76:                               # %if.then518
	movl	$0, -16(%rbp)
.LBB33_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_79 Depth 2
                                        #     Child Loop BB33_83 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB33_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB33_77 Depth=1
	movl	$0, -12(%rbp)
.LBB33_79:                              # %for.cond523
                                        #   Parent Loop BB33_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB33_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB33_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB33_79 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_79
.LBB33_82:                              # %for.end536
                                        #   in Loop: Header=BB33_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB33_83:                              # %for.cond555
                                        #   Parent Loop BB33_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB33_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB33_83 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB33_83 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_83
.LBB33_86:                              # %for.end582
                                        #   in Loop: Header=BB33_77 Depth=1
	jmp	.LBB33_87
.LBB33_87:                              # %for.inc583
                                        #   in Loop: Header=BB33_77 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_77
.LBB33_88:                              # %for.end585
	jmp	.LBB33_89
.LBB33_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB33_103
# %bb.90:                               # %if.then588
	movl	$0, -12(%rbp)
.LBB33_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_93 Depth 2
                                        #     Child Loop BB33_97 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB33_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB33_91 Depth=1
	movl	$0, -16(%rbp)
.LBB33_93:                              # %for.cond593
                                        #   Parent Loop BB33_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB33_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB33_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB33_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_93
.LBB33_96:                              # %for.end606
                                        #   in Loop: Header=BB33_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB33_97:                              # %for.cond625
                                        #   Parent Loop BB33_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB33_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB33_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB33_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_97
.LBB33_100:                             # %for.end656
                                        #   in Loop: Header=BB33_91 Depth=1
	jmp	.LBB33_101
.LBB33_101:                             # %for.inc657
                                        #   in Loop: Header=BB33_91 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_91
.LBB33_102:                             # %for.end659
	jmp	.LBB33_103
.LBB33_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$498711997, -148(%rbp)  # imm = 0x1DB9BDBD
	jne	.LBB33_105
.LBB33_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_104
.Lfunc_end33:
	.size	dct_chroma4x4.24, .Lfunc_end33-dct_chroma4x4.24
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.25
.LCPI34_0:
	.quad	4616189618054758400     # double 4
.LCPI34_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI34_2:
	.quad	4611686018427387904     # double 2
.LCPI34_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.25
	.p2align	4, 0x90
	.type	dct_luma_sp.25,@function
dct_luma_sp.25:                         # @dct_luma_sp.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI34_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI34_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1931989210, -212(%rbp) # imm = 0x7327D0DA
	movl	%edi, -140(%rbp)
	movl	%esi, -116(%rbp)
	movq	%rdx, -232(%rbp)
	movl	-140(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -208(%rbp)
	movl	-116(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -204(%rbp)
	movl	-204(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-208(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -184(%rbp)
	movl	-204(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-208(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -196(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-184(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-184(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI34_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI34_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -240(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -136(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -100(%rbp)
	movl	-136(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -148(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -180(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -124(%rbp)
	movl	-180(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -192(%rbp)
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -200(%rbp)
	movl	$0, -12(%rbp)
.LBB34_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB34_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -16(%rbp)
.LBB34_3:                               # %for.cond38
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB34_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB34_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-140(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-140(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB34_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_3
.LBB34_6:                               # %for.end
                                        #   in Loop: Header=BB34_1 Depth=1
	jmp	.LBB34_7
.LBB34_7:                               # %for.inc66
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_1
.LBB34_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB34_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB34_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB34_9 Depth=1
	movl	$0, -16(%rbp)
.LBB34_11:                              # %for.cond73
                                        #   Parent Loop BB34_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB34_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB34_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB34_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_11
.LBB34_14:                              # %for.end106
                                        #   in Loop: Header=BB34_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB34_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_9
.LBB34_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB34_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB34_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB34_17 Depth=1
	movl	$0, -12(%rbp)
.LBB34_19:                              # %for.cond144
                                        #   Parent Loop BB34_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB34_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_19
.LBB34_22:                              # %for.end177
                                        #   in Loop: Header=BB34_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB34_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_17
.LBB34_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB34_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB34_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB34_25 Depth=1
	movl	$0, -16(%rbp)
.LBB34_27:                              # %for.cond215
                                        #   Parent Loop BB34_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB34_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB34_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB34_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_27
.LBB34_30:                              # %for.end244
                                        #   in Loop: Header=BB34_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB34_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_25
.LBB34_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB34_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB34_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB34_33 Depth=1
	movl	$0, -12(%rbp)
.LBB34_35:                              # %for.cond278
                                        #   Parent Loop BB34_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB34_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB34_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB34_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_35
.LBB34_38:                              # %for.end307
                                        #   in Loop: Header=BB34_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB34_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_33
.LBB34_40:                              # %for.end336
	movl	$0, -188(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -64(%rbp)
.LBB34_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -64(%rbp)
	jge	.LBB34_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB34_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB34_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB34_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB34_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB34_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB34_46
.LBB34_45:                              # %if.then
                                        #   in Loop: Header=BB34_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_47
.LBB34_46:                              # %if.else
                                        #   in Loop: Header=BB34_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB34_47:                              # %if.end
                                        #   in Loop: Header=BB34_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -112(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-200(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-192(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-192(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	je	.LBB34_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB34_41 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB34_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB34_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB34_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB34_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-20(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-56(%rbp), %edi
	movl	-128(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-56(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-176(%rbp), %xmm0
	jne	.LBB34_55
	jp	.LBB34_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB34_41 Depth=1
	movl	-20(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-56(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB34_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB34_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB34_54
.LBB34_53:                              # %cond.false
                                        #   in Loop: Header=BB34_41 Depth=1
	movl	-56(%rbp), %eax
.LBB34_54:                              # %cond.end
                                        #   in Loop: Header=BB34_41 Depth=1
	movl	%eax, -60(%rbp)
	jmp	.LBB34_59
.LBB34_55:                              # %if.else500
                                        #   in Loop: Header=BB34_41 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-176(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB34_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB34_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB34_58
.LBB34_57:                              # %if.else504
                                        #   in Loop: Header=BB34_41 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB34_58:                              # %if.end505
                                        #   in Loop: Header=BB34_41 Depth=1
	jmp	.LBB34_59
.LBB34_59:                              # %if.end506
                                        #   in Loop: Header=BB34_41 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jne	.LBB34_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB34_41 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB34_62
.LBB34_61:                              # %cond.false510
                                        #   in Loop: Header=BB34_41 Depth=1
	movl	-128(%rbp), %eax
.LBB34_62:                              # %cond.end511
                                        #   in Loop: Header=BB34_41 Depth=1
	movl	%eax, -132(%rbp)
	jmp	.LBB34_73
.LBB34_63:                              # %if.else513
                                        #   in Loop: Header=BB34_41 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.LBB34_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB34_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -132(%rbp)
	jmp	.LBB34_72
.LBB34_65:                              # %if.else517
                                        #   in Loop: Header=BB34_41 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB34_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB34_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB34_68
.LBB34_67:                              # %cond.false521
                                        #   in Loop: Header=BB34_41 Depth=1
	movl	-56(%rbp), %eax
.LBB34_68:                              # %cond.end522
                                        #   in Loop: Header=BB34_41 Depth=1
	movl	%eax, -60(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB34_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB34_41 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB34_71
.LBB34_70:                              # %cond.false527
                                        #   in Loop: Header=BB34_41 Depth=1
	movl	-128(%rbp), %eax
.LBB34_71:                              # %cond.end528
                                        #   in Loop: Header=BB34_41 Depth=1
	movl	%eax, -132(%rbp)
.LBB34_72:                              # %if.end530
                                        #   in Loop: Header=BB34_41 Depth=1
	jmp	.LBB34_73
.LBB34_73:                              # %if.end531
                                        #   in Loop: Header=BB34_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB34_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB34_41 Depth=1
	movl	$1, -188(%rbp)
	cmpl	$1, -60(%rbp)
	jle	.LBB34_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB34_41 Depth=1
	movq	-232(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB34_77
.LBB34_76:                              # %if.else539
                                        #   in Loop: Header=BB34_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-232(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB34_77:                              # %if.end546
                                        #   in Loop: Header=BB34_41 Depth=1
	movl	-60(%rbp), %edi
	movl	-132(%rbp), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	movl	$-1, -68(%rbp)
	movl	-60(%rbp), %edi
	movl	-132(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -112(%rbp)
.LBB34_78:                              # %if.end568
                                        #   in Loop: Header=BB34_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %edi
	callq	abs
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-200(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-112(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB34_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB34_41
.LBB34_80:                              # %for.end600
	movq	-224(%rbp), %rax
	movslq	-108(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB34_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_83 Depth 2
                                        #     Child Loop BB34_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB34_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB34_81 Depth=1
	movl	$0, -16(%rbp)
.LBB34_83:                              # %for.cond607
                                        #   Parent Loop BB34_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB34_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB34_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB34_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_83
.LBB34_86:                              # %for.end620
                                        #   in Loop: Header=BB34_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB34_87:                              # %for.cond639
                                        #   Parent Loop BB34_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB34_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB34_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB34_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_87
.LBB34_90:                              # %for.end666
                                        #   in Loop: Header=BB34_81 Depth=1
	jmp	.LBB34_91
.LBB34_91:                              # %for.inc667
                                        #   in Loop: Header=BB34_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_81
.LBB34_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB34_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_95 Depth 2
                                        #     Child Loop BB34_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB34_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB34_93 Depth=1
	movl	$0, -12(%rbp)
.LBB34_95:                              # %for.cond674
                                        #   Parent Loop BB34_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB34_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB34_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB34_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_95
.LBB34_98:                              # %for.end687
                                        #   in Loop: Header=BB34_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB34_99:                              # %for.cond706
                                        #   Parent Loop BB34_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB34_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB34_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB34_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB34_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB34_103
.LBB34_102:                             # %cond.false721
                                        #   in Loop: Header=BB34_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB34_103:                             # %cond.end729
                                        #   in Loop: Header=BB34_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB34_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB34_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_109
.LBB34_105:                             # %cond.false735
                                        #   in Loop: Header=BB34_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB34_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB34_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB34_108
.LBB34_107:                             # %cond.false746
                                        #   in Loop: Header=BB34_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB34_108:                             # %cond.end754
                                        #   in Loop: Header=BB34_99 Depth=2
.LBB34_109:                             # %cond.end756
                                        #   in Loop: Header=BB34_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB34_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB34_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB34_112
.LBB34_111:                             # %cond.false774
                                        #   in Loop: Header=BB34_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB34_112:                             # %cond.end782
                                        #   in Loop: Header=BB34_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB34_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB34_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_118
.LBB34_114:                             # %cond.false788
                                        #   in Loop: Header=BB34_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB34_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB34_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB34_117
.LBB34_116:                             # %cond.false799
                                        #   in Loop: Header=BB34_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB34_117:                             # %cond.end807
                                        #   in Loop: Header=BB34_99 Depth=2
.LBB34_118:                             # %cond.end809
                                        #   in Loop: Header=BB34_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB34_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_99
.LBB34_120:                             # %for.end818
                                        #   in Loop: Header=BB34_93 Depth=1
	jmp	.LBB34_121
.LBB34_121:                             # %for.inc819
                                        #   in Loop: Header=BB34_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_93
.LBB34_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB34_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB34_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB34_123 Depth=1
	movl	$0, -16(%rbp)
.LBB34_125:                             # %for.cond826
                                        #   Parent Loop BB34_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB34_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB34_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-116(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-140(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB34_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_125
.LBB34_128:                             # %for.end846
                                        #   in Loop: Header=BB34_123 Depth=1
	jmp	.LBB34_129
.LBB34_129:                             # %for.inc847
                                        #   in Loop: Header=BB34_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_123
.LBB34_130:                             # %for.end849
	movl	-188(%rbp), %ebx
	cmpl	$1931989210, -212(%rbp) # imm = 0x7327D0DA
	jne	.LBB34_132
.LBB34_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_131
.Lfunc_end34:
	.size	dct_luma_sp.25, .Lfunc_end34-dct_luma_sp.25
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.26         # -- Begin function copyblock_sp.26
	.p2align	4, 0x90
	.type	copyblock_sp.26,@function
copyblock_sp.26:                        # @copyblock_sp.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1481067690, -88(%rbp)  # imm = 0x58474CAA
	movl	%edi, -84(%rbp)
	movl	%esi, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -76(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -80(%rbp)
	movl	-76(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movl	$0, -4(%rbp)
.LBB35_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_3:                               # %for.cond4
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB35_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-68(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB35_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_3
.LBB35_6:                               # %for.end
                                        #   in Loop: Header=BB35_1 Depth=1
	jmp	.LBB35_7
.LBB35_7:                               # %for.inc17
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_1
.LBB35_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB35_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB35_9 Depth=1
	movl	$0, -8(%rbp)
.LBB35_11:                              # %for.cond24
                                        #   Parent Loop BB35_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB35_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB35_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB35_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_11
.LBB35_14:                              # %for.end53
                                        #   in Loop: Header=BB35_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB35_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_9
.LBB35_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB35_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB35_17 Depth=1
	movl	$0, -4(%rbp)
.LBB35_19:                              # %for.cond86
                                        #   Parent Loop BB35_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB35_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB35_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB35_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_19
.LBB35_22:                              # %for.end115
                                        #   in Loop: Header=BB35_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB35_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_17
.LBB35_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB35_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB35_25 Depth=1
	movl	$0, -8(%rbp)
.LBB35_27:                              # %for.cond149
                                        #   Parent Loop BB35_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB35_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-80(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-92(%rbp), %eax
	movl	-72(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-80(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB35_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_27
.LBB35_30:                              # %for.end184
                                        #   in Loop: Header=BB35_25 Depth=1
	jmp	.LBB35_31
.LBB35_31:                              # %for.inc185
                                        #   in Loop: Header=BB35_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_25
.LBB35_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB35_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_35 Depth 2
                                        #     Child Loop BB35_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB35_33 Depth=1
	movl	$0, -8(%rbp)
.LBB35_35:                              # %for.cond192
                                        #   Parent Loop BB35_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB35_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB35_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_35
.LBB35_38:                              # %for.end205
                                        #   in Loop: Header=BB35_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB35_39:                              # %for.cond224
                                        #   Parent Loop BB35_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB35_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB35_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB35_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_39
.LBB35_42:                              # %for.end251
                                        #   in Loop: Header=BB35_33 Depth=1
	jmp	.LBB35_43
.LBB35_43:                              # %for.inc252
                                        #   in Loop: Header=BB35_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_33
.LBB35_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB35_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_47 Depth 2
                                        #     Child Loop BB35_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB35_45 Depth=1
	movl	$0, -4(%rbp)
.LBB35_47:                              # %for.cond259
                                        #   Parent Loop BB35_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB35_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB35_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_47
.LBB35_50:                              # %for.end272
                                        #   in Loop: Header=BB35_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB35_51:                              # %for.cond291
                                        #   Parent Loop BB35_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB35_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB35_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB35_55
.LBB35_54:                              # %cond.false
                                        #   in Loop: Header=BB35_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB35_55:                              # %cond.end
                                        #   in Loop: Header=BB35_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB35_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB35_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB35_61
.LBB35_57:                              # %cond.false316
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB35_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB35_60
.LBB35_59:                              # %cond.false327
                                        #   in Loop: Header=BB35_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB35_60:                              # %cond.end335
                                        #   in Loop: Header=BB35_51 Depth=2
.LBB35_61:                              # %cond.end337
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB35_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB35_64
.LBB35_63:                              # %cond.false355
                                        #   in Loop: Header=BB35_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB35_64:                              # %cond.end363
                                        #   in Loop: Header=BB35_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB35_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB35_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB35_70
.LBB35_66:                              # %cond.false369
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB35_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB35_69
.LBB35_68:                              # %cond.false380
                                        #   in Loop: Header=BB35_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB35_69:                              # %cond.end388
                                        #   in Loop: Header=BB35_51 Depth=2
.LBB35_70:                              # %cond.end390
                                        #   in Loop: Header=BB35_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB35_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_51
.LBB35_72:                              # %for.end399
                                        #   in Loop: Header=BB35_45 Depth=1
	jmp	.LBB35_73
.LBB35_73:                              # %for.inc400
                                        #   in Loop: Header=BB35_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_45
.LBB35_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB35_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB35_75 Depth=1
	movl	$0, -8(%rbp)
.LBB35_77:                              # %for.cond407
                                        #   Parent Loop BB35_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB35_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-68(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-84(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB35_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_77
.LBB35_80:                              # %for.end427
                                        #   in Loop: Header=BB35_75 Depth=1
	jmp	.LBB35_81
.LBB35_81:                              # %for.inc428
                                        #   in Loop: Header=BB35_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_75
.LBB35_82:                              # %for.end430
	cmpl	$1481067690, -88(%rbp)  # imm = 0x58474CAA
	jne	.LBB35_84
.LBB35_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_83
.Lfunc_end35:
	.size	copyblock_sp.26, .Lfunc_end35-copyblock_sp.26
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.27           # -- Begin function dct_chroma.27
	.p2align	4, 0x90
	.type	dct_chroma.27,@function
dct_chroma.27:                          # @dct_chroma.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$262994196, -380(%rbp)  # imm = 0xFACF914
	movl	%edi, -20(%rbp)
	movl	%esi, -132(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB36_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB36_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB36_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -124(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -200(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -140(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -208(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB36_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB36_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -104(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB36_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB36_11
.LBB36_7:                               # %cond.false
	cmpl	$51, -128(%rbp)
	jle	.LBB36_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB36_10
.LBB36_9:                               # %cond.false25
	movl	-128(%rbp), %eax
.LBB36_10:                              # %cond.end
.LBB36_11:                              # %cond.end26
	movl	%eax, -128(%rbp)
	cmpl	$0, -128(%rbp)
	jge	.LBB36_13
# %bb.12:                               # %cond.true29
	movl	-128(%rbp), %eax
	jmp	.LBB36_14
.LBB36_13:                              # %cond.false30
	movl	-128(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB36_14:                              # %cond.end34
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB36_16
# %bb.15:                               # %if.then
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -108(%rbp)
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -136(%rbp)
	movl	-108(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
.LBB36_16:                              # %if.end
	movl	$0, -28(%rbp)
.LBB36_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_19 Depth 2
                                        #       Child Loop BB36_21 Depth 3
                                        #         Child Loop BB36_25 Depth 4
                                        #       Child Loop BB36_31 Depth 3
                                        #         Child Loop BB36_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB36_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB36_17 Depth=1
	movl	$0, -24(%rbp)
.LBB36_19:                              # %for.cond56
                                        #   Parent Loop BB36_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_21 Depth 3
                                        #         Child Loop BB36_25 Depth 4
                                        #       Child Loop BB36_31 Depth 3
                                        #         Child Loop BB36_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB36_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB36_19 Depth=2
	movl	$0, -12(%rbp)
.LBB36_21:                              # %for.cond60
                                        #   Parent Loop BB36_17 Depth=1
                                        #     Parent Loop BB36_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB36_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB36_21 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB36_23:                              # %land.end64
                                        #   in Loop: Header=BB36_21 Depth=3
	testb	$1, %al
	jne	.LBB36_24
	jmp	.LBB36_30
.LBB36_24:                              # %for.body66
                                        #   in Loop: Header=BB36_21 Depth=3
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB36_25:                              # %for.cond68
                                        #   Parent Loop BB36_17 Depth=1
                                        #     Parent Loop BB36_19 Depth=2
                                        #       Parent Loop BB36_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB36_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB36_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB36_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_25
.LBB36_28:                              # %for.end
                                        #   in Loop: Header=BB36_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB36_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_21
.LBB36_30:                              # %for.end141
                                        #   in Loop: Header=BB36_19 Depth=2
	movl	$0, -16(%rbp)
.LBB36_31:                              # %for.cond142
                                        #   Parent Loop BB36_17 Depth=1
                                        #     Parent Loop BB36_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB36_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB36_31 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB36_33:                              # %land.end148
                                        #   in Loop: Header=BB36_31 Depth=3
	testb	$1, %al
	jne	.LBB36_34
	jmp	.LBB36_40
.LBB36_34:                              # %for.body150
                                        #   in Loop: Header=BB36_31 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB36_35:                              # %for.cond152
                                        #   Parent Loop BB36_17 Depth=1
                                        #     Parent Loop BB36_19 Depth=2
                                        #       Parent Loop BB36_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB36_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB36_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB36_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_35
.LBB36_38:                              # %for.end189
                                        #   in Loop: Header=BB36_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB36_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_31
.LBB36_40:                              # %for.end230
                                        #   in Loop: Header=BB36_19 Depth=2
	jmp	.LBB36_41
.LBB36_41:                              # %for.inc231
                                        #   in Loop: Header=BB36_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_19
.LBB36_42:                              # %for.end233
                                        #   in Loop: Header=BB36_17 Depth=1
	jmp	.LBB36_43
.LBB36_43:                              # %for.inc234
                                        #   in Loop: Header=BB36_17 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB36_17
.LBB36_44:                              # %for.end236
	cmpl	$1, -140(%rbp)
	jne	.LBB36_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB36_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB36_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB36_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB36_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB36_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB36_50
.LBB36_49:                              # %if.else
                                        #   in Loop: Header=BB36_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB36_50:                              # %if.end349
                                        #   in Loop: Header=BB36_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB36_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB36_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB36_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB36_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB36_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB36_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB36_54:                              # %if.end359
                                        #   in Loop: Header=BB36_46 Depth=1
	jmp	.LBB36_55
.LBB36_55:                              # %if.end360
                                        #   in Loop: Header=BB36_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB36_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB36_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB36_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB36_46 Depth=1
	movl	$1, %eax
	jmp	.LBB36_59
.LBB36_58:                              # %cond.false370
                                        #   in Loop: Header=BB36_46 Depth=1
	movl	-132(%rbp), %eax
.LBB36_59:                              # %cond.end371
                                        #   in Loop: Header=BB36_46 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -144(%rbp)
.LBB36_60:                              # %if.end384
                                        #   in Loop: Header=BB36_46 Depth=1
	movl	-144(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB36_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB36_46
.LBB36_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB36_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB36_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB36_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB36_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB36_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB36_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB36_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB36_68
.LBB36_67:                              # %if.else447
                                        #   in Loop: Header=BB36_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB36_68:                              # %if.end461
                                        #   in Loop: Header=BB36_63 Depth=1
	jmp	.LBB36_73
.LBB36_69:                              # %if.else462
                                        #   in Loop: Header=BB36_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB36_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB36_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB36_72
.LBB36_71:                              # %if.else479
                                        #   in Loop: Header=BB36_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB36_72:                              # %if.end493
                                        #   in Loop: Header=BB36_63 Depth=1
	jmp	.LBB36_73
.LBB36_73:                              # %if.end494
                                        #   in Loop: Header=BB36_63 Depth=1
	jmp	.LBB36_74
.LBB36_74:                              # %for.inc495
                                        #   in Loop: Header=BB36_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_63
.LBB36_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB36_213
.LBB36_76:                              # %if.else514
	cmpl	$2, -140(%rbp)
	jne	.LBB36_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB36_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB36_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB36_78 Depth=1
	movl	$0, -16(%rbp)
.LBB36_80:                              # %for.cond523
                                        #   Parent Loop BB36_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB36_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB36_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB36_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_80
.LBB36_83:                              # %for.end541
                                        #   in Loop: Header=BB36_78 Depth=1
	jmp	.LBB36_84
.LBB36_84:                              # %for.inc542
                                        #   in Loop: Header=BB36_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_78
.LBB36_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB36_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB36_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB36_86 Depth=1
	movl	$0, -12(%rbp)
.LBB36_88:                              # %for.cond605
                                        #   Parent Loop BB36_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB36_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB36_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB36_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_88
.LBB36_91:                              # %for.end634
                                        #   in Loop: Header=BB36_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB36_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_86
.LBB36_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB36_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB36_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB36_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB36_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB36_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB36_98
.LBB36_97:                              # %if.else700
                                        #   in Loop: Header=BB36_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB36_98:                              # %if.end723
                                        #   in Loop: Header=BB36_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB36_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB36_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB36_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB36_94 Depth=1
	movl	$1, %eax
	jmp	.LBB36_102
.LBB36_101:                             # %cond.false735
                                        #   in Loop: Header=BB36_94 Depth=1
	movl	-132(%rbp), %eax
.LBB36_102:                             # %cond.end736
                                        #   in Loop: Header=BB36_94 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB36_103:                             # %if.end748
                                        #   in Loop: Header=BB36_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB36_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB36_94
.LBB36_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB36_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_108 Depth 2
                                        #     Child Loop BB36_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB36_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB36_106 Depth=1
	movl	$0, -12(%rbp)
.LBB36_108:                             # %for.cond823
                                        #   Parent Loop BB36_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB36_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB36_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB36_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_108
.LBB36_111:                             # %for.end835
                                        #   in Loop: Header=BB36_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB36_112:                             # %for.cond852
                                        #   Parent Loop BB36_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB36_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB36_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -108(%rbp)
	jge	.LBB36_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB36_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB36_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB36_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB36_117
.LBB36_116:                             # %if.else915
                                        #   in Loop: Header=BB36_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB36_117:                             # %if.end968
                                        #   in Loop: Header=BB36_112 Depth=2
	jmp	.LBB36_122
.LBB36_118:                             # %if.else969
                                        #   in Loop: Header=BB36_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB36_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB36_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB36_121
.LBB36_120:                             # %if.else1019
                                        #   in Loop: Header=BB36_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB36_121:                             # %if.end1066
                                        #   in Loop: Header=BB36_112 Depth=2
	jmp	.LBB36_122
.LBB36_122:                             # %if.end1067
                                        #   in Loop: Header=BB36_112 Depth=2
	jmp	.LBB36_123
.LBB36_123:                             # %for.inc1068
                                        #   in Loop: Header=BB36_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_112
.LBB36_124:                             # %for.end1070
                                        #   in Loop: Header=BB36_106 Depth=1
	jmp	.LBB36_125
.LBB36_125:                             # %for.inc1071
                                        #   in Loop: Header=BB36_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_106
.LBB36_126:                             # %for.end1073
	jmp	.LBB36_212
.LBB36_127:                             # %if.else1074
	cmpl	$3, -140(%rbp)
	jne	.LBB36_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB36_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB36_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB36_129 Depth=1
	movl	$0, -16(%rbp)
.LBB36_131:                             # %for.cond1083
                                        #   Parent Loop BB36_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB36_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB36_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB36_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_131
.LBB36_134:                             # %for.end1101
                                        #   in Loop: Header=BB36_129 Depth=1
	jmp	.LBB36_135
.LBB36_135:                             # %for.inc1102
                                        #   in Loop: Header=BB36_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_129
.LBB36_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB36_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB36_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB36_137 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB36_139:                             # %land.end1111
                                        #   in Loop: Header=BB36_137 Depth=1
	testb	$1, %al
	jne	.LBB36_140
	jmp	.LBB36_146
.LBB36_140:                             # %for.body1113
                                        #   in Loop: Header=BB36_137 Depth=1
	movl	$0, -16(%rbp)
.LBB36_141:                             # %for.cond1114
                                        #   Parent Loop BB36_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB36_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB36_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB36_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_141
.LBB36_144:                             # %for.end1143
                                        #   in Loop: Header=BB36_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB36_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_137
.LBB36_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB36_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB36_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB36_147 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB36_149:                             # %land.end1177
                                        #   in Loop: Header=BB36_147 Depth=1
	testb	$1, %al
	jne	.LBB36_150
	jmp	.LBB36_156
.LBB36_150:                             # %for.body1179
                                        #   in Loop: Header=BB36_147 Depth=1
	movl	$0, -12(%rbp)
.LBB36_151:                             # %for.cond1180
                                        #   Parent Loop BB36_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB36_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB36_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB36_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_151
.LBB36_154:                             # %for.end1209
                                        #   in Loop: Header=BB36_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB36_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_147
.LBB36_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB36_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB36_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB36_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB36_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB36_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB36_164
.LBB36_160:                             # %if.else1261
                                        #   in Loop: Header=BB36_157 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB36_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB36_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB36_163
.LBB36_162:                             # %if.else1287
                                        #   in Loop: Header=BB36_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB36_163:                             # %if.end1310
                                        #   in Loop: Header=BB36_157 Depth=1
	jmp	.LBB36_164
.LBB36_164:                             # %if.end1311
                                        #   in Loop: Header=BB36_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB36_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB36_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB36_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB36_157 Depth=1
	movl	$1, %eax
	jmp	.LBB36_168
.LBB36_167:                             # %cond.false1322
                                        #   in Loop: Header=BB36_157 Depth=1
	movl	-132(%rbp), %eax
.LBB36_168:                             # %cond.end1323
                                        #   in Loop: Header=BB36_157 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB36_169:                             # %if.end1335
                                        #   in Loop: Header=BB36_157 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB36_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB36_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB36_171:                             # %if.end1347
                                        #   in Loop: Header=BB36_157 Depth=1
	jmp	.LBB36_172
.LBB36_172:                             # %for.inc1348
                                        #   in Loop: Header=BB36_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB36_157
.LBB36_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB36_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_178 Depth 2
                                        #     Child Loop BB36_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB36_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB36_174 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB36_176:                             # %land.end1359
                                        #   in Loop: Header=BB36_174 Depth=1
	testb	$1, %al
	jne	.LBB36_177
	jmp	.LBB36_187
.LBB36_177:                             # %for.body1361
                                        #   in Loop: Header=BB36_174 Depth=1
	movl	$0, -16(%rbp)
.LBB36_178:                             # %for.cond1362
                                        #   Parent Loop BB36_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB36_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB36_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB36_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_178
.LBB36_181:                             # %for.end1374
                                        #   in Loop: Header=BB36_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB36_182:                             # %for.cond1391
                                        #   Parent Loop BB36_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB36_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB36_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB36_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_182
.LBB36_185:                             # %for.end1416
                                        #   in Loop: Header=BB36_174 Depth=1
	jmp	.LBB36_186
.LBB36_186:                             # %for.inc1417
                                        #   in Loop: Header=BB36_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_174
.LBB36_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB36_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_192 Depth 2
                                        #     Child Loop BB36_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB36_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB36_188 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB36_190:                             # %land.end1426
                                        #   in Loop: Header=BB36_188 Depth=1
	testb	$1, %al
	jne	.LBB36_191
	jmp	.LBB36_210
.LBB36_191:                             # %for.body1428
                                        #   in Loop: Header=BB36_188 Depth=1
	movl	$0, -12(%rbp)
.LBB36_192:                             # %for.cond1429
                                        #   Parent Loop BB36_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB36_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB36_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB36_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_192
.LBB36_195:                             # %for.end1441
                                        #   in Loop: Header=BB36_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB36_196:                             # %for.cond1458
                                        #   Parent Loop BB36_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB36_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB36_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB36_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB36_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB36_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB36_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB36_201
.LBB36_200:                             # %if.else1521
                                        #   in Loop: Header=BB36_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB36_201:                             # %if.end1574
                                        #   in Loop: Header=BB36_196 Depth=2
	jmp	.LBB36_206
.LBB36_202:                             # %if.else1575
                                        #   in Loop: Header=BB36_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB36_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB36_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB36_205
.LBB36_204:                             # %if.else1625
                                        #   in Loop: Header=BB36_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB36_205:                             # %if.end1672
                                        #   in Loop: Header=BB36_196 Depth=2
	jmp	.LBB36_206
.LBB36_206:                             # %if.end1673
                                        #   in Loop: Header=BB36_196 Depth=2
	jmp	.LBB36_207
.LBB36_207:                             # %for.inc1674
                                        #   in Loop: Header=BB36_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_196
.LBB36_208:                             # %for.end1676
                                        #   in Loop: Header=BB36_188 Depth=1
	jmp	.LBB36_209
.LBB36_209:                             # %for.inc1677
                                        #   in Loop: Header=BB36_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_188
.LBB36_210:                             # %for.end1679
	jmp	.LBB36_211
.LBB36_211:                             # %if.end1680
	jmp	.LBB36_212
.LBB36_212:                             # %if.end1681
	jmp	.LBB36_213
.LBB36_213:                             # %if.end1682
	movl	$0, -196(%rbp)
	movl	$0, -212(%rbp)
	movl	$0, -116(%rbp)
.LBB36_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_216 Depth 2
                                        #       Child Loop BB36_218 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB36_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB36_214 Depth=1
	movl	$0, -112(%rbp)
.LBB36_216:                             # %for.cond1689
                                        #   Parent Loop BB36_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_218 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB36_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB36_216 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$1, -36(%rbp)
.LBB36_218:                             # %for.cond1722
                                        #   Parent Loop BB36_214 Depth=1
                                        #     Parent Loop BB36_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB36_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB36_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB36_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB36_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB36_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB36_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB36_223
.LBB36_222:                             # %if.then1731
                                        #   in Loop: Header=BB36_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_224
.LBB36_223:                             # %if.else1740
                                        #   in Loop: Header=BB36_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB36_224:                             # %if.end1749
                                        #   in Loop: Header=BB36_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB36_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB36_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB36_230
.LBB36_226:                             # %if.else1761
                                        #   in Loop: Header=BB36_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB36_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB36_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB36_229
.LBB36_228:                             # %if.else1792
                                        #   in Loop: Header=BB36_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB36_229:                             # %if.end1820
                                        #   in Loop: Header=BB36_218 Depth=3
	jmp	.LBB36_230
.LBB36_230:                             # %if.end1821
                                        #   in Loop: Header=BB36_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB36_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB36_218 Depth=3
	movl	-116(%rbp), %eax
	addl	-200(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB36_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB36_218 Depth=3
	cmpl	$0, -104(%rbp)
	je	.LBB36_234
.LBB36_233:                             # %if.then1839
                                        #   in Loop: Header=BB36_218 Depth=3
	movl	-196(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -196(%rbp)
	jmp	.LBB36_235
.LBB36_234:                             # %if.else1841
                                        #   in Loop: Header=BB36_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -196(%rbp)
.LBB36_235:                             # %if.end1848
                                        #   in Loop: Header=BB36_218 Depth=3
	movl	$2, -212(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB36_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB36_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB36_247
.LBB36_237:                             # %if.else1872
                                        #   in Loop: Header=BB36_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB36_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB36_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB36_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB36_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB36_241
.LBB36_240:                             # %if.else1893
                                        #   in Loop: Header=BB36_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB36_241:                             # %if.end1908
                                        #   in Loop: Header=BB36_218 Depth=3
	jmp	.LBB36_246
.LBB36_242:                             # %if.else1909
                                        #   in Loop: Header=BB36_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB36_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB36_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB36_245
.LBB36_244:                             # %if.else1924
                                        #   in Loop: Header=BB36_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB36_245:                             # %if.end1936
                                        #   in Loop: Header=BB36_218 Depth=3
	jmp	.LBB36_246
.LBB36_246:                             # %if.end1937
                                        #   in Loop: Header=BB36_218 Depth=3
	jmp	.LBB36_247
.LBB36_247:                             # %if.end1938
                                        #   in Loop: Header=BB36_218 Depth=3
	jmp	.LBB36_248
.LBB36_248:                             # %if.end1939
                                        #   in Loop: Header=BB36_218 Depth=3
	cmpl	$0, -104(%rbp)
	jne	.LBB36_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB36_218 Depth=3
	movl	-144(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB36_250:                             # %if.end1949
                                        #   in Loop: Header=BB36_218 Depth=3
	jmp	.LBB36_251
.LBB36_251:                             # %for.inc1950
                                        #   in Loop: Header=BB36_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB36_218
.LBB36_252:                             # %for.end1952
                                        #   in Loop: Header=BB36_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB36_216 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB36_216
.LBB36_254:                             # %for.end1957
                                        #   in Loop: Header=BB36_214 Depth=1
	jmp	.LBB36_255
.LBB36_255:                             # %for.inc1958
                                        #   in Loop: Header=BB36_214 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB36_214
.LBB36_256:                             # %for.end1960
	cmpl	$4, -196(%rbp)
	jge	.LBB36_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -104(%rbp)
	jne	.LBB36_278
# %bb.258:                              # %if.then1965
	movl	$0, -212(%rbp)
	movl	$0, -116(%rbp)
.LBB36_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_261 Depth 2
                                        #       Child Loop BB36_265 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB36_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB36_259 Depth=1
	movl	$0, -112(%rbp)
.LBB36_261:                             # %for.cond1972
                                        #   Parent Loop BB36_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_265 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB36_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB36_261 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB36_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB36_261 Depth=2
	movslq	-140(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-140(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB36_264:                             # %if.end2016
                                        #   in Loop: Header=BB36_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB36_265:                             # %for.cond2018
                                        #   Parent Loop BB36_259 Depth=1
                                        #     Parent Loop BB36_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB36_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB36_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB36_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB36_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB36_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB36_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB36_270
.LBB36_269:                             # %if.then2030
                                        #   in Loop: Header=BB36_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_271
.LBB36_270:                             # %if.else2039
                                        #   in Loop: Header=BB36_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB36_271:                             # %if.end2048
                                        #   in Loop: Header=BB36_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB36_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB36_265
.LBB36_273:                             # %for.end2060
                                        #   in Loop: Header=BB36_261 Depth=2
	jmp	.LBB36_274
.LBB36_274:                             # %for.inc2061
                                        #   in Loop: Header=BB36_261 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB36_261
.LBB36_275:                             # %for.end2063
                                        #   in Loop: Header=BB36_259 Depth=1
	jmp	.LBB36_276
.LBB36_276:                             # %for.inc2064
                                        #   in Loop: Header=BB36_259 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB36_259
.LBB36_277:                             # %for.end2066
	jmp	.LBB36_278
.LBB36_278:                             # %if.end2067
	cmpl	$2, -212(%rbp)
	jne	.LBB36_280
# %bb.279:                              # %if.then2070
	movl	$2, -132(%rbp)
.LBB36_280:                             # %if.end2071
	movl	$0, -28(%rbp)
.LBB36_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_285 Depth 2
                                        #       Child Loop BB36_287 Depth 3
                                        #         Child Loop BB36_289 Depth 4
                                        #         Child Loop BB36_293 Depth 4
                                        #       Child Loop BB36_299 Depth 3
                                        #         Child Loop BB36_303 Depth 4
                                        #         Child Loop BB36_307 Depth 4
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB36_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB36_281 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB36_283:                             # %land.end2079
                                        #   in Loop: Header=BB36_281 Depth=1
	testb	$1, %al
	jne	.LBB36_284
	jmp	.LBB36_340
.LBB36_284:                             # %for.body2081
                                        #   in Loop: Header=BB36_281 Depth=1
	movl	$0, -24(%rbp)
.LBB36_285:                             # %for.cond2082
                                        #   Parent Loop BB36_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_287 Depth 3
                                        #         Child Loop BB36_289 Depth 4
                                        #         Child Loop BB36_293 Depth 4
                                        #       Child Loop BB36_299 Depth 3
                                        #         Child Loop BB36_303 Depth 4
                                        #         Child Loop BB36_307 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB36_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB36_285 Depth=2
	movl	$0, -12(%rbp)
.LBB36_287:                             # %for.cond2087
                                        #   Parent Loop BB36_281 Depth=1
                                        #     Parent Loop BB36_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_289 Depth 4
                                        #         Child Loop BB36_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB36_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB36_287 Depth=3
	movl	$0, -16(%rbp)
.LBB36_289:                             # %for.cond2091
                                        #   Parent Loop BB36_281 Depth=1
                                        #     Parent Loop BB36_285 Depth=2
                                        #       Parent Loop BB36_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB36_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB36_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB36_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_289
.LBB36_292:                             # %for.end2106
                                        #   in Loop: Header=BB36_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB36_293:                             # %for.cond2125
                                        #   Parent Loop BB36_281 Depth=1
                                        #     Parent Loop BB36_285 Depth=2
                                        #       Parent Loop BB36_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB36_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB36_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB36_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_293
.LBB36_296:                             # %for.end2156
                                        #   in Loop: Header=BB36_287 Depth=3
	jmp	.LBB36_297
.LBB36_297:                             # %for.inc2157
                                        #   in Loop: Header=BB36_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_287
.LBB36_298:                             # %for.end2159
                                        #   in Loop: Header=BB36_285 Depth=2
	movl	$0, -16(%rbp)
.LBB36_299:                             # %for.cond2160
                                        #   Parent Loop BB36_281 Depth=1
                                        #     Parent Loop BB36_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_303 Depth 4
                                        #         Child Loop BB36_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB36_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB36_299 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB36_301:                             # %land.end2166
                                        #   in Loop: Header=BB36_299 Depth=3
	testb	$1, %al
	jne	.LBB36_302
	jmp	.LBB36_336
.LBB36_302:                             # %for.body2168
                                        #   in Loop: Header=BB36_299 Depth=3
	movl	$0, -12(%rbp)
.LBB36_303:                             # %for.cond2169
                                        #   Parent Loop BB36_281 Depth=1
                                        #     Parent Loop BB36_285 Depth=2
                                        #       Parent Loop BB36_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB36_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB36_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB36_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_303
.LBB36_306:                             # %for.end2184
                                        #   in Loop: Header=BB36_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB36_307:                             # %for.cond2203
                                        #   Parent Loop BB36_281 Depth=1
                                        #     Parent Loop BB36_285 Depth=2
                                        #       Parent Loop BB36_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB36_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB36_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB36_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB36_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB36_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB36_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB36_312
.LBB36_311:                             # %cond.false2231
                                        #   in Loop: Header=BB36_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB36_312:                             # %cond.end2250
                                        #   in Loop: Header=BB36_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB36_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB36_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB36_318
.LBB36_314:                             # %cond.false2257
                                        #   in Loop: Header=BB36_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB36_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB36_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB36_317
.LBB36_316:                             # %cond.false2279
                                        #   in Loop: Header=BB36_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB36_317:                             # %cond.end2298
                                        #   in Loop: Header=BB36_307 Depth=4
.LBB36_318:                             # %cond.end2300
                                        #   in Loop: Header=BB36_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-68(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB36_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB36_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB36_321
.LBB36_320:                             # %cond.false2333
                                        #   in Loop: Header=BB36_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB36_321:                             # %cond.end2352
                                        #   in Loop: Header=BB36_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB36_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB36_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB36_327
.LBB36_323:                             # %cond.false2359
                                        #   in Loop: Header=BB36_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB36_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB36_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB36_326
.LBB36_325:                             # %cond.false2381
                                        #   in Loop: Header=BB36_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB36_326:                             # %cond.end2400
                                        #   in Loop: Header=BB36_307 Depth=4
.LBB36_327:                             # %cond.end2402
                                        #   in Loop: Header=BB36_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB36_332
.LBB36_328:                             # %if.else2412
                                        #   in Loop: Header=BB36_307 Depth=4
	cmpl	$0, -104(%rbp)
	je	.LBB36_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB36_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB36_331
.LBB36_330:                             # %if.else2439
                                        #   in Loop: Header=BB36_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB36_331:                             # %if.end2468
                                        #   in Loop: Header=BB36_307 Depth=4
	jmp	.LBB36_332
.LBB36_332:                             # %if.end2469
                                        #   in Loop: Header=BB36_307 Depth=4
	jmp	.LBB36_333
.LBB36_333:                             # %for.inc2470
                                        #   in Loop: Header=BB36_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_307
.LBB36_334:                             # %for.end2472
                                        #   in Loop: Header=BB36_299 Depth=3
	jmp	.LBB36_335
.LBB36_335:                             # %for.inc2473
                                        #   in Loop: Header=BB36_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_299
.LBB36_336:                             # %for.end2475
                                        #   in Loop: Header=BB36_285 Depth=2
	jmp	.LBB36_337
.LBB36_337:                             # %for.inc2476
                                        #   in Loop: Header=BB36_285 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_285
.LBB36_338:                             # %for.end2478
                                        #   in Loop: Header=BB36_281 Depth=1
	jmp	.LBB36_339
.LBB36_339:                             # %for.inc2479
                                        #   in Loop: Header=BB36_281 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB36_281
.LBB36_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB36_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB36_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB36_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB36_342 Depth=1
	movl	$0, -16(%rbp)
.LBB36_344:                             # %for.cond2490
                                        #   Parent Loop BB36_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB36_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB36_344 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB36_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB36_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB36_348
.LBB36_347:                             # %if.else2518
                                        #   in Loop: Header=BB36_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB36_348:                             # %if.end2536
                                        #   in Loop: Header=BB36_344 Depth=2
	jmp	.LBB36_349
.LBB36_349:                             # %for.inc2537
                                        #   in Loop: Header=BB36_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_344
.LBB36_350:                             # %for.end2539
                                        #   in Loop: Header=BB36_342 Depth=1
	jmp	.LBB36_351
.LBB36_351:                             # %for.inc2540
                                        #   in Loop: Header=BB36_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_342
.LBB36_352:                             # %for.end2542
	jmp	.LBB36_353
.LBB36_353:                             # %if.end2543
	movl	-132(%rbp), %ebx
	cmpl	$262994196, -380(%rbp)  # imm = 0xFACF914
	jne	.LBB36_355
.LBB36_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_354
.Lfunc_end36:
	.size	dct_chroma.27, .Lfunc_end36-dct_chroma.27
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.28        # -- Begin function dct_chroma4x4.28
	.p2align	4, 0x90
	.type	dct_chroma4x4.28,@function
dct_chroma4x4.28:                       # @dct_chroma4x4.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$796718783, -148(%rbp)  # imm = 0x2F7CF6BF
	movl	%edi, -28(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -104(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB37_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB37_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB37_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB37_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB37_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-28(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -76(%rbp)
	cmpl	$0, -76(%rbp)
	jge	.LBB37_7
# %bb.6:                                # %cond.true
	movl	-76(%rbp), %eax
	jmp	.LBB37_8
.LBB37_7:                               # %cond.false
	movl	-76(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB37_8:                               # %cond.end
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB37_18
# %bb.9:                                # %if.then
	movl	$0, -16(%rbp)
.LBB37_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_12 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB37_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB37_10 Depth=1
	movl	$0, -12(%rbp)
.LBB37_12:                              # %for.cond31
                                        #   Parent Loop BB37_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB37_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB37_12 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB37_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_12
.LBB37_15:                              # %for.end
                                        #   in Loop: Header=BB37_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB37_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_10
.LBB37_17:                              # %for.end92
	jmp	.LBB37_18
.LBB37_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB37_28
# %bb.19:                               # %if.then94
	movl	$0, -12(%rbp)
.LBB37_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_22 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB37_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB37_20 Depth=1
	movl	$0, -16(%rbp)
.LBB37_22:                              # %for.cond99
                                        #   Parent Loop BB37_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB37_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB37_22 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB37_22 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_22
.LBB37_25:                              # %for.end132
                                        #   in Loop: Header=BB37_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB37_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_20
.LBB37_27:                              # %for.end165
	jmp	.LBB37_28
.LBB37_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB37_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB37_34
.LBB37_30:                              # %if.else
	cmpl	$1, -88(%rbp)
	jne	.LBB37_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB37_33
.LBB37_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB37_33:                              # %if.end213
	jmp	.LBB37_34
.LBB37_34:                              # %if.end214
	movl	-28(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-80(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-104(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-80(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-104(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB37_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB37_46
.LBB37_36:                              # %if.else245
	cmpl	$4, -24(%rbp)
	jge	.LBB37_41
# %bb.37:                               # %if.then248
	cmpl	$1, -88(%rbp)
	jne	.LBB37_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB37_40
.LBB37_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB37_40:                              # %if.end290
	jmp	.LBB37_45
.LBB37_41:                              # %if.else291
	cmpl	$1, -88(%rbp)
	jne	.LBB37_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB37_44
.LBB37_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB37_44:                              # %if.end328
	jmp	.LBB37_45
.LBB37_45:                              # %if.end329
	jmp	.LBB37_46
.LBB37_46:                              # %if.end330
	movl	$1, -96(%rbp)
.LBB37_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -96(%rbp)
	jge	.LBB37_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB37_47 Depth=1
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -84(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB37_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB37_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB37_54
.LBB37_50:                              # %if.else352
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB37_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB37_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB37_53
.LBB37_52:                              # %if.else381
                                        #   in Loop: Header=BB37_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB37_53:                              # %if.end407
                                        #   in Loop: Header=BB37_47 Depth=1
	jmp	.LBB37_54
.LBB37_54:                              # %if.end408
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB37_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB37_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB37_58
.LBB37_57:                              # %if.then415
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	$1, -132(%rbp)
.LBB37_58:                              # %if.end416
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -100(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB37_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB37_70
.LBB37_60:                              # %if.else436
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB37_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB37_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB37_64
.LBB37_63:                              # %if.else457
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -84(%rbp)
.LBB37_64:                              # %if.end472
                                        #   in Loop: Header=BB37_47 Depth=1
	jmp	.LBB37_69
.LBB37_65:                              # %if.else473
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB37_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB37_68
.LBB37_67:                              # %if.else488
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
.LBB37_68:                              # %if.end500
                                        #   in Loop: Header=BB37_47 Depth=1
	jmp	.LBB37_69
.LBB37_69:                              # %if.end501
                                        #   in Loop: Header=BB37_47 Depth=1
	jmp	.LBB37_70
.LBB37_70:                              # %if.end502
                                        #   in Loop: Header=BB37_47 Depth=1
	jmp	.LBB37_71
.LBB37_71:                              # %if.end503
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB37_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-84(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB37_73:                              # %if.end511
                                        #   in Loop: Header=BB37_47 Depth=1
	jmp	.LBB37_74
.LBB37_74:                              # %for.inc512
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB37_47
.LBB37_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB37_89
# %bb.76:                               # %if.then518
	movl	$0, -16(%rbp)
.LBB37_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_79 Depth 2
                                        #     Child Loop BB37_83 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB37_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB37_77 Depth=1
	movl	$0, -12(%rbp)
.LBB37_79:                              # %for.cond523
                                        #   Parent Loop BB37_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB37_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB37_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB37_79 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_79
.LBB37_82:                              # %for.end536
                                        #   in Loop: Header=BB37_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB37_83:                              # %for.cond555
                                        #   Parent Loop BB37_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB37_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB37_83 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB37_83 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_83
.LBB37_86:                              # %for.end582
                                        #   in Loop: Header=BB37_77 Depth=1
	jmp	.LBB37_87
.LBB37_87:                              # %for.inc583
                                        #   in Loop: Header=BB37_77 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_77
.LBB37_88:                              # %for.end585
	jmp	.LBB37_89
.LBB37_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB37_103
# %bb.90:                               # %if.then588
	movl	$0, -12(%rbp)
.LBB37_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_93 Depth 2
                                        #     Child Loop BB37_97 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB37_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB37_91 Depth=1
	movl	$0, -16(%rbp)
.LBB37_93:                              # %for.cond593
                                        #   Parent Loop BB37_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB37_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB37_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB37_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_93
.LBB37_96:                              # %for.end606
                                        #   in Loop: Header=BB37_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB37_97:                              # %for.cond625
                                        #   Parent Loop BB37_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB37_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB37_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB37_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_97
.LBB37_100:                             # %for.end656
                                        #   in Loop: Header=BB37_91 Depth=1
	jmp	.LBB37_101
.LBB37_101:                             # %for.inc657
                                        #   in Loop: Header=BB37_91 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_91
.LBB37_102:                             # %for.end659
	jmp	.LBB37_103
.LBB37_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$796718783, -148(%rbp)  # imm = 0x2F7CF6BF
	jne	.LBB37_105
.LBB37_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_104
.Lfunc_end37:
	.size	dct_chroma4x4.28, .Lfunc_end37-dct_chroma4x4.28
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.29 # -- Begin function intrapred_luma_16x16.29
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.29,@function
intrapred_luma_16x16.29:                # @intrapred_luma_16x16.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$1798468862, -92(%rbp)  # imm = 0x6B3274FE
	movl	$0, -32(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -60(%rbp)
	movl	$0, -4(%rbp)
.LBB38_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB38_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-60(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_1
.LBB38_4:                               # %for.end
	movl	-60(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB38_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB38_20
.LBB38_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB38_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB38_9
.LBB38_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB38_9
.LBB38_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB38_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB38_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB38_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB38_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB38_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB38_14
.LBB38_13:                              # %cond.false23
                                        #   in Loop: Header=BB38_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB38_14
.LBB38_14:                              # %cond.end24
                                        #   in Loop: Header=BB38_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB38_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_10
.LBB38_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB38_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB38_19
.LBB38_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB38_19
.LBB38_19:                              # %cond.end39
	movl	%eax, -64(%rbp)
.LBB38_20:                              # %if.end
	movl	$0, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB38_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB38_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB38_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB38_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB38_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB38_24:                              # %if.end51
                                        #   in Loop: Header=BB38_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB38_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB38_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB38_26:                              # %if.end68
                                        #   in Loop: Header=BB38_21 Depth=1
	jmp	.LBB38_27
.LBB38_27:                              # %for.inc69
                                        #   in Loop: Header=BB38_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_21
.LBB38_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB38_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB38_31
# %bb.30:                               # %if.then74
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB38_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB38_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB38_34
# %bb.33:                               # %if.then81
	movl	-40(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB38_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB38_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB38_37
# %bb.36:                               # %if.then88
	movl	-48(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB38_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB38_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB38_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB38_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB38_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB38_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB38_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB38_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB38_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB38_44:                              # %if.end114
                                        #   in Loop: Header=BB38_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB38_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB38_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB38_46:                              # %if.end133
                                        #   in Loop: Header=BB38_41 Depth=1
	jmp	.LBB38_47
.LBB38_47:                              # %for.inc134
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_41
.LBB38_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB38_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB38_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB38_49 Depth=1
	movl	$0, -4(%rbp)
.LBB38_51:                              # %for.cond141
                                        #   Parent Loop BB38_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB38_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB38_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB38_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_51
.LBB38_54:                              # %for.end173
                                        #   in Loop: Header=BB38_49 Depth=1
	jmp	.LBB38_55
.LBB38_55:                              # %for.inc174
                                        #   in Loop: Header=BB38_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_49
.LBB38_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB38_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB38_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -64(%rbp)
	jne	.LBB38_60
.LBB38_59:                              # %if.then181
	jmp	.LBB38_85
.LBB38_60:                              # %if.end182
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB38_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB38_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB38_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB38_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB38_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB38_65
.LBB38_64:                              # %if.else210
                                        #   in Loop: Header=BB38_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB38_65:                              # %if.end232
                                        #   in Loop: Header=BB38_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB38_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_61
.LBB38_67:                              # %for.end264
	imull	$5, -28(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -36(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB38_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB38_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB38_68 Depth=1
	movl	$0, -4(%rbp)
.LBB38_70:                              # %for.cond293
                                        #   Parent Loop BB38_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB38_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB38_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-52(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB38_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB38_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB38_74
.LBB38_73:                              # %cond.false309
                                        #   in Loop: Header=BB38_70 Depth=2
	movl	-52(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB38_74:                              # %cond.end318
                                        #   in Loop: Header=BB38_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB38_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB38_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB38_80
.LBB38_76:                              # %cond.false323
                                        #   in Loop: Header=BB38_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-52(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB38_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB38_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB38_79
.LBB38_78:                              # %cond.false337
                                        #   in Loop: Header=BB38_70 Depth=2
	movl	-52(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB38_79:                              # %cond.end346
                                        #   in Loop: Header=BB38_70 Depth=2
.LBB38_80:                              # %cond.end348
                                        #   in Loop: Header=BB38_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB38_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_70
.LBB38_82:                              # %for.end359
                                        #   in Loop: Header=BB38_68 Depth=1
	jmp	.LBB38_83
.LBB38_83:                              # %for.inc360
                                        #   in Loop: Header=BB38_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_68
.LBB38_84:                              # %for.end362.loopexit
	jmp	.LBB38_85
.LBB38_85:                              # %for.end362
	cmpl	$1798468862, -92(%rbp)  # imm = 0x6B3274FE
	jne	.LBB38_87
.LBB38_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_86
.Lfunc_end38:
	.size	intrapred_luma_16x16.29, .Lfunc_end38-intrapred_luma_16x16.29
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.30
.LCPI39_0:
	.quad	4616189618054758400     # double 4
.LCPI39_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI39_2:
	.quad	4611686018427387904     # double 2
.LCPI39_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.30
	.p2align	4, 0x90
	.type	dct_luma_sp.30,@function
dct_luma_sp.30:                         # @dct_luma_sp.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI39_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI39_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$501838928, -216(%rbp)  # imm = 0x1DE97450
	movl	%edi, -116(%rbp)
	movl	%esi, -140(%rbp)
	movq	%rdx, -232(%rbp)
	movl	-116(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -188(%rbp)
	movl	-140(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -192(%rbp)
	movl	-192(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-188(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -196(%rbp)
	movl	-192(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-188(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -184(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-184(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -240(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-184(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -160(%rbp)
	movq	-160(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI39_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI39_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -224(%rbp)
	movq	-160(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -128(%rbp)
	movq	-160(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -112(%rbp)
	movl	-128(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -144(%rbp)
	movq	-160(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -200(%rbp)
	movq	-160(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -136(%rbp)
	movl	-200(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -204(%rbp)
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -180(%rbp)
	movl	$0, -12(%rbp)
.LBB39_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB39_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -16(%rbp)
.LBB39_3:                               # %for.cond38
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB39_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB39_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-140(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-140(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB39_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_3
.LBB39_6:                               # %for.end
                                        #   in Loop: Header=BB39_1 Depth=1
	jmp	.LBB39_7
.LBB39_7:                               # %for.inc66
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_1
.LBB39_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB39_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB39_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB39_9 Depth=1
	movl	$0, -16(%rbp)
.LBB39_11:                              # %for.cond73
                                        #   Parent Loop BB39_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB39_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB39_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB39_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_11
.LBB39_14:                              # %for.end106
                                        #   in Loop: Header=BB39_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB39_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_9
.LBB39_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB39_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB39_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB39_17 Depth=1
	movl	$0, -12(%rbp)
.LBB39_19:                              # %for.cond144
                                        #   Parent Loop BB39_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB39_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB39_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB39_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_19
.LBB39_22:                              # %for.end177
                                        #   in Loop: Header=BB39_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB39_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_17
.LBB39_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB39_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB39_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB39_25 Depth=1
	movl	$0, -16(%rbp)
.LBB39_27:                              # %for.cond215
                                        #   Parent Loop BB39_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB39_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB39_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB39_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_27
.LBB39_30:                              # %for.end244
                                        #   in Loop: Header=BB39_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB39_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_25
.LBB39_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB39_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB39_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB39_33 Depth=1
	movl	$0, -12(%rbp)
.LBB39_35:                              # %for.cond278
                                        #   Parent Loop BB39_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB39_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB39_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB39_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_35
.LBB39_38:                              # %for.end307
                                        #   in Loop: Header=BB39_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB39_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_33
.LBB39_40:                              # %for.end336
	movl	$0, -208(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -68(%rbp)
.LBB39_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -68(%rbp)
	jge	.LBB39_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB39_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB39_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB39_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB39_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB39_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB39_46
.LBB39_45:                              # %if.then
                                        #   in Loop: Header=BB39_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_47
.LBB39_46:                              # %if.else
                                        #   in Loop: Header=BB39_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB39_47:                              # %if.end
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -104(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-180(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -108(%rbp)
	movl	-108(%rbp), %edi
	callq	abs
	movslq	-112(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-204(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %edi
	callq	abs
	movslq	-112(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-204(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-56(%rbp), %eax
	je	.LBB39_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB39_41 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB39_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB39_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB39_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB39_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movl	-108(%rbp), %esi
	callq	sign
	movslq	-112(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-24(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-56(%rbp), %edi
	movl	-132(%rbp), %esi
	callq	sign
	movslq	-112(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	movl	-56(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-168(%rbp), %xmm0
	jne	.LBB39_55
	jp	.LBB39_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-24(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-56(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB39_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB39_54
.LBB39_53:                              # %cond.false
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-56(%rbp), %eax
.LBB39_54:                              # %cond.end
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	%eax, -60(%rbp)
	jmp	.LBB39_59
.LBB39_55:                              # %if.else500
                                        #   in Loop: Header=BB39_41 Depth=1
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-168(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB39_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB39_58
.LBB39_57:                              # %if.else504
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB39_58:                              # %if.end505
                                        #   in Loop: Header=BB39_41 Depth=1
	jmp	.LBB39_59
.LBB39_59:                              # %if.end506
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB39_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB39_62
.LBB39_61:                              # %cond.false510
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-132(%rbp), %eax
.LBB39_62:                              # %cond.end511
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	%eax, -124(%rbp)
	jmp	.LBB39_73
.LBB39_63:                              # %if.else513
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-24(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.LBB39_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -124(%rbp)
	jmp	.LBB39_72
.LBB39_65:                              # %if.else517
                                        #   in Loop: Header=BB39_41 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB39_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB39_68
.LBB39_67:                              # %cond.false521
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-56(%rbp), %eax
.LBB39_68:                              # %cond.end522
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	%eax, -60(%rbp)
	cmpl	$0, -24(%rbp)
	jne	.LBB39_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB39_71
.LBB39_70:                              # %cond.false527
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-132(%rbp), %eax
.LBB39_71:                              # %cond.end528
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	%eax, -124(%rbp)
.LBB39_72:                              # %if.end530
                                        #   in Loop: Header=BB39_41 Depth=1
	jmp	.LBB39_73
.LBB39_73:                              # %if.end531
                                        #   in Loop: Header=BB39_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB39_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	$1, -208(%rbp)
	cmpl	$1, -60(%rbp)
	jle	.LBB39_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB39_41 Depth=1
	movq	-232(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB39_77
.LBB39_76:                              # %if.else539
                                        #   in Loop: Header=BB39_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-232(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB39_77:                              # %if.end546
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-60(%rbp), %edi
	movl	-124(%rbp), %esi
	callq	sign
	movq	-240(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -64(%rbp)
	movl	-60(%rbp), %edi
	movl	-124(%rbp), %esi
	callq	sign
	movslq	-112(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -104(%rbp)
.LBB39_78:                              # %if.end568
                                        #   in Loop: Header=BB39_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-180(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-104(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-200(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB39_41
.LBB39_80:                              # %for.end600
	movq	-240(%rbp), %rax
	movslq	-100(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB39_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_83 Depth 2
                                        #     Child Loop BB39_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB39_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB39_81 Depth=1
	movl	$0, -16(%rbp)
.LBB39_83:                              # %for.cond607
                                        #   Parent Loop BB39_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB39_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB39_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB39_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_83
.LBB39_86:                              # %for.end620
                                        #   in Loop: Header=BB39_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB39_87:                              # %for.cond639
                                        #   Parent Loop BB39_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB39_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB39_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB39_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_87
.LBB39_90:                              # %for.end666
                                        #   in Loop: Header=BB39_81 Depth=1
	jmp	.LBB39_91
.LBB39_91:                              # %for.inc667
                                        #   in Loop: Header=BB39_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_81
.LBB39_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB39_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_95 Depth 2
                                        #     Child Loop BB39_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB39_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB39_93 Depth=1
	movl	$0, -12(%rbp)
.LBB39_95:                              # %for.cond674
                                        #   Parent Loop BB39_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB39_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB39_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB39_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_95
.LBB39_98:                              # %for.end687
                                        #   in Loop: Header=BB39_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB39_99:                              # %for.cond706
                                        #   Parent Loop BB39_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB39_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB39_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB39_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB39_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB39_103
.LBB39_102:                             # %cond.false721
                                        #   in Loop: Header=BB39_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB39_103:                             # %cond.end729
                                        #   in Loop: Header=BB39_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB39_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB39_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB39_109
.LBB39_105:                             # %cond.false735
                                        #   in Loop: Header=BB39_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB39_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB39_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB39_108
.LBB39_107:                             # %cond.false746
                                        #   in Loop: Header=BB39_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB39_108:                             # %cond.end754
                                        #   in Loop: Header=BB39_99 Depth=2
.LBB39_109:                             # %cond.end756
                                        #   in Loop: Header=BB39_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB39_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB39_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB39_112
.LBB39_111:                             # %cond.false774
                                        #   in Loop: Header=BB39_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB39_112:                             # %cond.end782
                                        #   in Loop: Header=BB39_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB39_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB39_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB39_118
.LBB39_114:                             # %cond.false788
                                        #   in Loop: Header=BB39_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB39_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB39_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB39_117
.LBB39_116:                             # %cond.false799
                                        #   in Loop: Header=BB39_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB39_117:                             # %cond.end807
                                        #   in Loop: Header=BB39_99 Depth=2
.LBB39_118:                             # %cond.end809
                                        #   in Loop: Header=BB39_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB39_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_99
.LBB39_120:                             # %for.end818
                                        #   in Loop: Header=BB39_93 Depth=1
	jmp	.LBB39_121
.LBB39_121:                             # %for.inc819
                                        #   in Loop: Header=BB39_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_93
.LBB39_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB39_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB39_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB39_123 Depth=1
	movl	$0, -16(%rbp)
.LBB39_125:                             # %for.cond826
                                        #   Parent Loop BB39_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB39_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB39_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-140(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-116(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB39_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_125
.LBB39_128:                             # %for.end846
                                        #   in Loop: Header=BB39_123 Depth=1
	jmp	.LBB39_129
.LBB39_129:                             # %for.inc847
                                        #   in Loop: Header=BB39_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_123
.LBB39_130:                             # %for.end849
	movl	-208(%rbp), %ebx
	cmpl	$501838928, -216(%rbp)  # imm = 0x1DE97450
	jne	.LBB39_132
.LBB39_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_131
.Lfunc_end39:
	.size	dct_luma_sp.30, .Lfunc_end39-dct_luma_sp.30
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.31       # -- Begin function intrapred_luma.31
	.p2align	4, 0x90
	.type	intrapred_luma.31,@function
intrapred_luma.31:                      # @intrapred_luma.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$1615532316, -172(%rbp) # imm = 0x604B111C
	movl	%edi, -116(%rbp)
	movl	%esi, -108(%rbp)
	movq	%rdx, -224(%rbp)
	movq	%rcx, -192(%rbp)
	movq	%r8, -184(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB40_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB40_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_1
.LBB40_4:                               # %for.end
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	addl	$4, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB40_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -84(%rbp)
	je	.LBB40_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -84(%rbp)
	jne	.LBB40_10
.LBB40_7:                               # %land.rhs10
	cmpl	$4, -88(%rbp)
	movb	$1, %al
	je	.LBB40_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -88(%rbp)
	sete	%al
.LBB40_9:                               # %lor.end
.LBB40_10:                              # %land.end
	xorb	$-1, %al
.LBB40_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB40_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB40_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB40_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB40_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB40_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB40_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB40_17
.LBB40_16:                              # %cond.false
                                        #   in Loop: Header=BB40_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB40_17
.LBB40_17:                              # %cond.end
                                        #   in Loop: Header=BB40_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB40_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_13
.LBB40_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB40_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB40_22
.LBB40_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB40_22
.LBB40_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB40_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB40_25
.LBB40_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB40_25
.LBB40_25:                              # %cond.end49
	movl	%eax, -112(%rbp)
	cmpl	$0, -216(%rbp)
	je	.LBB40_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB40_28
.LBB40_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB40_28
.LBB40_28:                              # %cond.end59
	movl	%eax, -100(%rbp)
	jmp	.LBB40_30
.LBB40_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-216(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB40_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-224(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-192(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB40_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB40_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -100(%rbp)
	setne	%al
.LBB40_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB40_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB40_36
.LBB40_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB40_36:                              # %if.end114
	cmpl	$0, -112(%rbp)
	je	.LBB40_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB40_39
.LBB40_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB40_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB40_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_42
.LBB40_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB40_42:                              # %if.end208
	cmpl	$0, -100(%rbp)
	je	.LBB40_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-200(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB40_45
.LBB40_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB40_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB40_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB40_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB40_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB40_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_46
.LBB40_49:                              # %for.end233
	movl	$0, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB40_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB40_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB40_61
.LBB40_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB40_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB40_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB40_60
.LBB40_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB40_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB40_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB40_59
.LBB40_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -92(%rbp)
.LBB40_59:                              # %if.end284
	jmp	.LBB40_60
.LBB40_60:                              # %if.end285
	jmp	.LBB40_61
.LBB40_61:                              # %if.end286
	movl	$0, -96(%rbp)
.LBB40_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_64 Depth 2
	cmpl	$4, -96(%rbp)
	jge	.LBB40_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB40_62 Depth=1
	movl	$0, -4(%rbp)
.LBB40_64:                              # %for.cond291
                                        #   Parent Loop BB40_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB40_64 Depth=2
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-96(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB40_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_64
.LBB40_67:                              # %for.end304
                                        #   in Loop: Header=BB40_62 Depth=1
	jmp	.LBB40_68
.LBB40_68:                              # %for.inc305
                                        #   in Loop: Header=BB40_62 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB40_62
.LBB40_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB40_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB40_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB40_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB40_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_70
.LBB40_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB40_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB40_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB40_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB40_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB40_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB40_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB40_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB40_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB40_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB40_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -100(%rbp)
	je	.LBB40_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB40_85:                              # %if.end1174
	cmpl	$1615532316, -172(%rbp) # imm = 0x604B111C
	jne	.LBB40_87
.LBB40_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_86
.Lfunc_end40:
	.size	intrapred_luma.31, .Lfunc_end40-intrapred_luma.31
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.32       # -- Begin function dct_luma_16x16.32
	.p2align	4, 0x90
	.type	dct_luma_16x16.32,@function
dct_luma_16x16.32:                      # @dct_luma_16x16.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1452761473, -132(%rbp) # imm = 0x56976181
	movl	%edi, -104(%rbp)
	movl	$0, -120(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -144(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -240(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB41_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB41_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-64(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
.LBB41_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB41_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB41_3 Depth=1
	movl	$0, -16(%rbp)
.LBB41_5:                               # %for.cond16
                                        #   Parent Loop BB41_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB41_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB41_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB41_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB41_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB41_9
.LBB41_8:                               # %if.else
                                        #   in Loop: Header=BB41_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB41_9:                               # %if.end
                                        #   in Loop: Header=BB41_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB41_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_5
.LBB41_11:                              # %for.end
                                        #   in Loop: Header=BB41_3 Depth=1
	jmp	.LBB41_12
.LBB41_12:                              # %for.inc61
                                        #   in Loop: Header=BB41_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_3
.LBB41_13:                              # %for.end63
	movl	$0, -24(%rbp)
.LBB41_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_18 Depth 2
                                        #       Child Loop BB41_20 Depth 3
                                        #         Child Loop BB41_22 Depth 4
                                        #       Child Loop BB41_28 Depth 3
                                        #         Child Loop BB41_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -24(%rbp)
	jge	.LBB41_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB41_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_16:                              # %land.end69
                                        #   in Loop: Header=BB41_14 Depth=1
	testb	$1, %al
	jne	.LBB41_17
	jmp	.LBB41_39
.LBB41_17:                              # %for.body71
                                        #   in Loop: Header=BB41_14 Depth=1
	movl	$0, -20(%rbp)
.LBB41_18:                              # %for.cond72
                                        #   Parent Loop BB41_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_20 Depth 3
                                        #         Child Loop BB41_22 Depth 4
                                        #       Child Loop BB41_28 Depth 3
                                        #         Child Loop BB41_30 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB41_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB41_18 Depth=2
	movl	$0, -12(%rbp)
.LBB41_20:                              # %for.cond76
                                        #   Parent Loop BB41_14 Depth=1
                                        #     Parent Loop BB41_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB41_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB41_20 Depth=3
	movl	$0, -16(%rbp)
.LBB41_22:                              # %for.cond80
                                        #   Parent Loop BB41_14 Depth=1
                                        #     Parent Loop BB41_18 Depth=2
                                        #       Parent Loop BB41_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB41_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB41_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-60(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB41_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_22
.LBB41_25:                              # %for.end125
                                        #   in Loop: Header=BB41_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB41_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_20
.LBB41_27:                              # %for.end169
                                        #   in Loop: Header=BB41_18 Depth=2
	movl	$0, -16(%rbp)
.LBB41_28:                              # %for.cond170
                                        #   Parent Loop BB41_14 Depth=1
                                        #     Parent Loop BB41_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB41_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB41_28 Depth=3
	movl	$0, -12(%rbp)
.LBB41_30:                              # %for.cond174
                                        #   Parent Loop BB41_14 Depth=1
                                        #     Parent Loop BB41_18 Depth=2
                                        #       Parent Loop BB41_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB41_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB41_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB41_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_30
.LBB41_33:                              # %for.end219
                                        #   in Loop: Header=BB41_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB41_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_28
.LBB41_35:                              # %for.end264
                                        #   in Loop: Header=BB41_18 Depth=2
	jmp	.LBB41_36
.LBB41_36:                              # %for.inc265
                                        #   in Loop: Header=BB41_18 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_18
.LBB41_37:                              # %for.end267
                                        #   in Loop: Header=BB41_14 Depth=1
	jmp	.LBB41_38
.LBB41_38:                              # %for.inc268
                                        #   in Loop: Header=BB41_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_14
.LBB41_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB41_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB41_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB41_40 Depth=1
	movl	$0, -16(%rbp)
.LBB41_42:                              # %for.cond275
                                        #   Parent Loop BB41_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB41_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB41_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_42
.LBB41_45:                              # %for.end291
                                        #   in Loop: Header=BB41_40 Depth=1
	jmp	.LBB41_46
.LBB41_46:                              # %for.inc292
                                        #   in Loop: Header=BB41_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_40
.LBB41_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB41_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB41_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB41_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_50:                              # %land.end301
                                        #   in Loop: Header=BB41_48 Depth=1
	testb	$1, %al
	jne	.LBB41_51
	jmp	.LBB41_57
.LBB41_51:                              # %for.body303
                                        #   in Loop: Header=BB41_48 Depth=1
	movl	$0, -16(%rbp)
.LBB41_52:                              # %for.cond304
                                        #   Parent Loop BB41_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB41_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB41_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-60(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB41_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_52
.LBB41_55:                              # %for.end333
                                        #   in Loop: Header=BB41_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB41_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_48
.LBB41_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB41_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB41_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB41_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_60:                              # %land.end367
                                        #   in Loop: Header=BB41_58 Depth=1
	testb	$1, %al
	jne	.LBB41_61
	jmp	.LBB41_67
.LBB41_61:                              # %for.body369
                                        #   in Loop: Header=BB41_58 Depth=1
	movl	$0, -12(%rbp)
.LBB41_62:                              # %for.cond370
                                        #   Parent Loop BB41_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB41_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB41_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB41_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_62
.LBB41_65:                              # %for.end399
                                        #   in Loop: Header=BB41_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB41_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_58
.LBB41_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -56(%rbp)
.LBB41_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -56(%rbp)
	jge	.LBB41_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB41_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB41_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB41_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB41_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB41_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB41_73
.LBB41_72:                              # %if.then437
                                        #   in Loop: Header=BB41_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_74
.LBB41_73:                              # %if.else446
                                        #   in Loop: Header=BB41_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB41_74:                              # %if.end455
                                        #   in Loop: Header=BB41_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB41_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB41_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB41_77
.LBB41_76:                              # %if.else463
                                        #   in Loop: Header=BB41_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-108(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB41_77:                              # %if.end481
                                        #   in Loop: Header=BB41_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB41_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB41_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB41_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB41_68 Depth=1
	cmpl	$2063, -68(%rbp)        # imm = 0x80F
	jle	.LBB41_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB41_68 Depth=1
	movl	$2063, -68(%rbp)        # imm = 0x80F
.LBB41_81:                              # %if.end492
                                        #   in Loop: Header=BB41_68 Depth=1
	jmp	.LBB41_82
.LBB41_82:                              # %if.end493
                                        #   in Loop: Header=BB41_68 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB41_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB41_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB41_84:                              # %if.end507
                                        #   in Loop: Header=BB41_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB41_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB41_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB41_86:                              # %if.end519
                                        #   in Loop: Header=BB41_68 Depth=1
	jmp	.LBB41_87
.LBB41_87:                              # %for.inc520
                                        #   in Loop: Header=BB41_68 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB41_68
.LBB41_88:                              # %for.end522
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB41_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_93 Depth 2
                                        #     Child Loop BB41_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB41_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB41_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_91:                              # %land.end531
                                        #   in Loop: Header=BB41_89 Depth=1
	testb	$1, %al
	jne	.LBB41_92
	jmp	.LBB41_102
.LBB41_92:                              # %for.body533
                                        #   in Loop: Header=BB41_89 Depth=1
	movl	$0, -16(%rbp)
.LBB41_93:                              # %for.cond534
                                        #   Parent Loop BB41_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB41_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB41_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_93
.LBB41_96:                              # %for.end546
                                        #   in Loop: Header=BB41_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB41_97:                              # %for.cond563
                                        #   Parent Loop BB41_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB41_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB41_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-60(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB41_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_97
.LBB41_100:                             # %for.end588
                                        #   in Loop: Header=BB41_89 Depth=1
	jmp	.LBB41_101
.LBB41_101:                             # %for.inc589
                                        #   in Loop: Header=BB41_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_89
.LBB41_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB41_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_107 Depth 2
                                        #     Child Loop BB41_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB41_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB41_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_105:                             # %land.end598
                                        #   in Loop: Header=BB41_103 Depth=1
	testb	$1, %al
	jne	.LBB41_106
	jmp	.LBB41_119
.LBB41_106:                             # %for.body600
                                        #   in Loop: Header=BB41_103 Depth=1
	movl	$0, -12(%rbp)
.LBB41_107:                             # %for.cond601
                                        #   Parent Loop BB41_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB41_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB41_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB41_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_107
.LBB41_110:                             # %for.end613
                                        #   in Loop: Header=BB41_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB41_111:                             # %for.cond630
                                        #   Parent Loop BB41_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB41_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB41_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -64(%rbp)
	jge	.LBB41_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB41_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-64(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-64(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB41_115
.LBB41_114:                             # %if.else680
                                        #   in Loop: Header=BB41_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB41_115:                             # %if.end717
                                        #   in Loop: Header=BB41_111 Depth=2
	jmp	.LBB41_116
.LBB41_116:                             # %for.inc718
                                        #   in Loop: Header=BB41_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_111
.LBB41_117:                             # %for.end720
                                        #   in Loop: Header=BB41_103 Depth=1
	jmp	.LBB41_118
.LBB41_118:                             # %for.inc721
                                        #   in Loop: Header=BB41_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_103
.LBB41_119:                             # %for.end723
	movl	$0, -24(%rbp)
.LBB41_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_122 Depth 2
                                        #       Child Loop BB41_124 Depth 3
                                        #       Child Loop BB41_143 Depth 3
                                        #         Child Loop BB41_147 Depth 4
                                        #         Child Loop BB41_151 Depth 4
                                        #       Child Loop BB41_157 Depth 3
                                        #         Child Loop BB41_161 Depth 4
                                        #         Child Loop BB41_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB41_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB41_120 Depth=1
	movl	$0, -20(%rbp)
.LBB41_122:                             # %for.cond728
                                        #   Parent Loop BB41_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_124 Depth 3
                                        #       Child Loop BB41_143 Depth 3
                                        #         Child Loop BB41_147 Depth 4
                                        #         Child Loop BB41_151 Depth 4
                                        #       Child Loop BB41_157 Depth 3
                                        #         Child Loop BB41_161 Depth 4
                                        #         Child Loop BB41_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB41_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB41_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -112(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -116(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -232(%rbp)
	movl	$1, -56(%rbp)
.LBB41_124:                             # %for.cond751
                                        #   Parent Loop BB41_120 Depth=1
                                        #     Parent Loop BB41_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -56(%rbp)
	jge	.LBB41_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB41_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB41_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB41_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB41_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB41_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB41_129
.LBB41_128:                             # %if.then762
                                        #   in Loop: Header=BB41_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_130
.LBB41_129:                             # %if.else771
                                        #   in Loop: Header=BB41_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB41_130:                             # %if.end780
                                        #   in Loop: Header=BB41_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB41_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB41_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB41_133
.LBB41_132:                             # %if.else793
                                        #   in Loop: Header=BB41_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB41_133:                             # %if.end818
                                        #   in Loop: Header=BB41_124 Depth=3
	cmpl	$0, -68(%rbp)
	je	.LBB41_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB41_124 Depth=3
	movl	$15, -120(%rbp)
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB41_135:                             # %if.end836
                                        #   in Loop: Header=BB41_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB41_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB41_124 Depth=3
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -68(%rbp)
	cmpl	$4, -64(%rbp)
	jge	.LBB41_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB41_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB41_139
.LBB41_138:                             # %if.else871
                                        #   in Loop: Header=BB41_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-64(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB41_139:                             # %if.end889
                                        #   in Loop: Header=BB41_124 Depth=3
	jmp	.LBB41_140
.LBB41_140:                             # %if.end890
                                        #   in Loop: Header=BB41_124 Depth=3
	jmp	.LBB41_141
.LBB41_141:                             # %for.inc891
                                        #   in Loop: Header=BB41_124 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB41_124
.LBB41_142:                             # %for.end893
                                        #   in Loop: Header=BB41_122 Depth=2
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB41_143:                             # %for.cond896
                                        #   Parent Loop BB41_120 Depth=1
                                        #     Parent Loop BB41_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_147 Depth 4
                                        #         Child Loop BB41_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB41_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB41_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_145:                             # %land.end902
                                        #   in Loop: Header=BB41_143 Depth=3
	testb	$1, %al
	jne	.LBB41_146
	jmp	.LBB41_156
.LBB41_146:                             # %for.body904
                                        #   in Loop: Header=BB41_143 Depth=3
	movl	$0, -16(%rbp)
.LBB41_147:                             # %for.cond905
                                        #   Parent Loop BB41_120 Depth=1
                                        #     Parent Loop BB41_122 Depth=2
                                        #       Parent Loop BB41_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB41_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB41_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB41_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_147
.LBB41_150:                             # %for.end921
                                        #   in Loop: Header=BB41_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB41_151:                             # %for.cond940
                                        #   Parent Loop BB41_120 Depth=1
                                        #     Parent Loop BB41_122 Depth=2
                                        #       Parent Loop BB41_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB41_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB41_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-60(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB41_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_151
.LBB41_154:                             # %for.end973
                                        #   in Loop: Header=BB41_143 Depth=3
	jmp	.LBB41_155
.LBB41_155:                             # %for.inc974
                                        #   in Loop: Header=BB41_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_143
.LBB41_156:                             # %for.end976
                                        #   in Loop: Header=BB41_122 Depth=2
	movl	$0, -16(%rbp)
.LBB41_157:                             # %for.cond977
                                        #   Parent Loop BB41_120 Depth=1
                                        #     Parent Loop BB41_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_161 Depth 4
                                        #         Child Loop BB41_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB41_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB41_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_159:                             # %land.end983
                                        #   in Loop: Header=BB41_157 Depth=3
	testb	$1, %al
	jne	.LBB41_160
	jmp	.LBB41_170
.LBB41_160:                             # %for.body985
                                        #   in Loop: Header=BB41_157 Depth=3
	movl	$0, -12(%rbp)
.LBB41_161:                             # %for.cond986
                                        #   Parent Loop BB41_120 Depth=1
                                        #     Parent Loop BB41_122 Depth=2
                                        #       Parent Loop BB41_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB41_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB41_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB41_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_161
.LBB41_164:                             # %for.end1002
                                        #   in Loop: Header=BB41_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB41_165:                             # %for.cond1021
                                        #   Parent Loop BB41_120 Depth=1
                                        #     Parent Loop BB41_122 Depth=2
                                        #       Parent Loop BB41_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB41_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB41_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB41_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_165
.LBB41_168:                             # %for.end1054
                                        #   in Loop: Header=BB41_157 Depth=3
	jmp	.LBB41_169
.LBB41_169:                             # %for.inc1055
                                        #   in Loop: Header=BB41_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_157
.LBB41_170:                             # %for.end1057
                                        #   in Loop: Header=BB41_122 Depth=2
	jmp	.LBB41_171
.LBB41_171:                             # %for.inc1058
                                        #   in Loop: Header=BB41_122 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_122
.LBB41_172:                             # %for.end1060
                                        #   in Loop: Header=BB41_120 Depth=1
	jmp	.LBB41_173
.LBB41_173:                             # %for.inc1061
                                        #   in Loop: Header=BB41_120 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_120
.LBB41_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB41_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB41_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB41_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB41_176 Depth=1
	movl	$0, -16(%rbp)
.LBB41_178:                             # %for.cond1071
                                        #   Parent Loop BB41_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB41_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB41_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB41_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_178
.LBB41_181:                             # %for.end1093
                                        #   in Loop: Header=BB41_176 Depth=1
	jmp	.LBB41_182
.LBB41_182:                             # %for.inc1094
                                        #   in Loop: Header=BB41_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_176
.LBB41_183:                             # %for.end1096
	jmp	.LBB41_196
.LBB41_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB41_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB41_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB41_185 Depth=1
	movl	$0, -16(%rbp)
.LBB41_187:                             # %for.cond1102
                                        #   Parent Loop BB41_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB41_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB41_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB41_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB41_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB41_191
.LBB41_190:                             # %if.else1125
                                        #   in Loop: Header=BB41_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB41_191:                             # %if.end1145
                                        #   in Loop: Header=BB41_187 Depth=2
	jmp	.LBB41_192
.LBB41_192:                             # %for.inc1146
                                        #   in Loop: Header=BB41_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_187
.LBB41_193:                             # %for.end1148
                                        #   in Loop: Header=BB41_185 Depth=1
	jmp	.LBB41_194
.LBB41_194:                             # %for.inc1149
                                        #   in Loop: Header=BB41_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_185
.LBB41_195:                             # %for.end1151
	jmp	.LBB41_196
.LBB41_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB41_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB41_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB41_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB41_198 Depth=1
	movl	$0, -16(%rbp)
.LBB41_200:                             # %for.cond1160
                                        #   Parent Loop BB41_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB41_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB41_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB41_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB41_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB41_213
.LBB41_203:                             # %if.else1186
                                        #   in Loop: Header=BB41_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB41_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB41_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB41_206
.LBB41_205:                             # %cond.false
                                        #   in Loop: Header=BB41_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB41_206:                             # %cond.end
                                        #   in Loop: Header=BB41_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB41_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB41_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB41_212
.LBB41_208:                             # %cond.false1229
                                        #   in Loop: Header=BB41_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB41_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB41_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB41_211
.LBB41_210:                             # %cond.false1250
                                        #   in Loop: Header=BB41_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB41_211:                             # %cond.end1268
                                        #   in Loop: Header=BB41_200 Depth=2
.LBB41_212:                             # %cond.end1270
                                        #   in Loop: Header=BB41_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB41_213:                             # %if.end1282
                                        #   in Loop: Header=BB41_200 Depth=2
	jmp	.LBB41_214
.LBB41_214:                             # %for.inc1283
                                        #   in Loop: Header=BB41_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_200
.LBB41_215:                             # %for.end1285
                                        #   in Loop: Header=BB41_198 Depth=1
	jmp	.LBB41_216
.LBB41_216:                             # %for.inc1286
                                        #   in Loop: Header=BB41_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_198
.LBB41_217:                             # %for.end1288
	jmp	.LBB41_218
.LBB41_218:                             # %if.end1289
	movl	-120(%rbp), %ebx
	cmpl	$1452761473, -132(%rbp) # imm = 0x56976181
	jne	.LBB41_220
.LBB41_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_219
.Lfunc_end41:
	.size	dct_luma_16x16.32, .Lfunc_end41-dct_luma_16x16.32
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.33 # -- Begin function intrapred_luma_16x16.33
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.33,@function
intrapred_luma_16x16.33:                # @intrapred_luma_16x16.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$395667450, -92(%rbp)   # imm = 0x179567FA
	movl	$0, -28(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -60(%rbp)
	movl	$0, -4(%rbp)
.LBB42_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB42_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	-60(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_1
.LBB42_4:                               # %for.end
	movl	-60(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB42_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB42_20
.LBB42_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB42_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB42_9
.LBB42_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB42_9
.LBB42_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB42_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB42_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB42_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB42_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB42_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB42_14
.LBB42_13:                              # %cond.false23
                                        #   in Loop: Header=BB42_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB42_14
.LBB42_14:                              # %cond.end24
                                        #   in Loop: Header=BB42_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB42_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_10
.LBB42_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB42_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB42_19
.LBB42_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB42_19
.LBB42_19:                              # %cond.end39
	movl	%eax, -64(%rbp)
.LBB42_20:                              # %if.end
	movl	$0, -36(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB42_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB42_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB42_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB42_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB42_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB42_24:                              # %if.end51
                                        #   in Loop: Header=BB42_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB42_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB42_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB42_26:                              # %if.end68
                                        #   in Loop: Header=BB42_21 Depth=1
	jmp	.LBB42_27
.LBB42_27:                              # %for.inc69
                                        #   in Loop: Header=BB42_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_21
.LBB42_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB42_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB42_31
# %bb.30:                               # %if.then74
	movl	-52(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB42_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB42_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB42_34
# %bb.33:                               # %if.then81
	movl	-36(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB42_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB42_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB42_37
# %bb.36:                               # %if.then88
	movl	-52(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB42_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB42_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB42_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -28(%rbp)
.LBB42_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB42_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB42_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB42_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB42_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB42_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB42_44:                              # %if.end114
                                        #   in Loop: Header=BB42_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB42_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB42_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB42_46:                              # %if.end133
                                        #   in Loop: Header=BB42_41 Depth=1
	jmp	.LBB42_47
.LBB42_47:                              # %for.inc134
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_41
.LBB42_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB42_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB42_49 Depth=1
	movl	$0, -4(%rbp)
.LBB42_51:                              # %for.cond141
                                        #   Parent Loop BB42_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB42_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB42_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_51
.LBB42_54:                              # %for.end173
                                        #   in Loop: Header=BB42_49 Depth=1
	jmp	.LBB42_55
.LBB42_55:                              # %for.inc174
                                        #   in Loop: Header=BB42_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_49
.LBB42_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB42_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB42_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -64(%rbp)
	jne	.LBB42_60
.LBB42_59:                              # %if.then181
	jmp	.LBB42_85
.LBB42_60:                              # %if.end182
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB42_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB42_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB42_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB42_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB42_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB42_65
.LBB42_64:                              # %if.else210
                                        #   in Loop: Header=BB42_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB42_65:                              # %if.end232
                                        #   in Loop: Header=BB42_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB42_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_61
.LBB42_67:                              # %for.end264
	imull	$5, -32(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -44(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -48(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB42_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB42_68 Depth=1
	movl	$0, -4(%rbp)
.LBB42_70:                              # %for.cond293
                                        #   Parent Loop BB42_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB42_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-48(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB42_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB42_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB42_74
.LBB42_73:                              # %cond.false309
                                        #   in Loop: Header=BB42_70 Depth=2
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-48(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB42_74:                              # %cond.end318
                                        #   in Loop: Header=BB42_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB42_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB42_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB42_80
.LBB42_76:                              # %cond.false323
                                        #   in Loop: Header=BB42_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-48(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB42_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB42_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB42_79
.LBB42_78:                              # %cond.false337
                                        #   in Loop: Header=BB42_70 Depth=2
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-48(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB42_79:                              # %cond.end346
                                        #   in Loop: Header=BB42_70 Depth=2
.LBB42_80:                              # %cond.end348
                                        #   in Loop: Header=BB42_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB42_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_70
.LBB42_82:                              # %for.end359
                                        #   in Loop: Header=BB42_68 Depth=1
	jmp	.LBB42_83
.LBB42_83:                              # %for.inc360
                                        #   in Loop: Header=BB42_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_68
.LBB42_84:                              # %for.end362.loopexit
	jmp	.LBB42_85
.LBB42_85:                              # %for.end362
	cmpl	$395667450, -92(%rbp)   # imm = 0x179567FA
	jne	.LBB42_87
.LBB42_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_86
.Lfunc_end42:
	.size	intrapred_luma_16x16.33, .Lfunc_end42-intrapred_luma_16x16.33
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.34           # -- Begin function dct_chroma.34
	.p2align	4, 0x90
	.type	dct_chroma.34,@function
dct_chroma.34:                          # @dct_chroma.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$1885380814, -380(%rbp) # imm = 0x7060A0CE
	movl	%edi, -20(%rbp)
	movl	%esi, -136(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB43_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB43_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB43_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -128(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -200(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -140(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -132(%rbp)
	movl	$0, -208(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB43_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB43_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB43_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB43_11
.LBB43_7:                               # %cond.false
	cmpl	$51, -124(%rbp)
	jle	.LBB43_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB43_10
.LBB43_9:                               # %cond.false25
	movl	-124(%rbp), %eax
.LBB43_10:                              # %cond.end
.LBB43_11:                              # %cond.end26
	movl	%eax, -124(%rbp)
	cmpl	$0, -124(%rbp)
	jge	.LBB43_13
# %bb.12:                               # %cond.true29
	movl	-124(%rbp), %eax
	jmp	.LBB43_14
.LBB43_13:                              # %cond.false30
	movl	-124(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB43_14:                              # %cond.end34
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB43_16
# %bb.15:                               # %if.then
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -104(%rbp)
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -132(%rbp)
	movl	-104(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
.LBB43_16:                              # %if.end
	movl	$0, -24(%rbp)
.LBB43_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_19 Depth 2
                                        #       Child Loop BB43_21 Depth 3
                                        #         Child Loop BB43_25 Depth 4
                                        #       Child Loop BB43_31 Depth 3
                                        #         Child Loop BB43_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB43_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB43_17 Depth=1
	movl	$0, -28(%rbp)
.LBB43_19:                              # %for.cond56
                                        #   Parent Loop BB43_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_21 Depth 3
                                        #         Child Loop BB43_25 Depth 4
                                        #       Child Loop BB43_31 Depth 3
                                        #         Child Loop BB43_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB43_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB43_19 Depth=2
	movl	$0, -12(%rbp)
.LBB43_21:                              # %for.cond60
                                        #   Parent Loop BB43_17 Depth=1
                                        #     Parent Loop BB43_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB43_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB43_21 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB43_23:                              # %land.end64
                                        #   in Loop: Header=BB43_21 Depth=3
	testb	$1, %al
	jne	.LBB43_24
	jmp	.LBB43_30
.LBB43_24:                              # %for.body66
                                        #   in Loop: Header=BB43_21 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB43_25:                              # %for.cond68
                                        #   Parent Loop BB43_17 Depth=1
                                        #     Parent Loop BB43_19 Depth=2
                                        #       Parent Loop BB43_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB43_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB43_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB43_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_25
.LBB43_28:                              # %for.end
                                        #   in Loop: Header=BB43_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-28(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB43_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_21
.LBB43_30:                              # %for.end141
                                        #   in Loop: Header=BB43_19 Depth=2
	movl	$0, -16(%rbp)
.LBB43_31:                              # %for.cond142
                                        #   Parent Loop BB43_17 Depth=1
                                        #     Parent Loop BB43_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB43_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB43_31 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB43_33:                              # %land.end148
                                        #   in Loop: Header=BB43_31 Depth=3
	testb	$1, %al
	jne	.LBB43_34
	jmp	.LBB43_40
.LBB43_34:                              # %for.body150
                                        #   in Loop: Header=BB43_31 Depth=3
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB43_35:                              # %for.cond152
                                        #   Parent Loop BB43_17 Depth=1
                                        #     Parent Loop BB43_19 Depth=2
                                        #       Parent Loop BB43_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB43_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB43_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB43_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_35
.LBB43_38:                              # %for.end189
                                        #   in Loop: Header=BB43_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB43_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_31
.LBB43_40:                              # %for.end230
                                        #   in Loop: Header=BB43_19 Depth=2
	jmp	.LBB43_41
.LBB43_41:                              # %for.inc231
                                        #   in Loop: Header=BB43_19 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB43_19
.LBB43_42:                              # %for.end233
                                        #   in Loop: Header=BB43_17 Depth=1
	jmp	.LBB43_43
.LBB43_43:                              # %for.inc234
                                        #   in Loop: Header=BB43_17 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB43_17
.LBB43_44:                              # %for.end236
	cmpl	$1, -140(%rbp)
	jne	.LBB43_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB43_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB43_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB43_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB43_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB43_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB43_50
.LBB43_49:                              # %if.else
                                        #   in Loop: Header=BB43_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB43_50:                              # %if.end349
                                        #   in Loop: Header=BB43_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB43_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB43_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB43_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB43_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB43_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB43_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB43_54:                              # %if.end359
                                        #   in Loop: Header=BB43_46 Depth=1
	jmp	.LBB43_55
.LBB43_55:                              # %if.end360
                                        #   in Loop: Header=BB43_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB43_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB43_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB43_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB43_46 Depth=1
	movl	$1, %eax
	jmp	.LBB43_59
.LBB43_58:                              # %cond.false370
                                        #   in Loop: Header=BB43_46 Depth=1
	movl	-136(%rbp), %eax
.LBB43_59:                              # %cond.end371
                                        #   in Loop: Header=BB43_46 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -144(%rbp)
.LBB43_60:                              # %if.end384
                                        #   in Loop: Header=BB43_46 Depth=1
	movl	-144(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB43_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB43_46
.LBB43_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB43_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB43_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB43_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB43_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB43_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB43_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB43_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB43_68
.LBB43_67:                              # %if.else447
                                        #   in Loop: Header=BB43_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB43_68:                              # %if.end461
                                        #   in Loop: Header=BB43_63 Depth=1
	jmp	.LBB43_73
.LBB43_69:                              # %if.else462
                                        #   in Loop: Header=BB43_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB43_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB43_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB43_72
.LBB43_71:                              # %if.else479
                                        #   in Loop: Header=BB43_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB43_72:                              # %if.end493
                                        #   in Loop: Header=BB43_63 Depth=1
	jmp	.LBB43_73
.LBB43_73:                              # %if.end494
                                        #   in Loop: Header=BB43_63 Depth=1
	jmp	.LBB43_74
.LBB43_74:                              # %for.inc495
                                        #   in Loop: Header=BB43_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_63
.LBB43_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB43_213
.LBB43_76:                              # %if.else514
	cmpl	$2, -140(%rbp)
	jne	.LBB43_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB43_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB43_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB43_78 Depth=1
	movl	$0, -16(%rbp)
.LBB43_80:                              # %for.cond523
                                        #   Parent Loop BB43_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB43_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB43_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_80
.LBB43_83:                              # %for.end541
                                        #   in Loop: Header=BB43_78 Depth=1
	jmp	.LBB43_84
.LBB43_84:                              # %for.inc542
                                        #   in Loop: Header=BB43_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_78
.LBB43_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB43_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB43_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB43_86 Depth=1
	movl	$0, -12(%rbp)
.LBB43_88:                              # %for.cond605
                                        #   Parent Loop BB43_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB43_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB43_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB43_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_88
.LBB43_91:                              # %for.end634
                                        #   in Loop: Header=BB43_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB43_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_86
.LBB43_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB43_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB43_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB43_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB43_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB43_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB43_98
.LBB43_97:                              # %if.else700
                                        #   in Loop: Header=BB43_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB43_98:                              # %if.end723
                                        #   in Loop: Header=BB43_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB43_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB43_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB43_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB43_94 Depth=1
	movl	$1, %eax
	jmp	.LBB43_102
.LBB43_101:                             # %cond.false735
                                        #   in Loop: Header=BB43_94 Depth=1
	movl	-136(%rbp), %eax
.LBB43_102:                             # %cond.end736
                                        #   in Loop: Header=BB43_94 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB43_103:                             # %if.end748
                                        #   in Loop: Header=BB43_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB43_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB43_94
.LBB43_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB43_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_108 Depth 2
                                        #     Child Loop BB43_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB43_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB43_106 Depth=1
	movl	$0, -12(%rbp)
.LBB43_108:                             # %for.cond823
                                        #   Parent Loop BB43_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB43_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB43_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB43_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_108
.LBB43_111:                             # %for.end835
                                        #   in Loop: Header=BB43_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB43_112:                             # %for.cond852
                                        #   Parent Loop BB43_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB43_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB43_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -104(%rbp)
	jge	.LBB43_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB43_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB43_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB43_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-132(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB43_117
.LBB43_116:                             # %if.else915
                                        #   in Loop: Header=BB43_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-132(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB43_117:                             # %if.end968
                                        #   in Loop: Header=BB43_112 Depth=2
	jmp	.LBB43_122
.LBB43_118:                             # %if.else969
                                        #   in Loop: Header=BB43_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB43_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB43_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB43_121
.LBB43_120:                             # %if.else1019
                                        #   in Loop: Header=BB43_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB43_121:                             # %if.end1066
                                        #   in Loop: Header=BB43_112 Depth=2
	jmp	.LBB43_122
.LBB43_122:                             # %if.end1067
                                        #   in Loop: Header=BB43_112 Depth=2
	jmp	.LBB43_123
.LBB43_123:                             # %for.inc1068
                                        #   in Loop: Header=BB43_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_112
.LBB43_124:                             # %for.end1070
                                        #   in Loop: Header=BB43_106 Depth=1
	jmp	.LBB43_125
.LBB43_125:                             # %for.inc1071
                                        #   in Loop: Header=BB43_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_106
.LBB43_126:                             # %for.end1073
	jmp	.LBB43_212
.LBB43_127:                             # %if.else1074
	cmpl	$3, -140(%rbp)
	jne	.LBB43_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB43_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB43_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB43_129 Depth=1
	movl	$0, -16(%rbp)
.LBB43_131:                             # %for.cond1083
                                        #   Parent Loop BB43_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB43_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB43_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB43_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_131
.LBB43_134:                             # %for.end1101
                                        #   in Loop: Header=BB43_129 Depth=1
	jmp	.LBB43_135
.LBB43_135:                             # %for.inc1102
                                        #   in Loop: Header=BB43_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_129
.LBB43_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB43_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB43_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB43_137 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB43_139:                             # %land.end1111
                                        #   in Loop: Header=BB43_137 Depth=1
	testb	$1, %al
	jne	.LBB43_140
	jmp	.LBB43_146
.LBB43_140:                             # %for.body1113
                                        #   in Loop: Header=BB43_137 Depth=1
	movl	$0, -16(%rbp)
.LBB43_141:                             # %for.cond1114
                                        #   Parent Loop BB43_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB43_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB43_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB43_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_141
.LBB43_144:                             # %for.end1143
                                        #   in Loop: Header=BB43_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB43_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_137
.LBB43_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB43_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB43_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB43_147 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB43_149:                             # %land.end1177
                                        #   in Loop: Header=BB43_147 Depth=1
	testb	$1, %al
	jne	.LBB43_150
	jmp	.LBB43_156
.LBB43_150:                             # %for.body1179
                                        #   in Loop: Header=BB43_147 Depth=1
	movl	$0, -12(%rbp)
.LBB43_151:                             # %for.cond1180
                                        #   Parent Loop BB43_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB43_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB43_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB43_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_151
.LBB43_154:                             # %for.end1209
                                        #   in Loop: Header=BB43_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB43_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_147
.LBB43_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB43_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB43_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB43_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB43_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB43_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB43_164
.LBB43_160:                             # %if.else1261
                                        #   in Loop: Header=BB43_157 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB43_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB43_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB43_163
.LBB43_162:                             # %if.else1287
                                        #   in Loop: Header=BB43_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB43_163:                             # %if.end1310
                                        #   in Loop: Header=BB43_157 Depth=1
	jmp	.LBB43_164
.LBB43_164:                             # %if.end1311
                                        #   in Loop: Header=BB43_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB43_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB43_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB43_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB43_157 Depth=1
	movl	$1, %eax
	jmp	.LBB43_168
.LBB43_167:                             # %cond.false1322
                                        #   in Loop: Header=BB43_157 Depth=1
	movl	-136(%rbp), %eax
.LBB43_168:                             # %cond.end1323
                                        #   in Loop: Header=BB43_157 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB43_169:                             # %if.end1335
                                        #   in Loop: Header=BB43_157 Depth=1
	cmpl	$0, -108(%rbp)
	jne	.LBB43_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB43_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB43_171:                             # %if.end1347
                                        #   in Loop: Header=BB43_157 Depth=1
	jmp	.LBB43_172
.LBB43_172:                             # %for.inc1348
                                        #   in Loop: Header=BB43_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB43_157
.LBB43_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB43_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_178 Depth 2
                                        #     Child Loop BB43_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB43_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB43_174 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB43_176:                             # %land.end1359
                                        #   in Loop: Header=BB43_174 Depth=1
	testb	$1, %al
	jne	.LBB43_177
	jmp	.LBB43_187
.LBB43_177:                             # %for.body1361
                                        #   in Loop: Header=BB43_174 Depth=1
	movl	$0, -16(%rbp)
.LBB43_178:                             # %for.cond1362
                                        #   Parent Loop BB43_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB43_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB43_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB43_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_178
.LBB43_181:                             # %for.end1374
                                        #   in Loop: Header=BB43_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB43_182:                             # %for.cond1391
                                        #   Parent Loop BB43_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB43_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB43_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB43_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_182
.LBB43_185:                             # %for.end1416
                                        #   in Loop: Header=BB43_174 Depth=1
	jmp	.LBB43_186
.LBB43_186:                             # %for.inc1417
                                        #   in Loop: Header=BB43_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_174
.LBB43_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB43_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_192 Depth 2
                                        #     Child Loop BB43_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB43_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB43_188 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB43_190:                             # %land.end1426
                                        #   in Loop: Header=BB43_188 Depth=1
	testb	$1, %al
	jne	.LBB43_191
	jmp	.LBB43_210
.LBB43_191:                             # %for.body1428
                                        #   in Loop: Header=BB43_188 Depth=1
	movl	$0, -12(%rbp)
.LBB43_192:                             # %for.cond1429
                                        #   Parent Loop BB43_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB43_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB43_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB43_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_192
.LBB43_195:                             # %for.end1441
                                        #   in Loop: Header=BB43_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB43_196:                             # %for.cond1458
                                        #   Parent Loop BB43_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB43_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB43_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB43_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB43_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB43_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB43_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB43_201
.LBB43_200:                             # %if.else1521
                                        #   in Loop: Header=BB43_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB43_201:                             # %if.end1574
                                        #   in Loop: Header=BB43_196 Depth=2
	jmp	.LBB43_206
.LBB43_202:                             # %if.else1575
                                        #   in Loop: Header=BB43_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB43_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB43_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB43_205
.LBB43_204:                             # %if.else1625
                                        #   in Loop: Header=BB43_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB43_205:                             # %if.end1672
                                        #   in Loop: Header=BB43_196 Depth=2
	jmp	.LBB43_206
.LBB43_206:                             # %if.end1673
                                        #   in Loop: Header=BB43_196 Depth=2
	jmp	.LBB43_207
.LBB43_207:                             # %for.inc1674
                                        #   in Loop: Header=BB43_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_196
.LBB43_208:                             # %for.end1676
                                        #   in Loop: Header=BB43_188 Depth=1
	jmp	.LBB43_209
.LBB43_209:                             # %for.inc1677
                                        #   in Loop: Header=BB43_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_188
.LBB43_210:                             # %for.end1679
	jmp	.LBB43_211
.LBB43_211:                             # %if.end1680
	jmp	.LBB43_212
.LBB43_212:                             # %if.end1681
	jmp	.LBB43_213
.LBB43_213:                             # %if.end1682
	movl	$0, -196(%rbp)
	movl	$0, -212(%rbp)
	movl	$0, -116(%rbp)
.LBB43_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_216 Depth 2
                                        #       Child Loop BB43_218 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB43_214 Depth=1
	movl	$0, -112(%rbp)
.LBB43_216:                             # %for.cond1689
                                        #   Parent Loop BB43_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_218 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB43_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB43_216 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$1, -36(%rbp)
.LBB43_218:                             # %for.cond1722
                                        #   Parent Loop BB43_214 Depth=1
                                        #     Parent Loop BB43_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB43_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB43_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB43_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB43_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB43_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB43_223
.LBB43_222:                             # %if.then1731
                                        #   in Loop: Header=BB43_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_224
.LBB43_223:                             # %if.else1740
                                        #   in Loop: Header=BB43_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB43_224:                             # %if.end1749
                                        #   in Loop: Header=BB43_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB43_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB43_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB43_230
.LBB43_226:                             # %if.else1761
                                        #   in Loop: Header=BB43_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB43_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB43_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB43_229
.LBB43_228:                             # %if.else1792
                                        #   in Loop: Header=BB43_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB43_229:                             # %if.end1820
                                        #   in Loop: Header=BB43_218 Depth=3
	jmp	.LBB43_230
.LBB43_230:                             # %if.end1821
                                        #   in Loop: Header=BB43_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB43_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB43_218 Depth=3
	movl	-116(%rbp), %eax
	addl	-200(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB43_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB43_218 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB43_234
.LBB43_233:                             # %if.then1839
                                        #   in Loop: Header=BB43_218 Depth=3
	movl	-196(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -196(%rbp)
	jmp	.LBB43_235
.LBB43_234:                             # %if.else1841
                                        #   in Loop: Header=BB43_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -196(%rbp)
.LBB43_235:                             # %if.end1848
                                        #   in Loop: Header=BB43_218 Depth=3
	movl	$2, -212(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB43_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB43_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB43_247
.LBB43_237:                             # %if.else1872
                                        #   in Loop: Header=BB43_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB43_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB43_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB43_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB43_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB43_241
.LBB43_240:                             # %if.else1893
                                        #   in Loop: Header=BB43_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB43_241:                             # %if.end1908
                                        #   in Loop: Header=BB43_218 Depth=3
	jmp	.LBB43_246
.LBB43_242:                             # %if.else1909
                                        #   in Loop: Header=BB43_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB43_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB43_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB43_245
.LBB43_244:                             # %if.else1924
                                        #   in Loop: Header=BB43_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB43_245:                             # %if.end1936
                                        #   in Loop: Header=BB43_218 Depth=3
	jmp	.LBB43_246
.LBB43_246:                             # %if.end1937
                                        #   in Loop: Header=BB43_218 Depth=3
	jmp	.LBB43_247
.LBB43_247:                             # %if.end1938
                                        #   in Loop: Header=BB43_218 Depth=3
	jmp	.LBB43_248
.LBB43_248:                             # %if.end1939
                                        #   in Loop: Header=BB43_218 Depth=3
	cmpl	$0, -108(%rbp)
	jne	.LBB43_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB43_218 Depth=3
	movl	-144(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB43_250:                             # %if.end1949
                                        #   in Loop: Header=BB43_218 Depth=3
	jmp	.LBB43_251
.LBB43_251:                             # %for.inc1950
                                        #   in Loop: Header=BB43_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB43_218
.LBB43_252:                             # %for.end1952
                                        #   in Loop: Header=BB43_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB43_216 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB43_216
.LBB43_254:                             # %for.end1957
                                        #   in Loop: Header=BB43_214 Depth=1
	jmp	.LBB43_255
.LBB43_255:                             # %for.inc1958
                                        #   in Loop: Header=BB43_214 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB43_214
.LBB43_256:                             # %for.end1960
	cmpl	$4, -196(%rbp)
	jge	.LBB43_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -108(%rbp)
	jne	.LBB43_278
# %bb.258:                              # %if.then1965
	movl	$0, -212(%rbp)
	movl	$0, -116(%rbp)
.LBB43_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_261 Depth 2
                                        #       Child Loop BB43_265 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB43_259 Depth=1
	movl	$0, -112(%rbp)
.LBB43_261:                             # %for.cond1972
                                        #   Parent Loop BB43_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_265 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB43_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB43_261 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB43_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB43_261 Depth=2
	movslq	-140(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-140(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB43_264:                             # %if.end2016
                                        #   in Loop: Header=BB43_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB43_265:                             # %for.cond2018
                                        #   Parent Loop BB43_259 Depth=1
                                        #     Parent Loop BB43_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB43_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB43_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB43_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB43_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB43_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB43_270
.LBB43_269:                             # %if.then2030
                                        #   in Loop: Header=BB43_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_271
.LBB43_270:                             # %if.else2039
                                        #   in Loop: Header=BB43_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB43_271:                             # %if.end2048
                                        #   in Loop: Header=BB43_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB43_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB43_265
.LBB43_273:                             # %for.end2060
                                        #   in Loop: Header=BB43_261 Depth=2
	jmp	.LBB43_274
.LBB43_274:                             # %for.inc2061
                                        #   in Loop: Header=BB43_261 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB43_261
.LBB43_275:                             # %for.end2063
                                        #   in Loop: Header=BB43_259 Depth=1
	jmp	.LBB43_276
.LBB43_276:                             # %for.inc2064
                                        #   in Loop: Header=BB43_259 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB43_259
.LBB43_277:                             # %for.end2066
	jmp	.LBB43_278
.LBB43_278:                             # %if.end2067
	cmpl	$2, -212(%rbp)
	jne	.LBB43_280
# %bb.279:                              # %if.then2070
	movl	$2, -136(%rbp)
.LBB43_280:                             # %if.end2071
	movl	$0, -24(%rbp)
.LBB43_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_285 Depth 2
                                        #       Child Loop BB43_287 Depth 3
                                        #         Child Loop BB43_289 Depth 4
                                        #         Child Loop BB43_293 Depth 4
                                        #       Child Loop BB43_299 Depth 3
                                        #         Child Loop BB43_303 Depth 4
                                        #         Child Loop BB43_307 Depth 4
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB43_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB43_281 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB43_283:                             # %land.end2079
                                        #   in Loop: Header=BB43_281 Depth=1
	testb	$1, %al
	jne	.LBB43_284
	jmp	.LBB43_340
.LBB43_284:                             # %for.body2081
                                        #   in Loop: Header=BB43_281 Depth=1
	movl	$0, -28(%rbp)
.LBB43_285:                             # %for.cond2082
                                        #   Parent Loop BB43_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_287 Depth 3
                                        #         Child Loop BB43_289 Depth 4
                                        #         Child Loop BB43_293 Depth 4
                                        #       Child Loop BB43_299 Depth 3
                                        #         Child Loop BB43_303 Depth 4
                                        #         Child Loop BB43_307 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB43_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB43_285 Depth=2
	movl	$0, -12(%rbp)
.LBB43_287:                             # %for.cond2087
                                        #   Parent Loop BB43_281 Depth=1
                                        #     Parent Loop BB43_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_289 Depth 4
                                        #         Child Loop BB43_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB43_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB43_287 Depth=3
	movl	$0, -16(%rbp)
.LBB43_289:                             # %for.cond2091
                                        #   Parent Loop BB43_281 Depth=1
                                        #     Parent Loop BB43_285 Depth=2
                                        #       Parent Loop BB43_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB43_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB43_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB43_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_289
.LBB43_292:                             # %for.end2106
                                        #   in Loop: Header=BB43_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB43_293:                             # %for.cond2125
                                        #   Parent Loop BB43_281 Depth=1
                                        #     Parent Loop BB43_285 Depth=2
                                        #       Parent Loop BB43_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB43_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB43_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB43_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_293
.LBB43_296:                             # %for.end2156
                                        #   in Loop: Header=BB43_287 Depth=3
	jmp	.LBB43_297
.LBB43_297:                             # %for.inc2157
                                        #   in Loop: Header=BB43_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_287
.LBB43_298:                             # %for.end2159
                                        #   in Loop: Header=BB43_285 Depth=2
	movl	$0, -16(%rbp)
.LBB43_299:                             # %for.cond2160
                                        #   Parent Loop BB43_281 Depth=1
                                        #     Parent Loop BB43_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_303 Depth 4
                                        #         Child Loop BB43_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB43_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB43_299 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB43_301:                             # %land.end2166
                                        #   in Loop: Header=BB43_299 Depth=3
	testb	$1, %al
	jne	.LBB43_302
	jmp	.LBB43_336
.LBB43_302:                             # %for.body2168
                                        #   in Loop: Header=BB43_299 Depth=3
	movl	$0, -12(%rbp)
.LBB43_303:                             # %for.cond2169
                                        #   Parent Loop BB43_281 Depth=1
                                        #     Parent Loop BB43_285 Depth=2
                                        #       Parent Loop BB43_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB43_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB43_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB43_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_303
.LBB43_306:                             # %for.end2184
                                        #   in Loop: Header=BB43_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB43_307:                             # %for.cond2203
                                        #   Parent Loop BB43_281 Depth=1
                                        #     Parent Loop BB43_285 Depth=2
                                        #       Parent Loop BB43_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB43_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB43_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB43_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB43_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB43_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB43_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB43_312
.LBB43_311:                             # %cond.false2231
                                        #   in Loop: Header=BB43_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB43_312:                             # %cond.end2250
                                        #   in Loop: Header=BB43_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB43_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB43_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB43_318
.LBB43_314:                             # %cond.false2257
                                        #   in Loop: Header=BB43_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB43_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB43_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB43_317
.LBB43_316:                             # %cond.false2279
                                        #   in Loop: Header=BB43_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB43_317:                             # %cond.end2298
                                        #   in Loop: Header=BB43_307 Depth=4
.LBB43_318:                             # %cond.end2300
                                        #   in Loop: Header=BB43_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB43_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB43_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB43_321
.LBB43_320:                             # %cond.false2333
                                        #   in Loop: Header=BB43_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB43_321:                             # %cond.end2352
                                        #   in Loop: Header=BB43_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB43_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB43_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB43_327
.LBB43_323:                             # %cond.false2359
                                        #   in Loop: Header=BB43_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB43_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB43_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB43_326
.LBB43_325:                             # %cond.false2381
                                        #   in Loop: Header=BB43_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB43_326:                             # %cond.end2400
                                        #   in Loop: Header=BB43_307 Depth=4
.LBB43_327:                             # %cond.end2402
                                        #   in Loop: Header=BB43_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB43_332
.LBB43_328:                             # %if.else2412
                                        #   in Loop: Header=BB43_307 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB43_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB43_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB43_331
.LBB43_330:                             # %if.else2439
                                        #   in Loop: Header=BB43_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB43_331:                             # %if.end2468
                                        #   in Loop: Header=BB43_307 Depth=4
	jmp	.LBB43_332
.LBB43_332:                             # %if.end2469
                                        #   in Loop: Header=BB43_307 Depth=4
	jmp	.LBB43_333
.LBB43_333:                             # %for.inc2470
                                        #   in Loop: Header=BB43_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_307
.LBB43_334:                             # %for.end2472
                                        #   in Loop: Header=BB43_299 Depth=3
	jmp	.LBB43_335
.LBB43_335:                             # %for.inc2473
                                        #   in Loop: Header=BB43_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_299
.LBB43_336:                             # %for.end2475
                                        #   in Loop: Header=BB43_285 Depth=2
	jmp	.LBB43_337
.LBB43_337:                             # %for.inc2476
                                        #   in Loop: Header=BB43_285 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB43_285
.LBB43_338:                             # %for.end2478
                                        #   in Loop: Header=BB43_281 Depth=1
	jmp	.LBB43_339
.LBB43_339:                             # %for.inc2479
                                        #   in Loop: Header=BB43_281 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB43_281
.LBB43_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB43_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB43_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB43_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB43_342 Depth=1
	movl	$0, -16(%rbp)
.LBB43_344:                             # %for.cond2490
                                        #   Parent Loop BB43_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB43_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB43_344 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB43_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB43_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB43_348
.LBB43_347:                             # %if.else2518
                                        #   in Loop: Header=BB43_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB43_348:                             # %if.end2536
                                        #   in Loop: Header=BB43_344 Depth=2
	jmp	.LBB43_349
.LBB43_349:                             # %for.inc2537
                                        #   in Loop: Header=BB43_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_344
.LBB43_350:                             # %for.end2539
                                        #   in Loop: Header=BB43_342 Depth=1
	jmp	.LBB43_351
.LBB43_351:                             # %for.inc2540
                                        #   in Loop: Header=BB43_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_342
.LBB43_352:                             # %for.end2542
	jmp	.LBB43_353
.LBB43_353:                             # %if.end2543
	movl	-136(%rbp), %ebx
	cmpl	$1885380814, -380(%rbp) # imm = 0x7060A0CE
	jne	.LBB43_355
.LBB43_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_354
.Lfunc_end43:
	.size	dct_chroma.34, .Lfunc_end43-dct_chroma.34
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.35         # -- Begin function copyblock_sp.35
	.p2align	4, 0x90
	.type	copyblock_sp.35,@function
copyblock_sp.35:                        # @copyblock_sp.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1297510896, -92(%rbp)  # imm = 0x4D5671F0
	movl	%edi, -68(%rbp)
	movl	%esi, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -84(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-84(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movl	$0, -4(%rbp)
.LBB44_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB44_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_3:                               # %for.cond4
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB44_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-68(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_3
.LBB44_6:                               # %for.end
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_7
.LBB44_7:                               # %for.inc17
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_1
.LBB44_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB44_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB44_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB44_9 Depth=1
	movl	$0, -8(%rbp)
.LBB44_11:                              # %for.cond24
                                        #   Parent Loop BB44_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB44_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB44_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB44_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_11
.LBB44_14:                              # %for.end53
                                        #   in Loop: Header=BB44_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB44_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_9
.LBB44_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB44_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB44_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB44_17 Depth=1
	movl	$0, -4(%rbp)
.LBB44_19:                              # %for.cond86
                                        #   Parent Loop BB44_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB44_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB44_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB44_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_19
.LBB44_22:                              # %for.end115
                                        #   in Loop: Header=BB44_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB44_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_17
.LBB44_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB44_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB44_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB44_25 Depth=1
	movl	$0, -8(%rbp)
.LBB44_27:                              # %for.cond149
                                        #   Parent Loop BB44_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB44_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB44_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-88(%rbp), %eax
	movl	-72(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-84(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB44_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_27
.LBB44_30:                              # %for.end184
                                        #   in Loop: Header=BB44_25 Depth=1
	jmp	.LBB44_31
.LBB44_31:                              # %for.inc185
                                        #   in Loop: Header=BB44_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_25
.LBB44_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB44_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_35 Depth 2
                                        #     Child Loop BB44_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB44_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB44_33 Depth=1
	movl	$0, -8(%rbp)
.LBB44_35:                              # %for.cond192
                                        #   Parent Loop BB44_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB44_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB44_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB44_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_35
.LBB44_38:                              # %for.end205
                                        #   in Loop: Header=BB44_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB44_39:                              # %for.cond224
                                        #   Parent Loop BB44_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB44_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB44_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB44_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_39
.LBB44_42:                              # %for.end251
                                        #   in Loop: Header=BB44_33 Depth=1
	jmp	.LBB44_43
.LBB44_43:                              # %for.inc252
                                        #   in Loop: Header=BB44_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_33
.LBB44_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB44_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_47 Depth 2
                                        #     Child Loop BB44_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB44_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB44_45 Depth=1
	movl	$0, -4(%rbp)
.LBB44_47:                              # %for.cond259
                                        #   Parent Loop BB44_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB44_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB44_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB44_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_47
.LBB44_50:                              # %for.end272
                                        #   in Loop: Header=BB44_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB44_51:                              # %for.cond291
                                        #   Parent Loop BB44_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB44_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB44_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB44_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB44_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB44_55
.LBB44_54:                              # %cond.false
                                        #   in Loop: Header=BB44_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB44_55:                              # %cond.end
                                        #   in Loop: Header=BB44_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB44_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB44_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_61
.LBB44_57:                              # %cond.false316
                                        #   in Loop: Header=BB44_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB44_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB44_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB44_60
.LBB44_59:                              # %cond.false327
                                        #   in Loop: Header=BB44_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB44_60:                              # %cond.end335
                                        #   in Loop: Header=BB44_51 Depth=2
.LBB44_61:                              # %cond.end337
                                        #   in Loop: Header=BB44_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB44_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB44_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB44_64
.LBB44_63:                              # %cond.false355
                                        #   in Loop: Header=BB44_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB44_64:                              # %cond.end363
                                        #   in Loop: Header=BB44_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB44_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB44_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_70
.LBB44_66:                              # %cond.false369
                                        #   in Loop: Header=BB44_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB44_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB44_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB44_69
.LBB44_68:                              # %cond.false380
                                        #   in Loop: Header=BB44_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB44_69:                              # %cond.end388
                                        #   in Loop: Header=BB44_51 Depth=2
.LBB44_70:                              # %cond.end390
                                        #   in Loop: Header=BB44_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB44_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_51
.LBB44_72:                              # %for.end399
                                        #   in Loop: Header=BB44_45 Depth=1
	jmp	.LBB44_73
.LBB44_73:                              # %for.inc400
                                        #   in Loop: Header=BB44_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_45
.LBB44_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB44_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB44_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB44_75 Depth=1
	movl	$0, -8(%rbp)
.LBB44_77:                              # %for.cond407
                                        #   Parent Loop BB44_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB44_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB44_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-80(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-68(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB44_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_77
.LBB44_80:                              # %for.end427
                                        #   in Loop: Header=BB44_75 Depth=1
	jmp	.LBB44_81
.LBB44_81:                              # %for.inc428
                                        #   in Loop: Header=BB44_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_75
.LBB44_82:                              # %for.end430
	cmpl	$1297510896, -92(%rbp)  # imm = 0x4D5671F0
	jne	.LBB44_84
.LBB44_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_83
.Lfunc_end44:
	.size	copyblock_sp.35, .Lfunc_end44-copyblock_sp.35
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.36           # -- Begin function dct_chroma.36
	.p2align	4, 0x90
	.type	dct_chroma.36,@function
dct_chroma.36:                          # @dct_chroma.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$1967951886, -380(%rbp) # imm = 0x754C900E
	movl	%edi, -20(%rbp)
	movl	%esi, -132(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB45_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB45_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB45_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -124(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -200(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -212(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB45_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB45_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -104(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB45_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB45_11
.LBB45_7:                               # %cond.false
	cmpl	$51, -128(%rbp)
	jle	.LBB45_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB45_10
.LBB45_9:                               # %cond.false25
	movl	-128(%rbp), %eax
.LBB45_10:                              # %cond.end
.LBB45_11:                              # %cond.end26
	movl	%eax, -128(%rbp)
	cmpl	$0, -128(%rbp)
	jge	.LBB45_13
# %bb.12:                               # %cond.true29
	movl	-128(%rbp), %eax
	jmp	.LBB45_14
.LBB45_13:                              # %cond.false30
	movl	-128(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB45_14:                              # %cond.end34
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB45_16
# %bb.15:                               # %if.then
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -108(%rbp)
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -136(%rbp)
	movl	-108(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -212(%rbp)
.LBB45_16:                              # %if.end
	movl	$0, -24(%rbp)
.LBB45_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_19 Depth 2
                                        #       Child Loop BB45_21 Depth 3
                                        #         Child Loop BB45_25 Depth 4
                                        #       Child Loop BB45_31 Depth 3
                                        #         Child Loop BB45_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB45_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB45_17 Depth=1
	movl	$0, -28(%rbp)
.LBB45_19:                              # %for.cond56
                                        #   Parent Loop BB45_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_21 Depth 3
                                        #         Child Loop BB45_25 Depth 4
                                        #       Child Loop BB45_31 Depth 3
                                        #         Child Loop BB45_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB45_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB45_19 Depth=2
	movl	$0, -12(%rbp)
.LBB45_21:                              # %for.cond60
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB45_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB45_21 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB45_23:                              # %land.end64
                                        #   in Loop: Header=BB45_21 Depth=3
	testb	$1, %al
	jne	.LBB45_24
	jmp	.LBB45_30
.LBB45_24:                              # %for.body66
                                        #   in Loop: Header=BB45_21 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB45_25:                              # %for.cond68
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        #       Parent Loop BB45_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB45_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB45_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB45_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_25
.LBB45_28:                              # %for.end
                                        #   in Loop: Header=BB45_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-28(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB45_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_21
.LBB45_30:                              # %for.end141
                                        #   in Loop: Header=BB45_19 Depth=2
	movl	$0, -16(%rbp)
.LBB45_31:                              # %for.cond142
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB45_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB45_31 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB45_33:                              # %land.end148
                                        #   in Loop: Header=BB45_31 Depth=3
	testb	$1, %al
	jne	.LBB45_34
	jmp	.LBB45_40
.LBB45_34:                              # %for.body150
                                        #   in Loop: Header=BB45_31 Depth=3
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB45_35:                              # %for.cond152
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        #       Parent Loop BB45_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB45_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB45_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB45_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_35
.LBB45_38:                              # %for.end189
                                        #   in Loop: Header=BB45_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB45_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_31
.LBB45_40:                              # %for.end230
                                        #   in Loop: Header=BB45_19 Depth=2
	jmp	.LBB45_41
.LBB45_41:                              # %for.inc231
                                        #   in Loop: Header=BB45_19 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB45_19
.LBB45_42:                              # %for.end233
                                        #   in Loop: Header=BB45_17 Depth=1
	jmp	.LBB45_43
.LBB45_43:                              # %for.inc234
                                        #   in Loop: Header=BB45_17 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB45_17
.LBB45_44:                              # %for.end236
	cmpl	$1, -144(%rbp)
	jne	.LBB45_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB45_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB45_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB45_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB45_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB45_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB45_50
.LBB45_49:                              # %if.else
                                        #   in Loop: Header=BB45_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB45_50:                              # %if.end349
                                        #   in Loop: Header=BB45_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB45_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB45_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB45_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB45_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB45_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB45_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB45_54:                              # %if.end359
                                        #   in Loop: Header=BB45_46 Depth=1
	jmp	.LBB45_55
.LBB45_55:                              # %if.end360
                                        #   in Loop: Header=BB45_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB45_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB45_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB45_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB45_46 Depth=1
	movl	$1, %eax
	jmp	.LBB45_59
.LBB45_58:                              # %cond.false370
                                        #   in Loop: Header=BB45_46 Depth=1
	movl	-132(%rbp), %eax
.LBB45_59:                              # %cond.end371
                                        #   in Loop: Header=BB45_46 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -140(%rbp)
.LBB45_60:                              # %if.end384
                                        #   in Loop: Header=BB45_46 Depth=1
	movl	-140(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB45_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB45_46
.LBB45_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB45_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB45_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB45_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB45_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB45_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB45_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB45_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB45_68
.LBB45_67:                              # %if.else447
                                        #   in Loop: Header=BB45_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB45_68:                              # %if.end461
                                        #   in Loop: Header=BB45_63 Depth=1
	jmp	.LBB45_73
.LBB45_69:                              # %if.else462
                                        #   in Loop: Header=BB45_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB45_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB45_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB45_72
.LBB45_71:                              # %if.else479
                                        #   in Loop: Header=BB45_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB45_72:                              # %if.end493
                                        #   in Loop: Header=BB45_63 Depth=1
	jmp	.LBB45_73
.LBB45_73:                              # %if.end494
                                        #   in Loop: Header=BB45_63 Depth=1
	jmp	.LBB45_74
.LBB45_74:                              # %for.inc495
                                        #   in Loop: Header=BB45_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_63
.LBB45_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB45_213
.LBB45_76:                              # %if.else514
	cmpl	$2, -144(%rbp)
	jne	.LBB45_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB45_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB45_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB45_78 Depth=1
	movl	$0, -16(%rbp)
.LBB45_80:                              # %for.cond523
                                        #   Parent Loop BB45_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB45_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB45_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB45_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_80
.LBB45_83:                              # %for.end541
                                        #   in Loop: Header=BB45_78 Depth=1
	jmp	.LBB45_84
.LBB45_84:                              # %for.inc542
                                        #   in Loop: Header=BB45_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_78
.LBB45_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB45_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB45_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB45_86 Depth=1
	movl	$0, -12(%rbp)
.LBB45_88:                              # %for.cond605
                                        #   Parent Loop BB45_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB45_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB45_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB45_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_88
.LBB45_91:                              # %for.end634
                                        #   in Loop: Header=BB45_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB45_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_86
.LBB45_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB45_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB45_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB45_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB45_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB45_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB45_98
.LBB45_97:                              # %if.else700
                                        #   in Loop: Header=BB45_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB45_98:                              # %if.end723
                                        #   in Loop: Header=BB45_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB45_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB45_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB45_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB45_94 Depth=1
	movl	$1, %eax
	jmp	.LBB45_102
.LBB45_101:                             # %cond.false735
                                        #   in Loop: Header=BB45_94 Depth=1
	movl	-132(%rbp), %eax
.LBB45_102:                             # %cond.end736
                                        #   in Loop: Header=BB45_94 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB45_103:                             # %if.end748
                                        #   in Loop: Header=BB45_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB45_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB45_94
.LBB45_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB45_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_108 Depth 2
                                        #     Child Loop BB45_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB45_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB45_106 Depth=1
	movl	$0, -12(%rbp)
.LBB45_108:                             # %for.cond823
                                        #   Parent Loop BB45_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB45_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB45_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB45_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_108
.LBB45_111:                             # %for.end835
                                        #   in Loop: Header=BB45_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB45_112:                             # %for.cond852
                                        #   Parent Loop BB45_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB45_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB45_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -108(%rbp)
	jge	.LBB45_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB45_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB45_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB45_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB45_117
.LBB45_116:                             # %if.else915
                                        #   in Loop: Header=BB45_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB45_117:                             # %if.end968
                                        #   in Loop: Header=BB45_112 Depth=2
	jmp	.LBB45_122
.LBB45_118:                             # %if.else969
                                        #   in Loop: Header=BB45_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB45_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB45_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB45_121
.LBB45_120:                             # %if.else1019
                                        #   in Loop: Header=BB45_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB45_121:                             # %if.end1066
                                        #   in Loop: Header=BB45_112 Depth=2
	jmp	.LBB45_122
.LBB45_122:                             # %if.end1067
                                        #   in Loop: Header=BB45_112 Depth=2
	jmp	.LBB45_123
.LBB45_123:                             # %for.inc1068
                                        #   in Loop: Header=BB45_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_112
.LBB45_124:                             # %for.end1070
                                        #   in Loop: Header=BB45_106 Depth=1
	jmp	.LBB45_125
.LBB45_125:                             # %for.inc1071
                                        #   in Loop: Header=BB45_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_106
.LBB45_126:                             # %for.end1073
	jmp	.LBB45_212
.LBB45_127:                             # %if.else1074
	cmpl	$3, -144(%rbp)
	jne	.LBB45_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB45_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB45_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB45_129 Depth=1
	movl	$0, -16(%rbp)
.LBB45_131:                             # %for.cond1083
                                        #   Parent Loop BB45_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB45_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB45_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB45_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_131
.LBB45_134:                             # %for.end1101
                                        #   in Loop: Header=BB45_129 Depth=1
	jmp	.LBB45_135
.LBB45_135:                             # %for.inc1102
                                        #   in Loop: Header=BB45_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_129
.LBB45_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB45_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB45_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB45_137 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB45_139:                             # %land.end1111
                                        #   in Loop: Header=BB45_137 Depth=1
	testb	$1, %al
	jne	.LBB45_140
	jmp	.LBB45_146
.LBB45_140:                             # %for.body1113
                                        #   in Loop: Header=BB45_137 Depth=1
	movl	$0, -16(%rbp)
.LBB45_141:                             # %for.cond1114
                                        #   Parent Loop BB45_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB45_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB45_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB45_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_141
.LBB45_144:                             # %for.end1143
                                        #   in Loop: Header=BB45_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB45_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_137
.LBB45_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB45_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB45_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB45_147 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB45_149:                             # %land.end1177
                                        #   in Loop: Header=BB45_147 Depth=1
	testb	$1, %al
	jne	.LBB45_150
	jmp	.LBB45_156
.LBB45_150:                             # %for.body1179
                                        #   in Loop: Header=BB45_147 Depth=1
	movl	$0, -12(%rbp)
.LBB45_151:                             # %for.cond1180
                                        #   Parent Loop BB45_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB45_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB45_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB45_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_151
.LBB45_154:                             # %for.end1209
                                        #   in Loop: Header=BB45_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB45_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_147
.LBB45_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB45_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB45_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB45_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB45_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB45_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB45_164
.LBB45_160:                             # %if.else1261
                                        #   in Loop: Header=BB45_157 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB45_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB45_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB45_163
.LBB45_162:                             # %if.else1287
                                        #   in Loop: Header=BB45_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB45_163:                             # %if.end1310
                                        #   in Loop: Header=BB45_157 Depth=1
	jmp	.LBB45_164
.LBB45_164:                             # %if.end1311
                                        #   in Loop: Header=BB45_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB45_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB45_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB45_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB45_157 Depth=1
	movl	$1, %eax
	jmp	.LBB45_168
.LBB45_167:                             # %cond.false1322
                                        #   in Loop: Header=BB45_157 Depth=1
	movl	-132(%rbp), %eax
.LBB45_168:                             # %cond.end1323
                                        #   in Loop: Header=BB45_157 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB45_169:                             # %if.end1335
                                        #   in Loop: Header=BB45_157 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB45_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB45_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB45_171:                             # %if.end1347
                                        #   in Loop: Header=BB45_157 Depth=1
	jmp	.LBB45_172
.LBB45_172:                             # %for.inc1348
                                        #   in Loop: Header=BB45_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB45_157
.LBB45_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB45_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_178 Depth 2
                                        #     Child Loop BB45_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB45_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB45_174 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB45_176:                             # %land.end1359
                                        #   in Loop: Header=BB45_174 Depth=1
	testb	$1, %al
	jne	.LBB45_177
	jmp	.LBB45_187
.LBB45_177:                             # %for.body1361
                                        #   in Loop: Header=BB45_174 Depth=1
	movl	$0, -16(%rbp)
.LBB45_178:                             # %for.cond1362
                                        #   Parent Loop BB45_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB45_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB45_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB45_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_178
.LBB45_181:                             # %for.end1374
                                        #   in Loop: Header=BB45_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB45_182:                             # %for.cond1391
                                        #   Parent Loop BB45_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB45_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB45_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB45_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_182
.LBB45_185:                             # %for.end1416
                                        #   in Loop: Header=BB45_174 Depth=1
	jmp	.LBB45_186
.LBB45_186:                             # %for.inc1417
                                        #   in Loop: Header=BB45_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_174
.LBB45_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB45_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_192 Depth 2
                                        #     Child Loop BB45_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB45_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB45_188 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB45_190:                             # %land.end1426
                                        #   in Loop: Header=BB45_188 Depth=1
	testb	$1, %al
	jne	.LBB45_191
	jmp	.LBB45_210
.LBB45_191:                             # %for.body1428
                                        #   in Loop: Header=BB45_188 Depth=1
	movl	$0, -12(%rbp)
.LBB45_192:                             # %for.cond1429
                                        #   Parent Loop BB45_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB45_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB45_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB45_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_192
.LBB45_195:                             # %for.end1441
                                        #   in Loop: Header=BB45_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB45_196:                             # %for.cond1458
                                        #   Parent Loop BB45_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB45_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB45_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB45_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB45_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB45_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB45_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB45_201
.LBB45_200:                             # %if.else1521
                                        #   in Loop: Header=BB45_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB45_201:                             # %if.end1574
                                        #   in Loop: Header=BB45_196 Depth=2
	jmp	.LBB45_206
.LBB45_202:                             # %if.else1575
                                        #   in Loop: Header=BB45_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB45_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB45_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB45_205
.LBB45_204:                             # %if.else1625
                                        #   in Loop: Header=BB45_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB45_205:                             # %if.end1672
                                        #   in Loop: Header=BB45_196 Depth=2
	jmp	.LBB45_206
.LBB45_206:                             # %if.end1673
                                        #   in Loop: Header=BB45_196 Depth=2
	jmp	.LBB45_207
.LBB45_207:                             # %for.inc1674
                                        #   in Loop: Header=BB45_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_196
.LBB45_208:                             # %for.end1676
                                        #   in Loop: Header=BB45_188 Depth=1
	jmp	.LBB45_209
.LBB45_209:                             # %for.inc1677
                                        #   in Loop: Header=BB45_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_188
.LBB45_210:                             # %for.end1679
	jmp	.LBB45_211
.LBB45_211:                             # %if.end1680
	jmp	.LBB45_212
.LBB45_212:                             # %if.end1681
	jmp	.LBB45_213
.LBB45_213:                             # %if.end1682
	movl	$0, -196(%rbp)
	movl	$0, -208(%rbp)
	movl	$0, -112(%rbp)
.LBB45_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_216 Depth 2
                                        #       Child Loop BB45_218 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB45_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB45_214 Depth=1
	movl	$0, -116(%rbp)
.LBB45_216:                             # %for.cond1689
                                        #   Parent Loop BB45_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_218 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB45_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB45_216 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$1, -36(%rbp)
.LBB45_218:                             # %for.cond1722
                                        #   Parent Loop BB45_214 Depth=1
                                        #     Parent Loop BB45_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB45_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB45_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB45_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB45_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB45_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB45_223
.LBB45_222:                             # %if.then1731
                                        #   in Loop: Header=BB45_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_224
.LBB45_223:                             # %if.else1740
                                        #   in Loop: Header=BB45_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB45_224:                             # %if.end1749
                                        #   in Loop: Header=BB45_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB45_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB45_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB45_230
.LBB45_226:                             # %if.else1761
                                        #   in Loop: Header=BB45_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB45_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB45_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB45_229
.LBB45_228:                             # %if.else1792
                                        #   in Loop: Header=BB45_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB45_229:                             # %if.end1820
                                        #   in Loop: Header=BB45_218 Depth=3
	jmp	.LBB45_230
.LBB45_230:                             # %if.end1821
                                        #   in Loop: Header=BB45_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB45_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB45_218 Depth=3
	movl	-112(%rbp), %eax
	addl	-200(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB45_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB45_218 Depth=3
	cmpl	$0, -104(%rbp)
	je	.LBB45_234
.LBB45_233:                             # %if.then1839
                                        #   in Loop: Header=BB45_218 Depth=3
	movl	-196(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -196(%rbp)
	jmp	.LBB45_235
.LBB45_234:                             # %if.else1841
                                        #   in Loop: Header=BB45_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -196(%rbp)
.LBB45_235:                             # %if.end1848
                                        #   in Loop: Header=BB45_218 Depth=3
	movl	$2, -208(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB45_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB45_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB45_247
.LBB45_237:                             # %if.else1872
                                        #   in Loop: Header=BB45_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB45_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB45_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB45_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB45_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB45_241
.LBB45_240:                             # %if.else1893
                                        #   in Loop: Header=BB45_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB45_241:                             # %if.end1908
                                        #   in Loop: Header=BB45_218 Depth=3
	jmp	.LBB45_246
.LBB45_242:                             # %if.else1909
                                        #   in Loop: Header=BB45_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB45_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB45_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB45_245
.LBB45_244:                             # %if.else1924
                                        #   in Loop: Header=BB45_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB45_245:                             # %if.end1936
                                        #   in Loop: Header=BB45_218 Depth=3
	jmp	.LBB45_246
.LBB45_246:                             # %if.end1937
                                        #   in Loop: Header=BB45_218 Depth=3
	jmp	.LBB45_247
.LBB45_247:                             # %if.end1938
                                        #   in Loop: Header=BB45_218 Depth=3
	jmp	.LBB45_248
.LBB45_248:                             # %if.end1939
                                        #   in Loop: Header=BB45_218 Depth=3
	cmpl	$0, -104(%rbp)
	jne	.LBB45_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB45_218 Depth=3
	movl	-140(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB45_250:                             # %if.end1949
                                        #   in Loop: Header=BB45_218 Depth=3
	jmp	.LBB45_251
.LBB45_251:                             # %for.inc1950
                                        #   in Loop: Header=BB45_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB45_218
.LBB45_252:                             # %for.end1952
                                        #   in Loop: Header=BB45_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB45_216 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB45_216
.LBB45_254:                             # %for.end1957
                                        #   in Loop: Header=BB45_214 Depth=1
	jmp	.LBB45_255
.LBB45_255:                             # %for.inc1958
                                        #   in Loop: Header=BB45_214 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB45_214
.LBB45_256:                             # %for.end1960
	cmpl	$4, -196(%rbp)
	jge	.LBB45_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -104(%rbp)
	jne	.LBB45_278
# %bb.258:                              # %if.then1965
	movl	$0, -208(%rbp)
	movl	$0, -112(%rbp)
.LBB45_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_261 Depth 2
                                        #       Child Loop BB45_265 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB45_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB45_259 Depth=1
	movl	$0, -116(%rbp)
.LBB45_261:                             # %for.cond1972
                                        #   Parent Loop BB45_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_265 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB45_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB45_261 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB45_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB45_261 Depth=2
	movslq	-144(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-144(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB45_264:                             # %if.end2016
                                        #   in Loop: Header=BB45_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB45_265:                             # %for.cond2018
                                        #   Parent Loop BB45_259 Depth=1
                                        #     Parent Loop BB45_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB45_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB45_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB45_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB45_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB45_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB45_270
.LBB45_269:                             # %if.then2030
                                        #   in Loop: Header=BB45_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_271
.LBB45_270:                             # %if.else2039
                                        #   in Loop: Header=BB45_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB45_271:                             # %if.end2048
                                        #   in Loop: Header=BB45_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB45_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB45_265
.LBB45_273:                             # %for.end2060
                                        #   in Loop: Header=BB45_261 Depth=2
	jmp	.LBB45_274
.LBB45_274:                             # %for.inc2061
                                        #   in Loop: Header=BB45_261 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB45_261
.LBB45_275:                             # %for.end2063
                                        #   in Loop: Header=BB45_259 Depth=1
	jmp	.LBB45_276
.LBB45_276:                             # %for.inc2064
                                        #   in Loop: Header=BB45_259 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB45_259
.LBB45_277:                             # %for.end2066
	jmp	.LBB45_278
.LBB45_278:                             # %if.end2067
	cmpl	$2, -208(%rbp)
	jne	.LBB45_280
# %bb.279:                              # %if.then2070
	movl	$2, -132(%rbp)
.LBB45_280:                             # %if.end2071
	movl	$0, -24(%rbp)
.LBB45_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_285 Depth 2
                                        #       Child Loop BB45_287 Depth 3
                                        #         Child Loop BB45_289 Depth 4
                                        #         Child Loop BB45_293 Depth 4
                                        #       Child Loop BB45_299 Depth 3
                                        #         Child Loop BB45_303 Depth 4
                                        #         Child Loop BB45_307 Depth 4
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB45_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB45_281 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB45_283:                             # %land.end2079
                                        #   in Loop: Header=BB45_281 Depth=1
	testb	$1, %al
	jne	.LBB45_284
	jmp	.LBB45_340
.LBB45_284:                             # %for.body2081
                                        #   in Loop: Header=BB45_281 Depth=1
	movl	$0, -28(%rbp)
.LBB45_285:                             # %for.cond2082
                                        #   Parent Loop BB45_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_287 Depth 3
                                        #         Child Loop BB45_289 Depth 4
                                        #         Child Loop BB45_293 Depth 4
                                        #       Child Loop BB45_299 Depth 3
                                        #         Child Loop BB45_303 Depth 4
                                        #         Child Loop BB45_307 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB45_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB45_285 Depth=2
	movl	$0, -12(%rbp)
.LBB45_287:                             # %for.cond2087
                                        #   Parent Loop BB45_281 Depth=1
                                        #     Parent Loop BB45_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_289 Depth 4
                                        #         Child Loop BB45_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB45_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB45_287 Depth=3
	movl	$0, -16(%rbp)
.LBB45_289:                             # %for.cond2091
                                        #   Parent Loop BB45_281 Depth=1
                                        #     Parent Loop BB45_285 Depth=2
                                        #       Parent Loop BB45_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB45_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB45_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB45_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_289
.LBB45_292:                             # %for.end2106
                                        #   in Loop: Header=BB45_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB45_293:                             # %for.cond2125
                                        #   Parent Loop BB45_281 Depth=1
                                        #     Parent Loop BB45_285 Depth=2
                                        #       Parent Loop BB45_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB45_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB45_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB45_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_293
.LBB45_296:                             # %for.end2156
                                        #   in Loop: Header=BB45_287 Depth=3
	jmp	.LBB45_297
.LBB45_297:                             # %for.inc2157
                                        #   in Loop: Header=BB45_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_287
.LBB45_298:                             # %for.end2159
                                        #   in Loop: Header=BB45_285 Depth=2
	movl	$0, -16(%rbp)
.LBB45_299:                             # %for.cond2160
                                        #   Parent Loop BB45_281 Depth=1
                                        #     Parent Loop BB45_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_303 Depth 4
                                        #         Child Loop BB45_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB45_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB45_299 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB45_301:                             # %land.end2166
                                        #   in Loop: Header=BB45_299 Depth=3
	testb	$1, %al
	jne	.LBB45_302
	jmp	.LBB45_336
.LBB45_302:                             # %for.body2168
                                        #   in Loop: Header=BB45_299 Depth=3
	movl	$0, -12(%rbp)
.LBB45_303:                             # %for.cond2169
                                        #   Parent Loop BB45_281 Depth=1
                                        #     Parent Loop BB45_285 Depth=2
                                        #       Parent Loop BB45_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB45_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB45_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB45_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_303
.LBB45_306:                             # %for.end2184
                                        #   in Loop: Header=BB45_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB45_307:                             # %for.cond2203
                                        #   Parent Loop BB45_281 Depth=1
                                        #     Parent Loop BB45_285 Depth=2
                                        #       Parent Loop BB45_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB45_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB45_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB45_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB45_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB45_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB45_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB45_312
.LBB45_311:                             # %cond.false2231
                                        #   in Loop: Header=BB45_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB45_312:                             # %cond.end2250
                                        #   in Loop: Header=BB45_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB45_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB45_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB45_318
.LBB45_314:                             # %cond.false2257
                                        #   in Loop: Header=BB45_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB45_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB45_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB45_317
.LBB45_316:                             # %cond.false2279
                                        #   in Loop: Header=BB45_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB45_317:                             # %cond.end2298
                                        #   in Loop: Header=BB45_307 Depth=4
.LBB45_318:                             # %cond.end2300
                                        #   in Loop: Header=BB45_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB45_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB45_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB45_321
.LBB45_320:                             # %cond.false2333
                                        #   in Loop: Header=BB45_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB45_321:                             # %cond.end2352
                                        #   in Loop: Header=BB45_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB45_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB45_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB45_327
.LBB45_323:                             # %cond.false2359
                                        #   in Loop: Header=BB45_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB45_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB45_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB45_326
.LBB45_325:                             # %cond.false2381
                                        #   in Loop: Header=BB45_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB45_326:                             # %cond.end2400
                                        #   in Loop: Header=BB45_307 Depth=4
.LBB45_327:                             # %cond.end2402
                                        #   in Loop: Header=BB45_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB45_332
.LBB45_328:                             # %if.else2412
                                        #   in Loop: Header=BB45_307 Depth=4
	cmpl	$0, -104(%rbp)
	je	.LBB45_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB45_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB45_331
.LBB45_330:                             # %if.else2439
                                        #   in Loop: Header=BB45_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB45_331:                             # %if.end2468
                                        #   in Loop: Header=BB45_307 Depth=4
	jmp	.LBB45_332
.LBB45_332:                             # %if.end2469
                                        #   in Loop: Header=BB45_307 Depth=4
	jmp	.LBB45_333
.LBB45_333:                             # %for.inc2470
                                        #   in Loop: Header=BB45_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_307
.LBB45_334:                             # %for.end2472
                                        #   in Loop: Header=BB45_299 Depth=3
	jmp	.LBB45_335
.LBB45_335:                             # %for.inc2473
                                        #   in Loop: Header=BB45_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_299
.LBB45_336:                             # %for.end2475
                                        #   in Loop: Header=BB45_285 Depth=2
	jmp	.LBB45_337
.LBB45_337:                             # %for.inc2476
                                        #   in Loop: Header=BB45_285 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB45_285
.LBB45_338:                             # %for.end2478
                                        #   in Loop: Header=BB45_281 Depth=1
	jmp	.LBB45_339
.LBB45_339:                             # %for.inc2479
                                        #   in Loop: Header=BB45_281 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB45_281
.LBB45_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB45_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB45_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB45_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB45_342 Depth=1
	movl	$0, -16(%rbp)
.LBB45_344:                             # %for.cond2490
                                        #   Parent Loop BB45_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB45_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB45_344 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB45_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB45_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB45_348
.LBB45_347:                             # %if.else2518
                                        #   in Loop: Header=BB45_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB45_348:                             # %if.end2536
                                        #   in Loop: Header=BB45_344 Depth=2
	jmp	.LBB45_349
.LBB45_349:                             # %for.inc2537
                                        #   in Loop: Header=BB45_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_344
.LBB45_350:                             # %for.end2539
                                        #   in Loop: Header=BB45_342 Depth=1
	jmp	.LBB45_351
.LBB45_351:                             # %for.inc2540
                                        #   in Loop: Header=BB45_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_342
.LBB45_352:                             # %for.end2542
	jmp	.LBB45_353
.LBB45_353:                             # %if.end2543
	movl	-132(%rbp), %ebx
	cmpl	$1967951886, -380(%rbp) # imm = 0x754C900E
	jne	.LBB45_355
.LBB45_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_354
.Lfunc_end45:
	.size	dct_chroma.36, .Lfunc_end45-dct_chroma.36
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.37       # -- Begin function intrapred_luma.37
	.p2align	4, 0x90
	.type	intrapred_luma.37,@function
intrapred_luma.37:                      # @intrapred_luma.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$106347568, -172(%rbp)  # imm = 0x656BC30
	movl	%edi, -112(%rbp)
	movl	%esi, -108(%rbp)
	movq	%rdx, -216(%rbp)
	movq	%rcx, -224(%rbp)
	movq	%r8, -184(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB46_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB46_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_1
.LBB46_4:                               # %for.end
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	addl	$4, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-208(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB46_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -84(%rbp)
	je	.LBB46_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -84(%rbp)
	jne	.LBB46_10
.LBB46_7:                               # %land.rhs10
	cmpl	$4, -88(%rbp)
	movb	$1, %al
	je	.LBB46_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -88(%rbp)
	sete	%al
.LBB46_9:                               # %lor.end
.LBB46_10:                              # %land.end
	xorb	$-1, %al
.LBB46_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB46_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB46_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB46_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB46_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB46_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB46_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB46_17
.LBB46_16:                              # %cond.false
                                        #   in Loop: Header=BB46_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB46_17
.LBB46_17:                              # %cond.end
                                        #   in Loop: Header=BB46_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB46_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_13
.LBB46_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB46_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB46_22
.LBB46_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB46_22
.LBB46_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB46_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB46_25
.LBB46_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB46_25
.LBB46_25:                              # %cond.end49
	movl	%eax, -116(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB46_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB46_28
.LBB46_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB46_28
.LBB46_28:                              # %cond.end59
	movl	%eax, -100(%rbp)
	jmp	.LBB46_30
.LBB46_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB46_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-216(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-224(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB46_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB46_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -100(%rbp)
	setne	%al
.LBB46_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB46_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB46_36
.LBB46_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB46_36:                              # %if.end114
	cmpl	$0, -116(%rbp)
	je	.LBB46_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB46_39
.LBB46_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB46_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB46_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_42
.LBB46_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB46_42:                              # %if.end208
	cmpl	$0, -100(%rbp)
	je	.LBB46_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-192(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB46_45
.LBB46_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB46_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB46_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB46_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB46_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB46_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_46
.LBB46_49:                              # %for.end233
	movl	$0, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB46_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB46_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB46_61
.LBB46_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB46_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB46_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB46_60
.LBB46_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB46_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB46_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB46_59
.LBB46_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -92(%rbp)
.LBB46_59:                              # %if.end284
	jmp	.LBB46_60
.LBB46_60:                              # %if.end285
	jmp	.LBB46_61
.LBB46_61:                              # %if.end286
	movl	$0, -96(%rbp)
.LBB46_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_64 Depth 2
	cmpl	$4, -96(%rbp)
	jge	.LBB46_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB46_62 Depth=1
	movl	$0, -4(%rbp)
.LBB46_64:                              # %for.cond291
                                        #   Parent Loop BB46_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB46_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB46_64 Depth=2
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-96(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB46_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_64
.LBB46_67:                              # %for.end304
                                        #   in Loop: Header=BB46_62 Depth=1
	jmp	.LBB46_68
.LBB46_68:                              # %for.inc305
                                        #   in Loop: Header=BB46_62 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB46_62
.LBB46_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB46_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB46_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB46_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB46_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_70
.LBB46_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB46_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB46_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB46_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB46_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB46_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB46_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB46_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB46_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB46_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB46_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -100(%rbp)
	je	.LBB46_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB46_85:                              # %if.end1174
	cmpl	$106347568, -172(%rbp)  # imm = 0x656BC30
	jne	.LBB46_87
.LBB46_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_86
.Lfunc_end46:
	.size	intrapred_luma.37, .Lfunc_end46-intrapred_luma.37
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.38 # -- Begin function intrapred_luma_16x16.38
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.38,@function
intrapred_luma_16x16.38:                # @intrapred_luma_16x16.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$1400913358, -92(%rbp)  # imm = 0x53803DCE
	movl	$0, -32(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -60(%rbp)
	movl	$0, -4(%rbp)
.LBB47_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB47_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-60(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_1
.LBB47_4:                               # %for.end
	movl	-60(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB47_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB47_20
.LBB47_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB47_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB47_9
.LBB47_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB47_9
.LBB47_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB47_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB47_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB47_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB47_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB47_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB47_14
.LBB47_13:                              # %cond.false23
                                        #   in Loop: Header=BB47_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB47_14
.LBB47_14:                              # %cond.end24
                                        #   in Loop: Header=BB47_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB47_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_10
.LBB47_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB47_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB47_19
.LBB47_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB47_19
.LBB47_19:                              # %cond.end39
	movl	%eax, -64(%rbp)
.LBB47_20:                              # %if.end
	movl	$0, -44(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB47_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB47_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB47_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB47_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB47_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB47_24:                              # %if.end51
                                        #   in Loop: Header=BB47_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB47_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB47_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB47_26:                              # %if.end68
                                        #   in Loop: Header=BB47_21 Depth=1
	jmp	.LBB47_27
.LBB47_27:                              # %for.inc69
                                        #   in Loop: Header=BB47_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_21
.LBB47_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB47_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB47_31
# %bb.30:                               # %if.then74
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB47_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB47_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB47_34
# %bb.33:                               # %if.then81
	movl	-44(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB47_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB47_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB47_37
# %bb.36:                               # %if.then88
	movl	-52(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB47_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB47_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB47_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB47_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB47_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB47_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB47_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB47_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB47_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB47_44:                              # %if.end114
                                        #   in Loop: Header=BB47_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB47_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB47_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB47_46:                              # %if.end133
                                        #   in Loop: Header=BB47_41 Depth=1
	jmp	.LBB47_47
.LBB47_47:                              # %for.inc134
                                        #   in Loop: Header=BB47_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_41
.LBB47_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB47_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB47_49 Depth=1
	movl	$0, -4(%rbp)
.LBB47_51:                              # %for.cond141
                                        #   Parent Loop BB47_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB47_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB47_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_51
.LBB47_54:                              # %for.end173
                                        #   in Loop: Header=BB47_49 Depth=1
	jmp	.LBB47_55
.LBB47_55:                              # %for.inc174
                                        #   in Loop: Header=BB47_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_49
.LBB47_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB47_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB47_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -64(%rbp)
	jne	.LBB47_60
.LBB47_59:                              # %if.then181
	jmp	.LBB47_85
.LBB47_60:                              # %if.end182
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB47_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB47_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB47_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB47_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB47_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB47_65
.LBB47_64:                              # %if.else210
                                        #   in Loop: Header=BB47_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB47_65:                              # %if.end232
                                        #   in Loop: Header=BB47_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB47_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_61
.LBB47_67:                              # %for.end264
	imull	$5, -28(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -40(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -48(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB47_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB47_68 Depth=1
	movl	$0, -4(%rbp)
.LBB47_70:                              # %for.cond293
                                        #   Parent Loop BB47_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB47_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-36(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-40(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-48(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB47_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_74
.LBB47_73:                              # %cond.false309
                                        #   in Loop: Header=BB47_70 Depth=2
	movl	-36(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-40(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-48(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB47_74:                              # %cond.end318
                                        #   in Loop: Header=BB47_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB47_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB47_80
.LBB47_76:                              # %cond.false323
                                        #   in Loop: Header=BB47_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-36(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-40(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-48(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB47_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_79
.LBB47_78:                              # %cond.false337
                                        #   in Loop: Header=BB47_70 Depth=2
	movl	-36(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-40(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-48(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB47_79:                              # %cond.end346
                                        #   in Loop: Header=BB47_70 Depth=2
.LBB47_80:                              # %cond.end348
                                        #   in Loop: Header=BB47_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB47_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_70
.LBB47_82:                              # %for.end359
                                        #   in Loop: Header=BB47_68 Depth=1
	jmp	.LBB47_83
.LBB47_83:                              # %for.inc360
                                        #   in Loop: Header=BB47_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_68
.LBB47_84:                              # %for.end362.loopexit
	jmp	.LBB47_85
.LBB47_85:                              # %for.end362
	cmpl	$1400913358, -92(%rbp)  # imm = 0x53803DCE
	jne	.LBB47_87
.LBB47_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_86
.Lfunc_end47:
	.size	intrapred_luma_16x16.38, .Lfunc_end47-intrapred_luma_16x16.38
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.39
.LCPI48_0:
	.quad	4616189618054758400     # double 4
.LCPI48_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI48_2:
	.quad	4611686018427387904     # double 2
.LCPI48_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.39
	.p2align	4, 0x90
	.type	dct_chroma_sp.39,@function
dct_chroma_sp.39:                       # @dct_chroma_sp.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI48_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI48_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1271164480, -268(%rbp) # imm = 0x4BC46E40
	movl	%edi, -124(%rbp)
	movl	%esi, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI48_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI48_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB48_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB48_6
.LBB48_2:                               # %cond.false
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB48_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB48_5
.LBB48_4:                               # %cond.false19
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB48_5:                               # %cond.end
.LBB48_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB48_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB48_12
.LBB48_8:                               # %cond.false30
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB48_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB48_11
.LBB48_10:                              # %cond.false37
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB48_11:                              # %cond.end41
.LBB48_12:                              # %cond.end43
	movl	%eax, -212(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB48_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB48_15
.LBB48_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB48_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -120(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB48_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB48_18
.LBB48_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB48_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-120(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -220(%rbp)
	cmpl	$0, -212(%rbp)
	jge	.LBB48_20
# %bb.19:                               # %cond.true70
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB48_21
.LBB48_20:                              # %cond.false72
	movslq	-212(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB48_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -228(%rbp)
	cmpl	$0, -212(%rbp)
	jge	.LBB48_23
# %bb.22:                               # %cond.true82
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB48_24
.LBB48_23:                              # %cond.false84
	movslq	-212(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB48_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-228(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -216(%rbp)
	movl	$0, -12(%rbp)
.LBB48_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB48_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB48_25 Depth=1
	movl	$0, -16(%rbp)
.LBB48_27:                              # %for.cond97
                                        #   Parent Loop BB48_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB48_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB48_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB48_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_27
.LBB48_30:                              # %for.end
                                        #   in Loop: Header=BB48_25 Depth=1
	jmp	.LBB48_31
.LBB48_31:                              # %for.inc121
                                        #   in Loop: Header=BB48_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_25
.LBB48_32:                              # %for.end123
	movl	$0, -24(%rbp)
.LBB48_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_35 Depth 2
                                        #       Child Loop BB48_37 Depth 3
                                        #         Child Loop BB48_39 Depth 4
                                        #       Child Loop BB48_45 Depth 3
                                        #         Child Loop BB48_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB48_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB48_33 Depth=1
	movl	$0, -20(%rbp)
.LBB48_35:                              # %for.cond128
                                        #   Parent Loop BB48_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_37 Depth 3
                                        #         Child Loop BB48_39 Depth 4
                                        #       Child Loop BB48_45 Depth 3
                                        #         Child Loop BB48_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB48_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB48_35 Depth=2
	movl	$0, -12(%rbp)
.LBB48_37:                              # %for.cond132
                                        #   Parent Loop BB48_33 Depth=1
                                        #     Parent Loop BB48_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB48_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB48_37 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB48_39:                              # %for.cond137
                                        #   Parent Loop BB48_33 Depth=1
                                        #     Parent Loop BB48_35 Depth=2
                                        #       Parent Loop BB48_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB48_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB48_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB48_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_39
.LBB48_42:                              # %for.end174
                                        #   in Loop: Header=BB48_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB48_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_37
.LBB48_44:                              # %for.end214
                                        #   in Loop: Header=BB48_35 Depth=2
	movl	$0, -16(%rbp)
.LBB48_45:                              # %for.cond215
                                        #   Parent Loop BB48_33 Depth=1
                                        #     Parent Loop BB48_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB48_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB48_45 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB48_47:                              # %for.cond220
                                        #   Parent Loop BB48_33 Depth=1
                                        #     Parent Loop BB48_35 Depth=2
                                        #       Parent Loop BB48_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB48_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB48_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB48_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_47
.LBB48_50:                              # %for.end257
                                        #   in Loop: Header=BB48_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB48_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_45
.LBB48_52:                              # %for.end298
                                        #   in Loop: Header=BB48_35 Depth=2
	jmp	.LBB48_53
.LBB48_53:                              # %for.inc299
                                        #   in Loop: Header=BB48_35 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_35
.LBB48_54:                              # %for.end301
                                        #   in Loop: Header=BB48_33 Depth=1
	jmp	.LBB48_55
.LBB48_55:                              # %for.inc302
                                        #   in Loop: Header=BB48_33 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB48_33
.LBB48_56:                              # %for.end304
	movl	$0, -24(%rbp)
.LBB48_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_59 Depth 2
                                        #       Child Loop BB48_61 Depth 3
                                        #         Child Loop BB48_63 Depth 4
                                        #       Child Loop BB48_69 Depth 3
                                        #         Child Loop BB48_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB48_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB48_57 Depth=1
	movl	$0, -20(%rbp)
.LBB48_59:                              # %for.cond309
                                        #   Parent Loop BB48_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_61 Depth 3
                                        #         Child Loop BB48_63 Depth 4
                                        #       Child Loop BB48_69 Depth 3
                                        #         Child Loop BB48_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB48_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB48_59 Depth=2
	movl	$0, -12(%rbp)
.LBB48_61:                              # %for.cond313
                                        #   Parent Loop BB48_57 Depth=1
                                        #     Parent Loop BB48_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB48_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB48_61 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB48_63:                              # %for.cond318
                                        #   Parent Loop BB48_57 Depth=1
                                        #     Parent Loop BB48_59 Depth=2
                                        #       Parent Loop BB48_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB48_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB48_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-84(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB48_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_63
.LBB48_66:                              # %for.end351
                                        #   in Loop: Header=BB48_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB48_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_61
.LBB48_68:                              # %for.end387
                                        #   in Loop: Header=BB48_59 Depth=2
	movl	$0, -16(%rbp)
.LBB48_69:                              # %for.cond388
                                        #   Parent Loop BB48_57 Depth=1
                                        #     Parent Loop BB48_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB48_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB48_69 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB48_71:                              # %for.cond393
                                        #   Parent Loop BB48_57 Depth=1
                                        #     Parent Loop BB48_59 Depth=2
                                        #       Parent Loop BB48_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB48_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB48_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB48_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_71
.LBB48_74:                              # %for.end426
                                        #   in Loop: Header=BB48_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB48_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_69
.LBB48_76:                              # %for.end463
                                        #   in Loop: Header=BB48_59 Depth=2
	jmp	.LBB48_77
.LBB48_77:                              # %for.inc464
                                        #   in Loop: Header=BB48_59 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_59
.LBB48_78:                              # %for.end466
                                        #   in Loop: Header=BB48_57 Depth=1
	jmp	.LBB48_79
.LBB48_79:                              # %for.inc467
                                        #   in Loop: Header=BB48_57 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB48_57
.LBB48_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$0, -32(%rbp)
.LBB48_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB48_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB48_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB48_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB48_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB48_81 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB48_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB48_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB48_90
	jp	.LBB48_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB48_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB48_89
.LBB48_88:                              # %cond.false691
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-44(%rbp), %eax
.LBB48_89:                              # %cond.end692
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB48_94
.LBB48_90:                              # %if.else
                                        #   in Loop: Header=BB48_81 Depth=1
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB48_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB48_93
.LBB48_92:                              # %if.else697
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB48_93:                              # %if.end
                                        #   in Loop: Header=BB48_81 Depth=1
	jmp	.LBB48_94
.LBB48_94:                              # %if.end698
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB48_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB48_97
.LBB48_96:                              # %cond.false702
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-104(%rbp), %eax
.LBB48_97:                              # %cond.end703
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	%eax, -100(%rbp)
	jmp	.LBB48_108
.LBB48_98:                              # %if.else705
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB48_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB48_107
.LBB48_100:                             # %if.else709
                                        #   in Loop: Header=BB48_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB48_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB48_103
.LBB48_102:                             # %cond.false713
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-44(%rbp), %eax
.LBB48_103:                             # %cond.end714
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB48_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB48_106
.LBB48_105:                             # %cond.false719
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-104(%rbp), %eax
.LBB48_106:                             # %cond.end720
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	%eax, -100(%rbp)
.LBB48_107:                             # %if.end722
                                        #   in Loop: Header=BB48_81 Depth=1
	jmp	.LBB48_108
.LBB48_108:                             # %if.end723
                                        #   in Loop: Header=BB48_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB48_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB48_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB48_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB48_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB48_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB48_112:                             # %if.end734
                                        #   in Loop: Header=BB48_81 Depth=1
	jmp	.LBB48_113
.LBB48_113:                             # %if.end735
                                        #   in Loop: Header=BB48_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB48_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-204(%rbp), %eax
	jle	.LBB48_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	$1, %eax
	jmp	.LBB48_117
.LBB48_116:                             # %cond.false745
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-204(%rbp), %eax
.LBB48_117:                             # %cond.end746
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	%eax, -204(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -88(%rbp)
.LBB48_118:                             # %if.end763
                                        #   in Loop: Header=BB48_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-228(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB48_81
.LBB48_120:                             # %for.end788
	movq	-288(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -224(%rbp)
	movl	$0, -236(%rbp)
	movl	$0, -24(%rbp)
.LBB48_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_123 Depth 2
                                        #       Child Loop BB48_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB48_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB48_121 Depth=1
	movl	$0, -20(%rbp)
.LBB48_123:                             # %for.cond839
                                        #   Parent Loop BB48_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB48_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB48_123 Depth=2
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -240(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-240(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-240(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$1, -32(%rbp)
.LBB48_125:                             # %for.cond860
                                        #   Parent Loop BB48_121 Depth=1
                                        #     Parent Loop BB48_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB48_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB48_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB48_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB48_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB48_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB48_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB48_130
.LBB48_129:                             # %if.then867
                                        #   in Loop: Header=BB48_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_131
.LBB48_130:                             # %if.else876
                                        #   in Loop: Header=BB48_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB48_131:                             # %if.end885
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -40(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB48_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB48_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB48_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB48_125 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB48_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB48_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB48_139
	jp	.LBB48_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB48_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB48_138
.LBB48_137:                             # %cond.false1047
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-44(%rbp), %eax
.LBB48_138:                             # %cond.end1048
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB48_143
.LBB48_139:                             # %if.else1050
                                        #   in Loop: Header=BB48_125 Depth=3
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB48_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB48_142
.LBB48_141:                             # %if.else1054
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB48_142:                             # %if.end1055
                                        #   in Loop: Header=BB48_125 Depth=3
	jmp	.LBB48_143
.LBB48_143:                             # %if.end1056
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB48_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB48_146
.LBB48_145:                             # %cond.false1060
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-104(%rbp), %eax
.LBB48_146:                             # %cond.end1061
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	%eax, -100(%rbp)
	jmp	.LBB48_157
.LBB48_147:                             # %if.else1063
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB48_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB48_156
.LBB48_149:                             # %if.else1067
                                        #   in Loop: Header=BB48_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB48_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB48_152
.LBB48_151:                             # %cond.false1071
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-44(%rbp), %eax
.LBB48_152:                             # %cond.end1072
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB48_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB48_155
.LBB48_154:                             # %cond.false1077
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-104(%rbp), %eax
.LBB48_155:                             # %cond.end1078
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	%eax, -100(%rbp)
.LBB48_156:                             # %if.end1080
                                        #   in Loop: Header=BB48_125 Depth=3
	jmp	.LBB48_157
.LBB48_157:                             # %if.end1081
                                        #   in Loop: Header=BB48_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB48_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	-20(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB48_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-224(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -224(%rbp)
	jmp	.LBB48_161
.LBB48_160:                             # %if.else1099
                                        #   in Loop: Header=BB48_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-224(%rbp), %eax
	movl	%eax, -224(%rbp)
.LBB48_161:                             # %if.end1106
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	$2, -236(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -88(%rbp)
.LBB48_162:                             # %if.end1128
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-228(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB48_125
.LBB48_164:                             # %for.end1164
                                        #   in Loop: Header=BB48_123 Depth=2
	movq	-280(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB48_123 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_123
.LBB48_166:                             # %for.end1169
                                        #   in Loop: Header=BB48_121 Depth=1
	jmp	.LBB48_167
.LBB48_167:                             # %for.inc1170
                                        #   in Loop: Header=BB48_121 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB48_121
.LBB48_168:                             # %for.end1172
	cmpl	$2, -236(%rbp)
	jne	.LBB48_170
# %bb.169:                              # %if.then1175
	movl	$2, -204(%rbp)
.LBB48_170:                             # %if.end1176
	movl	$0, -24(%rbp)
.LBB48_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_173 Depth 2
                                        #       Child Loop BB48_175 Depth 3
                                        #         Child Loop BB48_177 Depth 4
                                        #         Child Loop BB48_181 Depth 4
                                        #       Child Loop BB48_187 Depth 3
                                        #         Child Loop BB48_189 Depth 4
                                        #         Child Loop BB48_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB48_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB48_171 Depth=1
	movl	$0, -20(%rbp)
.LBB48_173:                             # %for.cond1181
                                        #   Parent Loop BB48_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_175 Depth 3
                                        #         Child Loop BB48_177 Depth 4
                                        #         Child Loop BB48_181 Depth 4
                                        #       Child Loop BB48_187 Depth 3
                                        #         Child Loop BB48_189 Depth 4
                                        #         Child Loop BB48_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB48_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB48_173 Depth=2
	movl	$0, -12(%rbp)
.LBB48_175:                             # %for.cond1185
                                        #   Parent Loop BB48_171 Depth=1
                                        #     Parent Loop BB48_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_177 Depth 4
                                        #         Child Loop BB48_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB48_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB48_175 Depth=3
	movl	$0, -16(%rbp)
.LBB48_177:                             # %for.cond1189
                                        #   Parent Loop BB48_171 Depth=1
                                        #     Parent Loop BB48_173 Depth=2
                                        #       Parent Loop BB48_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB48_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB48_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB48_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_177
.LBB48_180:                             # %for.end1204
                                        #   in Loop: Header=BB48_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB48_181:                             # %for.cond1223
                                        #   Parent Loop BB48_171 Depth=1
                                        #     Parent Loop BB48_173 Depth=2
                                        #       Parent Loop BB48_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB48_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB48_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB48_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_181
.LBB48_184:                             # %for.end1254
                                        #   in Loop: Header=BB48_175 Depth=3
	jmp	.LBB48_185
.LBB48_185:                             # %for.inc1255
                                        #   in Loop: Header=BB48_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_175
.LBB48_186:                             # %for.end1257
                                        #   in Loop: Header=BB48_173 Depth=2
	movl	$0, -16(%rbp)
.LBB48_187:                             # %for.cond1258
                                        #   Parent Loop BB48_171 Depth=1
                                        #     Parent Loop BB48_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_189 Depth 4
                                        #         Child Loop BB48_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB48_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB48_187 Depth=3
	movl	$0, -12(%rbp)
.LBB48_189:                             # %for.cond1262
                                        #   Parent Loop BB48_171 Depth=1
                                        #     Parent Loop BB48_173 Depth=2
                                        #       Parent Loop BB48_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB48_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB48_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB48_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_189
.LBB48_192:                             # %for.end1277
                                        #   in Loop: Header=BB48_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB48_193:                             # %for.cond1296
                                        #   Parent Loop BB48_171 Depth=1
                                        #     Parent Loop BB48_173 Depth=2
                                        #       Parent Loop BB48_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB48_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB48_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB48_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB48_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB48_197
.LBB48_196:                             # %cond.false1311
                                        #   in Loop: Header=BB48_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB48_197:                             # %cond.end1319
                                        #   in Loop: Header=BB48_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB48_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB48_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB48_203
.LBB48_199:                             # %cond.false1325
                                        #   in Loop: Header=BB48_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB48_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB48_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB48_202
.LBB48_201:                             # %cond.false1336
                                        #   in Loop: Header=BB48_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB48_202:                             # %cond.end1344
                                        #   in Loop: Header=BB48_193 Depth=4
.LBB48_203:                             # %cond.end1346
                                        #   in Loop: Header=BB48_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-20(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB48_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB48_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB48_206
.LBB48_205:                             # %cond.false1366
                                        #   in Loop: Header=BB48_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB48_206:                             # %cond.end1374
                                        #   in Loop: Header=BB48_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB48_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB48_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB48_212
.LBB48_208:                             # %cond.false1380
                                        #   in Loop: Header=BB48_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB48_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB48_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB48_211
.LBB48_210:                             # %cond.false1391
                                        #   in Loop: Header=BB48_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB48_211:                             # %cond.end1399
                                        #   in Loop: Header=BB48_193 Depth=4
.LBB48_212:                             # %cond.end1401
                                        #   in Loop: Header=BB48_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB48_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_193
.LBB48_214:                             # %for.end1412
                                        #   in Loop: Header=BB48_187 Depth=3
	jmp	.LBB48_215
.LBB48_215:                             # %for.inc1413
                                        #   in Loop: Header=BB48_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_187
.LBB48_216:                             # %for.end1415
                                        #   in Loop: Header=BB48_173 Depth=2
	jmp	.LBB48_217
.LBB48_217:                             # %for.inc1416
                                        #   in Loop: Header=BB48_173 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_173
.LBB48_218:                             # %for.end1418
                                        #   in Loop: Header=BB48_171 Depth=1
	jmp	.LBB48_219
.LBB48_219:                             # %for.inc1419
                                        #   in Loop: Header=BB48_171 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB48_171
.LBB48_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB48_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB48_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB48_221 Depth=1
	movl	$0, -16(%rbp)
.LBB48_223:                             # %for.cond1426
                                        #   Parent Loop BB48_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB48_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB48_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-124(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB48_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_223
.LBB48_226:                             # %for.end1446
                                        #   in Loop: Header=BB48_221 Depth=1
	jmp	.LBB48_227
.LBB48_227:                             # %for.inc1447
                                        #   in Loop: Header=BB48_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_221
.LBB48_228:                             # %for.end1449
	movl	-204(%rbp), %ebx
	cmpl	$1271164480, -268(%rbp) # imm = 0x4BC46E40
	jne	.LBB48_230
.LBB48_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_229
.Lfunc_end48:
	.size	dct_chroma_sp.39, .Lfunc_end48-dct_chroma_sp.39
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.40         # -- Begin function copyblock_sp.40
	.p2align	4, 0x90
	.type	copyblock_sp.40,@function
copyblock_sp.40:                        # @copyblock_sp.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$339897506, -88(%rbp)   # imm = 0x14426CA2
	movl	%edi, -84(%rbp)
	movl	%esi, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -72(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -80(%rbp)
	movl	-72(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movl	$0, -4(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -8(%rbp)
.LBB49_3:                               # %for.cond4
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB49_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB49_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB49_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_3
.LBB49_6:                               # %for.end
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_7
.LBB49_7:                               # %for.inc17
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_1
.LBB49_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB49_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB49_9 Depth=1
	movl	$0, -8(%rbp)
.LBB49_11:                              # %for.cond24
                                        #   Parent Loop BB49_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB49_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB49_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB49_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_11
.LBB49_14:                              # %for.end53
                                        #   in Loop: Header=BB49_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB49_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_9
.LBB49_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB49_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB49_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB49_17 Depth=1
	movl	$0, -4(%rbp)
.LBB49_19:                              # %for.cond86
                                        #   Parent Loop BB49_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB49_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB49_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB49_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_19
.LBB49_22:                              # %for.end115
                                        #   in Loop: Header=BB49_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB49_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_17
.LBB49_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB49_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB49_25 Depth=1
	movl	$0, -8(%rbp)
.LBB49_27:                              # %for.cond149
                                        #   Parent Loop BB49_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB49_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB49_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-80(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-92(%rbp), %eax
	movl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-80(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-72(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB49_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_27
.LBB49_30:                              # %for.end184
                                        #   in Loop: Header=BB49_25 Depth=1
	jmp	.LBB49_31
.LBB49_31:                              # %for.inc185
                                        #   in Loop: Header=BB49_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_25
.LBB49_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB49_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_35 Depth 2
                                        #     Child Loop BB49_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB49_33 Depth=1
	movl	$0, -8(%rbp)
.LBB49_35:                              # %for.cond192
                                        #   Parent Loop BB49_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB49_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB49_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB49_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_35
.LBB49_38:                              # %for.end205
                                        #   in Loop: Header=BB49_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB49_39:                              # %for.cond224
                                        #   Parent Loop BB49_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB49_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB49_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB49_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_39
.LBB49_42:                              # %for.end251
                                        #   in Loop: Header=BB49_33 Depth=1
	jmp	.LBB49_43
.LBB49_43:                              # %for.inc252
                                        #   in Loop: Header=BB49_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_33
.LBB49_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB49_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_47 Depth 2
                                        #     Child Loop BB49_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB49_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB49_45 Depth=1
	movl	$0, -4(%rbp)
.LBB49_47:                              # %for.cond259
                                        #   Parent Loop BB49_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB49_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB49_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_47
.LBB49_50:                              # %for.end272
                                        #   in Loop: Header=BB49_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB49_51:                              # %for.cond291
                                        #   Parent Loop BB49_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB49_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB49_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB49_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB49_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB49_55
.LBB49_54:                              # %cond.false
                                        #   in Loop: Header=BB49_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB49_55:                              # %cond.end
                                        #   in Loop: Header=BB49_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB49_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB49_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_61
.LBB49_57:                              # %cond.false316
                                        #   in Loop: Header=BB49_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB49_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB49_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB49_60
.LBB49_59:                              # %cond.false327
                                        #   in Loop: Header=BB49_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB49_60:                              # %cond.end335
                                        #   in Loop: Header=BB49_51 Depth=2
.LBB49_61:                              # %cond.end337
                                        #   in Loop: Header=BB49_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB49_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB49_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB49_64
.LBB49_63:                              # %cond.false355
                                        #   in Loop: Header=BB49_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB49_64:                              # %cond.end363
                                        #   in Loop: Header=BB49_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB49_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB49_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_70
.LBB49_66:                              # %cond.false369
                                        #   in Loop: Header=BB49_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB49_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB49_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB49_69
.LBB49_68:                              # %cond.false380
                                        #   in Loop: Header=BB49_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB49_69:                              # %cond.end388
                                        #   in Loop: Header=BB49_51 Depth=2
.LBB49_70:                              # %cond.end390
                                        #   in Loop: Header=BB49_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB49_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_51
.LBB49_72:                              # %for.end399
                                        #   in Loop: Header=BB49_45 Depth=1
	jmp	.LBB49_73
.LBB49_73:                              # %for.inc400
                                        #   in Loop: Header=BB49_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_45
.LBB49_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB49_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB49_75 Depth=1
	movl	$0, -8(%rbp)
.LBB49_77:                              # %for.cond407
                                        #   Parent Loop BB49_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB49_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB49_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-76(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-84(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB49_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_77
.LBB49_80:                              # %for.end427
                                        #   in Loop: Header=BB49_75 Depth=1
	jmp	.LBB49_81
.LBB49_81:                              # %for.inc428
                                        #   in Loop: Header=BB49_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_75
.LBB49_82:                              # %for.end430
	cmpl	$339897506, -88(%rbp)   # imm = 0x14426CA2
	jne	.LBB49_84
.LBB49_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_83
.Lfunc_end49:
	.size	copyblock_sp.40, .Lfunc_end49-copyblock_sp.40
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.41             # -- Begin function dct_luma.41
	.p2align	4, 0x90
	.type	dct_luma.41,@function
dct_luma.41:                            # @dct_luma.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$1384893646, -148(%rbp) # imm = 0x528BCCCE
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -160(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -112(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -116(%rbp)
	movl	-116(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-112(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -132(%rbp)
	movl	-116(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-112(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB50_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB50_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -96(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -12(%rbp)
.LBB50_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB50_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB50_3 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB50_5:                               # %land.end32
                                        #   in Loop: Header=BB50_3 Depth=1
	testb	$1, %al
	jne	.LBB50_6
	jmp	.LBB50_12
.LBB50_6:                               # %for.body
                                        #   in Loop: Header=BB50_3 Depth=1
	movl	$0, -16(%rbp)
.LBB50_7:                               # %for.cond34
                                        #   Parent Loop BB50_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB50_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB50_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB50_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_7
.LBB50_10:                              # %for.end
                                        #   in Loop: Header=BB50_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB50_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_3
.LBB50_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB50_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB50_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB50_13 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB50_15:                              # %land.end101
                                        #   in Loop: Header=BB50_13 Depth=1
	testb	$1, %al
	jne	.LBB50_16
	jmp	.LBB50_22
.LBB50_16:                              # %for.body103
                                        #   in Loop: Header=BB50_13 Depth=1
	movl	$0, -12(%rbp)
.LBB50_17:                              # %for.cond104
                                        #   Parent Loop BB50_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB50_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB50_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB50_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_17
.LBB50_20:                              # %for.end136
                                        #   in Loop: Header=BB50_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB50_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_13
.LBB50_22:                              # %for.end169
	movl	$0, -124(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -88(%rbp)
.LBB50_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -88(%rbp)
	jge	.LBB50_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB50_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB50_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB50_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB50_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB50_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB50_28
.LBB50_27:                              # %if.then
                                        #   in Loop: Header=BB50_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_29
.LBB50_28:                              # %if.else
                                        #   in Loop: Header=BB50_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB50_29:                              # %if.end
                                        #   in Loop: Header=BB50_23 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB50_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB50_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	jmp	.LBB50_35
.LBB50_31:                              # %if.else199
                                        #   in Loop: Header=BB50_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB50_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB50_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB50_34
.LBB50_33:                              # %if.else223
                                        #   in Loop: Header=BB50_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -32(%rbp)
.LBB50_34:                              # %if.end245
                                        #   in Loop: Header=BB50_23 Depth=1
	jmp	.LBB50_35
.LBB50_35:                              # %if.end246
                                        #   in Loop: Header=BB50_23 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB50_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB50_23 Depth=1
	movl	$1, -124(%rbp)
	cmpl	$1, -32(%rbp)
	jg	.LBB50_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB50_23 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB50_39
.LBB50_38:                              # %if.then254
                                        #   in Loop: Header=BB50_23 Depth=1
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB50_40
.LBB50_39:                              # %if.else256
                                        #   in Loop: Header=BB50_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-160(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB50_40:                              # %if.end263
                                        #   in Loop: Header=BB50_23 Depth=1
	movl	-32(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-168(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -100(%rbp)
	movl	-32(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -32(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB50_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB50_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB50_52
.LBB50_42:                              # %if.else283
                                        #   in Loop: Header=BB50_23 Depth=1
	cmpl	$4, -40(%rbp)
	jge	.LBB50_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB50_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB50_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB50_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB50_46
.LBB50_45:                              # %if.else301
                                        #   in Loop: Header=BB50_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB50_46:                              # %if.end314
                                        #   in Loop: Header=BB50_23 Depth=1
	jmp	.LBB50_51
.LBB50_47:                              # %if.else315
                                        #   in Loop: Header=BB50_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB50_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB50_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB50_50
.LBB50_49:                              # %if.else328
                                        #   in Loop: Header=BB50_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB50_50:                              # %if.end338
                                        #   in Loop: Header=BB50_23 Depth=1
	jmp	.LBB50_51
.LBB50_51:                              # %if.end339
                                        #   in Loop: Header=BB50_23 Depth=1
	jmp	.LBB50_52
.LBB50_52:                              # %if.end340
                                        #   in Loop: Header=BB50_23 Depth=1
	jmp	.LBB50_53
.LBB50_53:                              # %if.end341
                                        #   in Loop: Header=BB50_23 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB50_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB50_23 Depth=1
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB50_55:                              # %if.end349
                                        #   in Loop: Header=BB50_23 Depth=1
	jmp	.LBB50_56
.LBB50_56:                              # %for.inc350
                                        #   in Loop: Header=BB50_23 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB50_23
.LBB50_57:                              # %for.end352
	movq	-168(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB50_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_62 Depth 2
                                        #     Child Loop BB50_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB50_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB50_58 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB50_60:                              # %land.end361
                                        #   in Loop: Header=BB50_58 Depth=1
	testb	$1, %al
	jne	.LBB50_61
	jmp	.LBB50_71
.LBB50_61:                              # %for.body363
                                        #   in Loop: Header=BB50_58 Depth=1
	movl	$0, -16(%rbp)
.LBB50_62:                              # %for.cond364
                                        #   Parent Loop BB50_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB50_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB50_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB50_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_62
.LBB50_65:                              # %for.end377
                                        #   in Loop: Header=BB50_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB50_66:                              # %for.cond396
                                        #   Parent Loop BB50_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB50_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB50_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB50_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_66
.LBB50_69:                              # %for.end423
                                        #   in Loop: Header=BB50_58 Depth=1
	jmp	.LBB50_70
.LBB50_70:                              # %for.inc424
                                        #   in Loop: Header=BB50_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_58
.LBB50_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB50_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_76 Depth 2
                                        #     Child Loop BB50_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB50_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB50_72 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB50_74:                              # %land.end433
                                        #   in Loop: Header=BB50_72 Depth=1
	testb	$1, %al
	jne	.LBB50_75
	jmp	.LBB50_109
.LBB50_75:                              # %for.body435
                                        #   in Loop: Header=BB50_72 Depth=1
	movl	$0, -12(%rbp)
.LBB50_76:                              # %for.cond436
                                        #   Parent Loop BB50_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB50_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB50_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB50_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_76
.LBB50_79:                              # %for.end449
                                        #   in Loop: Header=BB50_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB50_80:                              # %for.cond468
                                        #   Parent Loop BB50_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB50_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB50_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB50_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB50_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB50_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB50_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB50_85
.LBB50_84:                              # %cond.false
                                        #   in Loop: Header=BB50_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB50_85:                              # %cond.end
                                        #   in Loop: Header=BB50_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB50_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB50_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB50_91
.LBB50_87:                              # %cond.false518
                                        #   in Loop: Header=BB50_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB50_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB50_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB50_90
.LBB50_89:                              # %cond.false540
                                        #   in Loop: Header=BB50_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB50_90:                              # %cond.end559
                                        #   in Loop: Header=BB50_80 Depth=2
.LBB50_91:                              # %cond.end561
                                        #   in Loop: Header=BB50_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB50_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB50_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB50_94
.LBB50_93:                              # %cond.false592
                                        #   in Loop: Header=BB50_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB50_94:                              # %cond.end611
                                        #   in Loop: Header=BB50_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB50_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB50_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB50_100
.LBB50_96:                              # %cond.false618
                                        #   in Loop: Header=BB50_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB50_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB50_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB50_99
.LBB50_98:                              # %cond.false640
                                        #   in Loop: Header=BB50_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB50_99:                              # %cond.end659
                                        #   in Loop: Header=BB50_80 Depth=2
.LBB50_100:                             # %cond.end661
                                        #   in Loop: Header=BB50_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB50_105
.LBB50_101:                             # %if.else669
                                        #   in Loop: Header=BB50_80 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB50_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB50_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB50_104
.LBB50_103:                             # %if.else692
                                        #   in Loop: Header=BB50_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB50_104:                             # %if.end717
                                        #   in Loop: Header=BB50_80 Depth=2
	jmp	.LBB50_105
.LBB50_105:                             # %if.end718
                                        #   in Loop: Header=BB50_80 Depth=2
	jmp	.LBB50_106
.LBB50_106:                             # %for.inc719
                                        #   in Loop: Header=BB50_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_80
.LBB50_107:                             # %for.end721
                                        #   in Loop: Header=BB50_72 Depth=1
	jmp	.LBB50_108
.LBB50_108:                             # %for.inc722
                                        #   in Loop: Header=BB50_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_72
.LBB50_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB50_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB50_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB50_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB50_111 Depth=1
	movl	$0, -16(%rbp)
.LBB50_113:                             # %for.cond732
                                        #   Parent Loop BB50_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB50_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB50_113 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB50_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB50_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB50_117
.LBB50_116:                             # %if.else761
                                        #   in Loop: Header=BB50_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB50_117:                             # %if.end779
                                        #   in Loop: Header=BB50_113 Depth=2
	jmp	.LBB50_118
.LBB50_118:                             # %for.inc780
                                        #   in Loop: Header=BB50_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_113
.LBB50_119:                             # %for.end782
                                        #   in Loop: Header=BB50_111 Depth=1
	jmp	.LBB50_120
.LBB50_120:                             # %for.inc783
                                        #   in Loop: Header=BB50_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_111
.LBB50_121:                             # %for.end785
	jmp	.LBB50_122
.LBB50_122:                             # %if.end786
	movl	-124(%rbp), %ebx
	cmpl	$1384893646, -148(%rbp) # imm = 0x528BCCCE
	jne	.LBB50_124
.LBB50_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_123
.Lfunc_end50:
	.size	dct_luma.41, .Lfunc_end50-dct_luma.41
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.42 # -- Begin function intrapred_luma_16x16.42
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.42,@function
intrapred_luma_16x16.42:                # @intrapred_luma_16x16.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$1862086512, -92(%rbp)  # imm = 0x6EFD2F70
	movl	$0, -28(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -60(%rbp)
	movl	$0, -4(%rbp)
.LBB51_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB51_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-60(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_1
.LBB51_4:                               # %for.end
	movl	-60(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB51_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB51_20
.LBB51_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB51_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB51_9
.LBB51_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB51_9
.LBB51_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB51_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB51_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB51_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB51_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB51_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB51_14
.LBB51_13:                              # %cond.false23
                                        #   in Loop: Header=BB51_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB51_14
.LBB51_14:                              # %cond.end24
                                        #   in Loop: Header=BB51_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB51_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_10
.LBB51_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB51_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB51_19
.LBB51_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB51_19
.LBB51_19:                              # %cond.end39
	movl	%eax, -64(%rbp)
.LBB51_20:                              # %if.end
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB51_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB51_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB51_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB51_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB51_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB51_24:                              # %if.end51
                                        #   in Loop: Header=BB51_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB51_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB51_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB51_26:                              # %if.end68
                                        #   in Loop: Header=BB51_21 Depth=1
	jmp	.LBB51_27
.LBB51_27:                              # %for.inc69
                                        #   in Loop: Header=BB51_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_21
.LBB51_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB51_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB51_31
# %bb.30:                               # %if.then74
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB51_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB51_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB51_34
# %bb.33:                               # %if.then81
	movl	-48(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB51_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB51_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB51_37
# %bb.36:                               # %if.then88
	movl	-52(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB51_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB51_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB51_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -28(%rbp)
.LBB51_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB51_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB51_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB51_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB51_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB51_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB51_44:                              # %if.end114
                                        #   in Loop: Header=BB51_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB51_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB51_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB51_46:                              # %if.end133
                                        #   in Loop: Header=BB51_41 Depth=1
	jmp	.LBB51_47
.LBB51_47:                              # %for.inc134
                                        #   in Loop: Header=BB51_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_41
.LBB51_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB51_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB51_49 Depth=1
	movl	$0, -4(%rbp)
.LBB51_51:                              # %for.cond141
                                        #   Parent Loop BB51_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB51_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB51_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_51
.LBB51_54:                              # %for.end173
                                        #   in Loop: Header=BB51_49 Depth=1
	jmp	.LBB51_55
.LBB51_55:                              # %for.inc174
                                        #   in Loop: Header=BB51_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_49
.LBB51_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB51_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB51_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -64(%rbp)
	jne	.LBB51_60
.LBB51_59:                              # %if.then181
	jmp	.LBB51_85
.LBB51_60:                              # %if.end182
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB51_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB51_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB51_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB51_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB51_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB51_65
.LBB51_64:                              # %if.else210
                                        #   in Loop: Header=BB51_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB51_65:                              # %if.end232
                                        #   in Loop: Header=BB51_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB51_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_61
.LBB51_67:                              # %for.end264
	imull	$5, -32(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -36(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB51_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB51_68 Depth=1
	movl	$0, -4(%rbp)
.LBB51_70:                              # %for.cond293
                                        #   Parent Loop BB51_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB51_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB51_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB51_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_74
.LBB51_73:                              # %cond.false309
                                        #   in Loop: Header=BB51_70 Depth=2
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB51_74:                              # %cond.end318
                                        #   in Loop: Header=BB51_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB51_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB51_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB51_80
.LBB51_76:                              # %cond.false323
                                        #   in Loop: Header=BB51_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB51_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB51_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_79
.LBB51_78:                              # %cond.false337
                                        #   in Loop: Header=BB51_70 Depth=2
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB51_79:                              # %cond.end346
                                        #   in Loop: Header=BB51_70 Depth=2
.LBB51_80:                              # %cond.end348
                                        #   in Loop: Header=BB51_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB51_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_70
.LBB51_82:                              # %for.end359
                                        #   in Loop: Header=BB51_68 Depth=1
	jmp	.LBB51_83
.LBB51_83:                              # %for.inc360
                                        #   in Loop: Header=BB51_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_68
.LBB51_84:                              # %for.end362.loopexit
	jmp	.LBB51_85
.LBB51_85:                              # %for.end362
	cmpl	$1862086512, -92(%rbp)  # imm = 0x6EFD2F70
	jne	.LBB51_87
.LBB51_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_86
.Lfunc_end51:
	.size	intrapred_luma_16x16.42, .Lfunc_end51-intrapred_luma_16x16.42
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.43       # -- Begin function intrapred_luma.43
	.p2align	4, 0x90
	.type	intrapred_luma.43,@function
intrapred_luma.43:                      # @intrapred_luma.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$1487408655, -172(%rbp) # imm = 0x58A80E0F
	movl	%edi, -112(%rbp)
	movl	%esi, -116(%rbp)
	movq	%rdx, -224(%rbp)
	movq	%rcx, -216(%rbp)
	movq	%r8, -208(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -100(%rbp)
	movl	$0, -4(%rbp)
.LBB52_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB52_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_1
.LBB52_4:                               # %for.end
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	addl	$4, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-200(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB52_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -88(%rbp)
	je	.LBB52_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -88(%rbp)
	jne	.LBB52_10
.LBB52_7:                               # %land.rhs10
	cmpl	$4, -84(%rbp)
	movb	$1, %al
	je	.LBB52_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -84(%rbp)
	sete	%al
.LBB52_9:                               # %lor.end
.LBB52_10:                              # %land.end
	xorb	$-1, %al
.LBB52_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB52_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB52_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB52_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB52_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB52_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB52_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB52_17
.LBB52_16:                              # %cond.false
                                        #   in Loop: Header=BB52_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_17
.LBB52_17:                              # %cond.end
                                        #   in Loop: Header=BB52_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB52_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_13
.LBB52_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB52_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB52_22
.LBB52_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB52_22
.LBB52_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB52_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB52_25
.LBB52_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB52_25
.LBB52_25:                              # %cond.end49
	movl	%eax, -108(%rbp)
	cmpl	$0, -200(%rbp)
	je	.LBB52_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-196(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB52_28
.LBB52_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB52_28
.LBB52_28:                              # %cond.end59
	movl	%eax, -104(%rbp)
	jmp	.LBB52_30
.LBB52_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-200(%rbp), %eax
	movl	%eax, -104(%rbp)
.LBB52_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-224(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-216(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB52_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB52_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -104(%rbp)
	setne	%al
.LBB52_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-208(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB52_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB52_36
.LBB52_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB52_36:                              # %if.end114
	cmpl	$0, -108(%rbp)
	je	.LBB52_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB52_39
.LBB52_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB52_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB52_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_42
.LBB52_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB52_42:                              # %if.end208
	cmpl	$0, -104(%rbp)
	je	.LBB52_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-180(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-184(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB52_45
.LBB52_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB52_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB52_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB52_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB52_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB52_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_46
.LBB52_49:                              # %for.end233
	movl	$0, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB52_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB52_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB52_61
.LBB52_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB52_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB52_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB52_60
.LBB52_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB52_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB52_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB52_59
.LBB52_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -96(%rbp)
.LBB52_59:                              # %if.end284
	jmp	.LBB52_60
.LBB52_60:                              # %if.end285
	jmp	.LBB52_61
.LBB52_61:                              # %if.end286
	movl	$0, -92(%rbp)
.LBB52_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_64 Depth 2
	cmpl	$4, -92(%rbp)
	jge	.LBB52_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB52_62 Depth=1
	movl	$0, -4(%rbp)
.LBB52_64:                              # %for.cond291
                                        #   Parent Loop BB52_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB52_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB52_64 Depth=2
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-92(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB52_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_64
.LBB52_67:                              # %for.end304
                                        #   in Loop: Header=BB52_62 Depth=1
	jmp	.LBB52_68
.LBB52_68:                              # %for.inc305
                                        #   in Loop: Header=BB52_62 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB52_62
.LBB52_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB52_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB52_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB52_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB52_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_70
.LBB52_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB52_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB52_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB52_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB52_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB52_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB52_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB52_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB52_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB52_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB52_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -104(%rbp)
	je	.LBB52_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB52_85:                              # %if.end1174
	cmpl	$1487408655, -172(%rbp) # imm = 0x58A80E0F
	jne	.LBB52_87
.LBB52_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_86
.Lfunc_end52:
	.size	intrapred_luma.43, .Lfunc_end52-intrapred_luma.43
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.44
.LCPI53_0:
	.quad	4616189618054758400     # double 4
.LCPI53_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI53_2:
	.quad	4611686018427387904     # double 2
.LCPI53_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.44
	.p2align	4, 0x90
	.type	dct_chroma_sp.44,@function
dct_chroma_sp.44:                       # @dct_chroma_sp.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI53_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI53_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1480068093, -268(%rbp) # imm = 0x58380BFD
	movl	%edi, -112(%rbp)
	movl	%esi, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -184(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI53_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI53_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB53_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB53_6
.LBB53_2:                               # %cond.false
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB53_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB53_5
.LBB53_4:                               # %cond.false19
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB53_5:                               # %cond.end
.LBB53_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB53_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB53_12
.LBB53_8:                               # %cond.false30
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB53_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB53_11
.LBB53_10:                              # %cond.false37
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB53_11:                              # %cond.end41
.LBB53_12:                              # %cond.end43
	movl	%eax, -216(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB53_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB53_15
.LBB53_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB53_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -116(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB53_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB53_18
.LBB53_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB53_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-116(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -220(%rbp)
	cmpl	$0, -216(%rbp)
	jge	.LBB53_20
# %bb.19:                               # %cond.true70
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB53_21
.LBB53_20:                              # %cond.false72
	movslq	-216(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB53_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -228(%rbp)
	cmpl	$0, -216(%rbp)
	jge	.LBB53_23
# %bb.22:                               # %cond.true82
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB53_24
.LBB53_23:                              # %cond.false84
	movslq	-216(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB53_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-228(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -224(%rbp)
	movl	$0, -12(%rbp)
.LBB53_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB53_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB53_25 Depth=1
	movl	$0, -16(%rbp)
.LBB53_27:                              # %for.cond97
                                        #   Parent Loop BB53_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB53_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB53_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB53_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_27
.LBB53_30:                              # %for.end
                                        #   in Loop: Header=BB53_25 Depth=1
	jmp	.LBB53_31
.LBB53_31:                              # %for.inc121
                                        #   in Loop: Header=BB53_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_25
.LBB53_32:                              # %for.end123
	movl	$0, -24(%rbp)
.LBB53_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_35 Depth 2
                                        #       Child Loop BB53_37 Depth 3
                                        #         Child Loop BB53_39 Depth 4
                                        #       Child Loop BB53_45 Depth 3
                                        #         Child Loop BB53_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB53_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB53_33 Depth=1
	movl	$0, -20(%rbp)
.LBB53_35:                              # %for.cond128
                                        #   Parent Loop BB53_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_37 Depth 3
                                        #         Child Loop BB53_39 Depth 4
                                        #       Child Loop BB53_45 Depth 3
                                        #         Child Loop BB53_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB53_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB53_35 Depth=2
	movl	$0, -12(%rbp)
.LBB53_37:                              # %for.cond132
                                        #   Parent Loop BB53_33 Depth=1
                                        #     Parent Loop BB53_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB53_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB53_37 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB53_39:                              # %for.cond137
                                        #   Parent Loop BB53_33 Depth=1
                                        #     Parent Loop BB53_35 Depth=2
                                        #       Parent Loop BB53_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB53_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB53_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB53_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_39
.LBB53_42:                              # %for.end174
                                        #   in Loop: Header=BB53_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB53_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_37
.LBB53_44:                              # %for.end214
                                        #   in Loop: Header=BB53_35 Depth=2
	movl	$0, -16(%rbp)
.LBB53_45:                              # %for.cond215
                                        #   Parent Loop BB53_33 Depth=1
                                        #     Parent Loop BB53_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB53_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB53_45 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB53_47:                              # %for.cond220
                                        #   Parent Loop BB53_33 Depth=1
                                        #     Parent Loop BB53_35 Depth=2
                                        #       Parent Loop BB53_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB53_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB53_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-52(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-52(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-48(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB53_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_47
.LBB53_50:                              # %for.end257
                                        #   in Loop: Header=BB53_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB53_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_45
.LBB53_52:                              # %for.end298
                                        #   in Loop: Header=BB53_35 Depth=2
	jmp	.LBB53_53
.LBB53_53:                              # %for.inc299
                                        #   in Loop: Header=BB53_35 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_35
.LBB53_54:                              # %for.end301
                                        #   in Loop: Header=BB53_33 Depth=1
	jmp	.LBB53_55
.LBB53_55:                              # %for.inc302
                                        #   in Loop: Header=BB53_33 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB53_33
.LBB53_56:                              # %for.end304
	movl	$0, -24(%rbp)
.LBB53_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_59 Depth 2
                                        #       Child Loop BB53_61 Depth 3
                                        #         Child Loop BB53_63 Depth 4
                                        #       Child Loop BB53_69 Depth 3
                                        #         Child Loop BB53_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB53_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB53_57 Depth=1
	movl	$0, -20(%rbp)
.LBB53_59:                              # %for.cond309
                                        #   Parent Loop BB53_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_61 Depth 3
                                        #         Child Loop BB53_63 Depth 4
                                        #       Child Loop BB53_69 Depth 3
                                        #         Child Loop BB53_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB53_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB53_59 Depth=2
	movl	$0, -12(%rbp)
.LBB53_61:                              # %for.cond313
                                        #   Parent Loop BB53_57 Depth=1
                                        #     Parent Loop BB53_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB53_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB53_61 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB53_63:                              # %for.cond318
                                        #   Parent Loop BB53_57 Depth=1
                                        #     Parent Loop BB53_59 Depth=2
                                        #       Parent Loop BB53_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB53_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB53_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-84(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB53_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_63
.LBB53_66:                              # %for.end351
                                        #   in Loop: Header=BB53_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB53_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_61
.LBB53_68:                              # %for.end387
                                        #   in Loop: Header=BB53_59 Depth=2
	movl	$0, -16(%rbp)
.LBB53_69:                              # %for.cond388
                                        #   Parent Loop BB53_57 Depth=1
                                        #     Parent Loop BB53_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB53_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB53_69 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB53_71:                              # %for.cond393
                                        #   Parent Loop BB53_57 Depth=1
                                        #     Parent Loop BB53_59 Depth=2
                                        #       Parent Loop BB53_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB53_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB53_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movslq	-52(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-52(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-48(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB53_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_71
.LBB53_74:                              # %for.end426
                                        #   in Loop: Header=BB53_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB53_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_69
.LBB53_76:                              # %for.end463
                                        #   in Loop: Header=BB53_59 Depth=2
	jmp	.LBB53_77
.LBB53_77:                              # %for.inc464
                                        #   in Loop: Header=BB53_59 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_59
.LBB53_78:                              # %for.end466
                                        #   in Loop: Header=BB53_57 Depth=1
	jmp	.LBB53_79
.LBB53_79:                              # %for.inc467
                                        #   in Loop: Header=BB53_57 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB53_57
.LBB53_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$0, -32(%rbp)
.LBB53_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB53_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -44(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	je	.LBB53_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB53_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB53_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB53_81 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB53_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB53_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-44(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-40(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB53_90
	jp	.LBB53_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-40(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB53_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB53_89
.LBB53_88:                              # %cond.false691
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	-40(%rbp), %eax
.LBB53_89:                              # %cond.end692
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB53_94
.LBB53_90:                              # %if.else
                                        #   in Loop: Header=BB53_81 Depth=1
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB53_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB53_93
.LBB53_92:                              # %if.else697
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB53_93:                              # %if.end
                                        #   in Loop: Header=BB53_81 Depth=1
	jmp	.LBB53_94
.LBB53_94:                              # %if.end698
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB53_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB53_97
.LBB53_96:                              # %cond.false702
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	-100(%rbp), %eax
.LBB53_97:                              # %cond.end703
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	%eax, -104(%rbp)
	jmp	.LBB53_108
.LBB53_98:                              # %if.else705
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB53_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB53_107
.LBB53_100:                             # %if.else709
                                        #   in Loop: Header=BB53_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB53_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB53_103
.LBB53_102:                             # %cond.false713
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	-40(%rbp), %eax
.LBB53_103:                             # %cond.end714
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB53_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB53_106
.LBB53_105:                             # %cond.false719
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	-100(%rbp), %eax
.LBB53_106:                             # %cond.end720
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	%eax, -104(%rbp)
.LBB53_107:                             # %if.end722
                                        #   in Loop: Header=BB53_81 Depth=1
	jmp	.LBB53_108
.LBB53_108:                             # %if.end723
                                        #   in Loop: Header=BB53_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB53_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB53_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB53_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB53_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB53_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB53_112:                             # %if.end734
                                        #   in Loop: Header=BB53_81 Depth=1
	jmp	.LBB53_113
.LBB53_113:                             # %if.end735
                                        #   in Loop: Header=BB53_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB53_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	-112(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-184(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-204(%rbp), %eax
	jle	.LBB53_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	$1, %eax
	jmp	.LBB53_117
.LBB53_116:                             # %cond.false745
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	-204(%rbp), %eax
.LBB53_117:                             # %cond.end746
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	%eax, -204(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -88(%rbp)
.LBB53_118:                             # %if.end763
                                        #   in Loop: Header=BB53_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-228(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB53_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB53_81
.LBB53_120:                             # %for.end788
	movq	-280(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -212(%rbp)
	movl	$0, -240(%rbp)
	movl	$0, -24(%rbp)
.LBB53_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_123 Depth 2
                                        #       Child Loop BB53_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB53_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB53_121 Depth=1
	movl	$0, -20(%rbp)
.LBB53_123:                             # %for.cond839
                                        #   Parent Loop BB53_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB53_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB53_123 Depth=2
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -236(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$1, -32(%rbp)
.LBB53_125:                             # %for.cond860
                                        #   Parent Loop BB53_121 Depth=1
                                        #     Parent Loop BB53_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB53_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB53_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB53_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB53_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB53_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB53_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB53_130
.LBB53_129:                             # %if.then867
                                        #   in Loop: Header=BB53_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_131
.LBB53_130:                             # %if.else876
                                        #   in Loop: Header=BB53_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB53_131:                             # %if.end885
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -44(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	je	.LBB53_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB53_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB53_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB53_125 Depth=3
	cmpl	$0, -40(%rbp)
	je	.LBB53_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB53_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-44(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-40(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB53_139
	jp	.LBB53_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-40(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB53_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB53_138
.LBB53_137:                             # %cond.false1047
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	-40(%rbp), %eax
.LBB53_138:                             # %cond.end1048
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB53_143
.LBB53_139:                             # %if.else1050
                                        #   in Loop: Header=BB53_125 Depth=3
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB53_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB53_142
.LBB53_141:                             # %if.else1054
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB53_142:                             # %if.end1055
                                        #   in Loop: Header=BB53_125 Depth=3
	jmp	.LBB53_143
.LBB53_143:                             # %if.end1056
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB53_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	-44(%rbp), %eax
	jmp	.LBB53_146
.LBB53_145:                             # %cond.false1060
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	-100(%rbp), %eax
.LBB53_146:                             # %cond.end1061
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	%eax, -104(%rbp)
	jmp	.LBB53_157
.LBB53_147:                             # %if.else1063
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB53_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB53_156
.LBB53_149:                             # %if.else1067
                                        #   in Loop: Header=BB53_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB53_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB53_152
.LBB53_151:                             # %cond.false1071
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	-40(%rbp), %eax
.LBB53_152:                             # %cond.end1072
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB53_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	-44(%rbp), %eax
	jmp	.LBB53_155
.LBB53_154:                             # %cond.false1077
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	-100(%rbp), %eax
.LBB53_155:                             # %cond.end1078
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	%eax, -104(%rbp)
.LBB53_156:                             # %if.end1080
                                        #   in Loop: Header=BB53_125 Depth=3
	jmp	.LBB53_157
.LBB53_157:                             # %if.end1081
                                        #   in Loop: Header=BB53_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB53_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	-112(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	-20(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-184(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB53_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	-212(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -212(%rbp)
	jmp	.LBB53_161
.LBB53_160:                             # %if.else1099
                                        #   in Loop: Header=BB53_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-212(%rbp), %eax
	movl	%eax, -212(%rbp)
.LBB53_161:                             # %if.end1106
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	$2, -240(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -88(%rbp)
.LBB53_162:                             # %if.end1128
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-228(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB53_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB53_125
.LBB53_164:                             # %for.end1164
                                        #   in Loop: Header=BB53_123 Depth=2
	movq	-288(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB53_123 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_123
.LBB53_166:                             # %for.end1169
                                        #   in Loop: Header=BB53_121 Depth=1
	jmp	.LBB53_167
.LBB53_167:                             # %for.inc1170
                                        #   in Loop: Header=BB53_121 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB53_121
.LBB53_168:                             # %for.end1172
	cmpl	$2, -240(%rbp)
	jne	.LBB53_170
# %bb.169:                              # %if.then1175
	movl	$2, -204(%rbp)
.LBB53_170:                             # %if.end1176
	movl	$0, -24(%rbp)
.LBB53_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_173 Depth 2
                                        #       Child Loop BB53_175 Depth 3
                                        #         Child Loop BB53_177 Depth 4
                                        #         Child Loop BB53_181 Depth 4
                                        #       Child Loop BB53_187 Depth 3
                                        #         Child Loop BB53_189 Depth 4
                                        #         Child Loop BB53_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB53_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB53_171 Depth=1
	movl	$0, -20(%rbp)
.LBB53_173:                             # %for.cond1181
                                        #   Parent Loop BB53_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_175 Depth 3
                                        #         Child Loop BB53_177 Depth 4
                                        #         Child Loop BB53_181 Depth 4
                                        #       Child Loop BB53_187 Depth 3
                                        #         Child Loop BB53_189 Depth 4
                                        #         Child Loop BB53_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB53_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB53_173 Depth=2
	movl	$0, -12(%rbp)
.LBB53_175:                             # %for.cond1185
                                        #   Parent Loop BB53_171 Depth=1
                                        #     Parent Loop BB53_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_177 Depth 4
                                        #         Child Loop BB53_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB53_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB53_175 Depth=3
	movl	$0, -16(%rbp)
.LBB53_177:                             # %for.cond1189
                                        #   Parent Loop BB53_171 Depth=1
                                        #     Parent Loop BB53_173 Depth=2
                                        #       Parent Loop BB53_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB53_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB53_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB53_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_177
.LBB53_180:                             # %for.end1204
                                        #   in Loop: Header=BB53_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB53_181:                             # %for.cond1223
                                        #   Parent Loop BB53_171 Depth=1
                                        #     Parent Loop BB53_173 Depth=2
                                        #       Parent Loop BB53_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB53_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB53_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB53_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_181
.LBB53_184:                             # %for.end1254
                                        #   in Loop: Header=BB53_175 Depth=3
	jmp	.LBB53_185
.LBB53_185:                             # %for.inc1255
                                        #   in Loop: Header=BB53_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_175
.LBB53_186:                             # %for.end1257
                                        #   in Loop: Header=BB53_173 Depth=2
	movl	$0, -16(%rbp)
.LBB53_187:                             # %for.cond1258
                                        #   Parent Loop BB53_171 Depth=1
                                        #     Parent Loop BB53_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_189 Depth 4
                                        #         Child Loop BB53_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB53_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB53_187 Depth=3
	movl	$0, -12(%rbp)
.LBB53_189:                             # %for.cond1262
                                        #   Parent Loop BB53_171 Depth=1
                                        #     Parent Loop BB53_173 Depth=2
                                        #       Parent Loop BB53_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB53_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB53_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB53_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_189
.LBB53_192:                             # %for.end1277
                                        #   in Loop: Header=BB53_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB53_193:                             # %for.cond1296
                                        #   Parent Loop BB53_171 Depth=1
                                        #     Parent Loop BB53_173 Depth=2
                                        #       Parent Loop BB53_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB53_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB53_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-48(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB53_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB53_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB53_197
.LBB53_196:                             # %cond.false1311
                                        #   in Loop: Header=BB53_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB53_197:                             # %cond.end1319
                                        #   in Loop: Header=BB53_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB53_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB53_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB53_203
.LBB53_199:                             # %cond.false1325
                                        #   in Loop: Header=BB53_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB53_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB53_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB53_202
.LBB53_201:                             # %cond.false1336
                                        #   in Loop: Header=BB53_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-48(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB53_202:                             # %cond.end1344
                                        #   in Loop: Header=BB53_193 Depth=4
.LBB53_203:                             # %cond.end1346
                                        #   in Loop: Header=BB53_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-20(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-48(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB53_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB53_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB53_206
.LBB53_205:                             # %cond.false1366
                                        #   in Loop: Header=BB53_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB53_206:                             # %cond.end1374
                                        #   in Loop: Header=BB53_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB53_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB53_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB53_212
.LBB53_208:                             # %cond.false1380
                                        #   in Loop: Header=BB53_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB53_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB53_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB53_211
.LBB53_210:                             # %cond.false1391
                                        #   in Loop: Header=BB53_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-48(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB53_211:                             # %cond.end1399
                                        #   in Loop: Header=BB53_193 Depth=4
.LBB53_212:                             # %cond.end1401
                                        #   in Loop: Header=BB53_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB53_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_193
.LBB53_214:                             # %for.end1412
                                        #   in Loop: Header=BB53_187 Depth=3
	jmp	.LBB53_215
.LBB53_215:                             # %for.inc1413
                                        #   in Loop: Header=BB53_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_187
.LBB53_216:                             # %for.end1415
                                        #   in Loop: Header=BB53_173 Depth=2
	jmp	.LBB53_217
.LBB53_217:                             # %for.inc1416
                                        #   in Loop: Header=BB53_173 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_173
.LBB53_218:                             # %for.end1418
                                        #   in Loop: Header=BB53_171 Depth=1
	jmp	.LBB53_219
.LBB53_219:                             # %for.inc1419
                                        #   in Loop: Header=BB53_171 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB53_171
.LBB53_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB53_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB53_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB53_221 Depth=1
	movl	$0, -16(%rbp)
.LBB53_223:                             # %for.cond1426
                                        #   Parent Loop BB53_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB53_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB53_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-112(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB53_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_223
.LBB53_226:                             # %for.end1446
                                        #   in Loop: Header=BB53_221 Depth=1
	jmp	.LBB53_227
.LBB53_227:                             # %for.inc1447
                                        #   in Loop: Header=BB53_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_221
.LBB53_228:                             # %for.end1449
	movl	-204(%rbp), %ebx
	cmpl	$1480068093, -268(%rbp) # imm = 0x58380BFD
	jne	.LBB53_230
.LBB53_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_229
.Lfunc_end53:
	.size	dct_chroma_sp.44, .Lfunc_end53-dct_chroma_sp.44
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.45           # -- Begin function dct_chroma.45
	.p2align	4, 0x90
	.type	dct_chroma.45,@function
dct_chroma.45:                          # @dct_chroma.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$2049246639, -380(%rbp) # imm = 0x7A2505AF
	movl	%edi, -20(%rbp)
	movl	%esi, -132(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB54_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB54_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB54_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -128(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -200(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -140(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -212(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB54_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB54_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -104(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB54_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB54_11
.LBB54_7:                               # %cond.false
	cmpl	$51, -124(%rbp)
	jle	.LBB54_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB54_10
.LBB54_9:                               # %cond.false25
	movl	-124(%rbp), %eax
.LBB54_10:                              # %cond.end
.LBB54_11:                              # %cond.end26
	movl	%eax, -124(%rbp)
	cmpl	$0, -124(%rbp)
	jge	.LBB54_13
# %bb.12:                               # %cond.true29
	movl	-124(%rbp), %eax
	jmp	.LBB54_14
.LBB54_13:                              # %cond.false30
	movl	-124(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB54_14:                              # %cond.end34
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB54_16
# %bb.15:                               # %if.then
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -108(%rbp)
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -136(%rbp)
	movl	-108(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -212(%rbp)
.LBB54_16:                              # %if.end
	movl	$0, -24(%rbp)
.LBB54_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_19 Depth 2
                                        #       Child Loop BB54_21 Depth 3
                                        #         Child Loop BB54_25 Depth 4
                                        #       Child Loop BB54_31 Depth 3
                                        #         Child Loop BB54_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB54_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB54_17 Depth=1
	movl	$0, -28(%rbp)
.LBB54_19:                              # %for.cond56
                                        #   Parent Loop BB54_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_21 Depth 3
                                        #         Child Loop BB54_25 Depth 4
                                        #       Child Loop BB54_31 Depth 3
                                        #         Child Loop BB54_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB54_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB54_19 Depth=2
	movl	$0, -12(%rbp)
.LBB54_21:                              # %for.cond60
                                        #   Parent Loop BB54_17 Depth=1
                                        #     Parent Loop BB54_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB54_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB54_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB54_21 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB54_23:                              # %land.end64
                                        #   in Loop: Header=BB54_21 Depth=3
	testb	$1, %al
	jne	.LBB54_24
	jmp	.LBB54_30
.LBB54_24:                              # %for.body66
                                        #   in Loop: Header=BB54_21 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB54_25:                              # %for.cond68
                                        #   Parent Loop BB54_17 Depth=1
                                        #     Parent Loop BB54_19 Depth=2
                                        #       Parent Loop BB54_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB54_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB54_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB54_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_25
.LBB54_28:                              # %for.end
                                        #   in Loop: Header=BB54_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-28(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB54_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_21
.LBB54_30:                              # %for.end141
                                        #   in Loop: Header=BB54_19 Depth=2
	movl	$0, -16(%rbp)
.LBB54_31:                              # %for.cond142
                                        #   Parent Loop BB54_17 Depth=1
                                        #     Parent Loop BB54_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB54_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB54_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB54_31 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB54_33:                              # %land.end148
                                        #   in Loop: Header=BB54_31 Depth=3
	testb	$1, %al
	jne	.LBB54_34
	jmp	.LBB54_40
.LBB54_34:                              # %for.body150
                                        #   in Loop: Header=BB54_31 Depth=3
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB54_35:                              # %for.cond152
                                        #   Parent Loop BB54_17 Depth=1
                                        #     Parent Loop BB54_19 Depth=2
                                        #       Parent Loop BB54_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB54_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB54_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB54_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_35
.LBB54_38:                              # %for.end189
                                        #   in Loop: Header=BB54_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB54_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_31
.LBB54_40:                              # %for.end230
                                        #   in Loop: Header=BB54_19 Depth=2
	jmp	.LBB54_41
.LBB54_41:                              # %for.inc231
                                        #   in Loop: Header=BB54_19 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB54_19
.LBB54_42:                              # %for.end233
                                        #   in Loop: Header=BB54_17 Depth=1
	jmp	.LBB54_43
.LBB54_43:                              # %for.inc234
                                        #   in Loop: Header=BB54_17 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB54_17
.LBB54_44:                              # %for.end236
	cmpl	$1, -140(%rbp)
	jne	.LBB54_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB54_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB54_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB54_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB54_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB54_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB54_50
.LBB54_49:                              # %if.else
                                        #   in Loop: Header=BB54_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB54_50:                              # %if.end349
                                        #   in Loop: Header=BB54_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB54_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB54_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB54_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB54_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB54_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB54_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB54_54:                              # %if.end359
                                        #   in Loop: Header=BB54_46 Depth=1
	jmp	.LBB54_55
.LBB54_55:                              # %if.end360
                                        #   in Loop: Header=BB54_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB54_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB54_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB54_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB54_46 Depth=1
	movl	$1, %eax
	jmp	.LBB54_59
.LBB54_58:                              # %cond.false370
                                        #   in Loop: Header=BB54_46 Depth=1
	movl	-132(%rbp), %eax
.LBB54_59:                              # %cond.end371
                                        #   in Loop: Header=BB54_46 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -144(%rbp)
.LBB54_60:                              # %if.end384
                                        #   in Loop: Header=BB54_46 Depth=1
	movl	-144(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB54_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB54_46
.LBB54_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB54_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB54_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB54_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB54_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB54_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB54_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB54_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB54_68
.LBB54_67:                              # %if.else447
                                        #   in Loop: Header=BB54_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB54_68:                              # %if.end461
                                        #   in Loop: Header=BB54_63 Depth=1
	jmp	.LBB54_73
.LBB54_69:                              # %if.else462
                                        #   in Loop: Header=BB54_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB54_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB54_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB54_72
.LBB54_71:                              # %if.else479
                                        #   in Loop: Header=BB54_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB54_72:                              # %if.end493
                                        #   in Loop: Header=BB54_63 Depth=1
	jmp	.LBB54_73
.LBB54_73:                              # %if.end494
                                        #   in Loop: Header=BB54_63 Depth=1
	jmp	.LBB54_74
.LBB54_74:                              # %for.inc495
                                        #   in Loop: Header=BB54_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_63
.LBB54_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB54_213
.LBB54_76:                              # %if.else514
	cmpl	$2, -140(%rbp)
	jne	.LBB54_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB54_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB54_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB54_78 Depth=1
	movl	$0, -16(%rbp)
.LBB54_80:                              # %for.cond523
                                        #   Parent Loop BB54_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB54_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB54_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB54_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_80
.LBB54_83:                              # %for.end541
                                        #   in Loop: Header=BB54_78 Depth=1
	jmp	.LBB54_84
.LBB54_84:                              # %for.inc542
                                        #   in Loop: Header=BB54_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_78
.LBB54_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB54_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB54_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB54_86 Depth=1
	movl	$0, -12(%rbp)
.LBB54_88:                              # %for.cond605
                                        #   Parent Loop BB54_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB54_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB54_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB54_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_88
.LBB54_91:                              # %for.end634
                                        #   in Loop: Header=BB54_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB54_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_86
.LBB54_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB54_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB54_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB54_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB54_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB54_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB54_98
.LBB54_97:                              # %if.else700
                                        #   in Loop: Header=BB54_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB54_98:                              # %if.end723
                                        #   in Loop: Header=BB54_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB54_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB54_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB54_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB54_94 Depth=1
	movl	$1, %eax
	jmp	.LBB54_102
.LBB54_101:                             # %cond.false735
                                        #   in Loop: Header=BB54_94 Depth=1
	movl	-132(%rbp), %eax
.LBB54_102:                             # %cond.end736
                                        #   in Loop: Header=BB54_94 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB54_103:                             # %if.end748
                                        #   in Loop: Header=BB54_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB54_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB54_94
.LBB54_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB54_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_108 Depth 2
                                        #     Child Loop BB54_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB54_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB54_106 Depth=1
	movl	$0, -12(%rbp)
.LBB54_108:                             # %for.cond823
                                        #   Parent Loop BB54_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB54_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB54_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB54_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_108
.LBB54_111:                             # %for.end835
                                        #   in Loop: Header=BB54_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB54_112:                             # %for.cond852
                                        #   Parent Loop BB54_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB54_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB54_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -108(%rbp)
	jge	.LBB54_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB54_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB54_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB54_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB54_117
.LBB54_116:                             # %if.else915
                                        #   in Loop: Header=BB54_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB54_117:                             # %if.end968
                                        #   in Loop: Header=BB54_112 Depth=2
	jmp	.LBB54_122
.LBB54_118:                             # %if.else969
                                        #   in Loop: Header=BB54_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB54_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB54_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB54_121
.LBB54_120:                             # %if.else1019
                                        #   in Loop: Header=BB54_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB54_121:                             # %if.end1066
                                        #   in Loop: Header=BB54_112 Depth=2
	jmp	.LBB54_122
.LBB54_122:                             # %if.end1067
                                        #   in Loop: Header=BB54_112 Depth=2
	jmp	.LBB54_123
.LBB54_123:                             # %for.inc1068
                                        #   in Loop: Header=BB54_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_112
.LBB54_124:                             # %for.end1070
                                        #   in Loop: Header=BB54_106 Depth=1
	jmp	.LBB54_125
.LBB54_125:                             # %for.inc1071
                                        #   in Loop: Header=BB54_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_106
.LBB54_126:                             # %for.end1073
	jmp	.LBB54_212
.LBB54_127:                             # %if.else1074
	cmpl	$3, -140(%rbp)
	jne	.LBB54_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB54_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB54_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB54_129 Depth=1
	movl	$0, -16(%rbp)
.LBB54_131:                             # %for.cond1083
                                        #   Parent Loop BB54_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB54_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB54_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB54_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_131
.LBB54_134:                             # %for.end1101
                                        #   in Loop: Header=BB54_129 Depth=1
	jmp	.LBB54_135
.LBB54_135:                             # %for.inc1102
                                        #   in Loop: Header=BB54_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_129
.LBB54_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB54_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB54_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB54_137 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB54_139:                             # %land.end1111
                                        #   in Loop: Header=BB54_137 Depth=1
	testb	$1, %al
	jne	.LBB54_140
	jmp	.LBB54_146
.LBB54_140:                             # %for.body1113
                                        #   in Loop: Header=BB54_137 Depth=1
	movl	$0, -16(%rbp)
.LBB54_141:                             # %for.cond1114
                                        #   Parent Loop BB54_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB54_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB54_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB54_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_141
.LBB54_144:                             # %for.end1143
                                        #   in Loop: Header=BB54_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB54_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_137
.LBB54_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB54_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB54_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB54_147 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB54_149:                             # %land.end1177
                                        #   in Loop: Header=BB54_147 Depth=1
	testb	$1, %al
	jne	.LBB54_150
	jmp	.LBB54_156
.LBB54_150:                             # %for.body1179
                                        #   in Loop: Header=BB54_147 Depth=1
	movl	$0, -12(%rbp)
.LBB54_151:                             # %for.cond1180
                                        #   Parent Loop BB54_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB54_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB54_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB54_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_151
.LBB54_154:                             # %for.end1209
                                        #   in Loop: Header=BB54_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB54_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_147
.LBB54_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB54_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB54_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB54_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB54_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB54_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB54_164
.LBB54_160:                             # %if.else1261
                                        #   in Loop: Header=BB54_157 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB54_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB54_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB54_163
.LBB54_162:                             # %if.else1287
                                        #   in Loop: Header=BB54_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB54_163:                             # %if.end1310
                                        #   in Loop: Header=BB54_157 Depth=1
	jmp	.LBB54_164
.LBB54_164:                             # %if.end1311
                                        #   in Loop: Header=BB54_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB54_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB54_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB54_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB54_157 Depth=1
	movl	$1, %eax
	jmp	.LBB54_168
.LBB54_167:                             # %cond.false1322
                                        #   in Loop: Header=BB54_157 Depth=1
	movl	-132(%rbp), %eax
.LBB54_168:                             # %cond.end1323
                                        #   in Loop: Header=BB54_157 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB54_169:                             # %if.end1335
                                        #   in Loop: Header=BB54_157 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB54_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB54_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB54_171:                             # %if.end1347
                                        #   in Loop: Header=BB54_157 Depth=1
	jmp	.LBB54_172
.LBB54_172:                             # %for.inc1348
                                        #   in Loop: Header=BB54_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB54_157
.LBB54_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB54_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_178 Depth 2
                                        #     Child Loop BB54_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB54_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB54_174 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB54_176:                             # %land.end1359
                                        #   in Loop: Header=BB54_174 Depth=1
	testb	$1, %al
	jne	.LBB54_177
	jmp	.LBB54_187
.LBB54_177:                             # %for.body1361
                                        #   in Loop: Header=BB54_174 Depth=1
	movl	$0, -16(%rbp)
.LBB54_178:                             # %for.cond1362
                                        #   Parent Loop BB54_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB54_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB54_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB54_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_178
.LBB54_181:                             # %for.end1374
                                        #   in Loop: Header=BB54_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB54_182:                             # %for.cond1391
                                        #   Parent Loop BB54_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB54_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB54_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB54_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_182
.LBB54_185:                             # %for.end1416
                                        #   in Loop: Header=BB54_174 Depth=1
	jmp	.LBB54_186
.LBB54_186:                             # %for.inc1417
                                        #   in Loop: Header=BB54_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_174
.LBB54_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB54_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_192 Depth 2
                                        #     Child Loop BB54_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB54_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB54_188 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB54_190:                             # %land.end1426
                                        #   in Loop: Header=BB54_188 Depth=1
	testb	$1, %al
	jne	.LBB54_191
	jmp	.LBB54_210
.LBB54_191:                             # %for.body1428
                                        #   in Loop: Header=BB54_188 Depth=1
	movl	$0, -12(%rbp)
.LBB54_192:                             # %for.cond1429
                                        #   Parent Loop BB54_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB54_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB54_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB54_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_192
.LBB54_195:                             # %for.end1441
                                        #   in Loop: Header=BB54_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB54_196:                             # %for.cond1458
                                        #   Parent Loop BB54_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB54_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB54_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB54_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB54_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB54_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB54_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB54_201
.LBB54_200:                             # %if.else1521
                                        #   in Loop: Header=BB54_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB54_201:                             # %if.end1574
                                        #   in Loop: Header=BB54_196 Depth=2
	jmp	.LBB54_206
.LBB54_202:                             # %if.else1575
                                        #   in Loop: Header=BB54_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB54_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB54_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB54_205
.LBB54_204:                             # %if.else1625
                                        #   in Loop: Header=BB54_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB54_205:                             # %if.end1672
                                        #   in Loop: Header=BB54_196 Depth=2
	jmp	.LBB54_206
.LBB54_206:                             # %if.end1673
                                        #   in Loop: Header=BB54_196 Depth=2
	jmp	.LBB54_207
.LBB54_207:                             # %for.inc1674
                                        #   in Loop: Header=BB54_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_196
.LBB54_208:                             # %for.end1676
                                        #   in Loop: Header=BB54_188 Depth=1
	jmp	.LBB54_209
.LBB54_209:                             # %for.inc1677
                                        #   in Loop: Header=BB54_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_188
.LBB54_210:                             # %for.end1679
	jmp	.LBB54_211
.LBB54_211:                             # %if.end1680
	jmp	.LBB54_212
.LBB54_212:                             # %if.end1681
	jmp	.LBB54_213
.LBB54_213:                             # %if.end1682
	movl	$0, -196(%rbp)
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB54_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_216 Depth 2
                                        #       Child Loop BB54_218 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB54_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB54_214 Depth=1
	movl	$0, -112(%rbp)
.LBB54_216:                             # %for.cond1689
                                        #   Parent Loop BB54_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_218 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB54_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB54_216 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$1, -36(%rbp)
.LBB54_218:                             # %for.cond1722
                                        #   Parent Loop BB54_214 Depth=1
                                        #     Parent Loop BB54_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB54_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB54_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB54_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB54_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB54_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB54_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB54_223
.LBB54_222:                             # %if.then1731
                                        #   in Loop: Header=BB54_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_224
.LBB54_223:                             # %if.else1740
                                        #   in Loop: Header=BB54_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB54_224:                             # %if.end1749
                                        #   in Loop: Header=BB54_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB54_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB54_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB54_230
.LBB54_226:                             # %if.else1761
                                        #   in Loop: Header=BB54_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB54_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB54_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB54_229
.LBB54_228:                             # %if.else1792
                                        #   in Loop: Header=BB54_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB54_229:                             # %if.end1820
                                        #   in Loop: Header=BB54_218 Depth=3
	jmp	.LBB54_230
.LBB54_230:                             # %if.end1821
                                        #   in Loop: Header=BB54_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB54_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB54_218 Depth=3
	movl	-116(%rbp), %eax
	addl	-200(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB54_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB54_218 Depth=3
	cmpl	$0, -104(%rbp)
	je	.LBB54_234
.LBB54_233:                             # %if.then1839
                                        #   in Loop: Header=BB54_218 Depth=3
	movl	-196(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -196(%rbp)
	jmp	.LBB54_235
.LBB54_234:                             # %if.else1841
                                        #   in Loop: Header=BB54_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -196(%rbp)
.LBB54_235:                             # %if.end1848
                                        #   in Loop: Header=BB54_218 Depth=3
	movl	$2, -208(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB54_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB54_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB54_247
.LBB54_237:                             # %if.else1872
                                        #   in Loop: Header=BB54_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB54_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB54_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB54_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB54_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB54_241
.LBB54_240:                             # %if.else1893
                                        #   in Loop: Header=BB54_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB54_241:                             # %if.end1908
                                        #   in Loop: Header=BB54_218 Depth=3
	jmp	.LBB54_246
.LBB54_242:                             # %if.else1909
                                        #   in Loop: Header=BB54_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB54_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB54_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB54_245
.LBB54_244:                             # %if.else1924
                                        #   in Loop: Header=BB54_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB54_245:                             # %if.end1936
                                        #   in Loop: Header=BB54_218 Depth=3
	jmp	.LBB54_246
.LBB54_246:                             # %if.end1937
                                        #   in Loop: Header=BB54_218 Depth=3
	jmp	.LBB54_247
.LBB54_247:                             # %if.end1938
                                        #   in Loop: Header=BB54_218 Depth=3
	jmp	.LBB54_248
.LBB54_248:                             # %if.end1939
                                        #   in Loop: Header=BB54_218 Depth=3
	cmpl	$0, -104(%rbp)
	jne	.LBB54_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB54_218 Depth=3
	movl	-144(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB54_250:                             # %if.end1949
                                        #   in Loop: Header=BB54_218 Depth=3
	jmp	.LBB54_251
.LBB54_251:                             # %for.inc1950
                                        #   in Loop: Header=BB54_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB54_218
.LBB54_252:                             # %for.end1952
                                        #   in Loop: Header=BB54_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB54_216 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB54_216
.LBB54_254:                             # %for.end1957
                                        #   in Loop: Header=BB54_214 Depth=1
	jmp	.LBB54_255
.LBB54_255:                             # %for.inc1958
                                        #   in Loop: Header=BB54_214 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB54_214
.LBB54_256:                             # %for.end1960
	cmpl	$4, -196(%rbp)
	jge	.LBB54_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -104(%rbp)
	jne	.LBB54_278
# %bb.258:                              # %if.then1965
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB54_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_261 Depth 2
                                        #       Child Loop BB54_265 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB54_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB54_259 Depth=1
	movl	$0, -112(%rbp)
.LBB54_261:                             # %for.cond1972
                                        #   Parent Loop BB54_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_265 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB54_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB54_261 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB54_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB54_261 Depth=2
	movslq	-140(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-140(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB54_264:                             # %if.end2016
                                        #   in Loop: Header=BB54_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB54_265:                             # %for.cond2018
                                        #   Parent Loop BB54_259 Depth=1
                                        #     Parent Loop BB54_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB54_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB54_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB54_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB54_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB54_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB54_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB54_270
.LBB54_269:                             # %if.then2030
                                        #   in Loop: Header=BB54_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_271
.LBB54_270:                             # %if.else2039
                                        #   in Loop: Header=BB54_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB54_271:                             # %if.end2048
                                        #   in Loop: Header=BB54_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB54_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB54_265
.LBB54_273:                             # %for.end2060
                                        #   in Loop: Header=BB54_261 Depth=2
	jmp	.LBB54_274
.LBB54_274:                             # %for.inc2061
                                        #   in Loop: Header=BB54_261 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB54_261
.LBB54_275:                             # %for.end2063
                                        #   in Loop: Header=BB54_259 Depth=1
	jmp	.LBB54_276
.LBB54_276:                             # %for.inc2064
                                        #   in Loop: Header=BB54_259 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB54_259
.LBB54_277:                             # %for.end2066
	jmp	.LBB54_278
.LBB54_278:                             # %if.end2067
	cmpl	$2, -208(%rbp)
	jne	.LBB54_280
# %bb.279:                              # %if.then2070
	movl	$2, -132(%rbp)
.LBB54_280:                             # %if.end2071
	movl	$0, -24(%rbp)
.LBB54_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_285 Depth 2
                                        #       Child Loop BB54_287 Depth 3
                                        #         Child Loop BB54_289 Depth 4
                                        #         Child Loop BB54_293 Depth 4
                                        #       Child Loop BB54_299 Depth 3
                                        #         Child Loop BB54_303 Depth 4
                                        #         Child Loop BB54_307 Depth 4
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB54_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB54_281 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB54_283:                             # %land.end2079
                                        #   in Loop: Header=BB54_281 Depth=1
	testb	$1, %al
	jne	.LBB54_284
	jmp	.LBB54_340
.LBB54_284:                             # %for.body2081
                                        #   in Loop: Header=BB54_281 Depth=1
	movl	$0, -28(%rbp)
.LBB54_285:                             # %for.cond2082
                                        #   Parent Loop BB54_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_287 Depth 3
                                        #         Child Loop BB54_289 Depth 4
                                        #         Child Loop BB54_293 Depth 4
                                        #       Child Loop BB54_299 Depth 3
                                        #         Child Loop BB54_303 Depth 4
                                        #         Child Loop BB54_307 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB54_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB54_285 Depth=2
	movl	$0, -12(%rbp)
.LBB54_287:                             # %for.cond2087
                                        #   Parent Loop BB54_281 Depth=1
                                        #     Parent Loop BB54_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB54_289 Depth 4
                                        #         Child Loop BB54_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB54_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB54_287 Depth=3
	movl	$0, -16(%rbp)
.LBB54_289:                             # %for.cond2091
                                        #   Parent Loop BB54_281 Depth=1
                                        #     Parent Loop BB54_285 Depth=2
                                        #       Parent Loop BB54_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB54_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB54_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB54_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_289
.LBB54_292:                             # %for.end2106
                                        #   in Loop: Header=BB54_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB54_293:                             # %for.cond2125
                                        #   Parent Loop BB54_281 Depth=1
                                        #     Parent Loop BB54_285 Depth=2
                                        #       Parent Loop BB54_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB54_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB54_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB54_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_293
.LBB54_296:                             # %for.end2156
                                        #   in Loop: Header=BB54_287 Depth=3
	jmp	.LBB54_297
.LBB54_297:                             # %for.inc2157
                                        #   in Loop: Header=BB54_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_287
.LBB54_298:                             # %for.end2159
                                        #   in Loop: Header=BB54_285 Depth=2
	movl	$0, -16(%rbp)
.LBB54_299:                             # %for.cond2160
                                        #   Parent Loop BB54_281 Depth=1
                                        #     Parent Loop BB54_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB54_303 Depth 4
                                        #         Child Loop BB54_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB54_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB54_299 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB54_301:                             # %land.end2166
                                        #   in Loop: Header=BB54_299 Depth=3
	testb	$1, %al
	jne	.LBB54_302
	jmp	.LBB54_336
.LBB54_302:                             # %for.body2168
                                        #   in Loop: Header=BB54_299 Depth=3
	movl	$0, -12(%rbp)
.LBB54_303:                             # %for.cond2169
                                        #   Parent Loop BB54_281 Depth=1
                                        #     Parent Loop BB54_285 Depth=2
                                        #       Parent Loop BB54_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB54_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB54_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB54_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_303
.LBB54_306:                             # %for.end2184
                                        #   in Loop: Header=BB54_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB54_307:                             # %for.cond2203
                                        #   Parent Loop BB54_281 Depth=1
                                        #     Parent Loop BB54_285 Depth=2
                                        #       Parent Loop BB54_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB54_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB54_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB54_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB54_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB54_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB54_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB54_312
.LBB54_311:                             # %cond.false2231
                                        #   in Loop: Header=BB54_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB54_312:                             # %cond.end2250
                                        #   in Loop: Header=BB54_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB54_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB54_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB54_318
.LBB54_314:                             # %cond.false2257
                                        #   in Loop: Header=BB54_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB54_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB54_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB54_317
.LBB54_316:                             # %cond.false2279
                                        #   in Loop: Header=BB54_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB54_317:                             # %cond.end2298
                                        #   in Loop: Header=BB54_307 Depth=4
.LBB54_318:                             # %cond.end2300
                                        #   in Loop: Header=BB54_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB54_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB54_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB54_321
.LBB54_320:                             # %cond.false2333
                                        #   in Loop: Header=BB54_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB54_321:                             # %cond.end2352
                                        #   in Loop: Header=BB54_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB54_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB54_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB54_327
.LBB54_323:                             # %cond.false2359
                                        #   in Loop: Header=BB54_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB54_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB54_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB54_326
.LBB54_325:                             # %cond.false2381
                                        #   in Loop: Header=BB54_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB54_326:                             # %cond.end2400
                                        #   in Loop: Header=BB54_307 Depth=4
.LBB54_327:                             # %cond.end2402
                                        #   in Loop: Header=BB54_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB54_332
.LBB54_328:                             # %if.else2412
                                        #   in Loop: Header=BB54_307 Depth=4
	cmpl	$0, -104(%rbp)
	je	.LBB54_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB54_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB54_331
.LBB54_330:                             # %if.else2439
                                        #   in Loop: Header=BB54_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB54_331:                             # %if.end2468
                                        #   in Loop: Header=BB54_307 Depth=4
	jmp	.LBB54_332
.LBB54_332:                             # %if.end2469
                                        #   in Loop: Header=BB54_307 Depth=4
	jmp	.LBB54_333
.LBB54_333:                             # %for.inc2470
                                        #   in Loop: Header=BB54_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_307
.LBB54_334:                             # %for.end2472
                                        #   in Loop: Header=BB54_299 Depth=3
	jmp	.LBB54_335
.LBB54_335:                             # %for.inc2473
                                        #   in Loop: Header=BB54_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_299
.LBB54_336:                             # %for.end2475
                                        #   in Loop: Header=BB54_285 Depth=2
	jmp	.LBB54_337
.LBB54_337:                             # %for.inc2476
                                        #   in Loop: Header=BB54_285 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB54_285
.LBB54_338:                             # %for.end2478
                                        #   in Loop: Header=BB54_281 Depth=1
	jmp	.LBB54_339
.LBB54_339:                             # %for.inc2479
                                        #   in Loop: Header=BB54_281 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB54_281
.LBB54_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB54_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB54_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB54_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB54_342 Depth=1
	movl	$0, -16(%rbp)
.LBB54_344:                             # %for.cond2490
                                        #   Parent Loop BB54_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB54_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB54_344 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB54_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB54_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB54_348
.LBB54_347:                             # %if.else2518
                                        #   in Loop: Header=BB54_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB54_348:                             # %if.end2536
                                        #   in Loop: Header=BB54_344 Depth=2
	jmp	.LBB54_349
.LBB54_349:                             # %for.inc2537
                                        #   in Loop: Header=BB54_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_344
.LBB54_350:                             # %for.end2539
                                        #   in Loop: Header=BB54_342 Depth=1
	jmp	.LBB54_351
.LBB54_351:                             # %for.inc2540
                                        #   in Loop: Header=BB54_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_342
.LBB54_352:                             # %for.end2542
	jmp	.LBB54_353
.LBB54_353:                             # %if.end2543
	movl	-132(%rbp), %ebx
	cmpl	$2049246639, -380(%rbp) # imm = 0x7A2505AF
	jne	.LBB54_355
.LBB54_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_354
.Lfunc_end54:
	.size	dct_chroma.45, .Lfunc_end54-dct_chroma.45
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.46         # -- Begin function copyblock_sp.46
	.p2align	4, 0x90
	.type	copyblock_sp.46,@function
copyblock_sp.46:                        # @copyblock_sp.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$799766068, -92(%rbp)   # imm = 0x2FAB7634
	movl	%edi, -68(%rbp)
	movl	%esi, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -72(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -84(%rbp)
	movl	-72(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movl	$0, -4(%rbp)
.LBB55_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB55_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_3:                               # %for.cond4
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB55_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB55_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-68(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_3
.LBB55_6:                               # %for.end
                                        #   in Loop: Header=BB55_1 Depth=1
	jmp	.LBB55_7
.LBB55_7:                               # %for.inc17
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_1
.LBB55_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB55_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB55_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB55_9 Depth=1
	movl	$0, -8(%rbp)
.LBB55_11:                              # %for.cond24
                                        #   Parent Loop BB55_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB55_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB55_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB55_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_11
.LBB55_14:                              # %for.end53
                                        #   in Loop: Header=BB55_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB55_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_9
.LBB55_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB55_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB55_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB55_17 Depth=1
	movl	$0, -4(%rbp)
.LBB55_19:                              # %for.cond86
                                        #   Parent Loop BB55_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB55_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB55_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB55_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_19
.LBB55_22:                              # %for.end115
                                        #   in Loop: Header=BB55_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB55_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_17
.LBB55_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB55_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB55_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB55_25 Depth=1
	movl	$0, -8(%rbp)
.LBB55_27:                              # %for.cond149
                                        #   Parent Loop BB55_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB55_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB55_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-84(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-88(%rbp), %eax
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-84(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-72(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB55_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_27
.LBB55_30:                              # %for.end184
                                        #   in Loop: Header=BB55_25 Depth=1
	jmp	.LBB55_31
.LBB55_31:                              # %for.inc185
                                        #   in Loop: Header=BB55_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_25
.LBB55_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB55_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_35 Depth 2
                                        #     Child Loop BB55_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB55_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB55_33 Depth=1
	movl	$0, -8(%rbp)
.LBB55_35:                              # %for.cond192
                                        #   Parent Loop BB55_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB55_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB55_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB55_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_35
.LBB55_38:                              # %for.end205
                                        #   in Loop: Header=BB55_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB55_39:                              # %for.cond224
                                        #   Parent Loop BB55_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB55_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB55_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB55_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_39
.LBB55_42:                              # %for.end251
                                        #   in Loop: Header=BB55_33 Depth=1
	jmp	.LBB55_43
.LBB55_43:                              # %for.inc252
                                        #   in Loop: Header=BB55_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_33
.LBB55_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB55_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_47 Depth 2
                                        #     Child Loop BB55_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB55_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB55_45 Depth=1
	movl	$0, -4(%rbp)
.LBB55_47:                              # %for.cond259
                                        #   Parent Loop BB55_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB55_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB55_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB55_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_47
.LBB55_50:                              # %for.end272
                                        #   in Loop: Header=BB55_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB55_51:                              # %for.cond291
                                        #   Parent Loop BB55_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB55_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB55_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB55_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB55_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB55_55
.LBB55_54:                              # %cond.false
                                        #   in Loop: Header=BB55_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB55_55:                              # %cond.end
                                        #   in Loop: Header=BB55_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB55_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB55_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_61
.LBB55_57:                              # %cond.false316
                                        #   in Loop: Header=BB55_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB55_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB55_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB55_60
.LBB55_59:                              # %cond.false327
                                        #   in Loop: Header=BB55_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB55_60:                              # %cond.end335
                                        #   in Loop: Header=BB55_51 Depth=2
.LBB55_61:                              # %cond.end337
                                        #   in Loop: Header=BB55_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB55_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB55_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB55_64
.LBB55_63:                              # %cond.false355
                                        #   in Loop: Header=BB55_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB55_64:                              # %cond.end363
                                        #   in Loop: Header=BB55_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB55_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB55_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_70
.LBB55_66:                              # %cond.false369
                                        #   in Loop: Header=BB55_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB55_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB55_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB55_69
.LBB55_68:                              # %cond.false380
                                        #   in Loop: Header=BB55_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB55_69:                              # %cond.end388
                                        #   in Loop: Header=BB55_51 Depth=2
.LBB55_70:                              # %cond.end390
                                        #   in Loop: Header=BB55_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB55_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_51
.LBB55_72:                              # %for.end399
                                        #   in Loop: Header=BB55_45 Depth=1
	jmp	.LBB55_73
.LBB55_73:                              # %for.inc400
                                        #   in Loop: Header=BB55_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_45
.LBB55_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB55_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB55_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB55_75 Depth=1
	movl	$0, -8(%rbp)
.LBB55_77:                              # %for.cond407
                                        #   Parent Loop BB55_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB55_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB55_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-80(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-68(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB55_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_77
.LBB55_80:                              # %for.end427
                                        #   in Loop: Header=BB55_75 Depth=1
	jmp	.LBB55_81
.LBB55_81:                              # %for.inc428
                                        #   in Loop: Header=BB55_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_75
.LBB55_82:                              # %for.end430
	cmpl	$799766068, -92(%rbp)   # imm = 0x2FAB7634
	jne	.LBB55_84
.LBB55_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_83
.Lfunc_end55:
	.size	copyblock_sp.46, .Lfunc_end55-copyblock_sp.46
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.47           # -- Begin function dct_chroma.47
	.p2align	4, 0x90
	.type	dct_chroma.47,@function
dct_chroma.47:                          # @dct_chroma.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$1940175086, -380(%rbp) # imm = 0x73A4B8EE
	movl	%edi, -20(%rbp)
	movl	%esi, -132(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB56_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB56_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB56_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -124(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -196(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -140(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -212(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB56_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB56_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -104(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB56_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB56_11
.LBB56_7:                               # %cond.false
	cmpl	$51, -128(%rbp)
	jle	.LBB56_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB56_10
.LBB56_9:                               # %cond.false25
	movl	-128(%rbp), %eax
.LBB56_10:                              # %cond.end
.LBB56_11:                              # %cond.end26
	movl	%eax, -128(%rbp)
	cmpl	$0, -128(%rbp)
	jge	.LBB56_13
# %bb.12:                               # %cond.true29
	movl	-128(%rbp), %eax
	jmp	.LBB56_14
.LBB56_13:                              # %cond.false30
	movl	-128(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB56_14:                              # %cond.end34
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB56_16
# %bb.15:                               # %if.then
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -108(%rbp)
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -136(%rbp)
	movl	-108(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -212(%rbp)
.LBB56_16:                              # %if.end
	movl	$0, -28(%rbp)
.LBB56_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_19 Depth 2
                                        #       Child Loop BB56_21 Depth 3
                                        #         Child Loop BB56_25 Depth 4
                                        #       Child Loop BB56_31 Depth 3
                                        #         Child Loop BB56_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB56_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB56_17 Depth=1
	movl	$0, -24(%rbp)
.LBB56_19:                              # %for.cond56
                                        #   Parent Loop BB56_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_21 Depth 3
                                        #         Child Loop BB56_25 Depth 4
                                        #       Child Loop BB56_31 Depth 3
                                        #         Child Loop BB56_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB56_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB56_19 Depth=2
	movl	$0, -12(%rbp)
.LBB56_21:                              # %for.cond60
                                        #   Parent Loop BB56_17 Depth=1
                                        #     Parent Loop BB56_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB56_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB56_21 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB56_23:                              # %land.end64
                                        #   in Loop: Header=BB56_21 Depth=3
	testb	$1, %al
	jne	.LBB56_24
	jmp	.LBB56_30
.LBB56_24:                              # %for.body66
                                        #   in Loop: Header=BB56_21 Depth=3
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB56_25:                              # %for.cond68
                                        #   Parent Loop BB56_17 Depth=1
                                        #     Parent Loop BB56_19 Depth=2
                                        #       Parent Loop BB56_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB56_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB56_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB56_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_25
.LBB56_28:                              # %for.end
                                        #   in Loop: Header=BB56_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB56_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_21
.LBB56_30:                              # %for.end141
                                        #   in Loop: Header=BB56_19 Depth=2
	movl	$0, -16(%rbp)
.LBB56_31:                              # %for.cond142
                                        #   Parent Loop BB56_17 Depth=1
                                        #     Parent Loop BB56_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB56_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB56_31 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB56_33:                              # %land.end148
                                        #   in Loop: Header=BB56_31 Depth=3
	testb	$1, %al
	jne	.LBB56_34
	jmp	.LBB56_40
.LBB56_34:                              # %for.body150
                                        #   in Loop: Header=BB56_31 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB56_35:                              # %for.cond152
                                        #   Parent Loop BB56_17 Depth=1
                                        #     Parent Loop BB56_19 Depth=2
                                        #       Parent Loop BB56_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB56_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB56_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB56_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_35
.LBB56_38:                              # %for.end189
                                        #   in Loop: Header=BB56_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB56_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_31
.LBB56_40:                              # %for.end230
                                        #   in Loop: Header=BB56_19 Depth=2
	jmp	.LBB56_41
.LBB56_41:                              # %for.inc231
                                        #   in Loop: Header=BB56_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_19
.LBB56_42:                              # %for.end233
                                        #   in Loop: Header=BB56_17 Depth=1
	jmp	.LBB56_43
.LBB56_43:                              # %for.inc234
                                        #   in Loop: Header=BB56_17 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB56_17
.LBB56_44:                              # %for.end236
	cmpl	$1, -140(%rbp)
	jne	.LBB56_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB56_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB56_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB56_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB56_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB56_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB56_50
.LBB56_49:                              # %if.else
                                        #   in Loop: Header=BB56_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB56_50:                              # %if.end349
                                        #   in Loop: Header=BB56_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB56_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB56_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB56_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB56_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB56_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB56_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB56_54:                              # %if.end359
                                        #   in Loop: Header=BB56_46 Depth=1
	jmp	.LBB56_55
.LBB56_55:                              # %if.end360
                                        #   in Loop: Header=BB56_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB56_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB56_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB56_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB56_46 Depth=1
	movl	$1, %eax
	jmp	.LBB56_59
.LBB56_58:                              # %cond.false370
                                        #   in Loop: Header=BB56_46 Depth=1
	movl	-132(%rbp), %eax
.LBB56_59:                              # %cond.end371
                                        #   in Loop: Header=BB56_46 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -144(%rbp)
.LBB56_60:                              # %if.end384
                                        #   in Loop: Header=BB56_46 Depth=1
	movl	-144(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB56_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB56_46
.LBB56_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB56_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB56_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB56_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB56_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB56_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB56_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB56_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB56_68
.LBB56_67:                              # %if.else447
                                        #   in Loop: Header=BB56_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB56_68:                              # %if.end461
                                        #   in Loop: Header=BB56_63 Depth=1
	jmp	.LBB56_73
.LBB56_69:                              # %if.else462
                                        #   in Loop: Header=BB56_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB56_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB56_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB56_72
.LBB56_71:                              # %if.else479
                                        #   in Loop: Header=BB56_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB56_72:                              # %if.end493
                                        #   in Loop: Header=BB56_63 Depth=1
	jmp	.LBB56_73
.LBB56_73:                              # %if.end494
                                        #   in Loop: Header=BB56_63 Depth=1
	jmp	.LBB56_74
.LBB56_74:                              # %for.inc495
                                        #   in Loop: Header=BB56_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_63
.LBB56_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB56_213
.LBB56_76:                              # %if.else514
	cmpl	$2, -140(%rbp)
	jne	.LBB56_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB56_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB56_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB56_78 Depth=1
	movl	$0, -16(%rbp)
.LBB56_80:                              # %for.cond523
                                        #   Parent Loop BB56_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB56_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB56_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB56_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_80
.LBB56_83:                              # %for.end541
                                        #   in Loop: Header=BB56_78 Depth=1
	jmp	.LBB56_84
.LBB56_84:                              # %for.inc542
                                        #   in Loop: Header=BB56_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_78
.LBB56_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB56_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB56_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB56_86 Depth=1
	movl	$0, -12(%rbp)
.LBB56_88:                              # %for.cond605
                                        #   Parent Loop BB56_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB56_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB56_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB56_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_88
.LBB56_91:                              # %for.end634
                                        #   in Loop: Header=BB56_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB56_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_86
.LBB56_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB56_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB56_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB56_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB56_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB56_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB56_98
.LBB56_97:                              # %if.else700
                                        #   in Loop: Header=BB56_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB56_98:                              # %if.end723
                                        #   in Loop: Header=BB56_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB56_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB56_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB56_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB56_94 Depth=1
	movl	$1, %eax
	jmp	.LBB56_102
.LBB56_101:                             # %cond.false735
                                        #   in Loop: Header=BB56_94 Depth=1
	movl	-132(%rbp), %eax
.LBB56_102:                             # %cond.end736
                                        #   in Loop: Header=BB56_94 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB56_103:                             # %if.end748
                                        #   in Loop: Header=BB56_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB56_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB56_94
.LBB56_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB56_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_108 Depth 2
                                        #     Child Loop BB56_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB56_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB56_106 Depth=1
	movl	$0, -12(%rbp)
.LBB56_108:                             # %for.cond823
                                        #   Parent Loop BB56_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB56_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB56_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB56_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_108
.LBB56_111:                             # %for.end835
                                        #   in Loop: Header=BB56_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB56_112:                             # %for.cond852
                                        #   Parent Loop BB56_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB56_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB56_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -108(%rbp)
	jge	.LBB56_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB56_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB56_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB56_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB56_117
.LBB56_116:                             # %if.else915
                                        #   in Loop: Header=BB56_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB56_117:                             # %if.end968
                                        #   in Loop: Header=BB56_112 Depth=2
	jmp	.LBB56_122
.LBB56_118:                             # %if.else969
                                        #   in Loop: Header=BB56_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB56_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB56_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB56_121
.LBB56_120:                             # %if.else1019
                                        #   in Loop: Header=BB56_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB56_121:                             # %if.end1066
                                        #   in Loop: Header=BB56_112 Depth=2
	jmp	.LBB56_122
.LBB56_122:                             # %if.end1067
                                        #   in Loop: Header=BB56_112 Depth=2
	jmp	.LBB56_123
.LBB56_123:                             # %for.inc1068
                                        #   in Loop: Header=BB56_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_112
.LBB56_124:                             # %for.end1070
                                        #   in Loop: Header=BB56_106 Depth=1
	jmp	.LBB56_125
.LBB56_125:                             # %for.inc1071
                                        #   in Loop: Header=BB56_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_106
.LBB56_126:                             # %for.end1073
	jmp	.LBB56_212
.LBB56_127:                             # %if.else1074
	cmpl	$3, -140(%rbp)
	jne	.LBB56_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB56_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB56_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB56_129 Depth=1
	movl	$0, -16(%rbp)
.LBB56_131:                             # %for.cond1083
                                        #   Parent Loop BB56_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB56_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB56_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB56_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_131
.LBB56_134:                             # %for.end1101
                                        #   in Loop: Header=BB56_129 Depth=1
	jmp	.LBB56_135
.LBB56_135:                             # %for.inc1102
                                        #   in Loop: Header=BB56_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_129
.LBB56_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB56_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB56_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB56_137 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB56_139:                             # %land.end1111
                                        #   in Loop: Header=BB56_137 Depth=1
	testb	$1, %al
	jne	.LBB56_140
	jmp	.LBB56_146
.LBB56_140:                             # %for.body1113
                                        #   in Loop: Header=BB56_137 Depth=1
	movl	$0, -16(%rbp)
.LBB56_141:                             # %for.cond1114
                                        #   Parent Loop BB56_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB56_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB56_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB56_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_141
.LBB56_144:                             # %for.end1143
                                        #   in Loop: Header=BB56_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB56_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_137
.LBB56_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB56_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB56_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB56_147 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB56_149:                             # %land.end1177
                                        #   in Loop: Header=BB56_147 Depth=1
	testb	$1, %al
	jne	.LBB56_150
	jmp	.LBB56_156
.LBB56_150:                             # %for.body1179
                                        #   in Loop: Header=BB56_147 Depth=1
	movl	$0, -12(%rbp)
.LBB56_151:                             # %for.cond1180
                                        #   Parent Loop BB56_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB56_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB56_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB56_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_151
.LBB56_154:                             # %for.end1209
                                        #   in Loop: Header=BB56_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB56_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_147
.LBB56_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB56_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB56_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB56_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB56_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB56_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB56_164
.LBB56_160:                             # %if.else1261
                                        #   in Loop: Header=BB56_157 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB56_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB56_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB56_163
.LBB56_162:                             # %if.else1287
                                        #   in Loop: Header=BB56_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB56_163:                             # %if.end1310
                                        #   in Loop: Header=BB56_157 Depth=1
	jmp	.LBB56_164
.LBB56_164:                             # %if.end1311
                                        #   in Loop: Header=BB56_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB56_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB56_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB56_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB56_157 Depth=1
	movl	$1, %eax
	jmp	.LBB56_168
.LBB56_167:                             # %cond.false1322
                                        #   in Loop: Header=BB56_157 Depth=1
	movl	-132(%rbp), %eax
.LBB56_168:                             # %cond.end1323
                                        #   in Loop: Header=BB56_157 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB56_169:                             # %if.end1335
                                        #   in Loop: Header=BB56_157 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB56_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB56_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB56_171:                             # %if.end1347
                                        #   in Loop: Header=BB56_157 Depth=1
	jmp	.LBB56_172
.LBB56_172:                             # %for.inc1348
                                        #   in Loop: Header=BB56_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB56_157
.LBB56_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB56_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_178 Depth 2
                                        #     Child Loop BB56_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB56_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB56_174 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB56_176:                             # %land.end1359
                                        #   in Loop: Header=BB56_174 Depth=1
	testb	$1, %al
	jne	.LBB56_177
	jmp	.LBB56_187
.LBB56_177:                             # %for.body1361
                                        #   in Loop: Header=BB56_174 Depth=1
	movl	$0, -16(%rbp)
.LBB56_178:                             # %for.cond1362
                                        #   Parent Loop BB56_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB56_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB56_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB56_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_178
.LBB56_181:                             # %for.end1374
                                        #   in Loop: Header=BB56_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB56_182:                             # %for.cond1391
                                        #   Parent Loop BB56_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB56_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB56_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB56_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_182
.LBB56_185:                             # %for.end1416
                                        #   in Loop: Header=BB56_174 Depth=1
	jmp	.LBB56_186
.LBB56_186:                             # %for.inc1417
                                        #   in Loop: Header=BB56_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_174
.LBB56_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB56_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_192 Depth 2
                                        #     Child Loop BB56_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB56_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB56_188 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB56_190:                             # %land.end1426
                                        #   in Loop: Header=BB56_188 Depth=1
	testb	$1, %al
	jne	.LBB56_191
	jmp	.LBB56_210
.LBB56_191:                             # %for.body1428
                                        #   in Loop: Header=BB56_188 Depth=1
	movl	$0, -12(%rbp)
.LBB56_192:                             # %for.cond1429
                                        #   Parent Loop BB56_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB56_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB56_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB56_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_192
.LBB56_195:                             # %for.end1441
                                        #   in Loop: Header=BB56_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB56_196:                             # %for.cond1458
                                        #   Parent Loop BB56_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB56_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB56_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB56_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB56_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB56_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB56_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB56_201
.LBB56_200:                             # %if.else1521
                                        #   in Loop: Header=BB56_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB56_201:                             # %if.end1574
                                        #   in Loop: Header=BB56_196 Depth=2
	jmp	.LBB56_206
.LBB56_202:                             # %if.else1575
                                        #   in Loop: Header=BB56_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB56_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB56_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB56_205
.LBB56_204:                             # %if.else1625
                                        #   in Loop: Header=BB56_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB56_205:                             # %if.end1672
                                        #   in Loop: Header=BB56_196 Depth=2
	jmp	.LBB56_206
.LBB56_206:                             # %if.end1673
                                        #   in Loop: Header=BB56_196 Depth=2
	jmp	.LBB56_207
.LBB56_207:                             # %for.inc1674
                                        #   in Loop: Header=BB56_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_196
.LBB56_208:                             # %for.end1676
                                        #   in Loop: Header=BB56_188 Depth=1
	jmp	.LBB56_209
.LBB56_209:                             # %for.inc1677
                                        #   in Loop: Header=BB56_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_188
.LBB56_210:                             # %for.end1679
	jmp	.LBB56_211
.LBB56_211:                             # %if.end1680
	jmp	.LBB56_212
.LBB56_212:                             # %if.end1681
	jmp	.LBB56_213
.LBB56_213:                             # %if.end1682
	movl	$0, -200(%rbp)
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB56_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_216 Depth 2
                                        #       Child Loop BB56_218 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB56_214 Depth=1
	movl	$0, -112(%rbp)
.LBB56_216:                             # %for.cond1689
                                        #   Parent Loop BB56_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_218 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB56_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB56_216 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$1, -36(%rbp)
.LBB56_218:                             # %for.cond1722
                                        #   Parent Loop BB56_214 Depth=1
                                        #     Parent Loop BB56_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB56_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB56_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB56_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB56_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB56_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB56_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB56_223
.LBB56_222:                             # %if.then1731
                                        #   in Loop: Header=BB56_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_224
.LBB56_223:                             # %if.else1740
                                        #   in Loop: Header=BB56_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB56_224:                             # %if.end1749
                                        #   in Loop: Header=BB56_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB56_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB56_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB56_230
.LBB56_226:                             # %if.else1761
                                        #   in Loop: Header=BB56_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB56_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB56_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB56_229
.LBB56_228:                             # %if.else1792
                                        #   in Loop: Header=BB56_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB56_229:                             # %if.end1820
                                        #   in Loop: Header=BB56_218 Depth=3
	jmp	.LBB56_230
.LBB56_230:                             # %if.end1821
                                        #   in Loop: Header=BB56_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB56_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB56_218 Depth=3
	movl	-116(%rbp), %eax
	addl	-196(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB56_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB56_218 Depth=3
	cmpl	$0, -104(%rbp)
	je	.LBB56_234
.LBB56_233:                             # %if.then1839
                                        #   in Loop: Header=BB56_218 Depth=3
	movl	-200(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -200(%rbp)
	jmp	.LBB56_235
.LBB56_234:                             # %if.else1841
                                        #   in Loop: Header=BB56_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-200(%rbp), %eax
	movl	%eax, -200(%rbp)
.LBB56_235:                             # %if.end1848
                                        #   in Loop: Header=BB56_218 Depth=3
	movl	$2, -208(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB56_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB56_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB56_247
.LBB56_237:                             # %if.else1872
                                        #   in Loop: Header=BB56_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB56_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB56_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB56_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB56_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB56_241
.LBB56_240:                             # %if.else1893
                                        #   in Loop: Header=BB56_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB56_241:                             # %if.end1908
                                        #   in Loop: Header=BB56_218 Depth=3
	jmp	.LBB56_246
.LBB56_242:                             # %if.else1909
                                        #   in Loop: Header=BB56_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB56_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB56_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB56_245
.LBB56_244:                             # %if.else1924
                                        #   in Loop: Header=BB56_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB56_245:                             # %if.end1936
                                        #   in Loop: Header=BB56_218 Depth=3
	jmp	.LBB56_246
.LBB56_246:                             # %if.end1937
                                        #   in Loop: Header=BB56_218 Depth=3
	jmp	.LBB56_247
.LBB56_247:                             # %if.end1938
                                        #   in Loop: Header=BB56_218 Depth=3
	jmp	.LBB56_248
.LBB56_248:                             # %if.end1939
                                        #   in Loop: Header=BB56_218 Depth=3
	cmpl	$0, -104(%rbp)
	jne	.LBB56_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB56_218 Depth=3
	movl	-144(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB56_250:                             # %if.end1949
                                        #   in Loop: Header=BB56_218 Depth=3
	jmp	.LBB56_251
.LBB56_251:                             # %for.inc1950
                                        #   in Loop: Header=BB56_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB56_218
.LBB56_252:                             # %for.end1952
                                        #   in Loop: Header=BB56_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB56_216 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB56_216
.LBB56_254:                             # %for.end1957
                                        #   in Loop: Header=BB56_214 Depth=1
	jmp	.LBB56_255
.LBB56_255:                             # %for.inc1958
                                        #   in Loop: Header=BB56_214 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB56_214
.LBB56_256:                             # %for.end1960
	cmpl	$4, -200(%rbp)
	jge	.LBB56_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -104(%rbp)
	jne	.LBB56_278
# %bb.258:                              # %if.then1965
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB56_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_261 Depth 2
                                        #       Child Loop BB56_265 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB56_259 Depth=1
	movl	$0, -112(%rbp)
.LBB56_261:                             # %for.cond1972
                                        #   Parent Loop BB56_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_265 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB56_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB56_261 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB56_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB56_261 Depth=2
	movslq	-140(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-140(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB56_264:                             # %if.end2016
                                        #   in Loop: Header=BB56_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB56_265:                             # %for.cond2018
                                        #   Parent Loop BB56_259 Depth=1
                                        #     Parent Loop BB56_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB56_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB56_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB56_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB56_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB56_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB56_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB56_270
.LBB56_269:                             # %if.then2030
                                        #   in Loop: Header=BB56_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_271
.LBB56_270:                             # %if.else2039
                                        #   in Loop: Header=BB56_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB56_271:                             # %if.end2048
                                        #   in Loop: Header=BB56_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB56_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB56_265
.LBB56_273:                             # %for.end2060
                                        #   in Loop: Header=BB56_261 Depth=2
	jmp	.LBB56_274
.LBB56_274:                             # %for.inc2061
                                        #   in Loop: Header=BB56_261 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB56_261
.LBB56_275:                             # %for.end2063
                                        #   in Loop: Header=BB56_259 Depth=1
	jmp	.LBB56_276
.LBB56_276:                             # %for.inc2064
                                        #   in Loop: Header=BB56_259 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB56_259
.LBB56_277:                             # %for.end2066
	jmp	.LBB56_278
.LBB56_278:                             # %if.end2067
	cmpl	$2, -208(%rbp)
	jne	.LBB56_280
# %bb.279:                              # %if.then2070
	movl	$2, -132(%rbp)
.LBB56_280:                             # %if.end2071
	movl	$0, -28(%rbp)
.LBB56_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_285 Depth 2
                                        #       Child Loop BB56_287 Depth 3
                                        #         Child Loop BB56_289 Depth 4
                                        #         Child Loop BB56_293 Depth 4
                                        #       Child Loop BB56_299 Depth 3
                                        #         Child Loop BB56_303 Depth 4
                                        #         Child Loop BB56_307 Depth 4
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB56_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB56_281 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB56_283:                             # %land.end2079
                                        #   in Loop: Header=BB56_281 Depth=1
	testb	$1, %al
	jne	.LBB56_284
	jmp	.LBB56_340
.LBB56_284:                             # %for.body2081
                                        #   in Loop: Header=BB56_281 Depth=1
	movl	$0, -24(%rbp)
.LBB56_285:                             # %for.cond2082
                                        #   Parent Loop BB56_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_287 Depth 3
                                        #         Child Loop BB56_289 Depth 4
                                        #         Child Loop BB56_293 Depth 4
                                        #       Child Loop BB56_299 Depth 3
                                        #         Child Loop BB56_303 Depth 4
                                        #         Child Loop BB56_307 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB56_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB56_285 Depth=2
	movl	$0, -12(%rbp)
.LBB56_287:                             # %for.cond2087
                                        #   Parent Loop BB56_281 Depth=1
                                        #     Parent Loop BB56_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_289 Depth 4
                                        #         Child Loop BB56_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB56_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB56_287 Depth=3
	movl	$0, -16(%rbp)
.LBB56_289:                             # %for.cond2091
                                        #   Parent Loop BB56_281 Depth=1
                                        #     Parent Loop BB56_285 Depth=2
                                        #       Parent Loop BB56_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB56_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB56_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB56_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_289
.LBB56_292:                             # %for.end2106
                                        #   in Loop: Header=BB56_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB56_293:                             # %for.cond2125
                                        #   Parent Loop BB56_281 Depth=1
                                        #     Parent Loop BB56_285 Depth=2
                                        #       Parent Loop BB56_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB56_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB56_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB56_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_293
.LBB56_296:                             # %for.end2156
                                        #   in Loop: Header=BB56_287 Depth=3
	jmp	.LBB56_297
.LBB56_297:                             # %for.inc2157
                                        #   in Loop: Header=BB56_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_287
.LBB56_298:                             # %for.end2159
                                        #   in Loop: Header=BB56_285 Depth=2
	movl	$0, -16(%rbp)
.LBB56_299:                             # %for.cond2160
                                        #   Parent Loop BB56_281 Depth=1
                                        #     Parent Loop BB56_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_303 Depth 4
                                        #         Child Loop BB56_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB56_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB56_299 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB56_301:                             # %land.end2166
                                        #   in Loop: Header=BB56_299 Depth=3
	testb	$1, %al
	jne	.LBB56_302
	jmp	.LBB56_336
.LBB56_302:                             # %for.body2168
                                        #   in Loop: Header=BB56_299 Depth=3
	movl	$0, -12(%rbp)
.LBB56_303:                             # %for.cond2169
                                        #   Parent Loop BB56_281 Depth=1
                                        #     Parent Loop BB56_285 Depth=2
                                        #       Parent Loop BB56_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB56_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB56_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB56_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_303
.LBB56_306:                             # %for.end2184
                                        #   in Loop: Header=BB56_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB56_307:                             # %for.cond2203
                                        #   Parent Loop BB56_281 Depth=1
                                        #     Parent Loop BB56_285 Depth=2
                                        #       Parent Loop BB56_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB56_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB56_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB56_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB56_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB56_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB56_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB56_312
.LBB56_311:                             # %cond.false2231
                                        #   in Loop: Header=BB56_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB56_312:                             # %cond.end2250
                                        #   in Loop: Header=BB56_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB56_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB56_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB56_318
.LBB56_314:                             # %cond.false2257
                                        #   in Loop: Header=BB56_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB56_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB56_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB56_317
.LBB56_316:                             # %cond.false2279
                                        #   in Loop: Header=BB56_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB56_317:                             # %cond.end2298
                                        #   in Loop: Header=BB56_307 Depth=4
.LBB56_318:                             # %cond.end2300
                                        #   in Loop: Header=BB56_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-68(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB56_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB56_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB56_321
.LBB56_320:                             # %cond.false2333
                                        #   in Loop: Header=BB56_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB56_321:                             # %cond.end2352
                                        #   in Loop: Header=BB56_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB56_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB56_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB56_327
.LBB56_323:                             # %cond.false2359
                                        #   in Loop: Header=BB56_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB56_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB56_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB56_326
.LBB56_325:                             # %cond.false2381
                                        #   in Loop: Header=BB56_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB56_326:                             # %cond.end2400
                                        #   in Loop: Header=BB56_307 Depth=4
.LBB56_327:                             # %cond.end2402
                                        #   in Loop: Header=BB56_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB56_332
.LBB56_328:                             # %if.else2412
                                        #   in Loop: Header=BB56_307 Depth=4
	cmpl	$0, -104(%rbp)
	je	.LBB56_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB56_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB56_331
.LBB56_330:                             # %if.else2439
                                        #   in Loop: Header=BB56_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB56_331:                             # %if.end2468
                                        #   in Loop: Header=BB56_307 Depth=4
	jmp	.LBB56_332
.LBB56_332:                             # %if.end2469
                                        #   in Loop: Header=BB56_307 Depth=4
	jmp	.LBB56_333
.LBB56_333:                             # %for.inc2470
                                        #   in Loop: Header=BB56_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_307
.LBB56_334:                             # %for.end2472
                                        #   in Loop: Header=BB56_299 Depth=3
	jmp	.LBB56_335
.LBB56_335:                             # %for.inc2473
                                        #   in Loop: Header=BB56_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_299
.LBB56_336:                             # %for.end2475
                                        #   in Loop: Header=BB56_285 Depth=2
	jmp	.LBB56_337
.LBB56_337:                             # %for.inc2476
                                        #   in Loop: Header=BB56_285 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_285
.LBB56_338:                             # %for.end2478
                                        #   in Loop: Header=BB56_281 Depth=1
	jmp	.LBB56_339
.LBB56_339:                             # %for.inc2479
                                        #   in Loop: Header=BB56_281 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB56_281
.LBB56_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB56_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB56_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB56_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB56_342 Depth=1
	movl	$0, -16(%rbp)
.LBB56_344:                             # %for.cond2490
                                        #   Parent Loop BB56_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB56_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB56_344 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB56_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB56_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB56_348
.LBB56_347:                             # %if.else2518
                                        #   in Loop: Header=BB56_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB56_348:                             # %if.end2536
                                        #   in Loop: Header=BB56_344 Depth=2
	jmp	.LBB56_349
.LBB56_349:                             # %for.inc2537
                                        #   in Loop: Header=BB56_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_344
.LBB56_350:                             # %for.end2539
                                        #   in Loop: Header=BB56_342 Depth=1
	jmp	.LBB56_351
.LBB56_351:                             # %for.inc2540
                                        #   in Loop: Header=BB56_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_342
.LBB56_352:                             # %for.end2542
	jmp	.LBB56_353
.LBB56_353:                             # %if.end2543
	movl	-132(%rbp), %ebx
	cmpl	$1940175086, -380(%rbp) # imm = 0x73A4B8EE
	jne	.LBB56_355
.LBB56_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_354
.Lfunc_end56:
	.size	dct_chroma.47, .Lfunc_end56-dct_chroma.47
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.48       # -- Begin function dct_luma_16x16.48
	.p2align	4, 0x90
	.type	dct_luma_16x16.48,@function
dct_luma_16x16.48:                      # @dct_luma_16x16.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1679629318, -132(%rbp) # imm = 0x641D1C06
	movl	%edi, -104(%rbp)
	movl	$0, -120(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -144(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -240(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB57_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB57_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB57_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB57_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB57_3 Depth=1
	movl	$0, -16(%rbp)
.LBB57_5:                               # %for.cond16
                                        #   Parent Loop BB57_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB57_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB57_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB57_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB57_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB57_9
.LBB57_8:                               # %if.else
                                        #   in Loop: Header=BB57_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB57_9:                               # %if.end
                                        #   in Loop: Header=BB57_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB57_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_5
.LBB57_11:                              # %for.end
                                        #   in Loop: Header=BB57_3 Depth=1
	jmp	.LBB57_12
.LBB57_12:                              # %for.inc61
                                        #   in Loop: Header=BB57_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_3
.LBB57_13:                              # %for.end63
	movl	$0, -24(%rbp)
.LBB57_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_18 Depth 2
                                        #       Child Loop BB57_20 Depth 3
                                        #         Child Loop BB57_22 Depth 4
                                        #       Child Loop BB57_28 Depth 3
                                        #         Child Loop BB57_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -24(%rbp)
	jge	.LBB57_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB57_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB57_16:                              # %land.end69
                                        #   in Loop: Header=BB57_14 Depth=1
	testb	$1, %al
	jne	.LBB57_17
	jmp	.LBB57_39
.LBB57_17:                              # %for.body71
                                        #   in Loop: Header=BB57_14 Depth=1
	movl	$0, -20(%rbp)
.LBB57_18:                              # %for.cond72
                                        #   Parent Loop BB57_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_20 Depth 3
                                        #         Child Loop BB57_22 Depth 4
                                        #       Child Loop BB57_28 Depth 3
                                        #         Child Loop BB57_30 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB57_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB57_18 Depth=2
	movl	$0, -12(%rbp)
.LBB57_20:                              # %for.cond76
                                        #   Parent Loop BB57_14 Depth=1
                                        #     Parent Loop BB57_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB57_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB57_20 Depth=3
	movl	$0, -16(%rbp)
.LBB57_22:                              # %for.cond80
                                        #   Parent Loop BB57_14 Depth=1
                                        #     Parent Loop BB57_18 Depth=2
                                        #       Parent Loop BB57_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB57_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB57_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB57_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_22
.LBB57_25:                              # %for.end125
                                        #   in Loop: Header=BB57_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB57_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_20
.LBB57_27:                              # %for.end169
                                        #   in Loop: Header=BB57_18 Depth=2
	movl	$0, -16(%rbp)
.LBB57_28:                              # %for.cond170
                                        #   Parent Loop BB57_14 Depth=1
                                        #     Parent Loop BB57_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB57_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB57_28 Depth=3
	movl	$0, -12(%rbp)
.LBB57_30:                              # %for.cond174
                                        #   Parent Loop BB57_14 Depth=1
                                        #     Parent Loop BB57_18 Depth=2
                                        #       Parent Loop BB57_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB57_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB57_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB57_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_30
.LBB57_33:                              # %for.end219
                                        #   in Loop: Header=BB57_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB57_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_28
.LBB57_35:                              # %for.end264
                                        #   in Loop: Header=BB57_18 Depth=2
	jmp	.LBB57_36
.LBB57_36:                              # %for.inc265
                                        #   in Loop: Header=BB57_18 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_18
.LBB57_37:                              # %for.end267
                                        #   in Loop: Header=BB57_14 Depth=1
	jmp	.LBB57_38
.LBB57_38:                              # %for.inc268
                                        #   in Loop: Header=BB57_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_14
.LBB57_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB57_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB57_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB57_40 Depth=1
	movl	$0, -16(%rbp)
.LBB57_42:                              # %for.cond275
                                        #   Parent Loop BB57_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB57_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB57_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB57_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_42
.LBB57_45:                              # %for.end291
                                        #   in Loop: Header=BB57_40 Depth=1
	jmp	.LBB57_46
.LBB57_46:                              # %for.inc292
                                        #   in Loop: Header=BB57_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_40
.LBB57_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB57_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB57_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB57_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB57_50:                              # %land.end301
                                        #   in Loop: Header=BB57_48 Depth=1
	testb	$1, %al
	jne	.LBB57_51
	jmp	.LBB57_57
.LBB57_51:                              # %for.body303
                                        #   in Loop: Header=BB57_48 Depth=1
	movl	$0, -16(%rbp)
.LBB57_52:                              # %for.cond304
                                        #   Parent Loop BB57_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB57_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB57_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB57_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_52
.LBB57_55:                              # %for.end333
                                        #   in Loop: Header=BB57_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB57_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_48
.LBB57_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB57_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB57_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB57_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB57_60:                              # %land.end367
                                        #   in Loop: Header=BB57_58 Depth=1
	testb	$1, %al
	jne	.LBB57_61
	jmp	.LBB57_67
.LBB57_61:                              # %for.body369
                                        #   in Loop: Header=BB57_58 Depth=1
	movl	$0, -12(%rbp)
.LBB57_62:                              # %for.cond370
                                        #   Parent Loop BB57_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB57_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB57_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB57_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_62
.LBB57_65:                              # %for.end399
                                        #   in Loop: Header=BB57_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB57_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_58
.LBB57_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -60(%rbp)
.LBB57_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -60(%rbp)
	jge	.LBB57_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB57_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB57_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB57_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB57_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB57_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB57_73
.LBB57_72:                              # %if.then437
                                        #   in Loop: Header=BB57_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_74
.LBB57_73:                              # %if.else446
                                        #   in Loop: Header=BB57_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB57_74:                              # %if.end455
                                        #   in Loop: Header=BB57_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB57_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB57_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB57_77
.LBB57_76:                              # %if.else463
                                        #   in Loop: Header=BB57_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB57_77:                              # %if.end481
                                        #   in Loop: Header=BB57_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB57_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB57_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB57_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB57_68 Depth=1
	cmpl	$2063, -64(%rbp)        # imm = 0x80F
	jle	.LBB57_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB57_68 Depth=1
	movl	$2063, -64(%rbp)        # imm = 0x80F
.LBB57_81:                              # %if.end492
                                        #   in Loop: Header=BB57_68 Depth=1
	jmp	.LBB57_82
.LBB57_82:                              # %if.end493
                                        #   in Loop: Header=BB57_68 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB57_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB57_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB57_84:                              # %if.end507
                                        #   in Loop: Header=BB57_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB57_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB57_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB57_86:                              # %if.end519
                                        #   in Loop: Header=BB57_68 Depth=1
	jmp	.LBB57_87
.LBB57_87:                              # %for.inc520
                                        #   in Loop: Header=BB57_68 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB57_68
.LBB57_88:                              # %for.end522
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB57_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_93 Depth 2
                                        #     Child Loop BB57_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB57_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB57_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB57_91:                              # %land.end531
                                        #   in Loop: Header=BB57_89 Depth=1
	testb	$1, %al
	jne	.LBB57_92
	jmp	.LBB57_102
.LBB57_92:                              # %for.body533
                                        #   in Loop: Header=BB57_89 Depth=1
	movl	$0, -16(%rbp)
.LBB57_93:                              # %for.cond534
                                        #   Parent Loop BB57_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB57_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB57_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB57_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_93
.LBB57_96:                              # %for.end546
                                        #   in Loop: Header=BB57_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB57_97:                              # %for.cond563
                                        #   Parent Loop BB57_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB57_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB57_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-56(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB57_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_97
.LBB57_100:                             # %for.end588
                                        #   in Loop: Header=BB57_89 Depth=1
	jmp	.LBB57_101
.LBB57_101:                             # %for.inc589
                                        #   in Loop: Header=BB57_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_89
.LBB57_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB57_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_107 Depth 2
                                        #     Child Loop BB57_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB57_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB57_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB57_105:                             # %land.end598
                                        #   in Loop: Header=BB57_103 Depth=1
	testb	$1, %al
	jne	.LBB57_106
	jmp	.LBB57_119
.LBB57_106:                             # %for.body600
                                        #   in Loop: Header=BB57_103 Depth=1
	movl	$0, -12(%rbp)
.LBB57_107:                             # %for.cond601
                                        #   Parent Loop BB57_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB57_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB57_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB57_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_107
.LBB57_110:                             # %for.end613
                                        #   in Loop: Header=BB57_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB57_111:                             # %for.cond630
                                        #   Parent Loop BB57_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB57_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB57_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -68(%rbp)
	jge	.LBB57_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB57_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-68(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-68(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB57_115
.LBB57_114:                             # %if.else680
                                        #   in Loop: Header=BB57_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB57_115:                             # %if.end717
                                        #   in Loop: Header=BB57_111 Depth=2
	jmp	.LBB57_116
.LBB57_116:                             # %for.inc718
                                        #   in Loop: Header=BB57_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_111
.LBB57_117:                             # %for.end720
                                        #   in Loop: Header=BB57_103 Depth=1
	jmp	.LBB57_118
.LBB57_118:                             # %for.inc721
                                        #   in Loop: Header=BB57_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_103
.LBB57_119:                             # %for.end723
	movl	$0, -24(%rbp)
.LBB57_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_122 Depth 2
                                        #       Child Loop BB57_124 Depth 3
                                        #       Child Loop BB57_143 Depth 3
                                        #         Child Loop BB57_147 Depth 4
                                        #         Child Loop BB57_151 Depth 4
                                        #       Child Loop BB57_157 Depth 3
                                        #         Child Loop BB57_161 Depth 4
                                        #         Child Loop BB57_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB57_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB57_120 Depth=1
	movl	$0, -20(%rbp)
.LBB57_122:                             # %for.cond728
                                        #   Parent Loop BB57_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_124 Depth 3
                                        #       Child Loop BB57_143 Depth 3
                                        #         Child Loop BB57_147 Depth 4
                                        #         Child Loop BB57_151 Depth 4
                                        #       Child Loop BB57_157 Depth 3
                                        #         Child Loop BB57_161 Depth 4
                                        #         Child Loop BB57_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB57_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB57_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -116(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -108(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -232(%rbp)
	movl	$1, -60(%rbp)
.LBB57_124:                             # %for.cond751
                                        #   Parent Loop BB57_120 Depth=1
                                        #     Parent Loop BB57_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -60(%rbp)
	jge	.LBB57_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB57_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB57_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB57_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB57_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB57_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB57_129
.LBB57_128:                             # %if.then762
                                        #   in Loop: Header=BB57_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_130
.LBB57_129:                             # %if.else771
                                        #   in Loop: Header=BB57_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB57_130:                             # %if.end780
                                        #   in Loop: Header=BB57_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB57_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB57_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB57_133
.LBB57_132:                             # %if.else793
                                        #   in Loop: Header=BB57_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB57_133:                             # %if.end818
                                        #   in Loop: Header=BB57_124 Depth=3
	cmpl	$0, -64(%rbp)
	je	.LBB57_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB57_124 Depth=3
	movl	$15, -120(%rbp)
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB57_135:                             # %if.end836
                                        #   in Loop: Header=BB57_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB57_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB57_124 Depth=3
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -64(%rbp)
	cmpl	$4, -68(%rbp)
	jge	.LBB57_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB57_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB57_139
.LBB57_138:                             # %if.else871
                                        #   in Loop: Header=BB57_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB57_139:                             # %if.end889
                                        #   in Loop: Header=BB57_124 Depth=3
	jmp	.LBB57_140
.LBB57_140:                             # %if.end890
                                        #   in Loop: Header=BB57_124 Depth=3
	jmp	.LBB57_141
.LBB57_141:                             # %for.inc891
                                        #   in Loop: Header=BB57_124 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB57_124
.LBB57_142:                             # %for.end893
                                        #   in Loop: Header=BB57_122 Depth=2
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB57_143:                             # %for.cond896
                                        #   Parent Loop BB57_120 Depth=1
                                        #     Parent Loop BB57_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_147 Depth 4
                                        #         Child Loop BB57_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB57_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB57_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB57_145:                             # %land.end902
                                        #   in Loop: Header=BB57_143 Depth=3
	testb	$1, %al
	jne	.LBB57_146
	jmp	.LBB57_156
.LBB57_146:                             # %for.body904
                                        #   in Loop: Header=BB57_143 Depth=3
	movl	$0, -16(%rbp)
.LBB57_147:                             # %for.cond905
                                        #   Parent Loop BB57_120 Depth=1
                                        #     Parent Loop BB57_122 Depth=2
                                        #       Parent Loop BB57_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB57_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB57_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB57_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_147
.LBB57_150:                             # %for.end921
                                        #   in Loop: Header=BB57_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB57_151:                             # %for.cond940
                                        #   Parent Loop BB57_120 Depth=1
                                        #     Parent Loop BB57_122 Depth=2
                                        #       Parent Loop BB57_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB57_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB57_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-56(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB57_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_151
.LBB57_154:                             # %for.end973
                                        #   in Loop: Header=BB57_143 Depth=3
	jmp	.LBB57_155
.LBB57_155:                             # %for.inc974
                                        #   in Loop: Header=BB57_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_143
.LBB57_156:                             # %for.end976
                                        #   in Loop: Header=BB57_122 Depth=2
	movl	$0, -16(%rbp)
.LBB57_157:                             # %for.cond977
                                        #   Parent Loop BB57_120 Depth=1
                                        #     Parent Loop BB57_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_161 Depth 4
                                        #         Child Loop BB57_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB57_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB57_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB57_159:                             # %land.end983
                                        #   in Loop: Header=BB57_157 Depth=3
	testb	$1, %al
	jne	.LBB57_160
	jmp	.LBB57_170
.LBB57_160:                             # %for.body985
                                        #   in Loop: Header=BB57_157 Depth=3
	movl	$0, -12(%rbp)
.LBB57_161:                             # %for.cond986
                                        #   Parent Loop BB57_120 Depth=1
                                        #     Parent Loop BB57_122 Depth=2
                                        #       Parent Loop BB57_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB57_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB57_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB57_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_161
.LBB57_164:                             # %for.end1002
                                        #   in Loop: Header=BB57_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB57_165:                             # %for.cond1021
                                        #   Parent Loop BB57_120 Depth=1
                                        #     Parent Loop BB57_122 Depth=2
                                        #       Parent Loop BB57_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB57_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB57_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB57_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_165
.LBB57_168:                             # %for.end1054
                                        #   in Loop: Header=BB57_157 Depth=3
	jmp	.LBB57_169
.LBB57_169:                             # %for.inc1055
                                        #   in Loop: Header=BB57_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_157
.LBB57_170:                             # %for.end1057
                                        #   in Loop: Header=BB57_122 Depth=2
	jmp	.LBB57_171
.LBB57_171:                             # %for.inc1058
                                        #   in Loop: Header=BB57_122 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_122
.LBB57_172:                             # %for.end1060
                                        #   in Loop: Header=BB57_120 Depth=1
	jmp	.LBB57_173
.LBB57_173:                             # %for.inc1061
                                        #   in Loop: Header=BB57_120 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_120
.LBB57_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB57_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB57_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB57_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB57_176 Depth=1
	movl	$0, -16(%rbp)
.LBB57_178:                             # %for.cond1071
                                        #   Parent Loop BB57_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB57_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB57_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB57_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_178
.LBB57_181:                             # %for.end1093
                                        #   in Loop: Header=BB57_176 Depth=1
	jmp	.LBB57_182
.LBB57_182:                             # %for.inc1094
                                        #   in Loop: Header=BB57_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_176
.LBB57_183:                             # %for.end1096
	jmp	.LBB57_196
.LBB57_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB57_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB57_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB57_185 Depth=1
	movl	$0, -16(%rbp)
.LBB57_187:                             # %for.cond1102
                                        #   Parent Loop BB57_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB57_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB57_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB57_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB57_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB57_191
.LBB57_190:                             # %if.else1125
                                        #   in Loop: Header=BB57_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB57_191:                             # %if.end1145
                                        #   in Loop: Header=BB57_187 Depth=2
	jmp	.LBB57_192
.LBB57_192:                             # %for.inc1146
                                        #   in Loop: Header=BB57_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_187
.LBB57_193:                             # %for.end1148
                                        #   in Loop: Header=BB57_185 Depth=1
	jmp	.LBB57_194
.LBB57_194:                             # %for.inc1149
                                        #   in Loop: Header=BB57_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_185
.LBB57_195:                             # %for.end1151
	jmp	.LBB57_196
.LBB57_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB57_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB57_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB57_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB57_198 Depth=1
	movl	$0, -16(%rbp)
.LBB57_200:                             # %for.cond1160
                                        #   Parent Loop BB57_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB57_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB57_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB57_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB57_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB57_213
.LBB57_203:                             # %if.else1186
                                        #   in Loop: Header=BB57_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB57_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB57_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB57_206
.LBB57_205:                             # %cond.false
                                        #   in Loop: Header=BB57_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB57_206:                             # %cond.end
                                        #   in Loop: Header=BB57_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB57_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB57_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB57_212
.LBB57_208:                             # %cond.false1229
                                        #   in Loop: Header=BB57_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB57_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB57_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB57_211
.LBB57_210:                             # %cond.false1250
                                        #   in Loop: Header=BB57_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB57_211:                             # %cond.end1268
                                        #   in Loop: Header=BB57_200 Depth=2
.LBB57_212:                             # %cond.end1270
                                        #   in Loop: Header=BB57_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB57_213:                             # %if.end1282
                                        #   in Loop: Header=BB57_200 Depth=2
	jmp	.LBB57_214
.LBB57_214:                             # %for.inc1283
                                        #   in Loop: Header=BB57_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_200
.LBB57_215:                             # %for.end1285
                                        #   in Loop: Header=BB57_198 Depth=1
	jmp	.LBB57_216
.LBB57_216:                             # %for.inc1286
                                        #   in Loop: Header=BB57_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_198
.LBB57_217:                             # %for.end1288
	jmp	.LBB57_218
.LBB57_218:                             # %if.end1289
	movl	-120(%rbp), %ebx
	cmpl	$1679629318, -132(%rbp) # imm = 0x641D1C06
	jne	.LBB57_220
.LBB57_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_219
.Lfunc_end57:
	.size	dct_luma_16x16.48, .Lfunc_end57-dct_luma_16x16.48
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.49
.LCPI58_0:
	.quad	4616189618054758400     # double 4
.LCPI58_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI58_2:
	.quad	4611686018427387904     # double 2
.LCPI58_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.49
	.p2align	4, 0x90
	.type	dct_chroma_sp.49,@function
dct_chroma_sp.49:                       # @dct_chroma_sp.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI58_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI58_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$870900433, -268(%rbp)  # imm = 0x33E8E2D1
	movl	%edi, -124(%rbp)
	movl	%esi, -208(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI58_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI58_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB58_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB58_6
.LBB58_2:                               # %cond.false
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB58_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB58_5
.LBB58_4:                               # %cond.false19
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB58_5:                               # %cond.end
.LBB58_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB58_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB58_12
.LBB58_8:                               # %cond.false30
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB58_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB58_11
.LBB58_10:                              # %cond.false37
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB58_11:                              # %cond.end41
.LBB58_12:                              # %cond.end43
	movl	%eax, -216(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB58_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB58_15
.LBB58_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB58_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -112(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB58_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB58_18
.LBB58_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB58_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-112(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -204(%rbp)
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -220(%rbp)
	cmpl	$0, -216(%rbp)
	jge	.LBB58_20
# %bb.19:                               # %cond.true70
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB58_21
.LBB58_20:                              # %cond.false72
	movslq	-216(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB58_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -216(%rbp)
	jge	.LBB58_23
# %bb.22:                               # %cond.true82
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB58_24
.LBB58_23:                              # %cond.false84
	movslq	-216(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB58_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -224(%rbp)
	movl	$0, -12(%rbp)
.LBB58_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB58_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB58_25 Depth=1
	movl	$0, -16(%rbp)
.LBB58_27:                              # %for.cond97
                                        #   Parent Loop BB58_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB58_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB58_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB58_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_27
.LBB58_30:                              # %for.end
                                        #   in Loop: Header=BB58_25 Depth=1
	jmp	.LBB58_31
.LBB58_31:                              # %for.inc121
                                        #   in Loop: Header=BB58_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_25
.LBB58_32:                              # %for.end123
	movl	$0, -24(%rbp)
.LBB58_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_35 Depth 2
                                        #       Child Loop BB58_37 Depth 3
                                        #         Child Loop BB58_39 Depth 4
                                        #       Child Loop BB58_45 Depth 3
                                        #         Child Loop BB58_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB58_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB58_33 Depth=1
	movl	$0, -20(%rbp)
.LBB58_35:                              # %for.cond128
                                        #   Parent Loop BB58_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_37 Depth 3
                                        #         Child Loop BB58_39 Depth 4
                                        #       Child Loop BB58_45 Depth 3
                                        #         Child Loop BB58_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB58_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB58_35 Depth=2
	movl	$0, -12(%rbp)
.LBB58_37:                              # %for.cond132
                                        #   Parent Loop BB58_33 Depth=1
                                        #     Parent Loop BB58_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB58_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB58_37 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB58_39:                              # %for.cond137
                                        #   Parent Loop BB58_33 Depth=1
                                        #     Parent Loop BB58_35 Depth=2
                                        #       Parent Loop BB58_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB58_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB58_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB58_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_39
.LBB58_42:                              # %for.end174
                                        #   in Loop: Header=BB58_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB58_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_37
.LBB58_44:                              # %for.end214
                                        #   in Loop: Header=BB58_35 Depth=2
	movl	$0, -16(%rbp)
.LBB58_45:                              # %for.cond215
                                        #   Parent Loop BB58_33 Depth=1
                                        #     Parent Loop BB58_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB58_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB58_45 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB58_47:                              # %for.cond220
                                        #   Parent Loop BB58_33 Depth=1
                                        #     Parent Loop BB58_35 Depth=2
                                        #       Parent Loop BB58_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB58_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB58_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB58_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_47
.LBB58_50:                              # %for.end257
                                        #   in Loop: Header=BB58_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB58_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_45
.LBB58_52:                              # %for.end298
                                        #   in Loop: Header=BB58_35 Depth=2
	jmp	.LBB58_53
.LBB58_53:                              # %for.inc299
                                        #   in Loop: Header=BB58_35 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_35
.LBB58_54:                              # %for.end301
                                        #   in Loop: Header=BB58_33 Depth=1
	jmp	.LBB58_55
.LBB58_55:                              # %for.inc302
                                        #   in Loop: Header=BB58_33 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB58_33
.LBB58_56:                              # %for.end304
	movl	$0, -24(%rbp)
.LBB58_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_59 Depth 2
                                        #       Child Loop BB58_61 Depth 3
                                        #         Child Loop BB58_63 Depth 4
                                        #       Child Loop BB58_69 Depth 3
                                        #         Child Loop BB58_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB58_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB58_57 Depth=1
	movl	$0, -20(%rbp)
.LBB58_59:                              # %for.cond309
                                        #   Parent Loop BB58_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_61 Depth 3
                                        #         Child Loop BB58_63 Depth 4
                                        #       Child Loop BB58_69 Depth 3
                                        #         Child Loop BB58_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB58_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB58_59 Depth=2
	movl	$0, -12(%rbp)
.LBB58_61:                              # %for.cond313
                                        #   Parent Loop BB58_57 Depth=1
                                        #     Parent Loop BB58_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB58_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB58_61 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB58_63:                              # %for.cond318
                                        #   Parent Loop BB58_57 Depth=1
                                        #     Parent Loop BB58_59 Depth=2
                                        #       Parent Loop BB58_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB58_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB58_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-84(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB58_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_63
.LBB58_66:                              # %for.end351
                                        #   in Loop: Header=BB58_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB58_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_61
.LBB58_68:                              # %for.end387
                                        #   in Loop: Header=BB58_59 Depth=2
	movl	$0, -16(%rbp)
.LBB58_69:                              # %for.cond388
                                        #   Parent Loop BB58_57 Depth=1
                                        #     Parent Loop BB58_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB58_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB58_69 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB58_71:                              # %for.cond393
                                        #   Parent Loop BB58_57 Depth=1
                                        #     Parent Loop BB58_59 Depth=2
                                        #       Parent Loop BB58_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB58_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB58_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB58_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_71
.LBB58_74:                              # %for.end426
                                        #   in Loop: Header=BB58_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB58_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_69
.LBB58_76:                              # %for.end463
                                        #   in Loop: Header=BB58_59 Depth=2
	jmp	.LBB58_77
.LBB58_77:                              # %for.inc464
                                        #   in Loop: Header=BB58_59 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_59
.LBB58_78:                              # %for.end466
                                        #   in Loop: Header=BB58_57 Depth=1
	jmp	.LBB58_79
.LBB58_79:                              # %for.inc467
                                        #   in Loop: Header=BB58_57 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB58_57
.LBB58_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$0, -32(%rbp)
.LBB58_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB58_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB58_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB58_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB58_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB58_81 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB58_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB58_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB58_90
	jp	.LBB58_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB58_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB58_89
.LBB58_88:                              # %cond.false691
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	-44(%rbp), %eax
.LBB58_89:                              # %cond.end692
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB58_94
.LBB58_90:                              # %if.else
                                        #   in Loop: Header=BB58_81 Depth=1
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB58_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB58_93
.LBB58_92:                              # %if.else697
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB58_93:                              # %if.end
                                        #   in Loop: Header=BB58_81 Depth=1
	jmp	.LBB58_94
.LBB58_94:                              # %if.end698
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB58_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB58_97
.LBB58_96:                              # %cond.false702
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	-104(%rbp), %eax
.LBB58_97:                              # %cond.end703
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	%eax, -100(%rbp)
	jmp	.LBB58_108
.LBB58_98:                              # %if.else705
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB58_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB58_107
.LBB58_100:                             # %if.else709
                                        #   in Loop: Header=BB58_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB58_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB58_103
.LBB58_102:                             # %cond.false713
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	-44(%rbp), %eax
.LBB58_103:                             # %cond.end714
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB58_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB58_106
.LBB58_105:                             # %cond.false719
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	-104(%rbp), %eax
.LBB58_106:                             # %cond.end720
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	%eax, -100(%rbp)
.LBB58_107:                             # %if.end722
                                        #   in Loop: Header=BB58_81 Depth=1
	jmp	.LBB58_108
.LBB58_108:                             # %if.end723
                                        #   in Loop: Header=BB58_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB58_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB58_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB58_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB58_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB58_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB58_112:                             # %if.end734
                                        #   in Loop: Header=BB58_81 Depth=1
	jmp	.LBB58_113
.LBB58_113:                             # %if.end735
                                        #   in Loop: Header=BB58_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB58_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-208(%rbp), %eax
	jle	.LBB58_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	$1, %eax
	jmp	.LBB58_117
.LBB58_116:                             # %cond.false745
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	-208(%rbp), %eax
.LBB58_117:                             # %cond.end746
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	%eax, -208(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -88(%rbp)
.LBB58_118:                             # %if.end763
                                        #   in Loop: Header=BB58_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB58_81
.LBB58_120:                             # %for.end788
	movq	-280(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -212(%rbp)
	movl	$0, -240(%rbp)
	movl	$0, -24(%rbp)
.LBB58_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_123 Depth 2
                                        #       Child Loop BB58_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB58_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB58_121 Depth=1
	movl	$0, -20(%rbp)
.LBB58_123:                             # %for.cond839
                                        #   Parent Loop BB58_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB58_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB58_123 Depth=2
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -236(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$1, -32(%rbp)
.LBB58_125:                             # %for.cond860
                                        #   Parent Loop BB58_121 Depth=1
                                        #     Parent Loop BB58_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB58_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB58_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB58_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB58_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB58_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB58_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB58_130
.LBB58_129:                             # %if.then867
                                        #   in Loop: Header=BB58_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_131
.LBB58_130:                             # %if.else876
                                        #   in Loop: Header=BB58_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB58_131:                             # %if.end885
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -40(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB58_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB58_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB58_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB58_125 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB58_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB58_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB58_139
	jp	.LBB58_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB58_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB58_138
.LBB58_137:                             # %cond.false1047
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	-44(%rbp), %eax
.LBB58_138:                             # %cond.end1048
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB58_143
.LBB58_139:                             # %if.else1050
                                        #   in Loop: Header=BB58_125 Depth=3
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB58_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB58_142
.LBB58_141:                             # %if.else1054
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB58_142:                             # %if.end1055
                                        #   in Loop: Header=BB58_125 Depth=3
	jmp	.LBB58_143
.LBB58_143:                             # %if.end1056
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB58_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB58_146
.LBB58_145:                             # %cond.false1060
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	-104(%rbp), %eax
.LBB58_146:                             # %cond.end1061
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	%eax, -100(%rbp)
	jmp	.LBB58_157
.LBB58_147:                             # %if.else1063
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB58_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB58_156
.LBB58_149:                             # %if.else1067
                                        #   in Loop: Header=BB58_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB58_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB58_152
.LBB58_151:                             # %cond.false1071
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	-44(%rbp), %eax
.LBB58_152:                             # %cond.end1072
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB58_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB58_155
.LBB58_154:                             # %cond.false1077
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	-104(%rbp), %eax
.LBB58_155:                             # %cond.end1078
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	%eax, -100(%rbp)
.LBB58_156:                             # %if.end1080
                                        #   in Loop: Header=BB58_125 Depth=3
	jmp	.LBB58_157
.LBB58_157:                             # %if.end1081
                                        #   in Loop: Header=BB58_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB58_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	-20(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB58_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	-212(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -212(%rbp)
	jmp	.LBB58_161
.LBB58_160:                             # %if.else1099
                                        #   in Loop: Header=BB58_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-212(%rbp), %eax
	movl	%eax, -212(%rbp)
.LBB58_161:                             # %if.end1106
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	$2, -240(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -88(%rbp)
.LBB58_162:                             # %if.end1128
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB58_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB58_125
.LBB58_164:                             # %for.end1164
                                        #   in Loop: Header=BB58_123 Depth=2
	movq	-288(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB58_123 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_123
.LBB58_166:                             # %for.end1169
                                        #   in Loop: Header=BB58_121 Depth=1
	jmp	.LBB58_167
.LBB58_167:                             # %for.inc1170
                                        #   in Loop: Header=BB58_121 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB58_121
.LBB58_168:                             # %for.end1172
	cmpl	$2, -240(%rbp)
	jne	.LBB58_170
# %bb.169:                              # %if.then1175
	movl	$2, -208(%rbp)
.LBB58_170:                             # %if.end1176
	movl	$0, -24(%rbp)
.LBB58_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_173 Depth 2
                                        #       Child Loop BB58_175 Depth 3
                                        #         Child Loop BB58_177 Depth 4
                                        #         Child Loop BB58_181 Depth 4
                                        #       Child Loop BB58_187 Depth 3
                                        #         Child Loop BB58_189 Depth 4
                                        #         Child Loop BB58_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB58_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB58_171 Depth=1
	movl	$0, -20(%rbp)
.LBB58_173:                             # %for.cond1181
                                        #   Parent Loop BB58_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_175 Depth 3
                                        #         Child Loop BB58_177 Depth 4
                                        #         Child Loop BB58_181 Depth 4
                                        #       Child Loop BB58_187 Depth 3
                                        #         Child Loop BB58_189 Depth 4
                                        #         Child Loop BB58_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB58_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB58_173 Depth=2
	movl	$0, -12(%rbp)
.LBB58_175:                             # %for.cond1185
                                        #   Parent Loop BB58_171 Depth=1
                                        #     Parent Loop BB58_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_177 Depth 4
                                        #         Child Loop BB58_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB58_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB58_175 Depth=3
	movl	$0, -16(%rbp)
.LBB58_177:                             # %for.cond1189
                                        #   Parent Loop BB58_171 Depth=1
                                        #     Parent Loop BB58_173 Depth=2
                                        #       Parent Loop BB58_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB58_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB58_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB58_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_177
.LBB58_180:                             # %for.end1204
                                        #   in Loop: Header=BB58_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB58_181:                             # %for.cond1223
                                        #   Parent Loop BB58_171 Depth=1
                                        #     Parent Loop BB58_173 Depth=2
                                        #       Parent Loop BB58_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB58_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB58_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB58_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_181
.LBB58_184:                             # %for.end1254
                                        #   in Loop: Header=BB58_175 Depth=3
	jmp	.LBB58_185
.LBB58_185:                             # %for.inc1255
                                        #   in Loop: Header=BB58_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_175
.LBB58_186:                             # %for.end1257
                                        #   in Loop: Header=BB58_173 Depth=2
	movl	$0, -16(%rbp)
.LBB58_187:                             # %for.cond1258
                                        #   Parent Loop BB58_171 Depth=1
                                        #     Parent Loop BB58_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_189 Depth 4
                                        #         Child Loop BB58_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB58_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB58_187 Depth=3
	movl	$0, -12(%rbp)
.LBB58_189:                             # %for.cond1262
                                        #   Parent Loop BB58_171 Depth=1
                                        #     Parent Loop BB58_173 Depth=2
                                        #       Parent Loop BB58_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB58_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB58_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB58_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_189
.LBB58_192:                             # %for.end1277
                                        #   in Loop: Header=BB58_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB58_193:                             # %for.cond1296
                                        #   Parent Loop BB58_171 Depth=1
                                        #     Parent Loop BB58_173 Depth=2
                                        #       Parent Loop BB58_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB58_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB58_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-56(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB58_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB58_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB58_197
.LBB58_196:                             # %cond.false1311
                                        #   in Loop: Header=BB58_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB58_197:                             # %cond.end1319
                                        #   in Loop: Header=BB58_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB58_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB58_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB58_203
.LBB58_199:                             # %cond.false1325
                                        #   in Loop: Header=BB58_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB58_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB58_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB58_202
.LBB58_201:                             # %cond.false1336
                                        #   in Loop: Header=BB58_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB58_202:                             # %cond.end1344
                                        #   in Loop: Header=BB58_193 Depth=4
.LBB58_203:                             # %cond.end1346
                                        #   in Loop: Header=BB58_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-20(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-56(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB58_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB58_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB58_206
.LBB58_205:                             # %cond.false1366
                                        #   in Loop: Header=BB58_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB58_206:                             # %cond.end1374
                                        #   in Loop: Header=BB58_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB58_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB58_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB58_212
.LBB58_208:                             # %cond.false1380
                                        #   in Loop: Header=BB58_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB58_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB58_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB58_211
.LBB58_210:                             # %cond.false1391
                                        #   in Loop: Header=BB58_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB58_211:                             # %cond.end1399
                                        #   in Loop: Header=BB58_193 Depth=4
.LBB58_212:                             # %cond.end1401
                                        #   in Loop: Header=BB58_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB58_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_193
.LBB58_214:                             # %for.end1412
                                        #   in Loop: Header=BB58_187 Depth=3
	jmp	.LBB58_215
.LBB58_215:                             # %for.inc1413
                                        #   in Loop: Header=BB58_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_187
.LBB58_216:                             # %for.end1415
                                        #   in Loop: Header=BB58_173 Depth=2
	jmp	.LBB58_217
.LBB58_217:                             # %for.inc1416
                                        #   in Loop: Header=BB58_173 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_173
.LBB58_218:                             # %for.end1418
                                        #   in Loop: Header=BB58_171 Depth=1
	jmp	.LBB58_219
.LBB58_219:                             # %for.inc1419
                                        #   in Loop: Header=BB58_171 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB58_171
.LBB58_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB58_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB58_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB58_221 Depth=1
	movl	$0, -16(%rbp)
.LBB58_223:                             # %for.cond1426
                                        #   Parent Loop BB58_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB58_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB58_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-124(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB58_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_223
.LBB58_226:                             # %for.end1446
                                        #   in Loop: Header=BB58_221 Depth=1
	jmp	.LBB58_227
.LBB58_227:                             # %for.inc1447
                                        #   in Loop: Header=BB58_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_221
.LBB58_228:                             # %for.end1449
	movl	-208(%rbp), %ebx
	cmpl	$870900433, -268(%rbp)  # imm = 0x33E8E2D1
	jne	.LBB58_230
.LBB58_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_229
.Lfunc_end58:
	.size	dct_chroma_sp.49, .Lfunc_end58-dct_chroma_sp.49
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.50        # -- Begin function dct_chroma4x4.50
	.p2align	4, 0x90
	.type	dct_chroma4x4.50,@function
dct_chroma4x4.50:                       # @dct_chroma4x4.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$877238962, -148(%rbp)  # imm = 0x34499AB2
	movl	%edi, -28(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -100(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB59_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB59_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB59_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB59_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB59_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-28(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -76(%rbp)
	cmpl	$0, -76(%rbp)
	jge	.LBB59_7
# %bb.6:                                # %cond.true
	movl	-76(%rbp), %eax
	jmp	.LBB59_8
.LBB59_7:                               # %cond.false
	movl	-76(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB59_8:                               # %cond.end
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB59_18
# %bb.9:                                # %if.then
	movl	$0, -12(%rbp)
.LBB59_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_12 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB59_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB59_10 Depth=1
	movl	$0, -16(%rbp)
.LBB59_12:                              # %for.cond31
                                        #   Parent Loop BB59_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB59_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB59_12 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB59_12 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_12
.LBB59_15:                              # %for.end
                                        #   in Loop: Header=BB59_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB59_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_10
.LBB59_17:                              # %for.end92
	jmp	.LBB59_18
.LBB59_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB59_28
# %bb.19:                               # %if.then94
	movl	$0, -16(%rbp)
.LBB59_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_22 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB59_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB59_20 Depth=1
	movl	$0, -12(%rbp)
.LBB59_22:                              # %for.cond99
                                        #   Parent Loop BB59_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB59_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB59_22 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB59_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_22
.LBB59_25:                              # %for.end132
                                        #   in Loop: Header=BB59_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB59_20 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_20
.LBB59_27:                              # %for.end165
	jmp	.LBB59_28
.LBB59_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -108(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB59_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB59_34
.LBB59_30:                              # %if.else
	cmpl	$1, -88(%rbp)
	jne	.LBB59_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB59_33
.LBB59_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB59_33:                              # %if.end213
	jmp	.LBB59_34
.LBB59_34:                              # %if.end214
	movl	-28(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-80(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-100(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-80(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-100(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB59_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB59_46
.LBB59_36:                              # %if.else245
	cmpl	$4, -24(%rbp)
	jge	.LBB59_41
# %bb.37:                               # %if.then248
	cmpl	$1, -88(%rbp)
	jne	.LBB59_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB59_40
.LBB59_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB59_40:                              # %if.end290
	jmp	.LBB59_45
.LBB59_41:                              # %if.else291
	cmpl	$1, -88(%rbp)
	jne	.LBB59_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB59_44
.LBB59_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB59_44:                              # %if.end328
	jmp	.LBB59_45
.LBB59_45:                              # %if.end329
	jmp	.LBB59_46
.LBB59_46:                              # %if.end330
	movl	$1, -96(%rbp)
.LBB59_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -96(%rbp)
	jge	.LBB59_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB59_47 Depth=1
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -84(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB59_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB59_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB59_54
.LBB59_50:                              # %if.else352
                                        #   in Loop: Header=BB59_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB59_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB59_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB59_53
.LBB59_52:                              # %if.else381
                                        #   in Loop: Header=BB59_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB59_53:                              # %if.end407
                                        #   in Loop: Header=BB59_47 Depth=1
	jmp	.LBB59_54
.LBB59_54:                              # %if.end408
                                        #   in Loop: Header=BB59_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB59_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB59_47 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB59_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB59_47 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB59_58
.LBB59_57:                              # %if.then415
                                        #   in Loop: Header=BB59_47 Depth=1
	movl	$1, -132(%rbp)
.LBB59_58:                              # %if.end416
                                        #   in Loop: Header=BB59_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-108(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -108(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB59_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB59_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB59_70
.LBB59_60:                              # %if.else436
                                        #   in Loop: Header=BB59_47 Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB59_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB59_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB59_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB59_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB59_64
.LBB59_63:                              # %if.else457
                                        #   in Loop: Header=BB59_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -84(%rbp)
.LBB59_64:                              # %if.end472
                                        #   in Loop: Header=BB59_47 Depth=1
	jmp	.LBB59_69
.LBB59_65:                              # %if.else473
                                        #   in Loop: Header=BB59_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB59_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB59_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB59_68
.LBB59_67:                              # %if.else488
                                        #   in Loop: Header=BB59_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
.LBB59_68:                              # %if.end500
                                        #   in Loop: Header=BB59_47 Depth=1
	jmp	.LBB59_69
.LBB59_69:                              # %if.end501
                                        #   in Loop: Header=BB59_47 Depth=1
	jmp	.LBB59_70
.LBB59_70:                              # %if.end502
                                        #   in Loop: Header=BB59_47 Depth=1
	jmp	.LBB59_71
.LBB59_71:                              # %if.end503
                                        #   in Loop: Header=BB59_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB59_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB59_47 Depth=1
	movl	-84(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB59_73:                              # %if.end511
                                        #   in Loop: Header=BB59_47 Depth=1
	jmp	.LBB59_74
.LBB59_74:                              # %for.inc512
                                        #   in Loop: Header=BB59_47 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB59_47
.LBB59_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB59_89
# %bb.76:                               # %if.then518
	movl	$0, -12(%rbp)
.LBB59_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_79 Depth 2
                                        #     Child Loop BB59_83 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB59_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB59_77 Depth=1
	movl	$0, -16(%rbp)
.LBB59_79:                              # %for.cond523
                                        #   Parent Loop BB59_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB59_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB59_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB59_79 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_79
.LBB59_82:                              # %for.end536
                                        #   in Loop: Header=BB59_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB59_83:                              # %for.cond555
                                        #   Parent Loop BB59_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB59_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB59_83 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB59_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_83
.LBB59_86:                              # %for.end582
                                        #   in Loop: Header=BB59_77 Depth=1
	jmp	.LBB59_87
.LBB59_87:                              # %for.inc583
                                        #   in Loop: Header=BB59_77 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_77
.LBB59_88:                              # %for.end585
	jmp	.LBB59_89
.LBB59_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB59_103
# %bb.90:                               # %if.then588
	movl	$0, -16(%rbp)
.LBB59_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_93 Depth 2
                                        #     Child Loop BB59_97 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB59_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB59_91 Depth=1
	movl	$0, -12(%rbp)
.LBB59_93:                              # %for.cond593
                                        #   Parent Loop BB59_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB59_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB59_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB59_93 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_93
.LBB59_96:                              # %for.end606
                                        #   in Loop: Header=BB59_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB59_97:                              # %for.cond625
                                        #   Parent Loop BB59_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB59_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB59_97 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB59_97 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_97
.LBB59_100:                             # %for.end656
                                        #   in Loop: Header=BB59_91 Depth=1
	jmp	.LBB59_101
.LBB59_101:                             # %for.inc657
                                        #   in Loop: Header=BB59_91 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_91
.LBB59_102:                             # %for.end659
	jmp	.LBB59_103
.LBB59_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$877238962, -148(%rbp)  # imm = 0x34499AB2
	jne	.LBB59_105
.LBB59_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_104
.Lfunc_end59:
	.size	dct_chroma4x4.50, .Lfunc_end59-dct_chroma4x4.50
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.51
.LCPI60_0:
	.quad	4616189618054758400     # double 4
.LCPI60_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI60_2:
	.quad	4611686018427387904     # double 2
.LCPI60_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.51
	.p2align	4, 0x90
	.type	dct_luma_sp.51,@function
dct_luma_sp.51:                         # @dct_luma_sp.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI60_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI60_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1328488601, -216(%rbp) # imm = 0x4F2F2099
	movl	%edi, -132(%rbp)
	movl	%esi, -120(%rbp)
	movq	%rdx, -240(%rbp)
	movl	-132(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -196(%rbp)
	movl	-120(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -180(%rbp)
	movl	-180(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-196(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -192(%rbp)
	movl	-180(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-196(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -188(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI60_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI60_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -232(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -124(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -104(%rbp)
	movl	-124(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -144(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -208(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -116(%rbp)
	movl	-208(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -136(%rbp)
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -200(%rbp)
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -204(%rbp)
	movl	$0, -12(%rbp)
.LBB60_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB60_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -16(%rbp)
.LBB60_3:                               # %for.cond38
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB60_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB60_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-132(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-120(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-132(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-120(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_3
.LBB60_6:                               # %for.end
                                        #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_7
.LBB60_7:                               # %for.inc66
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_1
.LBB60_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB60_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB60_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB60_9 Depth=1
	movl	$0, -16(%rbp)
.LBB60_11:                              # %for.cond73
                                        #   Parent Loop BB60_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB60_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB60_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB60_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_11
.LBB60_14:                              # %for.end106
                                        #   in Loop: Header=BB60_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB60_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_9
.LBB60_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB60_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB60_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB60_17 Depth=1
	movl	$0, -12(%rbp)
.LBB60_19:                              # %for.cond144
                                        #   Parent Loop BB60_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB60_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB60_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB60_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_19
.LBB60_22:                              # %for.end177
                                        #   in Loop: Header=BB60_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB60_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_17
.LBB60_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB60_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB60_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB60_25 Depth=1
	movl	$0, -16(%rbp)
.LBB60_27:                              # %for.cond215
                                        #   Parent Loop BB60_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB60_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB60_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB60_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_27
.LBB60_30:                              # %for.end244
                                        #   in Loop: Header=BB60_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB60_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_25
.LBB60_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB60_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB60_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB60_33 Depth=1
	movl	$0, -12(%rbp)
.LBB60_35:                              # %for.cond278
                                        #   Parent Loop BB60_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB60_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB60_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB60_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_35
.LBB60_38:                              # %for.end307
                                        #   in Loop: Header=BB60_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB60_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_33
.LBB60_40:                              # %for.end336
	movl	$0, -184(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -112(%rbp)
	movl	$0, -64(%rbp)
.LBB60_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -64(%rbp)
	jge	.LBB60_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB60_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB60_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB60_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB60_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB60_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB60_46
.LBB60_45:                              # %if.then
                                        #   in Loop: Header=BB60_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_47
.LBB60_46:                              # %if.else
                                        #   in Loop: Header=BB60_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB60_47:                              # %if.end
                                        #   in Loop: Header=BB60_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -100(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-116(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-204(%rbp), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-116(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -108(%rbp)
	movl	-108(%rbp), %edi
	callq	abs
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-200(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -140(%rbp)
	movl	-140(%rbp), %edi
	callq	abs
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-200(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-56(%rbp), %eax
	je	.LBB60_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB60_41 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB60_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB60_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB60_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB60_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movl	-108(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-24(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-232(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-56(%rbp), %edi
	movl	-140(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-56(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-232(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-160(%rbp), %xmm0
	jne	.LBB60_55
	jp	.LBB60_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB60_41 Depth=1
	movl	-24(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-56(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB60_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB60_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB60_54
.LBB60_53:                              # %cond.false
                                        #   in Loop: Header=BB60_41 Depth=1
	movl	-56(%rbp), %eax
.LBB60_54:                              # %cond.end
                                        #   in Loop: Header=BB60_41 Depth=1
	movl	%eax, -60(%rbp)
	jmp	.LBB60_59
.LBB60_55:                              # %if.else500
                                        #   in Loop: Header=BB60_41 Depth=1
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-160(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB60_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB60_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB60_58
.LBB60_57:                              # %if.else504
                                        #   in Loop: Header=BB60_41 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB60_58:                              # %if.end505
                                        #   in Loop: Header=BB60_41 Depth=1
	jmp	.LBB60_59
.LBB60_59:                              # %if.end506
                                        #   in Loop: Header=BB60_41 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB60_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB60_41 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB60_62
.LBB60_61:                              # %cond.false510
                                        #   in Loop: Header=BB60_41 Depth=1
	movl	-140(%rbp), %eax
.LBB60_62:                              # %cond.end511
                                        #   in Loop: Header=BB60_41 Depth=1
	movl	%eax, -128(%rbp)
	jmp	.LBB60_73
.LBB60_63:                              # %if.else513
                                        #   in Loop: Header=BB60_41 Depth=1
	movl	-24(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.LBB60_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB60_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -128(%rbp)
	jmp	.LBB60_72
.LBB60_65:                              # %if.else517
                                        #   in Loop: Header=BB60_41 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB60_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB60_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB60_68
.LBB60_67:                              # %cond.false521
                                        #   in Loop: Header=BB60_41 Depth=1
	movl	-56(%rbp), %eax
.LBB60_68:                              # %cond.end522
                                        #   in Loop: Header=BB60_41 Depth=1
	movl	%eax, -60(%rbp)
	cmpl	$0, -24(%rbp)
	jne	.LBB60_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB60_41 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB60_71
.LBB60_70:                              # %cond.false527
                                        #   in Loop: Header=BB60_41 Depth=1
	movl	-140(%rbp), %eax
.LBB60_71:                              # %cond.end528
                                        #   in Loop: Header=BB60_41 Depth=1
	movl	%eax, -128(%rbp)
.LBB60_72:                              # %if.end530
                                        #   in Loop: Header=BB60_41 Depth=1
	jmp	.LBB60_73
.LBB60_73:                              # %if.end531
                                        #   in Loop: Header=BB60_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB60_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB60_41 Depth=1
	movl	$1, -184(%rbp)
	cmpl	$1, -60(%rbp)
	jle	.LBB60_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB60_41 Depth=1
	movq	-240(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB60_77
.LBB60_76:                              # %if.else539
                                        #   in Loop: Header=BB60_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-240(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB60_77:                              # %if.end546
                                        #   in Loop: Header=BB60_41 Depth=1
	movl	-60(%rbp), %edi
	movl	-128(%rbp), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-112(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-112(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	movl	$-1, -68(%rbp)
	movl	-60(%rbp), %edi
	movl	-128(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -100(%rbp)
.LBB60_78:                              # %if.end568
                                        #   in Loop: Header=BB60_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-116(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-204(%rbp), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-100(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-116(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB60_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB60_41
.LBB60_80:                              # %for.end600
	movq	-224(%rbp), %rax
	movslq	-112(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB60_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_83 Depth 2
                                        #     Child Loop BB60_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB60_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB60_81 Depth=1
	movl	$0, -16(%rbp)
.LBB60_83:                              # %for.cond607
                                        #   Parent Loop BB60_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB60_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB60_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB60_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_83
.LBB60_86:                              # %for.end620
                                        #   in Loop: Header=BB60_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB60_87:                              # %for.cond639
                                        #   Parent Loop BB60_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB60_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB60_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB60_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_87
.LBB60_90:                              # %for.end666
                                        #   in Loop: Header=BB60_81 Depth=1
	jmp	.LBB60_91
.LBB60_91:                              # %for.inc667
                                        #   in Loop: Header=BB60_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_81
.LBB60_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB60_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_95 Depth 2
                                        #     Child Loop BB60_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB60_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB60_93 Depth=1
	movl	$0, -12(%rbp)
.LBB60_95:                              # %for.cond674
                                        #   Parent Loop BB60_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB60_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB60_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB60_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_95
.LBB60_98:                              # %for.end687
                                        #   in Loop: Header=BB60_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB60_99:                              # %for.cond706
                                        #   Parent Loop BB60_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB60_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB60_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB60_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB60_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB60_103
.LBB60_102:                             # %cond.false721
                                        #   in Loop: Header=BB60_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB60_103:                             # %cond.end729
                                        #   in Loop: Header=BB60_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB60_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB60_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_109
.LBB60_105:                             # %cond.false735
                                        #   in Loop: Header=BB60_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB60_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB60_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB60_108
.LBB60_107:                             # %cond.false746
                                        #   in Loop: Header=BB60_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB60_108:                             # %cond.end754
                                        #   in Loop: Header=BB60_99 Depth=2
.LBB60_109:                             # %cond.end756
                                        #   in Loop: Header=BB60_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB60_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB60_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB60_112
.LBB60_111:                             # %cond.false774
                                        #   in Loop: Header=BB60_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB60_112:                             # %cond.end782
                                        #   in Loop: Header=BB60_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB60_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB60_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_118
.LBB60_114:                             # %cond.false788
                                        #   in Loop: Header=BB60_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB60_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB60_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB60_117
.LBB60_116:                             # %cond.false799
                                        #   in Loop: Header=BB60_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB60_117:                             # %cond.end807
                                        #   in Loop: Header=BB60_99 Depth=2
.LBB60_118:                             # %cond.end809
                                        #   in Loop: Header=BB60_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB60_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_99
.LBB60_120:                             # %for.end818
                                        #   in Loop: Header=BB60_93 Depth=1
	jmp	.LBB60_121
.LBB60_121:                             # %for.inc819
                                        #   in Loop: Header=BB60_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_93
.LBB60_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB60_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB60_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB60_123 Depth=1
	movl	$0, -16(%rbp)
.LBB60_125:                             # %for.cond826
                                        #   Parent Loop BB60_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB60_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB60_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-120(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-132(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB60_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_125
.LBB60_128:                             # %for.end846
                                        #   in Loop: Header=BB60_123 Depth=1
	jmp	.LBB60_129
.LBB60_129:                             # %for.inc847
                                        #   in Loop: Header=BB60_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_123
.LBB60_130:                             # %for.end849
	movl	-184(%rbp), %ebx
	cmpl	$1328488601, -216(%rbp) # imm = 0x4F2F2099
	jne	.LBB60_132
.LBB60_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_131
.Lfunc_end60:
	.size	dct_luma_sp.51, .Lfunc_end60-dct_luma_sp.51
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.52       # -- Begin function intrapred_luma.52
	.p2align	4, 0x90
	.type	intrapred_luma.52,@function
intrapred_luma.52:                      # @intrapred_luma.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$1463230220, -172(%rbp) # imm = 0x57371F0C
	movl	%edi, -112(%rbp)
	movl	%esi, -108(%rbp)
	movq	%rdx, -216(%rbp)
	movq	%rcx, -224(%rbp)
	movq	%r8, -208(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -100(%rbp)
	movl	$0, -4(%rbp)
.LBB61_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB61_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_1
.LBB61_4:                               # %for.end
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	addl	$4, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-200(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB61_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -84(%rbp)
	je	.LBB61_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -84(%rbp)
	jne	.LBB61_10
.LBB61_7:                               # %land.rhs10
	cmpl	$4, -88(%rbp)
	movb	$1, %al
	je	.LBB61_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -88(%rbp)
	sete	%al
.LBB61_9:                               # %lor.end
.LBB61_10:                              # %land.end
	xorb	$-1, %al
.LBB61_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB61_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB61_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB61_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB61_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB61_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB61_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB61_17
.LBB61_16:                              # %cond.false
                                        #   in Loop: Header=BB61_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB61_17
.LBB61_17:                              # %cond.end
                                        #   in Loop: Header=BB61_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB61_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_13
.LBB61_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB61_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB61_22
.LBB61_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB61_22
.LBB61_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB61_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB61_25
.LBB61_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB61_25
.LBB61_25:                              # %cond.end49
	movl	%eax, -116(%rbp)
	cmpl	$0, -200(%rbp)
	je	.LBB61_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-196(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB61_28
.LBB61_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB61_28
.LBB61_28:                              # %cond.end59
	movl	%eax, -104(%rbp)
	jmp	.LBB61_30
.LBB61_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-200(%rbp), %eax
	movl	%eax, -104(%rbp)
.LBB61_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-216(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-224(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB61_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB61_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -104(%rbp)
	setne	%al
.LBB61_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-208(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB61_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB61_36
.LBB61_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB61_36:                              # %if.end114
	cmpl	$0, -116(%rbp)
	je	.LBB61_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB61_39
.LBB61_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB61_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB61_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_42
.LBB61_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB61_42:                              # %if.end208
	cmpl	$0, -104(%rbp)
	je	.LBB61_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-180(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-184(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB61_45
.LBB61_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB61_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB61_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB61_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB61_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB61_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_46
.LBB61_49:                              # %for.end233
	movl	$0, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB61_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB61_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB61_61
.LBB61_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB61_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB61_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB61_60
.LBB61_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB61_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB61_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB61_59
.LBB61_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -92(%rbp)
.LBB61_59:                              # %if.end284
	jmp	.LBB61_60
.LBB61_60:                              # %if.end285
	jmp	.LBB61_61
.LBB61_61:                              # %if.end286
	movl	$0, -96(%rbp)
.LBB61_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_64 Depth 2
	cmpl	$4, -96(%rbp)
	jge	.LBB61_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB61_62 Depth=1
	movl	$0, -4(%rbp)
.LBB61_64:                              # %for.cond291
                                        #   Parent Loop BB61_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB61_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB61_64 Depth=2
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-96(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB61_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_64
.LBB61_67:                              # %for.end304
                                        #   in Loop: Header=BB61_62 Depth=1
	jmp	.LBB61_68
.LBB61_68:                              # %for.inc305
                                        #   in Loop: Header=BB61_62 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB61_62
.LBB61_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB61_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB61_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB61_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB61_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_70
.LBB61_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB61_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB61_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB61_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB61_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB61_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB61_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB61_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB61_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB61_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB61_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -104(%rbp)
	je	.LBB61_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB61_85:                              # %if.end1174
	cmpl	$1463230220, -172(%rbp) # imm = 0x57371F0C
	jne	.LBB61_87
.LBB61_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_86
.Lfunc_end61:
	.size	intrapred_luma.52, .Lfunc_end61-intrapred_luma.52
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.53
.LCPI62_0:
	.quad	4616189618054758400     # double 4
.LCPI62_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI62_2:
	.quad	4611686018427387904     # double 2
.LCPI62_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.53
	.p2align	4, 0x90
	.type	dct_chroma_sp.53,@function
dct_chroma_sp.53:                       # @dct_chroma_sp.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI62_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI62_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$582449442, -268(%rbp)  # imm = 0x22B77922
	movl	%edi, -120(%rbp)
	movl	%esi, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -200(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI62_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI62_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB62_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB62_6
.LBB62_2:                               # %cond.false
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB62_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB62_5
.LBB62_4:                               # %cond.false19
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB62_5:                               # %cond.end
.LBB62_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB62_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB62_12
.LBB62_8:                               # %cond.false30
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB62_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB62_11
.LBB62_10:                              # %cond.false37
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB62_11:                              # %cond.end41
.LBB62_12:                              # %cond.end43
	movl	%eax, -220(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB62_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB62_15
.LBB62_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB62_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -112(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB62_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB62_18
.LBB62_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB62_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-112(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -212(%rbp)
	cmpl	$0, -220(%rbp)
	jge	.LBB62_20
# %bb.19:                               # %cond.true70
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB62_21
.LBB62_20:                              # %cond.false72
	movslq	-220(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB62_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -220(%rbp)
	jge	.LBB62_23
# %bb.22:                               # %cond.true82
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB62_24
.LBB62_23:                              # %cond.false84
	movslq	-220(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB62_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -216(%rbp)
	movl	$0, -12(%rbp)
.LBB62_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB62_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB62_25 Depth=1
	movl	$0, -16(%rbp)
.LBB62_27:                              # %for.cond97
                                        #   Parent Loop BB62_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB62_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB62_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB62_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_27
.LBB62_30:                              # %for.end
                                        #   in Loop: Header=BB62_25 Depth=1
	jmp	.LBB62_31
.LBB62_31:                              # %for.inc121
                                        #   in Loop: Header=BB62_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_25
.LBB62_32:                              # %for.end123
	movl	$0, -24(%rbp)
.LBB62_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_35 Depth 2
                                        #       Child Loop BB62_37 Depth 3
                                        #         Child Loop BB62_39 Depth 4
                                        #       Child Loop BB62_45 Depth 3
                                        #         Child Loop BB62_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB62_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB62_33 Depth=1
	movl	$0, -20(%rbp)
.LBB62_35:                              # %for.cond128
                                        #   Parent Loop BB62_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_37 Depth 3
                                        #         Child Loop BB62_39 Depth 4
                                        #       Child Loop BB62_45 Depth 3
                                        #         Child Loop BB62_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB62_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB62_35 Depth=2
	movl	$0, -12(%rbp)
.LBB62_37:                              # %for.cond132
                                        #   Parent Loop BB62_33 Depth=1
                                        #     Parent Loop BB62_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB62_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB62_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB62_37 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -16(%rbp)
.LBB62_39:                              # %for.cond137
                                        #   Parent Loop BB62_33 Depth=1
                                        #     Parent Loop BB62_35 Depth=2
                                        #       Parent Loop BB62_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB62_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB62_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB62_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_39
.LBB62_42:                              # %for.end174
                                        #   in Loop: Header=BB62_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB62_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_37
.LBB62_44:                              # %for.end214
                                        #   in Loop: Header=BB62_35 Depth=2
	movl	$0, -16(%rbp)
.LBB62_45:                              # %for.cond215
                                        #   Parent Loop BB62_33 Depth=1
                                        #     Parent Loop BB62_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB62_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB62_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB62_45 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB62_47:                              # %for.cond220
                                        #   Parent Loop BB62_33 Depth=1
                                        #     Parent Loop BB62_35 Depth=2
                                        #       Parent Loop BB62_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB62_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB62_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-56(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-56(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB62_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_47
.LBB62_50:                              # %for.end257
                                        #   in Loop: Header=BB62_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB62_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_45
.LBB62_52:                              # %for.end298
                                        #   in Loop: Header=BB62_35 Depth=2
	jmp	.LBB62_53
.LBB62_53:                              # %for.inc299
                                        #   in Loop: Header=BB62_35 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB62_35
.LBB62_54:                              # %for.end301
                                        #   in Loop: Header=BB62_33 Depth=1
	jmp	.LBB62_55
.LBB62_55:                              # %for.inc302
                                        #   in Loop: Header=BB62_33 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB62_33
.LBB62_56:                              # %for.end304
	movl	$0, -24(%rbp)
.LBB62_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_59 Depth 2
                                        #       Child Loop BB62_61 Depth 3
                                        #         Child Loop BB62_63 Depth 4
                                        #       Child Loop BB62_69 Depth 3
                                        #         Child Loop BB62_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB62_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB62_57 Depth=1
	movl	$0, -20(%rbp)
.LBB62_59:                              # %for.cond309
                                        #   Parent Loop BB62_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_61 Depth 3
                                        #         Child Loop BB62_63 Depth 4
                                        #       Child Loop BB62_69 Depth 3
                                        #         Child Loop BB62_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB62_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB62_59 Depth=2
	movl	$0, -12(%rbp)
.LBB62_61:                              # %for.cond313
                                        #   Parent Loop BB62_57 Depth=1
                                        #     Parent Loop BB62_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB62_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB62_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB62_61 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -16(%rbp)
.LBB62_63:                              # %for.cond318
                                        #   Parent Loop BB62_57 Depth=1
                                        #     Parent Loop BB62_59 Depth=2
                                        #       Parent Loop BB62_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB62_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB62_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-48(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-84(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB62_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_63
.LBB62_66:                              # %for.end351
                                        #   in Loop: Header=BB62_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB62_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_61
.LBB62_68:                              # %for.end387
                                        #   in Loop: Header=BB62_59 Depth=2
	movl	$0, -16(%rbp)
.LBB62_69:                              # %for.cond388
                                        #   Parent Loop BB62_57 Depth=1
                                        #     Parent Loop BB62_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB62_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB62_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB62_69 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB62_71:                              # %for.cond393
                                        #   Parent Loop BB62_57 Depth=1
                                        #     Parent Loop BB62_59 Depth=2
                                        #       Parent Loop BB62_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB62_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB62_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-56(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-56(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB62_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_71
.LBB62_74:                              # %for.end426
                                        #   in Loop: Header=BB62_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB62_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_69
.LBB62_76:                              # %for.end463
                                        #   in Loop: Header=BB62_59 Depth=2
	jmp	.LBB62_77
.LBB62_77:                              # %for.inc464
                                        #   in Loop: Header=BB62_59 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB62_59
.LBB62_78:                              # %for.end466
                                        #   in Loop: Header=BB62_57 Depth=1
	jmp	.LBB62_79
.LBB62_79:                              # %for.inc467
                                        #   in Loop: Header=BB62_57 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB62_57
.LBB62_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	$0, -32(%rbp)
.LBB62_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB62_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -92(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -44(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-212(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-212(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	je	.LBB62_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB62_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB62_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB62_81 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB62_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB62_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-44(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-40(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-184(%rbp), %xmm0
	jne	.LBB62_90
	jp	.LBB62_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-40(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB62_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB62_89
.LBB62_88:                              # %cond.false691
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	-40(%rbp), %eax
.LBB62_89:                              # %cond.end692
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB62_94
.LBB62_90:                              # %if.else
                                        #   in Loop: Header=BB62_81 Depth=1
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-184(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB62_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB62_93
.LBB62_92:                              # %if.else697
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB62_93:                              # %if.end
                                        #   in Loop: Header=BB62_81 Depth=1
	jmp	.LBB62_94
.LBB62_94:                              # %if.end698
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB62_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB62_97
.LBB62_96:                              # %cond.false702
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	-100(%rbp), %eax
.LBB62_97:                              # %cond.end703
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	%eax, -104(%rbp)
	jmp	.LBB62_108
.LBB62_98:                              # %if.else705
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB62_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB62_107
.LBB62_100:                             # %if.else709
                                        #   in Loop: Header=BB62_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB62_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB62_103
.LBB62_102:                             # %cond.false713
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	-40(%rbp), %eax
.LBB62_103:                             # %cond.end714
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB62_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB62_106
.LBB62_105:                             # %cond.false719
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	-100(%rbp), %eax
.LBB62_106:                             # %cond.end720
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	%eax, -104(%rbp)
.LBB62_107:                             # %if.end722
                                        #   in Loop: Header=BB62_81 Depth=1
	jmp	.LBB62_108
.LBB62_108:                             # %if.end723
                                        #   in Loop: Header=BB62_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB62_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB62_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB62_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB62_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB62_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB62_112:                             # %if.end734
                                        #   in Loop: Header=BB62_81 Depth=1
	jmp	.LBB62_113
.LBB62_113:                             # %if.end735
                                        #   in Loop: Header=BB62_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB62_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	-120(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-200(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-204(%rbp), %eax
	jle	.LBB62_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	$1, %eax
	jmp	.LBB62_117
.LBB62_116:                             # %cond.false745
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	-204(%rbp), %eax
.LBB62_117:                             # %cond.end746
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	%eax, -204(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -92(%rbp)
.LBB62_118:                             # %if.end763
                                        #   in Loop: Header=BB62_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-92(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB62_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB62_81
.LBB62_120:                             # %for.end788
	movq	-280(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -224(%rbp)
	movl	$0, -240(%rbp)
	movl	$0, -24(%rbp)
.LBB62_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_123 Depth 2
                                        #       Child Loop BB62_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB62_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB62_121 Depth=1
	movl	$0, -20(%rbp)
.LBB62_123:                             # %for.cond839
                                        #   Parent Loop BB62_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB62_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB62_123 Depth=2
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -236(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	$1, -32(%rbp)
.LBB62_125:                             # %for.cond860
                                        #   Parent Loop BB62_121 Depth=1
                                        #     Parent Loop BB62_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB62_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB62_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB62_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB62_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB62_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB62_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB62_130
.LBB62_129:                             # %if.then867
                                        #   in Loop: Header=BB62_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_131
.LBB62_130:                             # %if.else876
                                        #   in Loop: Header=BB62_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB62_131:                             # %if.end885
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -44(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	je	.LBB62_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB62_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB62_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB62_125 Depth=3
	cmpl	$0, -40(%rbp)
	je	.LBB62_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB62_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-44(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-40(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-184(%rbp), %xmm0
	jne	.LBB62_139
	jp	.LBB62_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-40(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB62_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB62_138
.LBB62_137:                             # %cond.false1047
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	-40(%rbp), %eax
.LBB62_138:                             # %cond.end1048
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB62_143
.LBB62_139:                             # %if.else1050
                                        #   in Loop: Header=BB62_125 Depth=3
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-184(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB62_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB62_142
.LBB62_141:                             # %if.else1054
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB62_142:                             # %if.end1055
                                        #   in Loop: Header=BB62_125 Depth=3
	jmp	.LBB62_143
.LBB62_143:                             # %if.end1056
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB62_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	-44(%rbp), %eax
	jmp	.LBB62_146
.LBB62_145:                             # %cond.false1060
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	-100(%rbp), %eax
.LBB62_146:                             # %cond.end1061
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	%eax, -104(%rbp)
	jmp	.LBB62_157
.LBB62_147:                             # %if.else1063
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB62_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB62_156
.LBB62_149:                             # %if.else1067
                                        #   in Loop: Header=BB62_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB62_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB62_152
.LBB62_151:                             # %cond.false1071
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	-40(%rbp), %eax
.LBB62_152:                             # %cond.end1072
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB62_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	-44(%rbp), %eax
	jmp	.LBB62_155
.LBB62_154:                             # %cond.false1077
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	-100(%rbp), %eax
.LBB62_155:                             # %cond.end1078
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	%eax, -104(%rbp)
.LBB62_156:                             # %if.end1080
                                        #   in Loop: Header=BB62_125 Depth=3
	jmp	.LBB62_157
.LBB62_157:                             # %if.end1081
                                        #   in Loop: Header=BB62_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB62_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	-120(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	-20(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-200(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB62_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	-224(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -224(%rbp)
	jmp	.LBB62_161
.LBB62_160:                             # %if.else1099
                                        #   in Loop: Header=BB62_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-224(%rbp), %eax
	movl	%eax, -224(%rbp)
.LBB62_161:                             # %if.end1106
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	$2, -240(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -92(%rbp)
.LBB62_162:                             # %if.end1128
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-92(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB62_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB62_125
.LBB62_164:                             # %for.end1164
                                        #   in Loop: Header=BB62_123 Depth=2
	movq	-288(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB62_123 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB62_123
.LBB62_166:                             # %for.end1169
                                        #   in Loop: Header=BB62_121 Depth=1
	jmp	.LBB62_167
.LBB62_167:                             # %for.inc1170
                                        #   in Loop: Header=BB62_121 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB62_121
.LBB62_168:                             # %for.end1172
	cmpl	$2, -240(%rbp)
	jne	.LBB62_170
# %bb.169:                              # %if.then1175
	movl	$2, -204(%rbp)
.LBB62_170:                             # %if.end1176
	movl	$0, -24(%rbp)
.LBB62_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_173 Depth 2
                                        #       Child Loop BB62_175 Depth 3
                                        #         Child Loop BB62_177 Depth 4
                                        #         Child Loop BB62_181 Depth 4
                                        #       Child Loop BB62_187 Depth 3
                                        #         Child Loop BB62_189 Depth 4
                                        #         Child Loop BB62_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB62_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB62_171 Depth=1
	movl	$0, -20(%rbp)
.LBB62_173:                             # %for.cond1181
                                        #   Parent Loop BB62_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_175 Depth 3
                                        #         Child Loop BB62_177 Depth 4
                                        #         Child Loop BB62_181 Depth 4
                                        #       Child Loop BB62_187 Depth 3
                                        #         Child Loop BB62_189 Depth 4
                                        #         Child Loop BB62_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB62_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB62_173 Depth=2
	movl	$0, -12(%rbp)
.LBB62_175:                             # %for.cond1185
                                        #   Parent Loop BB62_171 Depth=1
                                        #     Parent Loop BB62_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB62_177 Depth 4
                                        #         Child Loop BB62_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB62_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB62_175 Depth=3
	movl	$0, -16(%rbp)
.LBB62_177:                             # %for.cond1189
                                        #   Parent Loop BB62_171 Depth=1
                                        #     Parent Loop BB62_173 Depth=2
                                        #       Parent Loop BB62_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB62_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB62_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB62_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_177
.LBB62_180:                             # %for.end1204
                                        #   in Loop: Header=BB62_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB62_181:                             # %for.cond1223
                                        #   Parent Loop BB62_171 Depth=1
                                        #     Parent Loop BB62_173 Depth=2
                                        #       Parent Loop BB62_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB62_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB62_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB62_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_181
.LBB62_184:                             # %for.end1254
                                        #   in Loop: Header=BB62_175 Depth=3
	jmp	.LBB62_185
.LBB62_185:                             # %for.inc1255
                                        #   in Loop: Header=BB62_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_175
.LBB62_186:                             # %for.end1257
                                        #   in Loop: Header=BB62_173 Depth=2
	movl	$0, -16(%rbp)
.LBB62_187:                             # %for.cond1258
                                        #   Parent Loop BB62_171 Depth=1
                                        #     Parent Loop BB62_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB62_189 Depth 4
                                        #         Child Loop BB62_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB62_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB62_187 Depth=3
	movl	$0, -12(%rbp)
.LBB62_189:                             # %for.cond1262
                                        #   Parent Loop BB62_171 Depth=1
                                        #     Parent Loop BB62_173 Depth=2
                                        #       Parent Loop BB62_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB62_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB62_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB62_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_189
.LBB62_192:                             # %for.end1277
                                        #   in Loop: Header=BB62_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB62_193:                             # %for.cond1296
                                        #   Parent Loop BB62_171 Depth=1
                                        #     Parent Loop BB62_173 Depth=2
                                        #       Parent Loop BB62_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB62_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB62_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB62_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB62_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB62_197
.LBB62_196:                             # %cond.false1311
                                        #   in Loop: Header=BB62_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB62_197:                             # %cond.end1319
                                        #   in Loop: Header=BB62_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB62_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB62_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB62_203
.LBB62_199:                             # %cond.false1325
                                        #   in Loop: Header=BB62_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB62_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB62_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB62_202
.LBB62_201:                             # %cond.false1336
                                        #   in Loop: Header=BB62_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB62_202:                             # %cond.end1344
                                        #   in Loop: Header=BB62_193 Depth=4
.LBB62_203:                             # %cond.end1346
                                        #   in Loop: Header=BB62_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-20(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB62_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB62_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB62_206
.LBB62_205:                             # %cond.false1366
                                        #   in Loop: Header=BB62_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB62_206:                             # %cond.end1374
                                        #   in Loop: Header=BB62_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB62_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB62_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB62_212
.LBB62_208:                             # %cond.false1380
                                        #   in Loop: Header=BB62_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB62_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB62_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB62_211
.LBB62_210:                             # %cond.false1391
                                        #   in Loop: Header=BB62_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB62_211:                             # %cond.end1399
                                        #   in Loop: Header=BB62_193 Depth=4
.LBB62_212:                             # %cond.end1401
                                        #   in Loop: Header=BB62_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB62_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_193
.LBB62_214:                             # %for.end1412
                                        #   in Loop: Header=BB62_187 Depth=3
	jmp	.LBB62_215
.LBB62_215:                             # %for.inc1413
                                        #   in Loop: Header=BB62_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_187
.LBB62_216:                             # %for.end1415
                                        #   in Loop: Header=BB62_173 Depth=2
	jmp	.LBB62_217
.LBB62_217:                             # %for.inc1416
                                        #   in Loop: Header=BB62_173 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB62_173
.LBB62_218:                             # %for.end1418
                                        #   in Loop: Header=BB62_171 Depth=1
	jmp	.LBB62_219
.LBB62_219:                             # %for.inc1419
                                        #   in Loop: Header=BB62_171 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB62_171
.LBB62_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB62_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB62_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB62_221 Depth=1
	movl	$0, -16(%rbp)
.LBB62_223:                             # %for.cond1426
                                        #   Parent Loop BB62_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB62_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB62_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-120(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB62_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_223
.LBB62_226:                             # %for.end1446
                                        #   in Loop: Header=BB62_221 Depth=1
	jmp	.LBB62_227
.LBB62_227:                             # %for.inc1447
                                        #   in Loop: Header=BB62_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_221
.LBB62_228:                             # %for.end1449
	movl	-204(%rbp), %ebx
	cmpl	$582449442, -268(%rbp)  # imm = 0x22B77922
	jne	.LBB62_230
.LBB62_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_229
.Lfunc_end62:
	.size	dct_chroma_sp.53, .Lfunc_end62-dct_chroma_sp.53
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.54         # -- Begin function copyblock_sp.54
	.p2align	4, 0x90
	.type	copyblock_sp.54,@function
copyblock_sp.54:                        # @copyblock_sp.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$2087572613, -92(%rbp)  # imm = 0x7C6DD485
	movl	%edi, -68(%rbp)
	movl	%esi, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -80(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-80(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movl	$0, -4(%rbp)
.LBB63_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB63_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_3:                               # %for.cond4
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB63_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB63_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-68(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB63_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_3
.LBB63_6:                               # %for.end
                                        #   in Loop: Header=BB63_1 Depth=1
	jmp	.LBB63_7
.LBB63_7:                               # %for.inc17
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_1
.LBB63_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB63_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB63_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB63_9 Depth=1
	movl	$0, -8(%rbp)
.LBB63_11:                              # %for.cond24
                                        #   Parent Loop BB63_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB63_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB63_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB63_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_11
.LBB63_14:                              # %for.end53
                                        #   in Loop: Header=BB63_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB63_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_9
.LBB63_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB63_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB63_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB63_17 Depth=1
	movl	$0, -4(%rbp)
.LBB63_19:                              # %for.cond86
                                        #   Parent Loop BB63_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB63_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB63_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB63_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_19
.LBB63_22:                              # %for.end115
                                        #   in Loop: Header=BB63_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB63_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_17
.LBB63_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB63_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB63_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB63_25 Depth=1
	movl	$0, -8(%rbp)
.LBB63_27:                              # %for.cond149
                                        #   Parent Loop BB63_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB63_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB63_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-88(%rbp), %eax
	movl	-72(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-80(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB63_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_27
.LBB63_30:                              # %for.end184
                                        #   in Loop: Header=BB63_25 Depth=1
	jmp	.LBB63_31
.LBB63_31:                              # %for.inc185
                                        #   in Loop: Header=BB63_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_25
.LBB63_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB63_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_35 Depth 2
                                        #     Child Loop BB63_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB63_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB63_33 Depth=1
	movl	$0, -8(%rbp)
.LBB63_35:                              # %for.cond192
                                        #   Parent Loop BB63_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB63_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB63_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB63_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_35
.LBB63_38:                              # %for.end205
                                        #   in Loop: Header=BB63_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB63_39:                              # %for.cond224
                                        #   Parent Loop BB63_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB63_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB63_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB63_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_39
.LBB63_42:                              # %for.end251
                                        #   in Loop: Header=BB63_33 Depth=1
	jmp	.LBB63_43
.LBB63_43:                              # %for.inc252
                                        #   in Loop: Header=BB63_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_33
.LBB63_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB63_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_47 Depth 2
                                        #     Child Loop BB63_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB63_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB63_45 Depth=1
	movl	$0, -4(%rbp)
.LBB63_47:                              # %for.cond259
                                        #   Parent Loop BB63_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB63_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB63_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB63_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_47
.LBB63_50:                              # %for.end272
                                        #   in Loop: Header=BB63_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB63_51:                              # %for.cond291
                                        #   Parent Loop BB63_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB63_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB63_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB63_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB63_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB63_55
.LBB63_54:                              # %cond.false
                                        #   in Loop: Header=BB63_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB63_55:                              # %cond.end
                                        #   in Loop: Header=BB63_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB63_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB63_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_61
.LBB63_57:                              # %cond.false316
                                        #   in Loop: Header=BB63_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB63_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB63_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB63_60
.LBB63_59:                              # %cond.false327
                                        #   in Loop: Header=BB63_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB63_60:                              # %cond.end335
                                        #   in Loop: Header=BB63_51 Depth=2
.LBB63_61:                              # %cond.end337
                                        #   in Loop: Header=BB63_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB63_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB63_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB63_64
.LBB63_63:                              # %cond.false355
                                        #   in Loop: Header=BB63_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB63_64:                              # %cond.end363
                                        #   in Loop: Header=BB63_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB63_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB63_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_70
.LBB63_66:                              # %cond.false369
                                        #   in Loop: Header=BB63_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB63_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB63_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB63_69
.LBB63_68:                              # %cond.false380
                                        #   in Loop: Header=BB63_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB63_69:                              # %cond.end388
                                        #   in Loop: Header=BB63_51 Depth=2
.LBB63_70:                              # %cond.end390
                                        #   in Loop: Header=BB63_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB63_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_51
.LBB63_72:                              # %for.end399
                                        #   in Loop: Header=BB63_45 Depth=1
	jmp	.LBB63_73
.LBB63_73:                              # %for.inc400
                                        #   in Loop: Header=BB63_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_45
.LBB63_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB63_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB63_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB63_75 Depth=1
	movl	$0, -8(%rbp)
.LBB63_77:                              # %for.cond407
                                        #   Parent Loop BB63_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB63_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB63_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-84(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-68(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB63_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_77
.LBB63_80:                              # %for.end427
                                        #   in Loop: Header=BB63_75 Depth=1
	jmp	.LBB63_81
.LBB63_81:                              # %for.inc428
                                        #   in Loop: Header=BB63_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_75
.LBB63_82:                              # %for.end430
	cmpl	$2087572613, -92(%rbp)  # imm = 0x7C6DD485
	jne	.LBB63_84
.LBB63_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_83
.Lfunc_end63:
	.size	copyblock_sp.54, .Lfunc_end63-copyblock_sp.54
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.55        # -- Begin function dct_chroma4x4.55
	.p2align	4, 0x90
	.type	dct_chroma4x4.55,@function
dct_chroma4x4.55:                       # @dct_chroma4x4.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$853979350, -148(%rbp)  # imm = 0x32E6B0D6
	movl	%edi, -28(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -104(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB64_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB64_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB64_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB64_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB64_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-28(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -84(%rbp)
	jge	.LBB64_7
# %bb.6:                                # %cond.true
	movl	-84(%rbp), %eax
	jmp	.LBB64_8
.LBB64_7:                               # %cond.false
	movl	-84(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB64_8:                               # %cond.end
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB64_18
# %bb.9:                                # %if.then
	movl	$0, -16(%rbp)
.LBB64_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_12 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB64_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB64_10 Depth=1
	movl	$0, -12(%rbp)
.LBB64_12:                              # %for.cond31
                                        #   Parent Loop BB64_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB64_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB64_12 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB64_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_12
.LBB64_15:                              # %for.end
                                        #   in Loop: Header=BB64_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB64_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_10
.LBB64_17:                              # %for.end92
	jmp	.LBB64_18
.LBB64_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB64_28
# %bb.19:                               # %if.then94
	movl	$0, -12(%rbp)
.LBB64_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_22 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB64_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB64_20 Depth=1
	movl	$0, -16(%rbp)
.LBB64_22:                              # %for.cond99
                                        #   Parent Loop BB64_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB64_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB64_22 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB64_22 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_22
.LBB64_25:                              # %for.end132
                                        #   in Loop: Header=BB64_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB64_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_20
.LBB64_27:                              # %for.end165
	jmp	.LBB64_28
.LBB64_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB64_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB64_34
.LBB64_30:                              # %if.else
	cmpl	$1, -88(%rbp)
	jne	.LBB64_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB64_33
.LBB64_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB64_33:                              # %if.end213
	jmp	.LBB64_34
.LBB64_34:                              # %if.end214
	movl	-28(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-76(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -76(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-104(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-76(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-104(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB64_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB64_46
.LBB64_36:                              # %if.else245
	cmpl	$4, -24(%rbp)
	jge	.LBB64_41
# %bb.37:                               # %if.then248
	cmpl	$1, -88(%rbp)
	jne	.LBB64_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB64_40
.LBB64_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB64_40:                              # %if.end290
	jmp	.LBB64_45
.LBB64_41:                              # %if.else291
	cmpl	$1, -88(%rbp)
	jne	.LBB64_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB64_44
.LBB64_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB64_44:                              # %if.end328
	jmp	.LBB64_45
.LBB64_45:                              # %if.end329
	jmp	.LBB64_46
.LBB64_46:                              # %if.end330
	movl	$1, -96(%rbp)
.LBB64_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -96(%rbp)
	jge	.LBB64_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB64_47 Depth=1
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -80(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB64_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB64_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB64_54
.LBB64_50:                              # %if.else352
                                        #   in Loop: Header=BB64_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB64_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB64_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB64_53
.LBB64_52:                              # %if.else381
                                        #   in Loop: Header=BB64_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB64_53:                              # %if.end407
                                        #   in Loop: Header=BB64_47 Depth=1
	jmp	.LBB64_54
.LBB64_54:                              # %if.end408
                                        #   in Loop: Header=BB64_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB64_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB64_47 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB64_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB64_47 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB64_58
.LBB64_57:                              # %if.then415
                                        #   in Loop: Header=BB64_47 Depth=1
	movl	$1, -132(%rbp)
.LBB64_58:                              # %if.end416
                                        #   in Loop: Header=BB64_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -100(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB64_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB64_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB64_70
.LBB64_60:                              # %if.else436
                                        #   in Loop: Header=BB64_47 Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB64_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB64_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB64_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB64_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB64_64
.LBB64_63:                              # %if.else457
                                        #   in Loop: Header=BB64_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -80(%rbp)
.LBB64_64:                              # %if.end472
                                        #   in Loop: Header=BB64_47 Depth=1
	jmp	.LBB64_69
.LBB64_65:                              # %if.else473
                                        #   in Loop: Header=BB64_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB64_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB64_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB64_68
.LBB64_67:                              # %if.else488
                                        #   in Loop: Header=BB64_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -80(%rbp)
.LBB64_68:                              # %if.end500
                                        #   in Loop: Header=BB64_47 Depth=1
	jmp	.LBB64_69
.LBB64_69:                              # %if.end501
                                        #   in Loop: Header=BB64_47 Depth=1
	jmp	.LBB64_70
.LBB64_70:                              # %if.end502
                                        #   in Loop: Header=BB64_47 Depth=1
	jmp	.LBB64_71
.LBB64_71:                              # %if.end503
                                        #   in Loop: Header=BB64_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB64_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB64_47 Depth=1
	movl	-80(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB64_73:                              # %if.end511
                                        #   in Loop: Header=BB64_47 Depth=1
	jmp	.LBB64_74
.LBB64_74:                              # %for.inc512
                                        #   in Loop: Header=BB64_47 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB64_47
.LBB64_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB64_89
# %bb.76:                               # %if.then518
	movl	$0, -16(%rbp)
.LBB64_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_79 Depth 2
                                        #     Child Loop BB64_83 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB64_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB64_77 Depth=1
	movl	$0, -12(%rbp)
.LBB64_79:                              # %for.cond523
                                        #   Parent Loop BB64_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB64_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB64_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB64_79 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_79
.LBB64_82:                              # %for.end536
                                        #   in Loop: Header=BB64_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB64_83:                              # %for.cond555
                                        #   Parent Loop BB64_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB64_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB64_83 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB64_83 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_83
.LBB64_86:                              # %for.end582
                                        #   in Loop: Header=BB64_77 Depth=1
	jmp	.LBB64_87
.LBB64_87:                              # %for.inc583
                                        #   in Loop: Header=BB64_77 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_77
.LBB64_88:                              # %for.end585
	jmp	.LBB64_89
.LBB64_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB64_103
# %bb.90:                               # %if.then588
	movl	$0, -12(%rbp)
.LBB64_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_93 Depth 2
                                        #     Child Loop BB64_97 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB64_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB64_91 Depth=1
	movl	$0, -16(%rbp)
.LBB64_93:                              # %for.cond593
                                        #   Parent Loop BB64_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB64_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB64_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB64_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_93
.LBB64_96:                              # %for.end606
                                        #   in Loop: Header=BB64_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB64_97:                              # %for.cond625
                                        #   Parent Loop BB64_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB64_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB64_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB64_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_97
.LBB64_100:                             # %for.end656
                                        #   in Loop: Header=BB64_91 Depth=1
	jmp	.LBB64_101
.LBB64_101:                             # %for.inc657
                                        #   in Loop: Header=BB64_91 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_91
.LBB64_102:                             # %for.end659
	jmp	.LBB64_103
.LBB64_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$853979350, -148(%rbp)  # imm = 0x32E6B0D6
	jne	.LBB64_105
.LBB64_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_104
.Lfunc_end64:
	.size	dct_chroma4x4.55, .Lfunc_end64-dct_chroma4x4.55
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.56       # -- Begin function intrapred_luma.56
	.p2align	4, 0x90
	.type	intrapred_luma.56,@function
intrapred_luma.56:                      # @intrapred_luma.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$1198005339, -172(%rbp) # imm = 0x47681C5B
	movl	%edi, -112(%rbp)
	movl	%esi, -116(%rbp)
	movq	%rdx, -200(%rbp)
	movq	%rcx, -192(%rbp)
	movq	%r8, -184(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -100(%rbp)
	movl	$0, -4(%rbp)
.LBB65_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB65_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_1
.LBB65_4:                               # %for.end
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	addl	$4, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-224(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB65_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -84(%rbp)
	je	.LBB65_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -84(%rbp)
	jne	.LBB65_10
.LBB65_7:                               # %land.rhs10
	cmpl	$4, -88(%rbp)
	movb	$1, %al
	je	.LBB65_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -88(%rbp)
	sete	%al
.LBB65_9:                               # %lor.end
.LBB65_10:                              # %land.end
	xorb	$-1, %al
.LBB65_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB65_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB65_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB65_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB65_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB65_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB65_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB65_17
.LBB65_16:                              # %cond.false
                                        #   in Loop: Header=BB65_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_17
.LBB65_17:                              # %cond.end
                                        #   in Loop: Header=BB65_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB65_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_13
.LBB65_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB65_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB65_22
.LBB65_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB65_22
.LBB65_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB65_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB65_25
.LBB65_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB65_25
.LBB65_25:                              # %cond.end49
	movl	%eax, -108(%rbp)
	cmpl	$0, -224(%rbp)
	je	.LBB65_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-220(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB65_28
.LBB65_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB65_28
.LBB65_28:                              # %cond.end59
	movl	%eax, -104(%rbp)
	jmp	.LBB65_30
.LBB65_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-224(%rbp), %eax
	movl	%eax, -104(%rbp)
.LBB65_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-200(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-192(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB65_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB65_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -104(%rbp)
	setne	%al
.LBB65_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB65_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB65_36
.LBB65_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB65_36:                              # %if.end114
	cmpl	$0, -108(%rbp)
	je	.LBB65_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB65_39
.LBB65_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB65_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB65_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_42
.LBB65_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB65_42:                              # %if.end208
	cmpl	$0, -104(%rbp)
	je	.LBB65_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-208(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB65_45
.LBB65_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB65_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB65_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB65_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB65_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB65_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_46
.LBB65_49:                              # %for.end233
	movl	$0, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB65_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB65_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB65_61
.LBB65_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB65_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB65_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB65_60
.LBB65_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB65_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB65_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB65_59
.LBB65_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -96(%rbp)
.LBB65_59:                              # %if.end284
	jmp	.LBB65_60
.LBB65_60:                              # %if.end285
	jmp	.LBB65_61
.LBB65_61:                              # %if.end286
	movl	$0, -92(%rbp)
.LBB65_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_64 Depth 2
	cmpl	$4, -92(%rbp)
	jge	.LBB65_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB65_62 Depth=1
	movl	$0, -4(%rbp)
.LBB65_64:                              # %for.cond291
                                        #   Parent Loop BB65_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB65_64 Depth=2
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-92(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB65_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_64
.LBB65_67:                              # %for.end304
                                        #   in Loop: Header=BB65_62 Depth=1
	jmp	.LBB65_68
.LBB65_68:                              # %for.inc305
                                        #   in Loop: Header=BB65_62 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB65_62
.LBB65_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB65_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB65_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB65_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB65_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_70
.LBB65_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB65_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB65_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB65_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB65_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB65_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB65_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB65_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB65_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB65_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB65_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -104(%rbp)
	je	.LBB65_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB65_85:                              # %if.end1174
	cmpl	$1198005339, -172(%rbp) # imm = 0x47681C5B
	jne	.LBB65_87
.LBB65_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_86
.Lfunc_end65:
	.size	intrapred_luma.56, .Lfunc_end65-intrapred_luma.56
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.57        # -- Begin function dct_chroma4x4.57
	.p2align	4, 0x90
	.type	dct_chroma4x4.57,@function
dct_chroma4x4.57:                       # @dct_chroma4x4.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1233762152, -148(%rbp) # imm = 0x4989B768
	movl	%edi, -24(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -104(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB66_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB66_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB66_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -80(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB66_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB66_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-24(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -76(%rbp)
	cmpl	$0, -76(%rbp)
	jge	.LBB66_7
# %bb.6:                                # %cond.true
	movl	-76(%rbp), %eax
	jmp	.LBB66_8
.LBB66_7:                               # %cond.false
	movl	-76(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB66_8:                               # %cond.end
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB66_18
# %bb.9:                                # %if.then
	movl	$0, -16(%rbp)
.LBB66_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_12 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB66_10 Depth=1
	movl	$0, -12(%rbp)
.LBB66_12:                              # %for.cond31
                                        #   Parent Loop BB66_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB66_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB66_12 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB66_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_12
.LBB66_15:                              # %for.end
                                        #   in Loop: Header=BB66_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB66_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_10
.LBB66_17:                              # %for.end92
	jmp	.LBB66_18
.LBB66_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB66_28
# %bb.19:                               # %if.then94
	movl	$0, -12(%rbp)
.LBB66_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_22 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB66_20 Depth=1
	movl	$0, -16(%rbp)
.LBB66_22:                              # %for.cond99
                                        #   Parent Loop BB66_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB66_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB66_22 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB66_22 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_22
.LBB66_25:                              # %for.end132
                                        #   in Loop: Header=BB66_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB66_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_20
.LBB66_27:                              # %for.end165
	jmp	.LBB66_28
.LBB66_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB66_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB66_34
.LBB66_30:                              # %if.else
	cmpl	$1, -80(%rbp)
	jne	.LBB66_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_33
.LBB66_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB66_33:                              # %if.end213
	jmp	.LBB66_34
.LBB66_34:                              # %if.end214
	movl	-24(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-88(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-88(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-104(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-88(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-104(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB66_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB66_46
.LBB66_36:                              # %if.else245
	cmpl	$4, -28(%rbp)
	jge	.LBB66_41
# %bb.37:                               # %if.then248
	cmpl	$1, -80(%rbp)
	jne	.LBB66_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB66_40
.LBB66_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB66_40:                              # %if.end290
	jmp	.LBB66_45
.LBB66_41:                              # %if.else291
	cmpl	$1, -80(%rbp)
	jne	.LBB66_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB66_44
.LBB66_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB66_44:                              # %if.end328
	jmp	.LBB66_45
.LBB66_45:                              # %if.end329
	jmp	.LBB66_46
.LBB66_46:                              # %if.end330
	movl	$1, -92(%rbp)
.LBB66_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -92(%rbp)
	jge	.LBB66_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB66_47 Depth=1
	movslq	-92(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movslq	-92(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -84(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB66_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB66_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB66_54
.LBB66_50:                              # %if.else352
                                        #   in Loop: Header=BB66_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB66_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB66_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_53
.LBB66_52:                              # %if.else381
                                        #   in Loop: Header=BB66_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB66_53:                              # %if.end407
                                        #   in Loop: Header=BB66_47 Depth=1
	jmp	.LBB66_54
.LBB66_54:                              # %if.end408
                                        #   in Loop: Header=BB66_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB66_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB66_47 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB66_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB66_47 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB66_58
.LBB66_57:                              # %if.then415
                                        #   in Loop: Header=BB66_47 Depth=1
	movl	$1, -132(%rbp)
.LBB66_58:                              # %if.end416
                                        #   in Loop: Header=BB66_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	$-1, -100(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB66_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB66_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB66_70
.LBB66_60:                              # %if.else436
                                        #   in Loop: Header=BB66_47 Depth=1
	cmpl	$4, -28(%rbp)
	jge	.LBB66_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB66_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB66_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB66_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB66_64
.LBB66_63:                              # %if.else457
                                        #   in Loop: Header=BB66_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -84(%rbp)
.LBB66_64:                              # %if.end472
                                        #   in Loop: Header=BB66_47 Depth=1
	jmp	.LBB66_69
.LBB66_65:                              # %if.else473
                                        #   in Loop: Header=BB66_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB66_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB66_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB66_68
.LBB66_67:                              # %if.else488
                                        #   in Loop: Header=BB66_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
.LBB66_68:                              # %if.end500
                                        #   in Loop: Header=BB66_47 Depth=1
	jmp	.LBB66_69
.LBB66_69:                              # %if.end501
                                        #   in Loop: Header=BB66_47 Depth=1
	jmp	.LBB66_70
.LBB66_70:                              # %if.end502
                                        #   in Loop: Header=BB66_47 Depth=1
	jmp	.LBB66_71
.LBB66_71:                              # %if.end503
                                        #   in Loop: Header=BB66_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB66_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB66_47 Depth=1
	movl	-84(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB66_73:                              # %if.end511
                                        #   in Loop: Header=BB66_47 Depth=1
	jmp	.LBB66_74
.LBB66_74:                              # %for.inc512
                                        #   in Loop: Header=BB66_47 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB66_47
.LBB66_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-96(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB66_89
# %bb.76:                               # %if.then518
	movl	$0, -16(%rbp)
.LBB66_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_79 Depth 2
                                        #     Child Loop BB66_83 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB66_77 Depth=1
	movl	$0, -12(%rbp)
.LBB66_79:                              # %for.cond523
                                        #   Parent Loop BB66_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB66_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB66_79 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_79
.LBB66_82:                              # %for.end536
                                        #   in Loop: Header=BB66_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB66_83:                              # %for.cond555
                                        #   Parent Loop BB66_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB66_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB66_83 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB66_83 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_83
.LBB66_86:                              # %for.end582
                                        #   in Loop: Header=BB66_77 Depth=1
	jmp	.LBB66_87
.LBB66_87:                              # %for.inc583
                                        #   in Loop: Header=BB66_77 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_77
.LBB66_88:                              # %for.end585
	jmp	.LBB66_89
.LBB66_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB66_103
# %bb.90:                               # %if.then588
	movl	$0, -12(%rbp)
.LBB66_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_93 Depth 2
                                        #     Child Loop BB66_97 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB66_91 Depth=1
	movl	$0, -16(%rbp)
.LBB66_93:                              # %for.cond593
                                        #   Parent Loop BB66_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB66_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB66_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_93
.LBB66_96:                              # %for.end606
                                        #   in Loop: Header=BB66_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB66_97:                              # %for.cond625
                                        #   Parent Loop BB66_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB66_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB66_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB66_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_97
.LBB66_100:                             # %for.end656
                                        #   in Loop: Header=BB66_91 Depth=1
	jmp	.LBB66_101
.LBB66_101:                             # %for.inc657
                                        #   in Loop: Header=BB66_91 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_91
.LBB66_102:                             # %for.end659
	jmp	.LBB66_103
.LBB66_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$1233762152, -148(%rbp) # imm = 0x4989B768
	jne	.LBB66_105
.LBB66_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_104
.Lfunc_end66:
	.size	dct_chroma4x4.57, .Lfunc_end66-dct_chroma4x4.57
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.58
.LCPI67_0:
	.quad	4616189618054758400     # double 4
.LCPI67_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI67_2:
	.quad	4611686018427387904     # double 2
.LCPI67_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.58
	.p2align	4, 0x90
	.type	dct_chroma_sp.58,@function
dct_chroma_sp.58:                       # @dct_chroma_sp.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI67_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI67_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$21472602, -268(%rbp)   # imm = 0x147A55A
	movl	%edi, -124(%rbp)
	movl	%esi, -208(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -200(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI67_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI67_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB67_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB67_6
.LBB67_2:                               # %cond.false
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB67_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB67_5
.LBB67_4:                               # %cond.false19
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB67_5:                               # %cond.end
.LBB67_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB67_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB67_12
.LBB67_8:                               # %cond.false30
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB67_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB67_11
.LBB67_10:                              # %cond.false37
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB67_11:                              # %cond.end41
.LBB67_12:                              # %cond.end43
	movl	%eax, -224(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB67_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB67_15
.LBB67_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB67_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -116(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB67_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB67_18
.LBB67_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB67_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-116(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -204(%rbp)
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -220(%rbp)
	cmpl	$0, -224(%rbp)
	jge	.LBB67_20
# %bb.19:                               # %cond.true70
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB67_21
.LBB67_20:                              # %cond.false72
	movslq	-224(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB67_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -228(%rbp)
	cmpl	$0, -224(%rbp)
	jge	.LBB67_23
# %bb.22:                               # %cond.true82
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB67_24
.LBB67_23:                              # %cond.false84
	movslq	-224(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB67_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-228(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -216(%rbp)
	movl	$0, -12(%rbp)
.LBB67_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB67_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB67_25 Depth=1
	movl	$0, -16(%rbp)
.LBB67_27:                              # %for.cond97
                                        #   Parent Loop BB67_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB67_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB67_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB67_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_27
.LBB67_30:                              # %for.end
                                        #   in Loop: Header=BB67_25 Depth=1
	jmp	.LBB67_31
.LBB67_31:                              # %for.inc121
                                        #   in Loop: Header=BB67_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_25
.LBB67_32:                              # %for.end123
	movl	$0, -20(%rbp)
.LBB67_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_35 Depth 2
                                        #       Child Loop BB67_37 Depth 3
                                        #         Child Loop BB67_39 Depth 4
                                        #       Child Loop BB67_45 Depth 3
                                        #         Child Loop BB67_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB67_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB67_33 Depth=1
	movl	$0, -24(%rbp)
.LBB67_35:                              # %for.cond128
                                        #   Parent Loop BB67_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_37 Depth 3
                                        #         Child Loop BB67_39 Depth 4
                                        #       Child Loop BB67_45 Depth 3
                                        #         Child Loop BB67_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB67_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB67_35 Depth=2
	movl	$0, -12(%rbp)
.LBB67_37:                              # %for.cond132
                                        #   Parent Loop BB67_33 Depth=1
                                        #     Parent Loop BB67_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB67_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB67_37 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB67_39:                              # %for.cond137
                                        #   Parent Loop BB67_33 Depth=1
                                        #     Parent Loop BB67_35 Depth=2
                                        #       Parent Loop BB67_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB67_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB67_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB67_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_39
.LBB67_42:                              # %for.end174
                                        #   in Loop: Header=BB67_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB67_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_37
.LBB67_44:                              # %for.end214
                                        #   in Loop: Header=BB67_35 Depth=2
	movl	$0, -16(%rbp)
.LBB67_45:                              # %for.cond215
                                        #   Parent Loop BB67_33 Depth=1
                                        #     Parent Loop BB67_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB67_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB67_45 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB67_47:                              # %for.cond220
                                        #   Parent Loop BB67_33 Depth=1
                                        #     Parent Loop BB67_35 Depth=2
                                        #       Parent Loop BB67_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB67_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB67_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB67_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_47
.LBB67_50:                              # %for.end257
                                        #   in Loop: Header=BB67_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB67_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_45
.LBB67_52:                              # %for.end298
                                        #   in Loop: Header=BB67_35 Depth=2
	jmp	.LBB67_53
.LBB67_53:                              # %for.inc299
                                        #   in Loop: Header=BB67_35 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_35
.LBB67_54:                              # %for.end301
                                        #   in Loop: Header=BB67_33 Depth=1
	jmp	.LBB67_55
.LBB67_55:                              # %for.inc302
                                        #   in Loop: Header=BB67_33 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_33
.LBB67_56:                              # %for.end304
	movl	$0, -20(%rbp)
.LBB67_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_59 Depth 2
                                        #       Child Loop BB67_61 Depth 3
                                        #         Child Loop BB67_63 Depth 4
                                        #       Child Loop BB67_69 Depth 3
                                        #         Child Loop BB67_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB67_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB67_57 Depth=1
	movl	$0, -24(%rbp)
.LBB67_59:                              # %for.cond309
                                        #   Parent Loop BB67_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_61 Depth 3
                                        #         Child Loop BB67_63 Depth 4
                                        #       Child Loop BB67_69 Depth 3
                                        #         Child Loop BB67_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB67_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB67_59 Depth=2
	movl	$0, -12(%rbp)
.LBB67_61:                              # %for.cond313
                                        #   Parent Loop BB67_57 Depth=1
                                        #     Parent Loop BB67_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB67_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB67_61 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB67_63:                              # %for.cond318
                                        #   Parent Loop BB67_57 Depth=1
                                        #     Parent Loop BB67_59 Depth=2
                                        #       Parent Loop BB67_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB67_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB67_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-88(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB67_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_63
.LBB67_66:                              # %for.end351
                                        #   in Loop: Header=BB67_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB67_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_61
.LBB67_68:                              # %for.end387
                                        #   in Loop: Header=BB67_59 Depth=2
	movl	$0, -16(%rbp)
.LBB67_69:                              # %for.cond388
                                        #   Parent Loop BB67_57 Depth=1
                                        #     Parent Loop BB67_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB67_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB67_69 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB67_71:                              # %for.cond393
                                        #   Parent Loop BB67_57 Depth=1
                                        #     Parent Loop BB67_59 Depth=2
                                        #       Parent Loop BB67_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB67_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB67_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB67_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_71
.LBB67_74:                              # %for.end426
                                        #   in Loop: Header=BB67_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB67_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_69
.LBB67_76:                              # %for.end463
                                        #   in Loop: Header=BB67_59 Depth=2
	jmp	.LBB67_77
.LBB67_77:                              # %for.inc464
                                        #   in Loop: Header=BB67_59 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_59
.LBB67_78:                              # %for.end466
                                        #   in Loop: Header=BB67_57 Depth=1
	jmp	.LBB67_79
.LBB67_79:                              # %for.inc467
                                        #   in Loop: Header=BB67_57 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_57
.LBB67_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -32(%rbp)
.LBB67_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB67_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -92(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -44(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	je	.LBB67_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB67_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB67_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB67_81 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB67_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB67_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-44(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-112(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-40(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-112(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-192(%rbp), %xmm0
	jne	.LBB67_90
	jp	.LBB67_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-40(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB67_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB67_89
.LBB67_88:                              # %cond.false691
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	-40(%rbp), %eax
.LBB67_89:                              # %cond.end692
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB67_94
.LBB67_90:                              # %if.else
                                        #   in Loop: Header=BB67_81 Depth=1
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-192(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB67_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB67_93
.LBB67_92:                              # %if.else697
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB67_93:                              # %if.end
                                        #   in Loop: Header=BB67_81 Depth=1
	jmp	.LBB67_94
.LBB67_94:                              # %if.end698
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB67_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB67_97
.LBB67_96:                              # %cond.false702
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	-100(%rbp), %eax
.LBB67_97:                              # %cond.end703
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	%eax, -104(%rbp)
	jmp	.LBB67_108
.LBB67_98:                              # %if.else705
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB67_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB67_107
.LBB67_100:                             # %if.else709
                                        #   in Loop: Header=BB67_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB67_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB67_103
.LBB67_102:                             # %cond.false713
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	-40(%rbp), %eax
.LBB67_103:                             # %cond.end714
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB67_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB67_106
.LBB67_105:                             # %cond.false719
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	-100(%rbp), %eax
.LBB67_106:                             # %cond.end720
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	%eax, -104(%rbp)
.LBB67_107:                             # %if.end722
                                        #   in Loop: Header=BB67_81 Depth=1
	jmp	.LBB67_108
.LBB67_108:                             # %if.end723
                                        #   in Loop: Header=BB67_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB67_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB67_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB67_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB67_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB67_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB67_112:                             # %if.end734
                                        #   in Loop: Header=BB67_81 Depth=1
	jmp	.LBB67_113
.LBB67_113:                             # %if.end735
                                        #   in Loop: Header=BB67_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB67_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-200(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-208(%rbp), %eax
	jle	.LBB67_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	$1, %eax
	jmp	.LBB67_117
.LBB67_116:                             # %cond.false745
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	-208(%rbp), %eax
.LBB67_117:                             # %cond.end746
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	%eax, -208(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -92(%rbp)
.LBB67_118:                             # %if.end763
                                        #   in Loop: Header=BB67_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-92(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-228(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB67_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB67_81
.LBB67_120:                             # %for.end788
	movq	-280(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -212(%rbp)
	movl	$0, -240(%rbp)
	movl	$0, -20(%rbp)
.LBB67_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_123 Depth 2
                                        #       Child Loop BB67_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB67_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB67_121 Depth=1
	movl	$0, -24(%rbp)
.LBB67_123:                             # %for.cond839
                                        #   Parent Loop BB67_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB67_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB67_123 Depth=2
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -236(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$1, -32(%rbp)
.LBB67_125:                             # %for.cond860
                                        #   Parent Loop BB67_121 Depth=1
                                        #     Parent Loop BB67_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB67_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB67_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB67_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB67_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB67_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB67_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB67_130
.LBB67_129:                             # %if.then867
                                        #   in Loop: Header=BB67_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_131
.LBB67_130:                             # %if.else876
                                        #   in Loop: Header=BB67_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB67_131:                             # %if.end885
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -44(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	je	.LBB67_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB67_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB67_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB67_125 Depth=3
	cmpl	$0, -40(%rbp)
	je	.LBB67_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB67_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-44(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-112(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-40(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-112(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-192(%rbp), %xmm0
	jne	.LBB67_139
	jp	.LBB67_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-40(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB67_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB67_138
.LBB67_137:                             # %cond.false1047
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	-40(%rbp), %eax
.LBB67_138:                             # %cond.end1048
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB67_143
.LBB67_139:                             # %if.else1050
                                        #   in Loop: Header=BB67_125 Depth=3
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-192(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB67_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB67_142
.LBB67_141:                             # %if.else1054
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB67_142:                             # %if.end1055
                                        #   in Loop: Header=BB67_125 Depth=3
	jmp	.LBB67_143
.LBB67_143:                             # %if.end1056
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB67_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	-44(%rbp), %eax
	jmp	.LBB67_146
.LBB67_145:                             # %cond.false1060
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	-100(%rbp), %eax
.LBB67_146:                             # %cond.end1061
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	%eax, -104(%rbp)
	jmp	.LBB67_157
.LBB67_147:                             # %if.else1063
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB67_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB67_156
.LBB67_149:                             # %if.else1067
                                        #   in Loop: Header=BB67_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB67_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB67_152
.LBB67_151:                             # %cond.false1071
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	-40(%rbp), %eax
.LBB67_152:                             # %cond.end1072
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB67_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	-44(%rbp), %eax
	jmp	.LBB67_155
.LBB67_154:                             # %cond.false1077
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	-100(%rbp), %eax
.LBB67_155:                             # %cond.end1078
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	%eax, -104(%rbp)
.LBB67_156:                             # %if.end1080
                                        #   in Loop: Header=BB67_125 Depth=3
	jmp	.LBB67_157
.LBB67_157:                             # %if.end1081
                                        #   in Loop: Header=BB67_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB67_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	-24(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-200(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB67_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	-212(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -212(%rbp)
	jmp	.LBB67_161
.LBB67_160:                             # %if.else1099
                                        #   in Loop: Header=BB67_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-212(%rbp), %eax
	movl	%eax, -212(%rbp)
.LBB67_161:                             # %if.end1106
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	$2, -240(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -92(%rbp)
.LBB67_162:                             # %if.end1128
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-92(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-228(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB67_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB67_125
.LBB67_164:                             # %for.end1164
                                        #   in Loop: Header=BB67_123 Depth=2
	movq	-288(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB67_123 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_123
.LBB67_166:                             # %for.end1169
                                        #   in Loop: Header=BB67_121 Depth=1
	jmp	.LBB67_167
.LBB67_167:                             # %for.inc1170
                                        #   in Loop: Header=BB67_121 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_121
.LBB67_168:                             # %for.end1172
	cmpl	$2, -240(%rbp)
	jne	.LBB67_170
# %bb.169:                              # %if.then1175
	movl	$2, -208(%rbp)
.LBB67_170:                             # %if.end1176
	movl	$0, -20(%rbp)
.LBB67_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_173 Depth 2
                                        #       Child Loop BB67_175 Depth 3
                                        #         Child Loop BB67_177 Depth 4
                                        #         Child Loop BB67_181 Depth 4
                                        #       Child Loop BB67_187 Depth 3
                                        #         Child Loop BB67_189 Depth 4
                                        #         Child Loop BB67_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB67_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	$0, -24(%rbp)
.LBB67_173:                             # %for.cond1181
                                        #   Parent Loop BB67_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_175 Depth 3
                                        #         Child Loop BB67_177 Depth 4
                                        #         Child Loop BB67_181 Depth 4
                                        #       Child Loop BB67_187 Depth 3
                                        #         Child Loop BB67_189 Depth 4
                                        #         Child Loop BB67_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB67_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB67_173 Depth=2
	movl	$0, -12(%rbp)
.LBB67_175:                             # %for.cond1185
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_177 Depth 4
                                        #         Child Loop BB67_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB67_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB67_175 Depth=3
	movl	$0, -16(%rbp)
.LBB67_177:                             # %for.cond1189
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_173 Depth=2
                                        #       Parent Loop BB67_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB67_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB67_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB67_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_177
.LBB67_180:                             # %for.end1204
                                        #   in Loop: Header=BB67_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB67_181:                             # %for.cond1223
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_173 Depth=2
                                        #       Parent Loop BB67_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB67_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB67_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-88(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB67_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_181
.LBB67_184:                             # %for.end1254
                                        #   in Loop: Header=BB67_175 Depth=3
	jmp	.LBB67_185
.LBB67_185:                             # %for.inc1255
                                        #   in Loop: Header=BB67_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_175
.LBB67_186:                             # %for.end1257
                                        #   in Loop: Header=BB67_173 Depth=2
	movl	$0, -16(%rbp)
.LBB67_187:                             # %for.cond1258
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_189 Depth 4
                                        #         Child Loop BB67_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB67_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB67_187 Depth=3
	movl	$0, -12(%rbp)
.LBB67_189:                             # %for.cond1262
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_173 Depth=2
                                        #       Parent Loop BB67_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB67_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB67_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB67_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_189
.LBB67_192:                             # %for.end1277
                                        #   in Loop: Header=BB67_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB67_193:                             # %for.cond1296
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_173 Depth=2
                                        #       Parent Loop BB67_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB67_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB67_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB67_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB67_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB67_197
.LBB67_196:                             # %cond.false1311
                                        #   in Loop: Header=BB67_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB67_197:                             # %cond.end1319
                                        #   in Loop: Header=BB67_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB67_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB67_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB67_203
.LBB67_199:                             # %cond.false1325
                                        #   in Loop: Header=BB67_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB67_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB67_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB67_202
.LBB67_201:                             # %cond.false1336
                                        #   in Loop: Header=BB67_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB67_202:                             # %cond.end1344
                                        #   in Loop: Header=BB67_193 Depth=4
.LBB67_203:                             # %cond.end1346
                                        #   in Loop: Header=BB67_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB67_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB67_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB67_206
.LBB67_205:                             # %cond.false1366
                                        #   in Loop: Header=BB67_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB67_206:                             # %cond.end1374
                                        #   in Loop: Header=BB67_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB67_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB67_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB67_212
.LBB67_208:                             # %cond.false1380
                                        #   in Loop: Header=BB67_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB67_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB67_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB67_211
.LBB67_210:                             # %cond.false1391
                                        #   in Loop: Header=BB67_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB67_211:                             # %cond.end1399
                                        #   in Loop: Header=BB67_193 Depth=4
.LBB67_212:                             # %cond.end1401
                                        #   in Loop: Header=BB67_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB67_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_193
.LBB67_214:                             # %for.end1412
                                        #   in Loop: Header=BB67_187 Depth=3
	jmp	.LBB67_215
.LBB67_215:                             # %for.inc1413
                                        #   in Loop: Header=BB67_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_187
.LBB67_216:                             # %for.end1415
                                        #   in Loop: Header=BB67_173 Depth=2
	jmp	.LBB67_217
.LBB67_217:                             # %for.inc1416
                                        #   in Loop: Header=BB67_173 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_173
.LBB67_218:                             # %for.end1418
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_219
.LBB67_219:                             # %for.inc1419
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_171
.LBB67_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB67_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB67_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB67_221 Depth=1
	movl	$0, -16(%rbp)
.LBB67_223:                             # %for.cond1426
                                        #   Parent Loop BB67_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB67_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB67_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-124(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB67_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_223
.LBB67_226:                             # %for.end1446
                                        #   in Loop: Header=BB67_221 Depth=1
	jmp	.LBB67_227
.LBB67_227:                             # %for.inc1447
                                        #   in Loop: Header=BB67_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_221
.LBB67_228:                             # %for.end1449
	movl	-208(%rbp), %ebx
	cmpl	$21472602, -268(%rbp)   # imm = 0x147A55A
	jne	.LBB67_230
.LBB67_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_229
.Lfunc_end67:
	.size	dct_chroma_sp.58, .Lfunc_end67-dct_chroma_sp.58
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.59        # -- Begin function dct_chroma_DC.59
	.p2align	4, 0x90
	.type	dct_chroma_DC.59,@function
dct_chroma_DC.59:                       # @dct_chroma_DC.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1326776280, -44(%rbp)  # imm = 0x4F14FFD8
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB68_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB68_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB68_1 Depth=1
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -36(%rbp)
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB68_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$1, %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB68_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$1, %eax
	jmp	.LBB68_6
.LBB68_5:                               # %cond.false
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	-24(%rbp), %eax
.LBB68_6:                               # %cond.end
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	%eax, -24(%rbp)
	movl	-40(%rbp), %edi
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-20(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	$-1, -20(%rbp)
.LBB68_7:                               # %if.end
                                        #   in Loop: Header=BB68_1 Depth=1
	jmp	.LBB68_8
.LBB68_8:                               # %for.inc
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_1
.LBB68_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-24(%rbp), %ebx
	cmpl	$1326776280, -44(%rbp)  # imm = 0x4F14FFD8
	jne	.LBB68_11
.LBB68_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_10
.Lfunc_end68:
	.size	dct_chroma_DC.59, .Lfunc_end68-dct_chroma_DC.59
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.60
.LCPI69_0:
	.quad	4616189618054758400     # double 4
.LCPI69_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI69_2:
	.quad	4611686018427387904     # double 2
.LCPI69_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.60
	.p2align	4, 0x90
	.type	dct_chroma_sp.60,@function
dct_chroma_sp.60:                       # @dct_chroma_sp.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI69_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI69_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$108092011, -268(%rbp)  # imm = 0x6715A6B
	movl	%edi, -120(%rbp)
	movl	%esi, -208(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -200(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI69_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI69_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB69_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB69_6
.LBB69_2:                               # %cond.false
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB69_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB69_5
.LBB69_4:                               # %cond.false19
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB69_5:                               # %cond.end
.LBB69_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB69_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB69_12
.LBB69_8:                               # %cond.false30
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB69_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB69_11
.LBB69_10:                              # %cond.false37
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB69_11:                              # %cond.end41
.LBB69_12:                              # %cond.end43
	movl	%eax, -224(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB69_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB69_15
.LBB69_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB69_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -116(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB69_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB69_18
.LBB69_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB69_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-116(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -204(%rbp)
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -212(%rbp)
	cmpl	$0, -224(%rbp)
	jge	.LBB69_20
# %bb.19:                               # %cond.true70
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB69_21
.LBB69_20:                              # %cond.false72
	movslq	-224(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB69_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -224(%rbp)
	jge	.LBB69_23
# %bb.22:                               # %cond.true82
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB69_24
.LBB69_23:                              # %cond.false84
	movslq	-224(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB69_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -220(%rbp)
	movl	$0, -12(%rbp)
.LBB69_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB69_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB69_25 Depth=1
	movl	$0, -16(%rbp)
.LBB69_27:                              # %for.cond97
                                        #   Parent Loop BB69_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB69_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB69_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB69_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_27
.LBB69_30:                              # %for.end
                                        #   in Loop: Header=BB69_25 Depth=1
	jmp	.LBB69_31
.LBB69_31:                              # %for.inc121
                                        #   in Loop: Header=BB69_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_25
.LBB69_32:                              # %for.end123
	movl	$0, -20(%rbp)
.LBB69_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_35 Depth 2
                                        #       Child Loop BB69_37 Depth 3
                                        #         Child Loop BB69_39 Depth 4
                                        #       Child Loop BB69_45 Depth 3
                                        #         Child Loop BB69_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB69_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB69_33 Depth=1
	movl	$0, -24(%rbp)
.LBB69_35:                              # %for.cond128
                                        #   Parent Loop BB69_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_37 Depth 3
                                        #         Child Loop BB69_39 Depth 4
                                        #       Child Loop BB69_45 Depth 3
                                        #         Child Loop BB69_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB69_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB69_35 Depth=2
	movl	$0, -12(%rbp)
.LBB69_37:                              # %for.cond132
                                        #   Parent Loop BB69_33 Depth=1
                                        #     Parent Loop BB69_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB69_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB69_37 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB69_39:                              # %for.cond137
                                        #   Parent Loop BB69_33 Depth=1
                                        #     Parent Loop BB69_35 Depth=2
                                        #       Parent Loop BB69_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB69_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB69_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-92(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB69_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_39
.LBB69_42:                              # %for.end174
                                        #   in Loop: Header=BB69_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB69_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_37
.LBB69_44:                              # %for.end214
                                        #   in Loop: Header=BB69_35 Depth=2
	movl	$0, -16(%rbp)
.LBB69_45:                              # %for.cond215
                                        #   Parent Loop BB69_33 Depth=1
                                        #     Parent Loop BB69_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB69_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB69_45 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB69_47:                              # %for.cond220
                                        #   Parent Loop BB69_33 Depth=1
                                        #     Parent Loop BB69_35 Depth=2
                                        #       Parent Loop BB69_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB69_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB69_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB69_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_47
.LBB69_50:                              # %for.end257
                                        #   in Loop: Header=BB69_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB69_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_45
.LBB69_52:                              # %for.end298
                                        #   in Loop: Header=BB69_35 Depth=2
	jmp	.LBB69_53
.LBB69_53:                              # %for.inc299
                                        #   in Loop: Header=BB69_35 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB69_35
.LBB69_54:                              # %for.end301
                                        #   in Loop: Header=BB69_33 Depth=1
	jmp	.LBB69_55
.LBB69_55:                              # %for.inc302
                                        #   in Loop: Header=BB69_33 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB69_33
.LBB69_56:                              # %for.end304
	movl	$0, -20(%rbp)
.LBB69_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_59 Depth 2
                                        #       Child Loop BB69_61 Depth 3
                                        #         Child Loop BB69_63 Depth 4
                                        #       Child Loop BB69_69 Depth 3
                                        #         Child Loop BB69_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB69_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB69_57 Depth=1
	movl	$0, -24(%rbp)
.LBB69_59:                              # %for.cond309
                                        #   Parent Loop BB69_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_61 Depth 3
                                        #         Child Loop BB69_63 Depth 4
                                        #       Child Loop BB69_69 Depth 3
                                        #         Child Loop BB69_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB69_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB69_59 Depth=2
	movl	$0, -12(%rbp)
.LBB69_61:                              # %for.cond313
                                        #   Parent Loop BB69_57 Depth=1
                                        #     Parent Loop BB69_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB69_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB69_61 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB69_63:                              # %for.cond318
                                        #   Parent Loop BB69_57 Depth=1
                                        #     Parent Loop BB69_59 Depth=2
                                        #       Parent Loop BB69_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB69_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB69_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-92(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB69_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_63
.LBB69_66:                              # %for.end351
                                        #   in Loop: Header=BB69_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB69_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_61
.LBB69_68:                              # %for.end387
                                        #   in Loop: Header=BB69_59 Depth=2
	movl	$0, -16(%rbp)
.LBB69_69:                              # %for.cond388
                                        #   Parent Loop BB69_57 Depth=1
                                        #     Parent Loop BB69_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB69_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB69_69 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB69_71:                              # %for.cond393
                                        #   Parent Loop BB69_57 Depth=1
                                        #     Parent Loop BB69_59 Depth=2
                                        #       Parent Loop BB69_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB69_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB69_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB69_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_71
.LBB69_74:                              # %for.end426
                                        #   in Loop: Header=BB69_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB69_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_69
.LBB69_76:                              # %for.end463
                                        #   in Loop: Header=BB69_59 Depth=2
	jmp	.LBB69_77
.LBB69_77:                              # %for.inc464
                                        #   in Loop: Header=BB69_59 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB69_59
.LBB69_78:                              # %for.end466
                                        #   in Loop: Header=BB69_57 Depth=1
	jmp	.LBB69_79
.LBB69_79:                              # %for.inc467
                                        #   in Loop: Header=BB69_57 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB69_57
.LBB69_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -32(%rbp)
.LBB69_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB69_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-212(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-212(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB69_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB69_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB69_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB69_81 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB69_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB69_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-112(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-112(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-184(%rbp), %xmm0
	jne	.LBB69_90
	jp	.LBB69_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB69_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB69_89
.LBB69_88:                              # %cond.false691
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-44(%rbp), %eax
.LBB69_89:                              # %cond.end692
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB69_94
.LBB69_90:                              # %if.else
                                        #   in Loop: Header=BB69_81 Depth=1
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-184(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB69_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB69_93
.LBB69_92:                              # %if.else697
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB69_93:                              # %if.end
                                        #   in Loop: Header=BB69_81 Depth=1
	jmp	.LBB69_94
.LBB69_94:                              # %if.end698
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB69_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB69_97
.LBB69_96:                              # %cond.false702
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-104(%rbp), %eax
.LBB69_97:                              # %cond.end703
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	%eax, -100(%rbp)
	jmp	.LBB69_108
.LBB69_98:                              # %if.else705
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB69_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB69_107
.LBB69_100:                             # %if.else709
                                        #   in Loop: Header=BB69_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB69_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB69_103
.LBB69_102:                             # %cond.false713
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-44(%rbp), %eax
.LBB69_103:                             # %cond.end714
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB69_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB69_106
.LBB69_105:                             # %cond.false719
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-104(%rbp), %eax
.LBB69_106:                             # %cond.end720
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	%eax, -100(%rbp)
.LBB69_107:                             # %if.end722
                                        #   in Loop: Header=BB69_81 Depth=1
	jmp	.LBB69_108
.LBB69_108:                             # %if.end723
                                        #   in Loop: Header=BB69_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB69_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB69_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB69_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB69_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB69_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB69_112:                             # %if.end734
                                        #   in Loop: Header=BB69_81 Depth=1
	jmp	.LBB69_113
.LBB69_113:                             # %if.end735
                                        #   in Loop: Header=BB69_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB69_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-120(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-200(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-208(%rbp), %eax
	jle	.LBB69_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	$1, %eax
	jmp	.LBB69_117
.LBB69_116:                             # %cond.false745
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-208(%rbp), %eax
.LBB69_117:                             # %cond.end746
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	%eax, -208(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -88(%rbp)
.LBB69_118:                             # %if.end763
                                        #   in Loop: Header=BB69_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB69_81
.LBB69_120:                             # %for.end788
	movq	-280(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -216(%rbp)
	movl	$0, -236(%rbp)
	movl	$0, -20(%rbp)
.LBB69_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_123 Depth 2
                                        #       Child Loop BB69_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB69_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB69_121 Depth=1
	movl	$0, -24(%rbp)
.LBB69_123:                             # %for.cond839
                                        #   Parent Loop BB69_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB69_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB69_123 Depth=2
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -240(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-240(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-240(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$1, -32(%rbp)
.LBB69_125:                             # %for.cond860
                                        #   Parent Loop BB69_121 Depth=1
                                        #     Parent Loop BB69_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB69_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB69_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB69_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB69_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB69_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB69_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB69_130
.LBB69_129:                             # %if.then867
                                        #   in Loop: Header=BB69_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_131
.LBB69_130:                             # %if.else876
                                        #   in Loop: Header=BB69_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB69_131:                             # %if.end885
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -40(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB69_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB69_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB69_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB69_125 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB69_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB69_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-112(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-112(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-184(%rbp), %xmm0
	jne	.LBB69_139
	jp	.LBB69_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB69_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB69_138
.LBB69_137:                             # %cond.false1047
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-44(%rbp), %eax
.LBB69_138:                             # %cond.end1048
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB69_143
.LBB69_139:                             # %if.else1050
                                        #   in Loop: Header=BB69_125 Depth=3
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-184(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB69_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB69_142
.LBB69_141:                             # %if.else1054
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB69_142:                             # %if.end1055
                                        #   in Loop: Header=BB69_125 Depth=3
	jmp	.LBB69_143
.LBB69_143:                             # %if.end1056
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB69_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB69_146
.LBB69_145:                             # %cond.false1060
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-104(%rbp), %eax
.LBB69_146:                             # %cond.end1061
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	%eax, -100(%rbp)
	jmp	.LBB69_157
.LBB69_147:                             # %if.else1063
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB69_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB69_156
.LBB69_149:                             # %if.else1067
                                        #   in Loop: Header=BB69_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB69_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB69_152
.LBB69_151:                             # %cond.false1071
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-44(%rbp), %eax
.LBB69_152:                             # %cond.end1072
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB69_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB69_155
.LBB69_154:                             # %cond.false1077
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-104(%rbp), %eax
.LBB69_155:                             # %cond.end1078
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	%eax, -100(%rbp)
.LBB69_156:                             # %if.end1080
                                        #   in Loop: Header=BB69_125 Depth=3
	jmp	.LBB69_157
.LBB69_157:                             # %if.end1081
                                        #   in Loop: Header=BB69_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB69_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-120(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	-24(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-200(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB69_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-216(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -216(%rbp)
	jmp	.LBB69_161
.LBB69_160:                             # %if.else1099
                                        #   in Loop: Header=BB69_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-216(%rbp), %eax
	movl	%eax, -216(%rbp)
.LBB69_161:                             # %if.end1106
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	$2, -236(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -88(%rbp)
.LBB69_162:                             # %if.end1128
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB69_125
.LBB69_164:                             # %for.end1164
                                        #   in Loop: Header=BB69_123 Depth=2
	movq	-288(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB69_123 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB69_123
.LBB69_166:                             # %for.end1169
                                        #   in Loop: Header=BB69_121 Depth=1
	jmp	.LBB69_167
.LBB69_167:                             # %for.inc1170
                                        #   in Loop: Header=BB69_121 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB69_121
.LBB69_168:                             # %for.end1172
	cmpl	$2, -236(%rbp)
	jne	.LBB69_170
# %bb.169:                              # %if.then1175
	movl	$2, -208(%rbp)
.LBB69_170:                             # %if.end1176
	movl	$0, -20(%rbp)
.LBB69_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_173 Depth 2
                                        #       Child Loop BB69_175 Depth 3
                                        #         Child Loop BB69_177 Depth 4
                                        #         Child Loop BB69_181 Depth 4
                                        #       Child Loop BB69_187 Depth 3
                                        #         Child Loop BB69_189 Depth 4
                                        #         Child Loop BB69_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB69_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB69_171 Depth=1
	movl	$0, -24(%rbp)
.LBB69_173:                             # %for.cond1181
                                        #   Parent Loop BB69_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_175 Depth 3
                                        #         Child Loop BB69_177 Depth 4
                                        #         Child Loop BB69_181 Depth 4
                                        #       Child Loop BB69_187 Depth 3
                                        #         Child Loop BB69_189 Depth 4
                                        #         Child Loop BB69_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB69_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB69_173 Depth=2
	movl	$0, -12(%rbp)
.LBB69_175:                             # %for.cond1185
                                        #   Parent Loop BB69_171 Depth=1
                                        #     Parent Loop BB69_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_177 Depth 4
                                        #         Child Loop BB69_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB69_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB69_175 Depth=3
	movl	$0, -16(%rbp)
.LBB69_177:                             # %for.cond1189
                                        #   Parent Loop BB69_171 Depth=1
                                        #     Parent Loop BB69_173 Depth=2
                                        #       Parent Loop BB69_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB69_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB69_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB69_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_177
.LBB69_180:                             # %for.end1204
                                        #   in Loop: Header=BB69_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB69_181:                             # %for.cond1223
                                        #   Parent Loop BB69_171 Depth=1
                                        #     Parent Loop BB69_173 Depth=2
                                        #       Parent Loop BB69_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB69_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB69_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-92(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-92(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-92(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB69_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_181
.LBB69_184:                             # %for.end1254
                                        #   in Loop: Header=BB69_175 Depth=3
	jmp	.LBB69_185
.LBB69_185:                             # %for.inc1255
                                        #   in Loop: Header=BB69_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_175
.LBB69_186:                             # %for.end1257
                                        #   in Loop: Header=BB69_173 Depth=2
	movl	$0, -16(%rbp)
.LBB69_187:                             # %for.cond1258
                                        #   Parent Loop BB69_171 Depth=1
                                        #     Parent Loop BB69_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_189 Depth 4
                                        #         Child Loop BB69_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB69_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB69_187 Depth=3
	movl	$0, -12(%rbp)
.LBB69_189:                             # %for.cond1262
                                        #   Parent Loop BB69_171 Depth=1
                                        #     Parent Loop BB69_173 Depth=2
                                        #       Parent Loop BB69_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB69_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB69_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB69_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_189
.LBB69_192:                             # %for.end1277
                                        #   in Loop: Header=BB69_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB69_193:                             # %for.cond1296
                                        #   Parent Loop BB69_171 Depth=1
                                        #     Parent Loop BB69_173 Depth=2
                                        #       Parent Loop BB69_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB69_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB69_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-56(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB69_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB69_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB69_197
.LBB69_196:                             # %cond.false1311
                                        #   in Loop: Header=BB69_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB69_197:                             # %cond.end1319
                                        #   in Loop: Header=BB69_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB69_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB69_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB69_203
.LBB69_199:                             # %cond.false1325
                                        #   in Loop: Header=BB69_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB69_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB69_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB69_202
.LBB69_201:                             # %cond.false1336
                                        #   in Loop: Header=BB69_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB69_202:                             # %cond.end1344
                                        #   in Loop: Header=BB69_193 Depth=4
.LBB69_203:                             # %cond.end1346
                                        #   in Loop: Header=BB69_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-56(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB69_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB69_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB69_206
.LBB69_205:                             # %cond.false1366
                                        #   in Loop: Header=BB69_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB69_206:                             # %cond.end1374
                                        #   in Loop: Header=BB69_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB69_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB69_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB69_212
.LBB69_208:                             # %cond.false1380
                                        #   in Loop: Header=BB69_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB69_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB69_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB69_211
.LBB69_210:                             # %cond.false1391
                                        #   in Loop: Header=BB69_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB69_211:                             # %cond.end1399
                                        #   in Loop: Header=BB69_193 Depth=4
.LBB69_212:                             # %cond.end1401
                                        #   in Loop: Header=BB69_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB69_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_193
.LBB69_214:                             # %for.end1412
                                        #   in Loop: Header=BB69_187 Depth=3
	jmp	.LBB69_215
.LBB69_215:                             # %for.inc1413
                                        #   in Loop: Header=BB69_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_187
.LBB69_216:                             # %for.end1415
                                        #   in Loop: Header=BB69_173 Depth=2
	jmp	.LBB69_217
.LBB69_217:                             # %for.inc1416
                                        #   in Loop: Header=BB69_173 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB69_173
.LBB69_218:                             # %for.end1418
                                        #   in Loop: Header=BB69_171 Depth=1
	jmp	.LBB69_219
.LBB69_219:                             # %for.inc1419
                                        #   in Loop: Header=BB69_171 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB69_171
.LBB69_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB69_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB69_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB69_221 Depth=1
	movl	$0, -16(%rbp)
.LBB69_223:                             # %for.cond1426
                                        #   Parent Loop BB69_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB69_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB69_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-120(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB69_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_223
.LBB69_226:                             # %for.end1446
                                        #   in Loop: Header=BB69_221 Depth=1
	jmp	.LBB69_227
.LBB69_227:                             # %for.inc1447
                                        #   in Loop: Header=BB69_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_221
.LBB69_228:                             # %for.end1449
	movl	-208(%rbp), %ebx
	cmpl	$108092011, -268(%rbp)  # imm = 0x6715A6B
	jne	.LBB69_230
.LBB69_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_229
.Lfunc_end69:
	.size	dct_chroma_sp.60, .Lfunc_end69-dct_chroma_sp.60
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.61
.LCPI70_0:
	.quad	4616189618054758400     # double 4
.LCPI70_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI70_2:
	.quad	4611686018427387904     # double 2
.LCPI70_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.61
	.p2align	4, 0x90
	.type	dct_luma_sp.61,@function
dct_luma_sp.61:                         # @dct_luma_sp.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI70_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI70_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$379627621, -212(%rbp)  # imm = 0x16A0A865
	movl	%edi, -140(%rbp)
	movl	%esi, -136(%rbp)
	movq	%rdx, -240(%rbp)
	movl	-140(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -192(%rbp)
	movl	-136(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -184(%rbp)
	movl	-184(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-192(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -180(%rbp)
	movl	-184(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-192(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -196(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-180(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-180(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI70_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI70_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -232(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -128(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -112(%rbp)
	movl	-128(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -148(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -208(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -116(%rbp)
	movl	-208(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -200(%rbp)
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -188(%rbp)
	movl	$0, -12(%rbp)
.LBB70_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB70_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	$0, -16(%rbp)
.LBB70_3:                               # %for.cond38
                                        #   Parent Loop BB70_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB70_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB70_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-140(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-136(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-140(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-136(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB70_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_3
.LBB70_6:                               # %for.end
                                        #   in Loop: Header=BB70_1 Depth=1
	jmp	.LBB70_7
.LBB70_7:                               # %for.inc66
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_1
.LBB70_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB70_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB70_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB70_9 Depth=1
	movl	$0, -16(%rbp)
.LBB70_11:                              # %for.cond73
                                        #   Parent Loop BB70_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB70_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB70_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB70_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_11
.LBB70_14:                              # %for.end106
                                        #   in Loop: Header=BB70_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB70_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_9
.LBB70_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB70_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB70_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB70_17 Depth=1
	movl	$0, -12(%rbp)
.LBB70_19:                              # %for.cond144
                                        #   Parent Loop BB70_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB70_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB70_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB70_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_19
.LBB70_22:                              # %for.end177
                                        #   in Loop: Header=BB70_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB70_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_17
.LBB70_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB70_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB70_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB70_25 Depth=1
	movl	$0, -16(%rbp)
.LBB70_27:                              # %for.cond215
                                        #   Parent Loop BB70_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB70_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB70_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB70_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_27
.LBB70_30:                              # %for.end244
                                        #   in Loop: Header=BB70_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB70_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_25
.LBB70_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB70_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB70_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB70_33 Depth=1
	movl	$0, -12(%rbp)
.LBB70_35:                              # %for.cond278
                                        #   Parent Loop BB70_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB70_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB70_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB70_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_35
.LBB70_38:                              # %for.end307
                                        #   in Loop: Header=BB70_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB70_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_33
.LBB70_40:                              # %for.end336
	movl	$0, -204(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -68(%rbp)
.LBB70_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -68(%rbp)
	jge	.LBB70_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB70_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB70_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB70_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB70_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB70_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB70_46
.LBB70_45:                              # %if.then
                                        #   in Loop: Header=BB70_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_47
.LBB70_46:                              # %if.else
                                        #   in Loop: Header=BB70_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB70_47:                              # %if.end
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -104(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-116(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-188(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-116(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-112(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-200(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %edi
	callq	abs
	movslq	-112(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-200(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-56(%rbp), %eax
	je	.LBB70_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB70_41 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB70_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB70_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB70_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB70_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-112(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-24(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-232(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-56(%rbp), %edi
	movl	-124(%rbp), %esi
	callq	sign
	movslq	-112(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-56(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-232(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-176(%rbp), %xmm0
	jne	.LBB70_55
	jp	.LBB70_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	-24(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-56(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB70_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB70_54
.LBB70_53:                              # %cond.false
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	-56(%rbp), %eax
.LBB70_54:                              # %cond.end
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	%eax, -60(%rbp)
	jmp	.LBB70_59
.LBB70_55:                              # %if.else500
                                        #   in Loop: Header=BB70_41 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-176(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB70_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB70_58
.LBB70_57:                              # %if.else504
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB70_58:                              # %if.end505
                                        #   in Loop: Header=BB70_41 Depth=1
	jmp	.LBB70_59
.LBB70_59:                              # %if.end506
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB70_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	-100(%rbp), %eax
	jmp	.LBB70_62
.LBB70_61:                              # %cond.false510
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	-124(%rbp), %eax
.LBB70_62:                              # %cond.end511
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	%eax, -132(%rbp)
	jmp	.LBB70_73
.LBB70_63:                              # %if.else513
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	-24(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.LBB70_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -132(%rbp)
	jmp	.LBB70_72
.LBB70_65:                              # %if.else517
                                        #   in Loop: Header=BB70_41 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB70_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB70_68
.LBB70_67:                              # %cond.false521
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	-56(%rbp), %eax
.LBB70_68:                              # %cond.end522
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	%eax, -60(%rbp)
	cmpl	$0, -24(%rbp)
	jne	.LBB70_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	-100(%rbp), %eax
	jmp	.LBB70_71
.LBB70_70:                              # %cond.false527
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	-124(%rbp), %eax
.LBB70_71:                              # %cond.end528
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	%eax, -132(%rbp)
.LBB70_72:                              # %if.end530
                                        #   in Loop: Header=BB70_41 Depth=1
	jmp	.LBB70_73
.LBB70_73:                              # %if.end531
                                        #   in Loop: Header=BB70_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB70_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	$1, -204(%rbp)
	cmpl	$1, -60(%rbp)
	jle	.LBB70_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB70_41 Depth=1
	movq	-240(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB70_77
.LBB70_76:                              # %if.else539
                                        #   in Loop: Header=BB70_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-240(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB70_77:                              # %if.end546
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	-60(%rbp), %edi
	movl	-132(%rbp), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	movl	$-1, -64(%rbp)
	movl	-60(%rbp), %edi
	movl	-132(%rbp), %esi
	callq	sign
	movslq	-112(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -104(%rbp)
.LBB70_78:                              # %if.end568
                                        #   in Loop: Header=BB70_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-116(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-188(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-104(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-116(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB70_41
.LBB70_80:                              # %for.end600
	movq	-224(%rbp), %rax
	movslq	-108(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB70_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_83 Depth 2
                                        #     Child Loop BB70_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB70_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB70_81 Depth=1
	movl	$0, -16(%rbp)
.LBB70_83:                              # %for.cond607
                                        #   Parent Loop BB70_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB70_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB70_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB70_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_83
.LBB70_86:                              # %for.end620
                                        #   in Loop: Header=BB70_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB70_87:                              # %for.cond639
                                        #   Parent Loop BB70_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB70_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB70_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB70_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_87
.LBB70_90:                              # %for.end666
                                        #   in Loop: Header=BB70_81 Depth=1
	jmp	.LBB70_91
.LBB70_91:                              # %for.inc667
                                        #   in Loop: Header=BB70_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_81
.LBB70_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB70_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_95 Depth 2
                                        #     Child Loop BB70_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB70_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB70_93 Depth=1
	movl	$0, -12(%rbp)
.LBB70_95:                              # %for.cond674
                                        #   Parent Loop BB70_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB70_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB70_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB70_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_95
.LBB70_98:                              # %for.end687
                                        #   in Loop: Header=BB70_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB70_99:                              # %for.cond706
                                        #   Parent Loop BB70_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB70_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB70_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB70_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB70_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB70_103
.LBB70_102:                             # %cond.false721
                                        #   in Loop: Header=BB70_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB70_103:                             # %cond.end729
                                        #   in Loop: Header=BB70_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB70_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB70_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB70_109
.LBB70_105:                             # %cond.false735
                                        #   in Loop: Header=BB70_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB70_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB70_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB70_108
.LBB70_107:                             # %cond.false746
                                        #   in Loop: Header=BB70_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB70_108:                             # %cond.end754
                                        #   in Loop: Header=BB70_99 Depth=2
.LBB70_109:                             # %cond.end756
                                        #   in Loop: Header=BB70_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB70_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB70_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB70_112
.LBB70_111:                             # %cond.false774
                                        #   in Loop: Header=BB70_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB70_112:                             # %cond.end782
                                        #   in Loop: Header=BB70_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB70_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB70_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB70_118
.LBB70_114:                             # %cond.false788
                                        #   in Loop: Header=BB70_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB70_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB70_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB70_117
.LBB70_116:                             # %cond.false799
                                        #   in Loop: Header=BB70_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB70_117:                             # %cond.end807
                                        #   in Loop: Header=BB70_99 Depth=2
.LBB70_118:                             # %cond.end809
                                        #   in Loop: Header=BB70_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB70_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_99
.LBB70_120:                             # %for.end818
                                        #   in Loop: Header=BB70_93 Depth=1
	jmp	.LBB70_121
.LBB70_121:                             # %for.inc819
                                        #   in Loop: Header=BB70_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_93
.LBB70_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB70_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB70_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB70_123 Depth=1
	movl	$0, -16(%rbp)
.LBB70_125:                             # %for.cond826
                                        #   Parent Loop BB70_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB70_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB70_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-136(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-140(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB70_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_125
.LBB70_128:                             # %for.end846
                                        #   in Loop: Header=BB70_123 Depth=1
	jmp	.LBB70_129
.LBB70_129:                             # %for.inc847
                                        #   in Loop: Header=BB70_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_123
.LBB70_130:                             # %for.end849
	movl	-204(%rbp), %ebx
	cmpl	$379627621, -212(%rbp)  # imm = 0x16A0A865
	jne	.LBB70_132
.LBB70_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_131
.Lfunc_end70:
	.size	dct_luma_sp.61, .Lfunc_end70-dct_luma_sp.61
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.62
.LCPI71_0:
	.quad	4616189618054758400     # double 4
.LCPI71_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI71_2:
	.quad	4611686018427387904     # double 2
.LCPI71_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.62
	.p2align	4, 0x90
	.type	dct_chroma_sp.62,@function
dct_chroma_sp.62:                       # @dct_chroma_sp.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI71_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI71_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$997739595, -268(%rbp)  # imm = 0x3B784C4B
	movl	%edi, -112(%rbp)
	movl	%esi, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -184(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI71_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI71_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB71_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB71_6
.LBB71_2:                               # %cond.false
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB71_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB71_5
.LBB71_4:                               # %cond.false19
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB71_5:                               # %cond.end
.LBB71_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB71_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB71_12
.LBB71_8:                               # %cond.false30
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB71_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB71_11
.LBB71_10:                              # %cond.false37
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB71_11:                              # %cond.end41
.LBB71_12:                              # %cond.end43
	movl	%eax, -212(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB71_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB71_15
.LBB71_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB71_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -120(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB71_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB71_18
.LBB71_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB71_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-120(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -216(%rbp)
	cmpl	$0, -212(%rbp)
	jge	.LBB71_20
# %bb.19:                               # %cond.true70
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB71_21
.LBB71_20:                              # %cond.false72
	movslq	-212(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB71_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -228(%rbp)
	cmpl	$0, -212(%rbp)
	jge	.LBB71_23
# %bb.22:                               # %cond.true82
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB71_24
.LBB71_23:                              # %cond.false84
	movslq	-212(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB71_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-228(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -220(%rbp)
	movl	$0, -12(%rbp)
.LBB71_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB71_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB71_25 Depth=1
	movl	$0, -16(%rbp)
.LBB71_27:                              # %for.cond97
                                        #   Parent Loop BB71_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB71_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB71_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB71_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_27
.LBB71_30:                              # %for.end
                                        #   in Loop: Header=BB71_25 Depth=1
	jmp	.LBB71_31
.LBB71_31:                              # %for.inc121
                                        #   in Loop: Header=BB71_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_25
.LBB71_32:                              # %for.end123
	movl	$0, -24(%rbp)
.LBB71_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_35 Depth 2
                                        #       Child Loop BB71_37 Depth 3
                                        #         Child Loop BB71_39 Depth 4
                                        #       Child Loop BB71_45 Depth 3
                                        #         Child Loop BB71_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB71_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB71_33 Depth=1
	movl	$0, -20(%rbp)
.LBB71_35:                              # %for.cond128
                                        #   Parent Loop BB71_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_37 Depth 3
                                        #         Child Loop BB71_39 Depth 4
                                        #       Child Loop BB71_45 Depth 3
                                        #         Child Loop BB71_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB71_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB71_35 Depth=2
	movl	$0, -12(%rbp)
.LBB71_37:                              # %for.cond132
                                        #   Parent Loop BB71_33 Depth=1
                                        #     Parent Loop BB71_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB71_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB71_37 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -16(%rbp)
.LBB71_39:                              # %for.cond137
                                        #   Parent Loop BB71_33 Depth=1
                                        #     Parent Loop BB71_35 Depth=2
                                        #       Parent Loop BB71_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB71_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB71_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-88(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-88(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB71_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_39
.LBB71_42:                              # %for.end174
                                        #   in Loop: Header=BB71_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB71_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_37
.LBB71_44:                              # %for.end214
                                        #   in Loop: Header=BB71_35 Depth=2
	movl	$0, -16(%rbp)
.LBB71_45:                              # %for.cond215
                                        #   Parent Loop BB71_33 Depth=1
                                        #     Parent Loop BB71_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB71_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB71_45 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB71_47:                              # %for.cond220
                                        #   Parent Loop BB71_33 Depth=1
                                        #     Parent Loop BB71_35 Depth=2
                                        #       Parent Loop BB71_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB71_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB71_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-56(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-56(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB71_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_47
.LBB71_50:                              # %for.end257
                                        #   in Loop: Header=BB71_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB71_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_45
.LBB71_52:                              # %for.end298
                                        #   in Loop: Header=BB71_35 Depth=2
	jmp	.LBB71_53
.LBB71_53:                              # %for.inc299
                                        #   in Loop: Header=BB71_35 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_35
.LBB71_54:                              # %for.end301
                                        #   in Loop: Header=BB71_33 Depth=1
	jmp	.LBB71_55
.LBB71_55:                              # %for.inc302
                                        #   in Loop: Header=BB71_33 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB71_33
.LBB71_56:                              # %for.end304
	movl	$0, -24(%rbp)
.LBB71_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_59 Depth 2
                                        #       Child Loop BB71_61 Depth 3
                                        #         Child Loop BB71_63 Depth 4
                                        #       Child Loop BB71_69 Depth 3
                                        #         Child Loop BB71_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB71_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB71_57 Depth=1
	movl	$0, -20(%rbp)
.LBB71_59:                              # %for.cond309
                                        #   Parent Loop BB71_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_61 Depth 3
                                        #         Child Loop BB71_63 Depth 4
                                        #       Child Loop BB71_69 Depth 3
                                        #         Child Loop BB71_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB71_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB71_59 Depth=2
	movl	$0, -12(%rbp)
.LBB71_61:                              # %for.cond313
                                        #   Parent Loop BB71_57 Depth=1
                                        #     Parent Loop BB71_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB71_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB71_61 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -16(%rbp)
.LBB71_63:                              # %for.cond318
                                        #   Parent Loop BB71_57 Depth=1
                                        #     Parent Loop BB71_59 Depth=2
                                        #       Parent Loop BB71_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB71_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB71_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-88(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-88(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-48(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-88(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB71_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_63
.LBB71_66:                              # %for.end351
                                        #   in Loop: Header=BB71_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB71_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_61
.LBB71_68:                              # %for.end387
                                        #   in Loop: Header=BB71_59 Depth=2
	movl	$0, -16(%rbp)
.LBB71_69:                              # %for.cond388
                                        #   Parent Loop BB71_57 Depth=1
                                        #     Parent Loop BB71_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB71_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB71_69 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB71_71:                              # %for.cond393
                                        #   Parent Loop BB71_57 Depth=1
                                        #     Parent Loop BB71_59 Depth=2
                                        #       Parent Loop BB71_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB71_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB71_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-56(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-56(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB71_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_71
.LBB71_74:                              # %for.end426
                                        #   in Loop: Header=BB71_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB71_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_69
.LBB71_76:                              # %for.end463
                                        #   in Loop: Header=BB71_59 Depth=2
	jmp	.LBB71_77
.LBB71_77:                              # %for.inc464
                                        #   in Loop: Header=BB71_59 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_59
.LBB71_78:                              # %for.end466
                                        #   in Loop: Header=BB71_57 Depth=1
	jmp	.LBB71_79
.LBB71_79:                              # %for.inc467
                                        #   in Loop: Header=BB71_57 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB71_57
.LBB71_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -32(%rbp)
.LBB71_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB71_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -92(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB71_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB71_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB71_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB71_81 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB71_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB71_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB71_90
	jp	.LBB71_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB71_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB71_89
.LBB71_88:                              # %cond.false691
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-44(%rbp), %eax
.LBB71_89:                              # %cond.end692
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB71_94
.LBB71_90:                              # %if.else
                                        #   in Loop: Header=BB71_81 Depth=1
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB71_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB71_93
.LBB71_92:                              # %if.else697
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB71_93:                              # %if.end
                                        #   in Loop: Header=BB71_81 Depth=1
	jmp	.LBB71_94
.LBB71_94:                              # %if.end698
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB71_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB71_97
.LBB71_96:                              # %cond.false702
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-104(%rbp), %eax
.LBB71_97:                              # %cond.end703
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	%eax, -100(%rbp)
	jmp	.LBB71_108
.LBB71_98:                              # %if.else705
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB71_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB71_107
.LBB71_100:                             # %if.else709
                                        #   in Loop: Header=BB71_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB71_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB71_103
.LBB71_102:                             # %cond.false713
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-44(%rbp), %eax
.LBB71_103:                             # %cond.end714
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB71_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB71_106
.LBB71_105:                             # %cond.false719
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-104(%rbp), %eax
.LBB71_106:                             # %cond.end720
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	%eax, -100(%rbp)
.LBB71_107:                             # %if.end722
                                        #   in Loop: Header=BB71_81 Depth=1
	jmp	.LBB71_108
.LBB71_108:                             # %if.end723
                                        #   in Loop: Header=BB71_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB71_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB71_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB71_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB71_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB71_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB71_112:                             # %if.end734
                                        #   in Loop: Header=BB71_81 Depth=1
	jmp	.LBB71_113
.LBB71_113:                             # %if.end735
                                        #   in Loop: Header=BB71_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB71_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-112(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-184(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-204(%rbp), %eax
	jle	.LBB71_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	$1, %eax
	jmp	.LBB71_117
.LBB71_116:                             # %cond.false745
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-204(%rbp), %eax
.LBB71_117:                             # %cond.end746
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	%eax, -204(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -92(%rbp)
.LBB71_118:                             # %if.end763
                                        #   in Loop: Header=BB71_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-92(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-228(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB71_81
.LBB71_120:                             # %for.end788
	movq	-288(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -224(%rbp)
	movl	$0, -240(%rbp)
	movl	$0, -24(%rbp)
.LBB71_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_123 Depth 2
                                        #       Child Loop BB71_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB71_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB71_121 Depth=1
	movl	$0, -20(%rbp)
.LBB71_123:                             # %for.cond839
                                        #   Parent Loop BB71_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB71_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB71_123 Depth=2
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -236(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$1, -32(%rbp)
.LBB71_125:                             # %for.cond860
                                        #   Parent Loop BB71_121 Depth=1
                                        #     Parent Loop BB71_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB71_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB71_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB71_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB71_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB71_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB71_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB71_130
.LBB71_129:                             # %if.then867
                                        #   in Loop: Header=BB71_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_131
.LBB71_130:                             # %if.else876
                                        #   in Loop: Header=BB71_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB71_131:                             # %if.end885
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -40(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB71_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB71_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB71_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB71_125 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB71_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB71_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB71_139
	jp	.LBB71_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB71_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB71_138
.LBB71_137:                             # %cond.false1047
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-44(%rbp), %eax
.LBB71_138:                             # %cond.end1048
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB71_143
.LBB71_139:                             # %if.else1050
                                        #   in Loop: Header=BB71_125 Depth=3
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB71_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB71_142
.LBB71_141:                             # %if.else1054
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB71_142:                             # %if.end1055
                                        #   in Loop: Header=BB71_125 Depth=3
	jmp	.LBB71_143
.LBB71_143:                             # %if.end1056
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB71_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB71_146
.LBB71_145:                             # %cond.false1060
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-104(%rbp), %eax
.LBB71_146:                             # %cond.end1061
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	%eax, -100(%rbp)
	jmp	.LBB71_157
.LBB71_147:                             # %if.else1063
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB71_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB71_156
.LBB71_149:                             # %if.else1067
                                        #   in Loop: Header=BB71_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB71_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB71_152
.LBB71_151:                             # %cond.false1071
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-44(%rbp), %eax
.LBB71_152:                             # %cond.end1072
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB71_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB71_155
.LBB71_154:                             # %cond.false1077
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-104(%rbp), %eax
.LBB71_155:                             # %cond.end1078
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	%eax, -100(%rbp)
.LBB71_156:                             # %if.end1080
                                        #   in Loop: Header=BB71_125 Depth=3
	jmp	.LBB71_157
.LBB71_157:                             # %if.end1081
                                        #   in Loop: Header=BB71_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB71_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-112(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	-20(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-184(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB71_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-224(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -224(%rbp)
	jmp	.LBB71_161
.LBB71_160:                             # %if.else1099
                                        #   in Loop: Header=BB71_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-224(%rbp), %eax
	movl	%eax, -224(%rbp)
.LBB71_161:                             # %if.end1106
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	$2, -240(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -92(%rbp)
.LBB71_162:                             # %if.end1128
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-92(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-228(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB71_125
.LBB71_164:                             # %for.end1164
                                        #   in Loop: Header=BB71_123 Depth=2
	movq	-280(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB71_123 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_123
.LBB71_166:                             # %for.end1169
                                        #   in Loop: Header=BB71_121 Depth=1
	jmp	.LBB71_167
.LBB71_167:                             # %for.inc1170
                                        #   in Loop: Header=BB71_121 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB71_121
.LBB71_168:                             # %for.end1172
	cmpl	$2, -240(%rbp)
	jne	.LBB71_170
# %bb.169:                              # %if.then1175
	movl	$2, -204(%rbp)
.LBB71_170:                             # %if.end1176
	movl	$0, -24(%rbp)
.LBB71_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_173 Depth 2
                                        #       Child Loop BB71_175 Depth 3
                                        #         Child Loop BB71_177 Depth 4
                                        #         Child Loop BB71_181 Depth 4
                                        #       Child Loop BB71_187 Depth 3
                                        #         Child Loop BB71_189 Depth 4
                                        #         Child Loop BB71_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB71_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB71_171 Depth=1
	movl	$0, -20(%rbp)
.LBB71_173:                             # %for.cond1181
                                        #   Parent Loop BB71_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_175 Depth 3
                                        #         Child Loop BB71_177 Depth 4
                                        #         Child Loop BB71_181 Depth 4
                                        #       Child Loop BB71_187 Depth 3
                                        #         Child Loop BB71_189 Depth 4
                                        #         Child Loop BB71_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB71_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB71_173 Depth=2
	movl	$0, -12(%rbp)
.LBB71_175:                             # %for.cond1185
                                        #   Parent Loop BB71_171 Depth=1
                                        #     Parent Loop BB71_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_177 Depth 4
                                        #         Child Loop BB71_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB71_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB71_175 Depth=3
	movl	$0, -16(%rbp)
.LBB71_177:                             # %for.cond1189
                                        #   Parent Loop BB71_171 Depth=1
                                        #     Parent Loop BB71_173 Depth=2
                                        #       Parent Loop BB71_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB71_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB71_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB71_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_177
.LBB71_180:                             # %for.end1204
                                        #   in Loop: Header=BB71_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB71_181:                             # %for.cond1223
                                        #   Parent Loop BB71_171 Depth=1
                                        #     Parent Loop BB71_173 Depth=2
                                        #       Parent Loop BB71_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB71_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB71_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-88(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB71_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_181
.LBB71_184:                             # %for.end1254
                                        #   in Loop: Header=BB71_175 Depth=3
	jmp	.LBB71_185
.LBB71_185:                             # %for.inc1255
                                        #   in Loop: Header=BB71_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_175
.LBB71_186:                             # %for.end1257
                                        #   in Loop: Header=BB71_173 Depth=2
	movl	$0, -16(%rbp)
.LBB71_187:                             # %for.cond1258
                                        #   Parent Loop BB71_171 Depth=1
                                        #     Parent Loop BB71_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_189 Depth 4
                                        #         Child Loop BB71_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB71_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB71_187 Depth=3
	movl	$0, -12(%rbp)
.LBB71_189:                             # %for.cond1262
                                        #   Parent Loop BB71_171 Depth=1
                                        #     Parent Loop BB71_173 Depth=2
                                        #       Parent Loop BB71_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB71_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB71_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB71_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_189
.LBB71_192:                             # %for.end1277
                                        #   in Loop: Header=BB71_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB71_193:                             # %for.cond1296
                                        #   Parent Loop BB71_171 Depth=1
                                        #     Parent Loop BB71_173 Depth=2
                                        #       Parent Loop BB71_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB71_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB71_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB71_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB71_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB71_197
.LBB71_196:                             # %cond.false1311
                                        #   in Loop: Header=BB71_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB71_197:                             # %cond.end1319
                                        #   in Loop: Header=BB71_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB71_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB71_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB71_203
.LBB71_199:                             # %cond.false1325
                                        #   in Loop: Header=BB71_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB71_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB71_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB71_202
.LBB71_201:                             # %cond.false1336
                                        #   in Loop: Header=BB71_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB71_202:                             # %cond.end1344
                                        #   in Loop: Header=BB71_193 Depth=4
.LBB71_203:                             # %cond.end1346
                                        #   in Loop: Header=BB71_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-20(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB71_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB71_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB71_206
.LBB71_205:                             # %cond.false1366
                                        #   in Loop: Header=BB71_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB71_206:                             # %cond.end1374
                                        #   in Loop: Header=BB71_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB71_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB71_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB71_212
.LBB71_208:                             # %cond.false1380
                                        #   in Loop: Header=BB71_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB71_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB71_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB71_211
.LBB71_210:                             # %cond.false1391
                                        #   in Loop: Header=BB71_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB71_211:                             # %cond.end1399
                                        #   in Loop: Header=BB71_193 Depth=4
.LBB71_212:                             # %cond.end1401
                                        #   in Loop: Header=BB71_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB71_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_193
.LBB71_214:                             # %for.end1412
                                        #   in Loop: Header=BB71_187 Depth=3
	jmp	.LBB71_215
.LBB71_215:                             # %for.inc1413
                                        #   in Loop: Header=BB71_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_187
.LBB71_216:                             # %for.end1415
                                        #   in Loop: Header=BB71_173 Depth=2
	jmp	.LBB71_217
.LBB71_217:                             # %for.inc1416
                                        #   in Loop: Header=BB71_173 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_173
.LBB71_218:                             # %for.end1418
                                        #   in Loop: Header=BB71_171 Depth=1
	jmp	.LBB71_219
.LBB71_219:                             # %for.inc1419
                                        #   in Loop: Header=BB71_171 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB71_171
.LBB71_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB71_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB71_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB71_221 Depth=1
	movl	$0, -16(%rbp)
.LBB71_223:                             # %for.cond1426
                                        #   Parent Loop BB71_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB71_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB71_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-112(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB71_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_223
.LBB71_226:                             # %for.end1446
                                        #   in Loop: Header=BB71_221 Depth=1
	jmp	.LBB71_227
.LBB71_227:                             # %for.inc1447
                                        #   in Loop: Header=BB71_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_221
.LBB71_228:                             # %for.end1449
	movl	-204(%rbp), %ebx
	cmpl	$997739595, -268(%rbp)  # imm = 0x3B784C4B
	jne	.LBB71_230
.LBB71_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_229
.Lfunc_end71:
	.size	dct_chroma_sp.62, .Lfunc_end71-dct_chroma_sp.62
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.63       # -- Begin function intrapred_luma.63
	.p2align	4, 0x90
	.type	intrapred_luma.63,@function
intrapred_luma.63:                      # @intrapred_luma.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$1946789491, -172(%rbp) # imm = 0x7409A673
	movl	%edi, -112(%rbp)
	movl	%esi, -116(%rbp)
	movq	%rdx, -200(%rbp)
	movq	%rcx, -192(%rbp)
	movq	%r8, -184(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB72_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB72_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_1
.LBB72_4:                               # %for.end
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	addl	$4, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-224(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB72_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -84(%rbp)
	je	.LBB72_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -84(%rbp)
	jne	.LBB72_10
.LBB72_7:                               # %land.rhs10
	cmpl	$4, -88(%rbp)
	movb	$1, %al
	je	.LBB72_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -88(%rbp)
	sete	%al
.LBB72_9:                               # %lor.end
.LBB72_10:                              # %land.end
	xorb	$-1, %al
.LBB72_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB72_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB72_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB72_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB72_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB72_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB72_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB72_17
.LBB72_16:                              # %cond.false
                                        #   in Loop: Header=BB72_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB72_17
.LBB72_17:                              # %cond.end
                                        #   in Loop: Header=BB72_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB72_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_13
.LBB72_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB72_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB72_22
.LBB72_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB72_22
.LBB72_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB72_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB72_25
.LBB72_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB72_25
.LBB72_25:                              # %cond.end49
	movl	%eax, -108(%rbp)
	cmpl	$0, -224(%rbp)
	je	.LBB72_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-220(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB72_28
.LBB72_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB72_28
.LBB72_28:                              # %cond.end59
	movl	%eax, -100(%rbp)
	jmp	.LBB72_30
.LBB72_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-224(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB72_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-200(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-192(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB72_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB72_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -100(%rbp)
	setne	%al
.LBB72_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB72_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB72_36
.LBB72_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB72_36:                              # %if.end114
	cmpl	$0, -108(%rbp)
	je	.LBB72_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB72_39
.LBB72_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB72_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB72_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_42
.LBB72_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB72_42:                              # %if.end208
	cmpl	$0, -100(%rbp)
	je	.LBB72_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-208(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB72_45
.LBB72_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB72_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB72_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB72_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB72_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB72_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_46
.LBB72_49:                              # %for.end233
	movl	$0, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB72_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB72_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB72_61
.LBB72_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB72_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB72_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB72_60
.LBB72_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB72_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB72_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB72_59
.LBB72_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -96(%rbp)
.LBB72_59:                              # %if.end284
	jmp	.LBB72_60
.LBB72_60:                              # %if.end285
	jmp	.LBB72_61
.LBB72_61:                              # %if.end286
	movl	$0, -92(%rbp)
.LBB72_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_64 Depth 2
	cmpl	$4, -92(%rbp)
	jge	.LBB72_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB72_62 Depth=1
	movl	$0, -4(%rbp)
.LBB72_64:                              # %for.cond291
                                        #   Parent Loop BB72_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB72_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB72_64 Depth=2
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-92(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB72_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_64
.LBB72_67:                              # %for.end304
                                        #   in Loop: Header=BB72_62 Depth=1
	jmp	.LBB72_68
.LBB72_68:                              # %for.inc305
                                        #   in Loop: Header=BB72_62 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB72_62
.LBB72_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB72_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB72_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB72_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB72_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_70
.LBB72_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB72_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB72_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB72_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB72_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB72_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB72_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB72_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB72_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB72_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB72_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -100(%rbp)
	je	.LBB72_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB72_85:                              # %if.end1174
	cmpl	$1946789491, -172(%rbp) # imm = 0x7409A673
	jne	.LBB72_87
.LBB72_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_86
.Lfunc_end72:
	.size	intrapred_luma.63, .Lfunc_end72-intrapred_luma.63
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.64       # -- Begin function intrapred_luma.64
	.p2align	4, 0x90
	.type	intrapred_luma.64,@function
intrapred_luma.64:                      # @intrapred_luma.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$983770414, -172(%rbp)  # imm = 0x3AA3252E
	movl	%edi, -112(%rbp)
	movl	%esi, -108(%rbp)
	movq	%rdx, -224(%rbp)
	movq	%rcx, -216(%rbp)
	movq	%r8, -184(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -100(%rbp)
	movl	$0, -4(%rbp)
.LBB73_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB73_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_1
.LBB73_4:                               # %for.end
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	addl	$4, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-208(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB73_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -88(%rbp)
	je	.LBB73_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -88(%rbp)
	jne	.LBB73_10
.LBB73_7:                               # %land.rhs10
	cmpl	$4, -84(%rbp)
	movb	$1, %al
	je	.LBB73_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -84(%rbp)
	sete	%al
.LBB73_9:                               # %lor.end
.LBB73_10:                              # %land.end
	xorb	$-1, %al
.LBB73_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB73_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB73_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB73_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB73_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB73_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB73_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB73_17
.LBB73_16:                              # %cond.false
                                        #   in Loop: Header=BB73_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB73_17
.LBB73_17:                              # %cond.end
                                        #   in Loop: Header=BB73_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB73_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_13
.LBB73_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB73_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB73_22
.LBB73_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB73_22
.LBB73_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB73_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB73_25
.LBB73_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB73_25
.LBB73_25:                              # %cond.end49
	movl	%eax, -116(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB73_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB73_28
.LBB73_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB73_28
.LBB73_28:                              # %cond.end59
	movl	%eax, -104(%rbp)
	jmp	.LBB73_30
.LBB73_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -104(%rbp)
.LBB73_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-224(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-216(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB73_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB73_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -104(%rbp)
	setne	%al
.LBB73_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB73_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB73_36
.LBB73_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB73_36:                              # %if.end114
	cmpl	$0, -116(%rbp)
	je	.LBB73_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB73_39
.LBB73_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB73_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB73_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_42
.LBB73_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB73_42:                              # %if.end208
	cmpl	$0, -104(%rbp)
	je	.LBB73_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-192(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB73_45
.LBB73_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB73_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB73_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB73_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB73_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB73_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_46
.LBB73_49:                              # %for.end233
	movl	$0, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB73_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB73_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB73_61
.LBB73_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB73_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB73_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB73_60
.LBB73_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB73_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB73_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB73_59
.LBB73_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -96(%rbp)
.LBB73_59:                              # %if.end284
	jmp	.LBB73_60
.LBB73_60:                              # %if.end285
	jmp	.LBB73_61
.LBB73_61:                              # %if.end286
	movl	$0, -92(%rbp)
.LBB73_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_64 Depth 2
	cmpl	$4, -92(%rbp)
	jge	.LBB73_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB73_62 Depth=1
	movl	$0, -4(%rbp)
.LBB73_64:                              # %for.cond291
                                        #   Parent Loop BB73_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB73_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB73_64 Depth=2
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-92(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB73_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_64
.LBB73_67:                              # %for.end304
                                        #   in Loop: Header=BB73_62 Depth=1
	jmp	.LBB73_68
.LBB73_68:                              # %for.inc305
                                        #   in Loop: Header=BB73_62 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB73_62
.LBB73_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB73_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB73_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB73_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB73_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_70
.LBB73_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB73_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB73_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB73_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB73_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB73_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB73_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB73_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB73_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB73_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB73_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -104(%rbp)
	je	.LBB73_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB73_85:                              # %if.end1174
	cmpl	$983770414, -172(%rbp)  # imm = 0x3AA3252E
	jne	.LBB73_87
.LBB73_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_86
.Lfunc_end73:
	.size	intrapred_luma.64, .Lfunc_end73-intrapred_luma.64
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.65
.LCPI74_0:
	.quad	4616189618054758400     # double 4
.LCPI74_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI74_2:
	.quad	4611686018427387904     # double 2
.LCPI74_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.65
	.p2align	4, 0x90
	.type	dct_luma_sp.65,@function
dct_luma_sp.65:                         # @dct_luma_sp.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI74_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI74_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1197535970, -216(%rbp) # imm = 0x4760F2E2
	movl	%edi, -128(%rbp)
	movl	%esi, -132(%rbp)
	movq	%rdx, -240(%rbp)
	movl	-128(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -184(%rbp)
	movl	-132(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -208(%rbp)
	movl	-208(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-184(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -204(%rbp)
	movl	-208(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-184(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -196(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI74_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI74_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -232(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -120(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -104(%rbp)
	movl	-120(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -144(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -192(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -124(%rbp)
	movl	-192(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -136(%rbp)
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -180(%rbp)
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -200(%rbp)
	movl	$0, -12(%rbp)
.LBB74_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB74_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -16(%rbp)
.LBB74_3:                               # %for.cond38
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB74_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB74_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-132(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-132(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB74_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_3
.LBB74_6:                               # %for.end
                                        #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_7
.LBB74_7:                               # %for.inc66
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_1
.LBB74_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB74_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB74_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB74_9 Depth=1
	movl	$0, -16(%rbp)
.LBB74_11:                              # %for.cond73
                                        #   Parent Loop BB74_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB74_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB74_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB74_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_11
.LBB74_14:                              # %for.end106
                                        #   in Loop: Header=BB74_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB74_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_9
.LBB74_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB74_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB74_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB74_17 Depth=1
	movl	$0, -12(%rbp)
.LBB74_19:                              # %for.cond144
                                        #   Parent Loop BB74_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB74_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB74_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB74_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_19
.LBB74_22:                              # %for.end177
                                        #   in Loop: Header=BB74_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB74_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_17
.LBB74_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB74_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB74_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB74_25 Depth=1
	movl	$0, -16(%rbp)
.LBB74_27:                              # %for.cond215
                                        #   Parent Loop BB74_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB74_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB74_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB74_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_27
.LBB74_30:                              # %for.end244
                                        #   in Loop: Header=BB74_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB74_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_25
.LBB74_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB74_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB74_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB74_33 Depth=1
	movl	$0, -12(%rbp)
.LBB74_35:                              # %for.cond278
                                        #   Parent Loop BB74_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB74_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB74_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB74_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_35
.LBB74_38:                              # %for.end307
                                        #   in Loop: Header=BB74_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB74_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_33
.LBB74_40:                              # %for.end336
	movl	$0, -188(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -64(%rbp)
.LBB74_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -64(%rbp)
	jge	.LBB74_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB74_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB74_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB74_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB74_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB74_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB74_46
.LBB74_45:                              # %if.then
                                        #   in Loop: Header=BB74_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_47
.LBB74_46:                              # %if.else
                                        #   in Loop: Header=BB74_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB74_47:                              # %if.end
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -100(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-200(%rbp), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -112(%rbp)
	movl	-112(%rbp), %edi
	callq	abs
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-180(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -116(%rbp)
	movl	-116(%rbp), %edi
	callq	abs
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-180(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-60(%rbp), %eax
	je	.LBB74_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB74_41 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB74_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB74_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB74_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB74_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movl	-112(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-20(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-232(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-60(%rbp), %edi
	movl	-116(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-60(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-232(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-160(%rbp), %xmm0
	jne	.LBB74_55
	jp	.LBB74_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	-20(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-60(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB74_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB74_54
.LBB74_53:                              # %cond.false
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	-60(%rbp), %eax
.LBB74_54:                              # %cond.end
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	%eax, -56(%rbp)
	jmp	.LBB74_59
.LBB74_55:                              # %if.else500
                                        #   in Loop: Header=BB74_41 Depth=1
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-160(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB74_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB74_58
.LBB74_57:                              # %if.else504
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB74_58:                              # %if.end505
                                        #   in Loop: Header=BB74_41 Depth=1
	jmp	.LBB74_59
.LBB74_59:                              # %if.end506
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jne	.LBB74_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	-112(%rbp), %eax
	jmp	.LBB74_62
.LBB74_61:                              # %cond.false510
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	-116(%rbp), %eax
.LBB74_62:                              # %cond.end511
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	%eax, -140(%rbp)
	jmp	.LBB74_73
.LBB74_63:                              # %if.else513
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB74_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB74_72
.LBB74_65:                              # %if.else517
                                        #   in Loop: Header=BB74_41 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB74_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB74_68
.LBB74_67:                              # %cond.false521
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	-60(%rbp), %eax
.LBB74_68:                              # %cond.end522
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	%eax, -56(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB74_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	-112(%rbp), %eax
	jmp	.LBB74_71
.LBB74_70:                              # %cond.false527
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	-116(%rbp), %eax
.LBB74_71:                              # %cond.end528
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	%eax, -140(%rbp)
.LBB74_72:                              # %if.end530
                                        #   in Loop: Header=BB74_41 Depth=1
	jmp	.LBB74_73
.LBB74_73:                              # %if.end531
                                        #   in Loop: Header=BB74_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB74_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	$1, -188(%rbp)
	cmpl	$1, -56(%rbp)
	jle	.LBB74_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB74_41 Depth=1
	movq	-240(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB74_77
.LBB74_76:                              # %if.else539
                                        #   in Loop: Header=BB74_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-240(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB74_77:                              # %if.end546
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	-56(%rbp), %edi
	movl	-140(%rbp), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	movl	$-1, -68(%rbp)
	movl	-56(%rbp), %edi
	movl	-140(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -100(%rbp)
.LBB74_78:                              # %if.end568
                                        #   in Loop: Header=BB74_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-200(%rbp), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-100(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-192(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB74_41
.LBB74_80:                              # %for.end600
	movq	-224(%rbp), %rax
	movslq	-108(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB74_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_83 Depth 2
                                        #     Child Loop BB74_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB74_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB74_81 Depth=1
	movl	$0, -16(%rbp)
.LBB74_83:                              # %for.cond607
                                        #   Parent Loop BB74_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB74_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB74_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB74_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_83
.LBB74_86:                              # %for.end620
                                        #   in Loop: Header=BB74_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB74_87:                              # %for.cond639
                                        #   Parent Loop BB74_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB74_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB74_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB74_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_87
.LBB74_90:                              # %for.end666
                                        #   in Loop: Header=BB74_81 Depth=1
	jmp	.LBB74_91
.LBB74_91:                              # %for.inc667
                                        #   in Loop: Header=BB74_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_81
.LBB74_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB74_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_95 Depth 2
                                        #     Child Loop BB74_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB74_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB74_93 Depth=1
	movl	$0, -12(%rbp)
.LBB74_95:                              # %for.cond674
                                        #   Parent Loop BB74_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB74_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB74_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB74_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_95
.LBB74_98:                              # %for.end687
                                        #   in Loop: Header=BB74_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB74_99:                              # %for.cond706
                                        #   Parent Loop BB74_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB74_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB74_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB74_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB74_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB74_103
.LBB74_102:                             # %cond.false721
                                        #   in Loop: Header=BB74_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB74_103:                             # %cond.end729
                                        #   in Loop: Header=BB74_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB74_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB74_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_109
.LBB74_105:                             # %cond.false735
                                        #   in Loop: Header=BB74_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB74_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB74_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB74_108
.LBB74_107:                             # %cond.false746
                                        #   in Loop: Header=BB74_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB74_108:                             # %cond.end754
                                        #   in Loop: Header=BB74_99 Depth=2
.LBB74_109:                             # %cond.end756
                                        #   in Loop: Header=BB74_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB74_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB74_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB74_112
.LBB74_111:                             # %cond.false774
                                        #   in Loop: Header=BB74_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB74_112:                             # %cond.end782
                                        #   in Loop: Header=BB74_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB74_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB74_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_118
.LBB74_114:                             # %cond.false788
                                        #   in Loop: Header=BB74_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB74_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB74_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB74_117
.LBB74_116:                             # %cond.false799
                                        #   in Loop: Header=BB74_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB74_117:                             # %cond.end807
                                        #   in Loop: Header=BB74_99 Depth=2
.LBB74_118:                             # %cond.end809
                                        #   in Loop: Header=BB74_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB74_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_99
.LBB74_120:                             # %for.end818
                                        #   in Loop: Header=BB74_93 Depth=1
	jmp	.LBB74_121
.LBB74_121:                             # %for.inc819
                                        #   in Loop: Header=BB74_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_93
.LBB74_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB74_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB74_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB74_123 Depth=1
	movl	$0, -16(%rbp)
.LBB74_125:                             # %for.cond826
                                        #   Parent Loop BB74_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB74_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB74_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-132(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-128(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB74_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_125
.LBB74_128:                             # %for.end846
                                        #   in Loop: Header=BB74_123 Depth=1
	jmp	.LBB74_129
.LBB74_129:                             # %for.inc847
                                        #   in Loop: Header=BB74_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_123
.LBB74_130:                             # %for.end849
	movl	-188(%rbp), %ebx
	cmpl	$1197535970, -216(%rbp) # imm = 0x4760F2E2
	jne	.LBB74_132
.LBB74_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_131
.Lfunc_end74:
	.size	dct_luma_sp.65, .Lfunc_end74-dct_luma_sp.65
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.66
.LCPI75_0:
	.quad	4616189618054758400     # double 4
.LCPI75_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI75_2:
	.quad	4611686018427387904     # double 2
.LCPI75_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.66
	.p2align	4, 0x90
	.type	dct_luma_sp.66,@function
dct_luma_sp.66:                         # @dct_luma_sp.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI75_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI75_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$242708274, -216(%rbp)  # imm = 0xE776F32
	movl	%edi, -132(%rbp)
	movl	%esi, -124(%rbp)
	movq	%rdx, -232(%rbp)
	movl	-132(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -196(%rbp)
	movl	-124(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -200(%rbp)
	movl	-200(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-196(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -192(%rbp)
	movl	-200(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-196(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -184(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-184(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-184(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -160(%rbp)
	movq	-160(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI75_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI75_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -240(%rbp)
	movq	-160(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -136(%rbp)
	movq	-160(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -108(%rbp)
	movl	-136(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -148(%rbp)
	movq	-160(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -208(%rbp)
	movq	-160(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -128(%rbp)
	movl	-208(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -140(%rbp)
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -204(%rbp)
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -188(%rbp)
	movl	$0, -12(%rbp)
.LBB75_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB75_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -16(%rbp)
.LBB75_3:                               # %for.cond38
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB75_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB75_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-132(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-124(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-132(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-124(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB75_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_3
.LBB75_6:                               # %for.end
                                        #   in Loop: Header=BB75_1 Depth=1
	jmp	.LBB75_7
.LBB75_7:                               # %for.inc66
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_1
.LBB75_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB75_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB75_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB75_9 Depth=1
	movl	$0, -16(%rbp)
.LBB75_11:                              # %for.cond73
                                        #   Parent Loop BB75_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB75_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB75_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB75_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_11
.LBB75_14:                              # %for.end106
                                        #   in Loop: Header=BB75_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB75_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_9
.LBB75_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB75_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB75_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB75_17 Depth=1
	movl	$0, -12(%rbp)
.LBB75_19:                              # %for.cond144
                                        #   Parent Loop BB75_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB75_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB75_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB75_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_19
.LBB75_22:                              # %for.end177
                                        #   in Loop: Header=BB75_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB75_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_17
.LBB75_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB75_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB75_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB75_25 Depth=1
	movl	$0, -16(%rbp)
.LBB75_27:                              # %for.cond215
                                        #   Parent Loop BB75_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB75_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB75_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB75_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_27
.LBB75_30:                              # %for.end244
                                        #   in Loop: Header=BB75_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB75_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_25
.LBB75_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB75_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB75_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB75_33 Depth=1
	movl	$0, -12(%rbp)
.LBB75_35:                              # %for.cond278
                                        #   Parent Loop BB75_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB75_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB75_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB75_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_35
.LBB75_38:                              # %for.end307
                                        #   in Loop: Header=BB75_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB75_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_33
.LBB75_40:                              # %for.end336
	movl	$0, -180(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -64(%rbp)
.LBB75_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -64(%rbp)
	jge	.LBB75_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB75_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB75_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB75_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB75_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB75_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB75_46
.LBB75_45:                              # %if.then
                                        #   in Loop: Header=BB75_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_47
.LBB75_46:                              # %if.else
                                        #   in Loop: Header=BB75_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB75_47:                              # %if.end
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -100(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-128(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-188(%rbp), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-128(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -112(%rbp)
	movl	-112(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-204(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -120(%rbp)
	movl	-120(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-204(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	je	.LBB75_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB75_41 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB75_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB75_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB75_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB75_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movl	-112(%rbp), %esi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-20(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-56(%rbp), %edi
	movl	-120(%rbp), %esi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	movl	-56(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-168(%rbp), %xmm0
	jne	.LBB75_55
	jp	.LBB75_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	-20(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-56(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB75_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB75_54
.LBB75_53:                              # %cond.false
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	-56(%rbp), %eax
.LBB75_54:                              # %cond.end
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	%eax, -60(%rbp)
	jmp	.LBB75_59
.LBB75_55:                              # %if.else500
                                        #   in Loop: Header=BB75_41 Depth=1
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-168(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB75_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB75_58
.LBB75_57:                              # %if.else504
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB75_58:                              # %if.end505
                                        #   in Loop: Header=BB75_41 Depth=1
	jmp	.LBB75_59
.LBB75_59:                              # %if.end506
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jne	.LBB75_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	-112(%rbp), %eax
	jmp	.LBB75_62
.LBB75_61:                              # %cond.false510
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	-120(%rbp), %eax
.LBB75_62:                              # %cond.end511
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	%eax, -116(%rbp)
	jmp	.LBB75_73
.LBB75_63:                              # %if.else513
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.LBB75_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB75_72
.LBB75_65:                              # %if.else517
                                        #   in Loop: Header=BB75_41 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB75_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB75_68
.LBB75_67:                              # %cond.false521
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	-56(%rbp), %eax
.LBB75_68:                              # %cond.end522
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	%eax, -60(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB75_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	-112(%rbp), %eax
	jmp	.LBB75_71
.LBB75_70:                              # %cond.false527
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	-120(%rbp), %eax
.LBB75_71:                              # %cond.end528
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	%eax, -116(%rbp)
.LBB75_72:                              # %if.end530
                                        #   in Loop: Header=BB75_41 Depth=1
	jmp	.LBB75_73
.LBB75_73:                              # %if.end531
                                        #   in Loop: Header=BB75_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB75_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	$1, -180(%rbp)
	cmpl	$1, -60(%rbp)
	jle	.LBB75_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB75_41 Depth=1
	movq	-232(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB75_77
.LBB75_76:                              # %if.else539
                                        #   in Loop: Header=BB75_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-232(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB75_77:                              # %if.end546
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	-60(%rbp), %edi
	movl	-116(%rbp), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -68(%rbp)
	movl	-60(%rbp), %edi
	movl	-116(%rbp), %esi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -100(%rbp)
.LBB75_78:                              # %if.end568
                                        #   in Loop: Header=BB75_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-128(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-188(%rbp), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-100(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-128(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB75_41
.LBB75_80:                              # %for.end600
	movq	-224(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB75_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_83 Depth 2
                                        #     Child Loop BB75_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB75_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	$0, -16(%rbp)
.LBB75_83:                              # %for.cond607
                                        #   Parent Loop BB75_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB75_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB75_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB75_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_83
.LBB75_86:                              # %for.end620
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB75_87:                              # %for.cond639
                                        #   Parent Loop BB75_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB75_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB75_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB75_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_87
.LBB75_90:                              # %for.end666
                                        #   in Loop: Header=BB75_81 Depth=1
	jmp	.LBB75_91
.LBB75_91:                              # %for.inc667
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_81
.LBB75_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB75_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_95 Depth 2
                                        #     Child Loop BB75_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB75_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB75_93 Depth=1
	movl	$0, -12(%rbp)
.LBB75_95:                              # %for.cond674
                                        #   Parent Loop BB75_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB75_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB75_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB75_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_95
.LBB75_98:                              # %for.end687
                                        #   in Loop: Header=BB75_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB75_99:                              # %for.cond706
                                        #   Parent Loop BB75_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB75_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB75_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB75_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB75_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB75_103
.LBB75_102:                             # %cond.false721
                                        #   in Loop: Header=BB75_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB75_103:                             # %cond.end729
                                        #   in Loop: Header=BB75_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB75_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB75_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_109
.LBB75_105:                             # %cond.false735
                                        #   in Loop: Header=BB75_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB75_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB75_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB75_108
.LBB75_107:                             # %cond.false746
                                        #   in Loop: Header=BB75_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB75_108:                             # %cond.end754
                                        #   in Loop: Header=BB75_99 Depth=2
.LBB75_109:                             # %cond.end756
                                        #   in Loop: Header=BB75_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB75_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB75_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB75_112
.LBB75_111:                             # %cond.false774
                                        #   in Loop: Header=BB75_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB75_112:                             # %cond.end782
                                        #   in Loop: Header=BB75_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB75_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB75_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_118
.LBB75_114:                             # %cond.false788
                                        #   in Loop: Header=BB75_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB75_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB75_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB75_117
.LBB75_116:                             # %cond.false799
                                        #   in Loop: Header=BB75_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB75_117:                             # %cond.end807
                                        #   in Loop: Header=BB75_99 Depth=2
.LBB75_118:                             # %cond.end809
                                        #   in Loop: Header=BB75_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB75_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_99
.LBB75_120:                             # %for.end818
                                        #   in Loop: Header=BB75_93 Depth=1
	jmp	.LBB75_121
.LBB75_121:                             # %for.inc819
                                        #   in Loop: Header=BB75_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_93
.LBB75_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB75_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB75_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB75_123 Depth=1
	movl	$0, -16(%rbp)
.LBB75_125:                             # %for.cond826
                                        #   Parent Loop BB75_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB75_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB75_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-124(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-132(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB75_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_125
.LBB75_128:                             # %for.end846
                                        #   in Loop: Header=BB75_123 Depth=1
	jmp	.LBB75_129
.LBB75_129:                             # %for.inc847
                                        #   in Loop: Header=BB75_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_123
.LBB75_130:                             # %for.end849
	movl	-180(%rbp), %ebx
	cmpl	$242708274, -216(%rbp)  # imm = 0xE776F32
	jne	.LBB75_132
.LBB75_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_131
.Lfunc_end75:
	.size	dct_luma_sp.66, .Lfunc_end75-dct_luma_sp.66
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.67        # -- Begin function dct_chroma4x4.67
	.p2align	4, 0x90
	.type	dct_chroma4x4.67,@function
dct_chroma4x4.67:                       # @dct_chroma4x4.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1411898194, -148(%rbp) # imm = 0x5427DB52
	movl	%edi, -28(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -104(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB76_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB76_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB76_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB76_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB76_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-28(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -84(%rbp)
	jge	.LBB76_7
# %bb.6:                                # %cond.true
	movl	-84(%rbp), %eax
	jmp	.LBB76_8
.LBB76_7:                               # %cond.false
	movl	-84(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB76_8:                               # %cond.end
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB76_18
# %bb.9:                                # %if.then
	movl	$0, -12(%rbp)
.LBB76_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_12 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB76_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB76_10 Depth=1
	movl	$0, -16(%rbp)
.LBB76_12:                              # %for.cond31
                                        #   Parent Loop BB76_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB76_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB76_12 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB76_12 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_12
.LBB76_15:                              # %for.end
                                        #   in Loop: Header=BB76_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB76_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_10
.LBB76_17:                              # %for.end92
	jmp	.LBB76_18
.LBB76_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB76_28
# %bb.19:                               # %if.then94
	movl	$0, -16(%rbp)
.LBB76_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_22 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB76_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB76_20 Depth=1
	movl	$0, -12(%rbp)
.LBB76_22:                              # %for.cond99
                                        #   Parent Loop BB76_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB76_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB76_22 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB76_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_22
.LBB76_25:                              # %for.end132
                                        #   in Loop: Header=BB76_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB76_20 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_20
.LBB76_27:                              # %for.end165
	jmp	.LBB76_28
.LBB76_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -108(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB76_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB76_34
.LBB76_30:                              # %if.else
	cmpl	$1, -88(%rbp)
	jne	.LBB76_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB76_33
.LBB76_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB76_33:                              # %if.end213
	jmp	.LBB76_34
.LBB76_34:                              # %if.end214
	movl	-28(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-80(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-104(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-80(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-104(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB76_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB76_46
.LBB76_36:                              # %if.else245
	cmpl	$4, -24(%rbp)
	jge	.LBB76_41
# %bb.37:                               # %if.then248
	cmpl	$1, -88(%rbp)
	jne	.LBB76_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB76_40
.LBB76_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB76_40:                              # %if.end290
	jmp	.LBB76_45
.LBB76_41:                              # %if.else291
	cmpl	$1, -88(%rbp)
	jne	.LBB76_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB76_44
.LBB76_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB76_44:                              # %if.end328
	jmp	.LBB76_45
.LBB76_45:                              # %if.end329
	jmp	.LBB76_46
.LBB76_46:                              # %if.end330
	movl	$1, -92(%rbp)
.LBB76_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -92(%rbp)
	jge	.LBB76_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB76_47 Depth=1
	movslq	-92(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-92(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -76(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB76_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB76_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB76_54
.LBB76_50:                              # %if.else352
                                        #   in Loop: Header=BB76_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB76_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB76_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB76_53
.LBB76_52:                              # %if.else381
                                        #   in Loop: Header=BB76_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB76_53:                              # %if.end407
                                        #   in Loop: Header=BB76_47 Depth=1
	jmp	.LBB76_54
.LBB76_54:                              # %if.end408
                                        #   in Loop: Header=BB76_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB76_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB76_47 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB76_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB76_47 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB76_58
.LBB76_57:                              # %if.then415
                                        #   in Loop: Header=BB76_47 Depth=1
	movl	$1, -132(%rbp)
.LBB76_58:                              # %if.end416
                                        #   in Loop: Header=BB76_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-108(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	$-1, -108(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB76_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB76_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB76_70
.LBB76_60:                              # %if.else436
                                        #   in Loop: Header=BB76_47 Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB76_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB76_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB76_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB76_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB76_64
.LBB76_63:                              # %if.else457
                                        #   in Loop: Header=BB76_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -76(%rbp)
.LBB76_64:                              # %if.end472
                                        #   in Loop: Header=BB76_47 Depth=1
	jmp	.LBB76_69
.LBB76_65:                              # %if.else473
                                        #   in Loop: Header=BB76_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB76_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB76_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB76_68
.LBB76_67:                              # %if.else488
                                        #   in Loop: Header=BB76_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
.LBB76_68:                              # %if.end500
                                        #   in Loop: Header=BB76_47 Depth=1
	jmp	.LBB76_69
.LBB76_69:                              # %if.end501
                                        #   in Loop: Header=BB76_47 Depth=1
	jmp	.LBB76_70
.LBB76_70:                              # %if.end502
                                        #   in Loop: Header=BB76_47 Depth=1
	jmp	.LBB76_71
.LBB76_71:                              # %if.end503
                                        #   in Loop: Header=BB76_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB76_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB76_47 Depth=1
	movl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB76_73:                              # %if.end511
                                        #   in Loop: Header=BB76_47 Depth=1
	jmp	.LBB76_74
.LBB76_74:                              # %for.inc512
                                        #   in Loop: Header=BB76_47 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB76_47
.LBB76_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-96(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB76_89
# %bb.76:                               # %if.then518
	movl	$0, -12(%rbp)
.LBB76_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_79 Depth 2
                                        #     Child Loop BB76_83 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB76_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB76_77 Depth=1
	movl	$0, -16(%rbp)
.LBB76_79:                              # %for.cond523
                                        #   Parent Loop BB76_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB76_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB76_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB76_79 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_79
.LBB76_82:                              # %for.end536
                                        #   in Loop: Header=BB76_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB76_83:                              # %for.cond555
                                        #   Parent Loop BB76_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB76_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB76_83 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB76_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_83
.LBB76_86:                              # %for.end582
                                        #   in Loop: Header=BB76_77 Depth=1
	jmp	.LBB76_87
.LBB76_87:                              # %for.inc583
                                        #   in Loop: Header=BB76_77 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_77
.LBB76_88:                              # %for.end585
	jmp	.LBB76_89
.LBB76_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB76_103
# %bb.90:                               # %if.then588
	movl	$0, -16(%rbp)
.LBB76_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_93 Depth 2
                                        #     Child Loop BB76_97 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB76_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB76_91 Depth=1
	movl	$0, -12(%rbp)
.LBB76_93:                              # %for.cond593
                                        #   Parent Loop BB76_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB76_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB76_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB76_93 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_93
.LBB76_96:                              # %for.end606
                                        #   in Loop: Header=BB76_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB76_97:                              # %for.cond625
                                        #   Parent Loop BB76_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB76_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB76_97 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB76_97 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_97
.LBB76_100:                             # %for.end656
                                        #   in Loop: Header=BB76_91 Depth=1
	jmp	.LBB76_101
.LBB76_101:                             # %for.inc657
                                        #   in Loop: Header=BB76_91 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_91
.LBB76_102:                             # %for.end659
	jmp	.LBB76_103
.LBB76_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$1411898194, -148(%rbp) # imm = 0x5427DB52
	jne	.LBB76_105
.LBB76_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_104
.Lfunc_end76:
	.size	dct_chroma4x4.67, .Lfunc_end76-dct_chroma4x4.67
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.68        # -- Begin function dct_chroma4x4.68
	.p2align	4, 0x90
	.type	dct_chroma4x4.68,@function
dct_chroma4x4.68:                       # @dct_chroma4x4.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$429067248, -148(%rbp)  # imm = 0x19930BF0
	movl	%edi, -28(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -108(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB77_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB77_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB77_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -76(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB77_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB77_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-28(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -84(%rbp)
	jge	.LBB77_7
# %bb.6:                                # %cond.true
	movl	-84(%rbp), %eax
	jmp	.LBB77_8
.LBB77_7:                               # %cond.false
	movl	-84(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB77_8:                               # %cond.end
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB77_18
# %bb.9:                                # %if.then
	movl	$0, -16(%rbp)
.LBB77_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_12 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB77_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB77_10 Depth=1
	movl	$0, -12(%rbp)
.LBB77_12:                              # %for.cond31
                                        #   Parent Loop BB77_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB77_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB77_12 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB77_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_12
.LBB77_15:                              # %for.end
                                        #   in Loop: Header=BB77_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB77_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_10
.LBB77_17:                              # %for.end92
	jmp	.LBB77_18
.LBB77_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB77_28
# %bb.19:                               # %if.then94
	movl	$0, -12(%rbp)
.LBB77_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_22 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB77_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB77_20 Depth=1
	movl	$0, -16(%rbp)
.LBB77_22:                              # %for.cond99
                                        #   Parent Loop BB77_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB77_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB77_22 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB77_22 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_22
.LBB77_25:                              # %for.end132
                                        #   in Loop: Header=BB77_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB77_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_20
.LBB77_27:                              # %for.end165
	jmp	.LBB77_28
.LBB77_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB77_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB77_34
.LBB77_30:                              # %if.else
	cmpl	$1, -76(%rbp)
	jne	.LBB77_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB77_33
.LBB77_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB77_33:                              # %if.end213
	jmp	.LBB77_34
.LBB77_34:                              # %if.end214
	movl	-28(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-88(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-88(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-88(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB77_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB77_46
.LBB77_36:                              # %if.else245
	cmpl	$4, -24(%rbp)
	jge	.LBB77_41
# %bb.37:                               # %if.then248
	cmpl	$1, -76(%rbp)
	jne	.LBB77_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB77_40
.LBB77_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB77_40:                              # %if.end290
	jmp	.LBB77_45
.LBB77_41:                              # %if.else291
	cmpl	$1, -76(%rbp)
	jne	.LBB77_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB77_44
.LBB77_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB77_44:                              # %if.end328
	jmp	.LBB77_45
.LBB77_45:                              # %if.end329
	jmp	.LBB77_46
.LBB77_46:                              # %if.end330
	movl	$1, -92(%rbp)
.LBB77_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -92(%rbp)
	jge	.LBB77_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB77_47 Depth=1
	movslq	-92(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movslq	-92(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -80(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB77_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB77_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB77_54
.LBB77_50:                              # %if.else352
                                        #   in Loop: Header=BB77_47 Depth=1
	cmpl	$1, -76(%rbp)
	jne	.LBB77_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB77_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB77_53
.LBB77_52:                              # %if.else381
                                        #   in Loop: Header=BB77_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB77_53:                              # %if.end407
                                        #   in Loop: Header=BB77_47 Depth=1
	jmp	.LBB77_54
.LBB77_54:                              # %if.end408
                                        #   in Loop: Header=BB77_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB77_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB77_47 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB77_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB77_47 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB77_58
.LBB77_57:                              # %if.then415
                                        #   in Loop: Header=BB77_47 Depth=1
	movl	$1, -132(%rbp)
.LBB77_58:                              # %if.end416
                                        #   in Loop: Header=BB77_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	$-1, -100(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB77_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB77_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB77_70
.LBB77_60:                              # %if.else436
                                        #   in Loop: Header=BB77_47 Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB77_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB77_47 Depth=1
	cmpl	$1, -76(%rbp)
	jne	.LBB77_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB77_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB77_64
.LBB77_63:                              # %if.else457
                                        #   in Loop: Header=BB77_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -80(%rbp)
.LBB77_64:                              # %if.end472
                                        #   in Loop: Header=BB77_47 Depth=1
	jmp	.LBB77_69
.LBB77_65:                              # %if.else473
                                        #   in Loop: Header=BB77_47 Depth=1
	cmpl	$1, -76(%rbp)
	jne	.LBB77_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB77_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB77_68
.LBB77_67:                              # %if.else488
                                        #   in Loop: Header=BB77_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -80(%rbp)
.LBB77_68:                              # %if.end500
                                        #   in Loop: Header=BB77_47 Depth=1
	jmp	.LBB77_69
.LBB77_69:                              # %if.end501
                                        #   in Loop: Header=BB77_47 Depth=1
	jmp	.LBB77_70
.LBB77_70:                              # %if.end502
                                        #   in Loop: Header=BB77_47 Depth=1
	jmp	.LBB77_71
.LBB77_71:                              # %if.end503
                                        #   in Loop: Header=BB77_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB77_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB77_47 Depth=1
	movl	-80(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB77_73:                              # %if.end511
                                        #   in Loop: Header=BB77_47 Depth=1
	jmp	.LBB77_74
.LBB77_74:                              # %for.inc512
                                        #   in Loop: Header=BB77_47 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB77_47
.LBB77_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-96(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB77_89
# %bb.76:                               # %if.then518
	movl	$0, -16(%rbp)
.LBB77_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_79 Depth 2
                                        #     Child Loop BB77_83 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB77_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB77_77 Depth=1
	movl	$0, -12(%rbp)
.LBB77_79:                              # %for.cond523
                                        #   Parent Loop BB77_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB77_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB77_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB77_79 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_79
.LBB77_82:                              # %for.end536
                                        #   in Loop: Header=BB77_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB77_83:                              # %for.cond555
                                        #   Parent Loop BB77_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB77_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB77_83 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB77_83 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_83
.LBB77_86:                              # %for.end582
                                        #   in Loop: Header=BB77_77 Depth=1
	jmp	.LBB77_87
.LBB77_87:                              # %for.inc583
                                        #   in Loop: Header=BB77_77 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_77
.LBB77_88:                              # %for.end585
	jmp	.LBB77_89
.LBB77_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB77_103
# %bb.90:                               # %if.then588
	movl	$0, -12(%rbp)
.LBB77_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_93 Depth 2
                                        #     Child Loop BB77_97 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB77_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB77_91 Depth=1
	movl	$0, -16(%rbp)
.LBB77_93:                              # %for.cond593
                                        #   Parent Loop BB77_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB77_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB77_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB77_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_93
.LBB77_96:                              # %for.end606
                                        #   in Loop: Header=BB77_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB77_97:                              # %for.cond625
                                        #   Parent Loop BB77_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB77_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB77_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB77_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_97
.LBB77_100:                             # %for.end656
                                        #   in Loop: Header=BB77_91 Depth=1
	jmp	.LBB77_101
.LBB77_101:                             # %for.inc657
                                        #   in Loop: Header=BB77_91 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_91
.LBB77_102:                             # %for.end659
	jmp	.LBB77_103
.LBB77_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$429067248, -148(%rbp)  # imm = 0x19930BF0
	jne	.LBB77_105
.LBB77_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_104
.Lfunc_end77:
	.size	dct_chroma4x4.68, .Lfunc_end77-dct_chroma4x4.68
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.69        # -- Begin function dct_chroma4x4.69
	.p2align	4, 0x90
	.type	dct_chroma4x4.69,@function
dct_chroma4x4.69:                       # @dct_chroma4x4.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$756707567, -148(%rbp)  # imm = 0x2D1A70EF
	movl	%edi, -24(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -108(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB78_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB78_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB78_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -84(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB78_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB78_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-24(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -76(%rbp)
	cmpl	$0, -76(%rbp)
	jge	.LBB78_7
# %bb.6:                                # %cond.true
	movl	-76(%rbp), %eax
	jmp	.LBB78_8
.LBB78_7:                               # %cond.false
	movl	-76(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB78_8:                               # %cond.end
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB78_18
# %bb.9:                                # %if.then
	movl	$0, -12(%rbp)
.LBB78_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_12 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB78_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB78_10 Depth=1
	movl	$0, -16(%rbp)
.LBB78_12:                              # %for.cond31
                                        #   Parent Loop BB78_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB78_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB78_12 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB78_12 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB78_12
.LBB78_15:                              # %for.end
                                        #   in Loop: Header=BB78_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB78_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB78_10
.LBB78_17:                              # %for.end92
	jmp	.LBB78_18
.LBB78_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB78_28
# %bb.19:                               # %if.then94
	movl	$0, -16(%rbp)
.LBB78_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_22 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB78_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB78_20 Depth=1
	movl	$0, -12(%rbp)
.LBB78_22:                              # %for.cond99
                                        #   Parent Loop BB78_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB78_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB78_22 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB78_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB78_22
.LBB78_25:                              # %for.end132
                                        #   in Loop: Header=BB78_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB78_20 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB78_20
.LBB78_27:                              # %for.end165
	jmp	.LBB78_28
.LBB78_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB78_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB78_34
.LBB78_30:                              # %if.else
	cmpl	$1, -84(%rbp)
	jne	.LBB78_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_33
.LBB78_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB78_33:                              # %if.end213
	jmp	.LBB78_34
.LBB78_34:                              # %if.end214
	movl	-24(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-80(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-80(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB78_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB78_46
.LBB78_36:                              # %if.else245
	cmpl	$4, -28(%rbp)
	jge	.LBB78_41
# %bb.37:                               # %if.then248
	cmpl	$1, -84(%rbp)
	jne	.LBB78_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB78_40
.LBB78_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB78_40:                              # %if.end290
	jmp	.LBB78_45
.LBB78_41:                              # %if.else291
	cmpl	$1, -84(%rbp)
	jne	.LBB78_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB78_44
.LBB78_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB78_44:                              # %if.end328
	jmp	.LBB78_45
.LBB78_45:                              # %if.end329
	jmp	.LBB78_46
.LBB78_46:                              # %if.end330
	movl	$1, -92(%rbp)
.LBB78_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -92(%rbp)
	jge	.LBB78_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB78_47 Depth=1
	movslq	-92(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-92(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -88(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB78_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB78_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB78_54
.LBB78_50:                              # %if.else352
                                        #   in Loop: Header=BB78_47 Depth=1
	cmpl	$1, -84(%rbp)
	jne	.LBB78_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB78_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_53
.LBB78_52:                              # %if.else381
                                        #   in Loop: Header=BB78_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB78_53:                              # %if.end407
                                        #   in Loop: Header=BB78_47 Depth=1
	jmp	.LBB78_54
.LBB78_54:                              # %if.end408
                                        #   in Loop: Header=BB78_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB78_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB78_47 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB78_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB78_47 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB78_58
.LBB78_57:                              # %if.then415
                                        #   in Loop: Header=BB78_47 Depth=1
	movl	$1, -132(%rbp)
.LBB78_58:                              # %if.end416
                                        #   in Loop: Header=BB78_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	$-1, -100(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB78_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB78_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB78_70
.LBB78_60:                              # %if.else436
                                        #   in Loop: Header=BB78_47 Depth=1
	cmpl	$4, -28(%rbp)
	jge	.LBB78_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB78_47 Depth=1
	cmpl	$1, -84(%rbp)
	jne	.LBB78_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB78_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB78_64
.LBB78_63:                              # %if.else457
                                        #   in Loop: Header=BB78_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -88(%rbp)
.LBB78_64:                              # %if.end472
                                        #   in Loop: Header=BB78_47 Depth=1
	jmp	.LBB78_69
.LBB78_65:                              # %if.else473
                                        #   in Loop: Header=BB78_47 Depth=1
	cmpl	$1, -84(%rbp)
	jne	.LBB78_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB78_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB78_68
.LBB78_67:                              # %if.else488
                                        #   in Loop: Header=BB78_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -88(%rbp)
.LBB78_68:                              # %if.end500
                                        #   in Loop: Header=BB78_47 Depth=1
	jmp	.LBB78_69
.LBB78_69:                              # %if.end501
                                        #   in Loop: Header=BB78_47 Depth=1
	jmp	.LBB78_70
.LBB78_70:                              # %if.end502
                                        #   in Loop: Header=BB78_47 Depth=1
	jmp	.LBB78_71
.LBB78_71:                              # %if.end503
                                        #   in Loop: Header=BB78_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB78_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB78_47 Depth=1
	movl	-88(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB78_73:                              # %if.end511
                                        #   in Loop: Header=BB78_47 Depth=1
	jmp	.LBB78_74
.LBB78_74:                              # %for.inc512
                                        #   in Loop: Header=BB78_47 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB78_47
.LBB78_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-96(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB78_89
# %bb.76:                               # %if.then518
	movl	$0, -12(%rbp)
.LBB78_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_79 Depth 2
                                        #     Child Loop BB78_83 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB78_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB78_77 Depth=1
	movl	$0, -16(%rbp)
.LBB78_79:                              # %for.cond523
                                        #   Parent Loop BB78_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB78_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB78_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB78_79 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB78_79
.LBB78_82:                              # %for.end536
                                        #   in Loop: Header=BB78_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB78_83:                              # %for.cond555
                                        #   Parent Loop BB78_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB78_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB78_83 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB78_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB78_83
.LBB78_86:                              # %for.end582
                                        #   in Loop: Header=BB78_77 Depth=1
	jmp	.LBB78_87
.LBB78_87:                              # %for.inc583
                                        #   in Loop: Header=BB78_77 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB78_77
.LBB78_88:                              # %for.end585
	jmp	.LBB78_89
.LBB78_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB78_103
# %bb.90:                               # %if.then588
	movl	$0, -16(%rbp)
.LBB78_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_93 Depth 2
                                        #     Child Loop BB78_97 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB78_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB78_91 Depth=1
	movl	$0, -12(%rbp)
.LBB78_93:                              # %for.cond593
                                        #   Parent Loop BB78_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB78_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB78_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB78_93 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB78_93
.LBB78_96:                              # %for.end606
                                        #   in Loop: Header=BB78_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB78_97:                              # %for.cond625
                                        #   Parent Loop BB78_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB78_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB78_97 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB78_97 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB78_97
.LBB78_100:                             # %for.end656
                                        #   in Loop: Header=BB78_91 Depth=1
	jmp	.LBB78_101
.LBB78_101:                             # %for.inc657
                                        #   in Loop: Header=BB78_91 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB78_91
.LBB78_102:                             # %for.end659
	jmp	.LBB78_103
.LBB78_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$756707567, -148(%rbp)  # imm = 0x2D1A70EF
	jne	.LBB78_105
.LBB78_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_104
.Lfunc_end78:
	.size	dct_chroma4x4.69, .Lfunc_end78-dct_chroma4x4.69
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.70        # -- Begin function dct_chroma_DC.70
	.p2align	4, 0x90
	.type	dct_chroma_DC.70,@function
dct_chroma_DC.70:                       # @dct_chroma_DC.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1857757738, -44(%rbp)  # imm = 0x6EBB222A
	movl	%edi, -20(%rbp)
	movl	%esi, -28(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -24(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB79_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB79_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB79_1 Depth=1
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB79_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	$1, %eax
	cmpl	-28(%rbp), %eax
	jle	.LBB79_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	$1, %eax
	jmp	.LBB79_6
.LBB79_5:                               # %cond.false
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	-28(%rbp), %eax
.LBB79_6:                               # %cond.end
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	%eax, -28(%rbp)
	movl	-36(%rbp), %edi
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-24(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	$-1, -24(%rbp)
.LBB79_7:                               # %if.end
                                        #   in Loop: Header=BB79_1 Depth=1
	jmp	.LBB79_8
.LBB79_8:                               # %for.inc
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_1
.LBB79_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-28(%rbp), %ebx
	cmpl	$1857757738, -44(%rbp)  # imm = 0x6EBB222A
	jne	.LBB79_11
.LBB79_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_10
.Lfunc_end79:
	.size	dct_chroma_DC.70, .Lfunc_end79-dct_chroma_DC.70
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.71        # -- Begin function dct_chroma_DC.71
	.p2align	4, 0x90
	.type	dct_chroma_DC.71,@function
dct_chroma_DC.71:                       # @dct_chroma_DC.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$179245969, -44(%rbp)   # imm = 0xAAF1391
	movl	%edi, -28(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -24(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB80_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB80_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB80_1 Depth=1
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB80_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$1, %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB80_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$1, %eax
	jmp	.LBB80_6
.LBB80_5:                               # %cond.false
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	-20(%rbp), %eax
.LBB80_6:                               # %cond.end
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	%eax, -20(%rbp)
	movl	-36(%rbp), %edi
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-24(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	$-1, -24(%rbp)
.LBB80_7:                               # %if.end
                                        #   in Loop: Header=BB80_1 Depth=1
	jmp	.LBB80_8
.LBB80_8:                               # %for.inc
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_1
.LBB80_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-20(%rbp), %ebx
	cmpl	$179245969, -44(%rbp)   # imm = 0xAAF1391
	jne	.LBB80_11
.LBB80_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_10
.Lfunc_end80:
	.size	dct_chroma_DC.71, .Lfunc_end80-dct_chroma_DC.71
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.72             # -- Begin function dct_luma.72
	.p2align	4, 0x90
	.type	dct_luma.72,@function
dct_luma.72:                            # @dct_luma.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$982324778, -148(%rbp)  # imm = 0x3A8D162A
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -160(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -128(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -120(%rbp)
	movl	-124(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -116(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB81_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB81_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -92(%rbp)
	movl	-36(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB81_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB81_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB81_3 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB81_5:                               # %land.end32
                                        #   in Loop: Header=BB81_3 Depth=1
	testb	$1, %al
	jne	.LBB81_6
	jmp	.LBB81_12
.LBB81_6:                               # %for.body
                                        #   in Loop: Header=BB81_3 Depth=1
	movl	$0, -16(%rbp)
.LBB81_7:                               # %for.cond34
                                        #   Parent Loop BB81_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB81_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB81_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB81_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_7
.LBB81_10:                              # %for.end
                                        #   in Loop: Header=BB81_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB81_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_3
.LBB81_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB81_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB81_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB81_13 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB81_15:                              # %land.end101
                                        #   in Loop: Header=BB81_13 Depth=1
	testb	$1, %al
	jne	.LBB81_16
	jmp	.LBB81_22
.LBB81_16:                              # %for.body103
                                        #   in Loop: Header=BB81_13 Depth=1
	movl	$0, -12(%rbp)
.LBB81_17:                              # %for.cond104
                                        #   Parent Loop BB81_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB81_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB81_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB81_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_17
.LBB81_20:                              # %for.end136
                                        #   in Loop: Header=BB81_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB81_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_13
.LBB81_22:                              # %for.end169
	movl	$0, -132(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -88(%rbp)
.LBB81_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -88(%rbp)
	jge	.LBB81_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB81_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB81_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB81_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB81_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB81_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB81_28
.LBB81_27:                              # %if.then
                                        #   in Loop: Header=BB81_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_29
.LBB81_28:                              # %if.else
                                        #   in Loop: Header=BB81_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB81_29:                              # %if.end
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB81_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB81_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -24(%rbp)
	jmp	.LBB81_35
.LBB81_31:                              # %if.else199
                                        #   in Loop: Header=BB81_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB81_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB81_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB81_34
.LBB81_33:                              # %if.else223
                                        #   in Loop: Header=BB81_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
.LBB81_34:                              # %if.end245
                                        #   in Loop: Header=BB81_23 Depth=1
	jmp	.LBB81_35
.LBB81_35:                              # %if.end246
                                        #   in Loop: Header=BB81_23 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB81_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	$1, -132(%rbp)
	cmpl	$1, -24(%rbp)
	jg	.LBB81_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB81_23 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB81_39
.LBB81_38:                              # %if.then254
                                        #   in Loop: Header=BB81_23 Depth=1
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB81_40
.LBB81_39:                              # %if.else256
                                        #   in Loop: Header=BB81_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-104(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-160(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB81_40:                              # %if.end263
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-24(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-168(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -104(%rbp)
	movl	-24(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -24(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB81_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB81_52
.LBB81_42:                              # %if.else283
                                        #   in Loop: Header=BB81_23 Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB81_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB81_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB81_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB81_46
.LBB81_45:                              # %if.else301
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB81_46:                              # %if.end314
                                        #   in Loop: Header=BB81_23 Depth=1
	jmp	.LBB81_51
.LBB81_47:                              # %if.else315
                                        #   in Loop: Header=BB81_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB81_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB81_50
.LBB81_49:                              # %if.else328
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB81_50:                              # %if.end338
                                        #   in Loop: Header=BB81_23 Depth=1
	jmp	.LBB81_51
.LBB81_51:                              # %if.end339
                                        #   in Loop: Header=BB81_23 Depth=1
	jmp	.LBB81_52
.LBB81_52:                              # %if.end340
                                        #   in Loop: Header=BB81_23 Depth=1
	jmp	.LBB81_53
.LBB81_53:                              # %if.end341
                                        #   in Loop: Header=BB81_23 Depth=1
	cmpl	$0, -40(%rbp)
	jne	.LBB81_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB81_55:                              # %if.end349
                                        #   in Loop: Header=BB81_23 Depth=1
	jmp	.LBB81_56
.LBB81_56:                              # %for.inc350
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB81_23
.LBB81_57:                              # %for.end352
	movq	-168(%rbp), %rax
	movslq	-100(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB81_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_62 Depth 2
                                        #     Child Loop BB81_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB81_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB81_58 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB81_60:                              # %land.end361
                                        #   in Loop: Header=BB81_58 Depth=1
	testb	$1, %al
	jne	.LBB81_61
	jmp	.LBB81_71
.LBB81_61:                              # %for.body363
                                        #   in Loop: Header=BB81_58 Depth=1
	movl	$0, -16(%rbp)
.LBB81_62:                              # %for.cond364
                                        #   Parent Loop BB81_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB81_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB81_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB81_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_62
.LBB81_65:                              # %for.end377
                                        #   in Loop: Header=BB81_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB81_66:                              # %for.cond396
                                        #   Parent Loop BB81_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB81_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB81_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB81_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_66
.LBB81_69:                              # %for.end423
                                        #   in Loop: Header=BB81_58 Depth=1
	jmp	.LBB81_70
.LBB81_70:                              # %for.inc424
                                        #   in Loop: Header=BB81_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_58
.LBB81_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB81_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_76 Depth 2
                                        #     Child Loop BB81_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB81_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB81_72 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB81_74:                              # %land.end433
                                        #   in Loop: Header=BB81_72 Depth=1
	testb	$1, %al
	jne	.LBB81_75
	jmp	.LBB81_109
.LBB81_75:                              # %for.body435
                                        #   in Loop: Header=BB81_72 Depth=1
	movl	$0, -12(%rbp)
.LBB81_76:                              # %for.cond436
                                        #   Parent Loop BB81_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB81_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB81_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB81_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_76
.LBB81_79:                              # %for.end449
                                        #   in Loop: Header=BB81_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB81_80:                              # %for.cond468
                                        #   Parent Loop BB81_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB81_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB81_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB81_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB81_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB81_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB81_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB81_85
.LBB81_84:                              # %cond.false
                                        #   in Loop: Header=BB81_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB81_85:                              # %cond.end
                                        #   in Loop: Header=BB81_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB81_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB81_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB81_91
.LBB81_87:                              # %cond.false518
                                        #   in Loop: Header=BB81_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB81_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB81_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB81_90
.LBB81_89:                              # %cond.false540
                                        #   in Loop: Header=BB81_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB81_90:                              # %cond.end559
                                        #   in Loop: Header=BB81_80 Depth=2
.LBB81_91:                              # %cond.end561
                                        #   in Loop: Header=BB81_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB81_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB81_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB81_94
.LBB81_93:                              # %cond.false592
                                        #   in Loop: Header=BB81_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB81_94:                              # %cond.end611
                                        #   in Loop: Header=BB81_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB81_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB81_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB81_100
.LBB81_96:                              # %cond.false618
                                        #   in Loop: Header=BB81_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB81_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB81_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB81_99
.LBB81_98:                              # %cond.false640
                                        #   in Loop: Header=BB81_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB81_99:                              # %cond.end659
                                        #   in Loop: Header=BB81_80 Depth=2
.LBB81_100:                             # %cond.end661
                                        #   in Loop: Header=BB81_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB81_105
.LBB81_101:                             # %if.else669
                                        #   in Loop: Header=BB81_80 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB81_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB81_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB81_104
.LBB81_103:                             # %if.else692
                                        #   in Loop: Header=BB81_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB81_104:                             # %if.end717
                                        #   in Loop: Header=BB81_80 Depth=2
	jmp	.LBB81_105
.LBB81_105:                             # %if.end718
                                        #   in Loop: Header=BB81_80 Depth=2
	jmp	.LBB81_106
.LBB81_106:                             # %for.inc719
                                        #   in Loop: Header=BB81_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_80
.LBB81_107:                             # %for.end721
                                        #   in Loop: Header=BB81_72 Depth=1
	jmp	.LBB81_108
.LBB81_108:                             # %for.inc722
                                        #   in Loop: Header=BB81_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_72
.LBB81_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB81_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB81_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB81_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB81_111 Depth=1
	movl	$0, -16(%rbp)
.LBB81_113:                             # %for.cond732
                                        #   Parent Loop BB81_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB81_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB81_113 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB81_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB81_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB81_117
.LBB81_116:                             # %if.else761
                                        #   in Loop: Header=BB81_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB81_117:                             # %if.end779
                                        #   in Loop: Header=BB81_113 Depth=2
	jmp	.LBB81_118
.LBB81_118:                             # %for.inc780
                                        #   in Loop: Header=BB81_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_113
.LBB81_119:                             # %for.end782
                                        #   in Loop: Header=BB81_111 Depth=1
	jmp	.LBB81_120
.LBB81_120:                             # %for.inc783
                                        #   in Loop: Header=BB81_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_111
.LBB81_121:                             # %for.end785
	jmp	.LBB81_122
.LBB81_122:                             # %if.end786
	movl	-132(%rbp), %ebx
	cmpl	$982324778, -148(%rbp)  # imm = 0x3A8D162A
	jne	.LBB81_124
.LBB81_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_123
.Lfunc_end81:
	.size	dct_luma.72, .Lfunc_end81-dct_luma.72
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.73             # -- Begin function dct_luma.73
	.p2align	4, 0x90
	.type	dct_luma.73,@function
dct_luma.73:                            # @dct_luma.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$159411672, -148(%rbp)  # imm = 0x9806DD8
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -160(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -116(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-116(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -132(%rbp)
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-116(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB82_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB82_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -96(%rbp)
	movl	-36(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -12(%rbp)
.LBB82_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB82_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB82_3 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB82_5:                               # %land.end32
                                        #   in Loop: Header=BB82_3 Depth=1
	testb	$1, %al
	jne	.LBB82_6
	jmp	.LBB82_12
.LBB82_6:                               # %for.body
                                        #   in Loop: Header=BB82_3 Depth=1
	movl	$0, -16(%rbp)
.LBB82_7:                               # %for.cond34
                                        #   Parent Loop BB82_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB82_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB82_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB82_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_7
.LBB82_10:                              # %for.end
                                        #   in Loop: Header=BB82_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB82_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_3
.LBB82_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB82_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB82_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB82_13 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB82_15:                              # %land.end101
                                        #   in Loop: Header=BB82_13 Depth=1
	testb	$1, %al
	jne	.LBB82_16
	jmp	.LBB82_22
.LBB82_16:                              # %for.body103
                                        #   in Loop: Header=BB82_13 Depth=1
	movl	$0, -12(%rbp)
.LBB82_17:                              # %for.cond104
                                        #   Parent Loop BB82_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB82_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB82_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB82_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_17
.LBB82_20:                              # %for.end136
                                        #   in Loop: Header=BB82_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB82_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_13
.LBB82_22:                              # %for.end169
	movl	$0, -120(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -84(%rbp)
.LBB82_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -84(%rbp)
	jge	.LBB82_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB82_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB82_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB82_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB82_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB82_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB82_28
.LBB82_27:                              # %if.then
                                        #   in Loop: Header=BB82_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_29
.LBB82_28:                              # %if.else
                                        #   in Loop: Header=BB82_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB82_29:                              # %if.end
                                        #   in Loop: Header=BB82_23 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB82_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB82_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	jmp	.LBB82_35
.LBB82_31:                              # %if.else199
                                        #   in Loop: Header=BB82_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB82_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB82_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB82_34
.LBB82_33:                              # %if.else223
                                        #   in Loop: Header=BB82_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -32(%rbp)
.LBB82_34:                              # %if.end245
                                        #   in Loop: Header=BB82_23 Depth=1
	jmp	.LBB82_35
.LBB82_35:                              # %if.end246
                                        #   in Loop: Header=BB82_23 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB82_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB82_23 Depth=1
	movl	$1, -120(%rbp)
	cmpl	$1, -32(%rbp)
	jg	.LBB82_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB82_23 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB82_39
.LBB82_38:                              # %if.then254
                                        #   in Loop: Header=BB82_23 Depth=1
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB82_40
.LBB82_39:                              # %if.else256
                                        #   in Loop: Header=BB82_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-104(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-160(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB82_40:                              # %if.end263
                                        #   in Loop: Header=BB82_23 Depth=1
	movl	-32(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-168(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -104(%rbp)
	movl	-32(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -32(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB82_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB82_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB82_52
.LBB82_42:                              # %if.else283
                                        #   in Loop: Header=BB82_23 Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB82_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB82_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB82_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB82_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB82_46
.LBB82_45:                              # %if.else301
                                        #   in Loop: Header=BB82_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB82_46:                              # %if.end314
                                        #   in Loop: Header=BB82_23 Depth=1
	jmp	.LBB82_51
.LBB82_47:                              # %if.else315
                                        #   in Loop: Header=BB82_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB82_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB82_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB82_50
.LBB82_49:                              # %if.else328
                                        #   in Loop: Header=BB82_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB82_50:                              # %if.end338
                                        #   in Loop: Header=BB82_23 Depth=1
	jmp	.LBB82_51
.LBB82_51:                              # %if.end339
                                        #   in Loop: Header=BB82_23 Depth=1
	jmp	.LBB82_52
.LBB82_52:                              # %if.end340
                                        #   in Loop: Header=BB82_23 Depth=1
	jmp	.LBB82_53
.LBB82_53:                              # %if.end341
                                        #   in Loop: Header=BB82_23 Depth=1
	cmpl	$0, -40(%rbp)
	jne	.LBB82_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB82_23 Depth=1
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB82_55:                              # %if.end349
                                        #   in Loop: Header=BB82_23 Depth=1
	jmp	.LBB82_56
.LBB82_56:                              # %for.inc350
                                        #   in Loop: Header=BB82_23 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB82_23
.LBB82_57:                              # %for.end352
	movq	-168(%rbp), %rax
	movslq	-100(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB82_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_62 Depth 2
                                        #     Child Loop BB82_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB82_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB82_58 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB82_60:                              # %land.end361
                                        #   in Loop: Header=BB82_58 Depth=1
	testb	$1, %al
	jne	.LBB82_61
	jmp	.LBB82_71
.LBB82_61:                              # %for.body363
                                        #   in Loop: Header=BB82_58 Depth=1
	movl	$0, -16(%rbp)
.LBB82_62:                              # %for.cond364
                                        #   Parent Loop BB82_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB82_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB82_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB82_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_62
.LBB82_65:                              # %for.end377
                                        #   in Loop: Header=BB82_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB82_66:                              # %for.cond396
                                        #   Parent Loop BB82_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB82_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB82_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB82_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_66
.LBB82_69:                              # %for.end423
                                        #   in Loop: Header=BB82_58 Depth=1
	jmp	.LBB82_70
.LBB82_70:                              # %for.inc424
                                        #   in Loop: Header=BB82_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_58
.LBB82_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB82_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_76 Depth 2
                                        #     Child Loop BB82_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB82_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB82_72 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB82_74:                              # %land.end433
                                        #   in Loop: Header=BB82_72 Depth=1
	testb	$1, %al
	jne	.LBB82_75
	jmp	.LBB82_109
.LBB82_75:                              # %for.body435
                                        #   in Loop: Header=BB82_72 Depth=1
	movl	$0, -12(%rbp)
.LBB82_76:                              # %for.cond436
                                        #   Parent Loop BB82_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB82_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB82_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB82_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_76
.LBB82_79:                              # %for.end449
                                        #   in Loop: Header=BB82_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB82_80:                              # %for.cond468
                                        #   Parent Loop BB82_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB82_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB82_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB82_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB82_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB82_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB82_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB82_85
.LBB82_84:                              # %cond.false
                                        #   in Loop: Header=BB82_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB82_85:                              # %cond.end
                                        #   in Loop: Header=BB82_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB82_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB82_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB82_91
.LBB82_87:                              # %cond.false518
                                        #   in Loop: Header=BB82_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB82_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB82_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB82_90
.LBB82_89:                              # %cond.false540
                                        #   in Loop: Header=BB82_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB82_90:                              # %cond.end559
                                        #   in Loop: Header=BB82_80 Depth=2
.LBB82_91:                              # %cond.end561
                                        #   in Loop: Header=BB82_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB82_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB82_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB82_94
.LBB82_93:                              # %cond.false592
                                        #   in Loop: Header=BB82_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB82_94:                              # %cond.end611
                                        #   in Loop: Header=BB82_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB82_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB82_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB82_100
.LBB82_96:                              # %cond.false618
                                        #   in Loop: Header=BB82_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB82_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB82_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB82_99
.LBB82_98:                              # %cond.false640
                                        #   in Loop: Header=BB82_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB82_99:                              # %cond.end659
                                        #   in Loop: Header=BB82_80 Depth=2
.LBB82_100:                             # %cond.end661
                                        #   in Loop: Header=BB82_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB82_105
.LBB82_101:                             # %if.else669
                                        #   in Loop: Header=BB82_80 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB82_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB82_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB82_104
.LBB82_103:                             # %if.else692
                                        #   in Loop: Header=BB82_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB82_104:                             # %if.end717
                                        #   in Loop: Header=BB82_80 Depth=2
	jmp	.LBB82_105
.LBB82_105:                             # %if.end718
                                        #   in Loop: Header=BB82_80 Depth=2
	jmp	.LBB82_106
.LBB82_106:                             # %for.inc719
                                        #   in Loop: Header=BB82_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_80
.LBB82_107:                             # %for.end721
                                        #   in Loop: Header=BB82_72 Depth=1
	jmp	.LBB82_108
.LBB82_108:                             # %for.inc722
                                        #   in Loop: Header=BB82_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_72
.LBB82_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB82_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB82_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB82_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB82_111 Depth=1
	movl	$0, -16(%rbp)
.LBB82_113:                             # %for.cond732
                                        #   Parent Loop BB82_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB82_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB82_113 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB82_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB82_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB82_117
.LBB82_116:                             # %if.else761
                                        #   in Loop: Header=BB82_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB82_117:                             # %if.end779
                                        #   in Loop: Header=BB82_113 Depth=2
	jmp	.LBB82_118
.LBB82_118:                             # %for.inc780
                                        #   in Loop: Header=BB82_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_113
.LBB82_119:                             # %for.end782
                                        #   in Loop: Header=BB82_111 Depth=1
	jmp	.LBB82_120
.LBB82_120:                             # %for.inc783
                                        #   in Loop: Header=BB82_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_111
.LBB82_121:                             # %for.end785
	jmp	.LBB82_122
.LBB82_122:                             # %if.end786
	movl	-120(%rbp), %ebx
	cmpl	$159411672, -148(%rbp)  # imm = 0x9806DD8
	jne	.LBB82_124
.LBB82_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_123
.Lfunc_end82:
	.size	dct_luma.73, .Lfunc_end82-dct_luma.73
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.74        # -- Begin function dct_chroma_DC.74
	.p2align	4, 0x90
	.type	dct_chroma_DC.74,@function
dct_chroma_DC.74:                       # @dct_chroma_DC.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1455552732, -44(%rbp)  # imm = 0x56C1F8DC
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -28(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB83_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB83_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB83_1 Depth=1
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -36(%rbp)
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB83_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$1, %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB83_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$1, %eax
	jmp	.LBB83_6
.LBB83_5:                               # %cond.false
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-24(%rbp), %eax
.LBB83_6:                               # %cond.end
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %edi
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-28(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	$-1, -28(%rbp)
.LBB83_7:                               # %if.end
                                        #   in Loop: Header=BB83_1 Depth=1
	jmp	.LBB83_8
.LBB83_8:                               # %for.inc
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_1
.LBB83_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-24(%rbp), %ebx
	cmpl	$1455552732, -44(%rbp)  # imm = 0x56C1F8DC
	jne	.LBB83_11
.LBB83_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_10
.Lfunc_end83:
	.size	dct_chroma_DC.74, .Lfunc_end83-dct_chroma_DC.74
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.75             # -- Begin function dct_luma.75
	.p2align	4, 0x90
	.type	dct_luma.75,@function
dct_luma.75:                            # @dct_luma.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$1657906145, -148(%rbp) # imm = 0x62D1A3E1
	movl	%edi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movq	%rdx, -160(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -112(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -120(%rbp)
	movl	-120(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-112(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -132(%rbp)
	movl	-120(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-112(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -124(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB84_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB84_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -92(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB84_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB84_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB84_3 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB84_5:                               # %land.end32
                                        #   in Loop: Header=BB84_3 Depth=1
	testb	$1, %al
	jne	.LBB84_6
	jmp	.LBB84_12
.LBB84_6:                               # %for.body
                                        #   in Loop: Header=BB84_3 Depth=1
	movl	$0, -16(%rbp)
.LBB84_7:                               # %for.cond34
                                        #   Parent Loop BB84_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB84_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB84_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB84_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_7
.LBB84_10:                              # %for.end
                                        #   in Loop: Header=BB84_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB84_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_3
.LBB84_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB84_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB84_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB84_13 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB84_15:                              # %land.end101
                                        #   in Loop: Header=BB84_13 Depth=1
	testb	$1, %al
	jne	.LBB84_16
	jmp	.LBB84_22
.LBB84_16:                              # %for.body103
                                        #   in Loop: Header=BB84_13 Depth=1
	movl	$0, -12(%rbp)
.LBB84_17:                              # %for.cond104
                                        #   Parent Loop BB84_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB84_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB84_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB84_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_17
.LBB84_20:                              # %for.end136
                                        #   in Loop: Header=BB84_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB84_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_13
.LBB84_22:                              # %for.end169
	movl	$0, -128(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -88(%rbp)
.LBB84_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -88(%rbp)
	jge	.LBB84_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB84_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB84_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB84_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB84_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB84_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB84_28
.LBB84_27:                              # %if.then
                                        #   in Loop: Header=BB84_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_29
.LBB84_28:                              # %if.else
                                        #   in Loop: Header=BB84_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB84_29:                              # %if.end
                                        #   in Loop: Header=BB84_23 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB84_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB84_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -28(%rbp)
	jmp	.LBB84_35
.LBB84_31:                              # %if.else199
                                        #   in Loop: Header=BB84_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB84_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB84_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB84_34
.LBB84_33:                              # %if.else223
                                        #   in Loop: Header=BB84_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
.LBB84_34:                              # %if.end245
                                        #   in Loop: Header=BB84_23 Depth=1
	jmp	.LBB84_35
.LBB84_35:                              # %if.end246
                                        #   in Loop: Header=BB84_23 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB84_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB84_23 Depth=1
	movl	$1, -128(%rbp)
	cmpl	$1, -28(%rbp)
	jg	.LBB84_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB84_23 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB84_39
.LBB84_38:                              # %if.then254
                                        #   in Loop: Header=BB84_23 Depth=1
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB84_40
.LBB84_39:                              # %if.else256
                                        #   in Loop: Header=BB84_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-160(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB84_40:                              # %if.end263
                                        #   in Loop: Header=BB84_23 Depth=1
	movl	-28(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-168(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -100(%rbp)
	movl	-28(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -28(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB84_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB84_23 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB84_52
.LBB84_42:                              # %if.else283
                                        #   in Loop: Header=BB84_23 Depth=1
	cmpl	$4, -40(%rbp)
	jge	.LBB84_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB84_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB84_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB84_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB84_46
.LBB84_45:                              # %if.else301
                                        #   in Loop: Header=BB84_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB84_46:                              # %if.end314
                                        #   in Loop: Header=BB84_23 Depth=1
	jmp	.LBB84_51
.LBB84_47:                              # %if.else315
                                        #   in Loop: Header=BB84_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB84_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB84_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB84_50
.LBB84_49:                              # %if.else328
                                        #   in Loop: Header=BB84_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB84_50:                              # %if.end338
                                        #   in Loop: Header=BB84_23 Depth=1
	jmp	.LBB84_51
.LBB84_51:                              # %if.end339
                                        #   in Loop: Header=BB84_23 Depth=1
	jmp	.LBB84_52
.LBB84_52:                              # %if.end340
                                        #   in Loop: Header=BB84_23 Depth=1
	jmp	.LBB84_53
.LBB84_53:                              # %if.end341
                                        #   in Loop: Header=BB84_23 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB84_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB84_23 Depth=1
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB84_55:                              # %if.end349
                                        #   in Loop: Header=BB84_23 Depth=1
	jmp	.LBB84_56
.LBB84_56:                              # %for.inc350
                                        #   in Loop: Header=BB84_23 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB84_23
.LBB84_57:                              # %for.end352
	movq	-168(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB84_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_62 Depth 2
                                        #     Child Loop BB84_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB84_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB84_58 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB84_60:                              # %land.end361
                                        #   in Loop: Header=BB84_58 Depth=1
	testb	$1, %al
	jne	.LBB84_61
	jmp	.LBB84_71
.LBB84_61:                              # %for.body363
                                        #   in Loop: Header=BB84_58 Depth=1
	movl	$0, -16(%rbp)
.LBB84_62:                              # %for.cond364
                                        #   Parent Loop BB84_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB84_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB84_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB84_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_62
.LBB84_65:                              # %for.end377
                                        #   in Loop: Header=BB84_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB84_66:                              # %for.cond396
                                        #   Parent Loop BB84_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB84_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB84_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB84_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_66
.LBB84_69:                              # %for.end423
                                        #   in Loop: Header=BB84_58 Depth=1
	jmp	.LBB84_70
.LBB84_70:                              # %for.inc424
                                        #   in Loop: Header=BB84_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_58
.LBB84_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB84_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_76 Depth 2
                                        #     Child Loop BB84_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB84_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB84_72 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB84_74:                              # %land.end433
                                        #   in Loop: Header=BB84_72 Depth=1
	testb	$1, %al
	jne	.LBB84_75
	jmp	.LBB84_109
.LBB84_75:                              # %for.body435
                                        #   in Loop: Header=BB84_72 Depth=1
	movl	$0, -12(%rbp)
.LBB84_76:                              # %for.cond436
                                        #   Parent Loop BB84_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB84_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB84_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB84_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_76
.LBB84_79:                              # %for.end449
                                        #   in Loop: Header=BB84_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB84_80:                              # %for.cond468
                                        #   Parent Loop BB84_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB84_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB84_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB84_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB84_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB84_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB84_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB84_85
.LBB84_84:                              # %cond.false
                                        #   in Loop: Header=BB84_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB84_85:                              # %cond.end
                                        #   in Loop: Header=BB84_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB84_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB84_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB84_91
.LBB84_87:                              # %cond.false518
                                        #   in Loop: Header=BB84_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB84_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB84_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB84_90
.LBB84_89:                              # %cond.false540
                                        #   in Loop: Header=BB84_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB84_90:                              # %cond.end559
                                        #   in Loop: Header=BB84_80 Depth=2
.LBB84_91:                              # %cond.end561
                                        #   in Loop: Header=BB84_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB84_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB84_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB84_94
.LBB84_93:                              # %cond.false592
                                        #   in Loop: Header=BB84_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB84_94:                              # %cond.end611
                                        #   in Loop: Header=BB84_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB84_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB84_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB84_100
.LBB84_96:                              # %cond.false618
                                        #   in Loop: Header=BB84_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB84_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB84_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB84_99
.LBB84_98:                              # %cond.false640
                                        #   in Loop: Header=BB84_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB84_99:                              # %cond.end659
                                        #   in Loop: Header=BB84_80 Depth=2
.LBB84_100:                             # %cond.end661
                                        #   in Loop: Header=BB84_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB84_105
.LBB84_101:                             # %if.else669
                                        #   in Loop: Header=BB84_80 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB84_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB84_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB84_104
.LBB84_103:                             # %if.else692
                                        #   in Loop: Header=BB84_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB84_104:                             # %if.end717
                                        #   in Loop: Header=BB84_80 Depth=2
	jmp	.LBB84_105
.LBB84_105:                             # %if.end718
                                        #   in Loop: Header=BB84_80 Depth=2
	jmp	.LBB84_106
.LBB84_106:                             # %for.inc719
                                        #   in Loop: Header=BB84_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_80
.LBB84_107:                             # %for.end721
                                        #   in Loop: Header=BB84_72 Depth=1
	jmp	.LBB84_108
.LBB84_108:                             # %for.inc722
                                        #   in Loop: Header=BB84_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_72
.LBB84_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB84_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB84_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB84_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB84_111 Depth=1
	movl	$0, -16(%rbp)
.LBB84_113:                             # %for.cond732
                                        #   Parent Loop BB84_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB84_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB84_113 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB84_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB84_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB84_117
.LBB84_116:                             # %if.else761
                                        #   in Loop: Header=BB84_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB84_117:                             # %if.end779
                                        #   in Loop: Header=BB84_113 Depth=2
	jmp	.LBB84_118
.LBB84_118:                             # %for.inc780
                                        #   in Loop: Header=BB84_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_113
.LBB84_119:                             # %for.end782
                                        #   in Loop: Header=BB84_111 Depth=1
	jmp	.LBB84_120
.LBB84_120:                             # %for.inc783
                                        #   in Loop: Header=BB84_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_111
.LBB84_121:                             # %for.end785
	jmp	.LBB84_122
.LBB84_122:                             # %if.end786
	movl	-128(%rbp), %ebx
	cmpl	$1657906145, -148(%rbp) # imm = 0x62D1A3E1
	jne	.LBB84_124
.LBB84_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_123
.Lfunc_end84:
	.size	dct_luma.75, .Lfunc_end84-dct_luma.75
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.76        # -- Begin function dct_chroma_DC.76
	.p2align	4, 0x90
	.type	dct_chroma_DC.76,@function
dct_chroma_DC.76:                       # @dct_chroma_DC.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1990982595, -44(%rbp)  # imm = 0x76ABFBC3
	movl	%edi, -28(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -24(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB85_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB85_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB85_1 Depth=1
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB85_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$1, %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB85_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$1, %eax
	jmp	.LBB85_6
.LBB85_5:                               # %cond.false
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	-20(%rbp), %eax
.LBB85_6:                               # %cond.end
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	%eax, -20(%rbp)
	movl	-36(%rbp), %edi
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-24(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	$-1, -24(%rbp)
.LBB85_7:                               # %if.end
                                        #   in Loop: Header=BB85_1 Depth=1
	jmp	.LBB85_8
.LBB85_8:                               # %for.inc
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_1
.LBB85_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-20(%rbp), %ebx
	cmpl	$1990982595, -44(%rbp)  # imm = 0x76ABFBC3
	jne	.LBB85_11
.LBB85_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_10
.Lfunc_end85:
	.size	dct_chroma_DC.76, .Lfunc_end85-dct_chroma_DC.76
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.77        # -- Begin function dct_chroma_DC.77
	.p2align	4, 0x90
	.type	dct_chroma_DC.77,@function
dct_chroma_DC.77:                       # @dct_chroma_DC.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1009905985, -44(%rbp)  # imm = 0x3C31F141
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB86_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB86_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB86_1 Depth=1
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB86_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$1, %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB86_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$1, %eax
	jmp	.LBB86_6
.LBB86_5:                               # %cond.false
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	-24(%rbp), %eax
.LBB86_6:                               # %cond.end
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	%eax, -24(%rbp)
	movl	-36(%rbp), %edi
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-20(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	$-1, -20(%rbp)
.LBB86_7:                               # %if.end
                                        #   in Loop: Header=BB86_1 Depth=1
	jmp	.LBB86_8
.LBB86_8:                               # %for.inc
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_1
.LBB86_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-24(%rbp), %ebx
	cmpl	$1009905985, -44(%rbp)  # imm = 0x3C31F141
	jne	.LBB86_11
.LBB86_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_10
.Lfunc_end86:
	.size	dct_chroma_DC.77, .Lfunc_end86-dct_chroma_DC.77
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.78             # -- Begin function dct_luma.78
	.p2align	4, 0x90
	.type	dct_luma.78,@function
dct_luma.78:                            # @dct_luma.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$870297691, -148(%rbp)  # imm = 0x33DFB05B
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -168(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -128(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -120(%rbp)
	movl	-120(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -132(%rbp)
	movl	-120(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB87_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB87_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -92(%rbp)
	movl	-36(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB87_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB87_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB87_3 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB87_5:                               # %land.end32
                                        #   in Loop: Header=BB87_3 Depth=1
	testb	$1, %al
	jne	.LBB87_6
	jmp	.LBB87_12
.LBB87_6:                               # %for.body
                                        #   in Loop: Header=BB87_3 Depth=1
	movl	$0, -16(%rbp)
.LBB87_7:                               # %for.cond34
                                        #   Parent Loop BB87_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB87_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB87_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB87_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_7
.LBB87_10:                              # %for.end
                                        #   in Loop: Header=BB87_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB87_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_3
.LBB87_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB87_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB87_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB87_13 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB87_15:                              # %land.end101
                                        #   in Loop: Header=BB87_13 Depth=1
	testb	$1, %al
	jne	.LBB87_16
	jmp	.LBB87_22
.LBB87_16:                              # %for.body103
                                        #   in Loop: Header=BB87_13 Depth=1
	movl	$0, -12(%rbp)
.LBB87_17:                              # %for.cond104
                                        #   Parent Loop BB87_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB87_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB87_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB87_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_17
.LBB87_20:                              # %for.end136
                                        #   in Loop: Header=BB87_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB87_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_13
.LBB87_22:                              # %for.end169
	movl	$0, -124(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -84(%rbp)
.LBB87_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -84(%rbp)
	jge	.LBB87_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB87_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB87_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB87_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB87_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB87_28
.LBB87_27:                              # %if.then
                                        #   in Loop: Header=BB87_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_29
.LBB87_28:                              # %if.else
                                        #   in Loop: Header=BB87_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB87_29:                              # %if.end
                                        #   in Loop: Header=BB87_23 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB87_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB87_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	jmp	.LBB87_35
.LBB87_31:                              # %if.else199
                                        #   in Loop: Header=BB87_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB87_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB87_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB87_34
.LBB87_33:                              # %if.else223
                                        #   in Loop: Header=BB87_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -32(%rbp)
.LBB87_34:                              # %if.end245
                                        #   in Loop: Header=BB87_23 Depth=1
	jmp	.LBB87_35
.LBB87_35:                              # %if.end246
                                        #   in Loop: Header=BB87_23 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB87_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB87_23 Depth=1
	movl	$1, -124(%rbp)
	cmpl	$1, -32(%rbp)
	jg	.LBB87_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB87_23 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB87_39
.LBB87_38:                              # %if.then254
                                        #   in Loop: Header=BB87_23 Depth=1
	movq	-168(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB87_40
.LBB87_39:                              # %if.else256
                                        #   in Loop: Header=BB87_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-104(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-168(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB87_40:                              # %if.end263
                                        #   in Loop: Header=BB87_23 Depth=1
	movl	-32(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -104(%rbp)
	movl	-32(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -32(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB87_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB87_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB87_52
.LBB87_42:                              # %if.else283
                                        #   in Loop: Header=BB87_23 Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB87_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB87_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB87_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB87_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB87_46
.LBB87_45:                              # %if.else301
                                        #   in Loop: Header=BB87_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB87_46:                              # %if.end314
                                        #   in Loop: Header=BB87_23 Depth=1
	jmp	.LBB87_51
.LBB87_47:                              # %if.else315
                                        #   in Loop: Header=BB87_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB87_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB87_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB87_50
.LBB87_49:                              # %if.else328
                                        #   in Loop: Header=BB87_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB87_50:                              # %if.end338
                                        #   in Loop: Header=BB87_23 Depth=1
	jmp	.LBB87_51
.LBB87_51:                              # %if.end339
                                        #   in Loop: Header=BB87_23 Depth=1
	jmp	.LBB87_52
.LBB87_52:                              # %if.end340
                                        #   in Loop: Header=BB87_23 Depth=1
	jmp	.LBB87_53
.LBB87_53:                              # %if.end341
                                        #   in Loop: Header=BB87_23 Depth=1
	cmpl	$0, -40(%rbp)
	jne	.LBB87_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB87_23 Depth=1
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB87_55:                              # %if.end349
                                        #   in Loop: Header=BB87_23 Depth=1
	jmp	.LBB87_56
.LBB87_56:                              # %for.inc350
                                        #   in Loop: Header=BB87_23 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB87_23
.LBB87_57:                              # %for.end352
	movq	-160(%rbp), %rax
	movslq	-100(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB87_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_62 Depth 2
                                        #     Child Loop BB87_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB87_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB87_58 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB87_60:                              # %land.end361
                                        #   in Loop: Header=BB87_58 Depth=1
	testb	$1, %al
	jne	.LBB87_61
	jmp	.LBB87_71
.LBB87_61:                              # %for.body363
                                        #   in Loop: Header=BB87_58 Depth=1
	movl	$0, -16(%rbp)
.LBB87_62:                              # %for.cond364
                                        #   Parent Loop BB87_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB87_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB87_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB87_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_62
.LBB87_65:                              # %for.end377
                                        #   in Loop: Header=BB87_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB87_66:                              # %for.cond396
                                        #   Parent Loop BB87_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB87_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB87_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB87_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_66
.LBB87_69:                              # %for.end423
                                        #   in Loop: Header=BB87_58 Depth=1
	jmp	.LBB87_70
.LBB87_70:                              # %for.inc424
                                        #   in Loop: Header=BB87_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_58
.LBB87_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB87_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_76 Depth 2
                                        #     Child Loop BB87_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB87_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB87_72 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB87_74:                              # %land.end433
                                        #   in Loop: Header=BB87_72 Depth=1
	testb	$1, %al
	jne	.LBB87_75
	jmp	.LBB87_109
.LBB87_75:                              # %for.body435
                                        #   in Loop: Header=BB87_72 Depth=1
	movl	$0, -12(%rbp)
.LBB87_76:                              # %for.cond436
                                        #   Parent Loop BB87_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB87_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB87_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB87_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_76
.LBB87_79:                              # %for.end449
                                        #   in Loop: Header=BB87_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB87_80:                              # %for.cond468
                                        #   Parent Loop BB87_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB87_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB87_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB87_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB87_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB87_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB87_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB87_85
.LBB87_84:                              # %cond.false
                                        #   in Loop: Header=BB87_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB87_85:                              # %cond.end
                                        #   in Loop: Header=BB87_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB87_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB87_91
.LBB87_87:                              # %cond.false518
                                        #   in Loop: Header=BB87_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB87_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB87_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB87_90
.LBB87_89:                              # %cond.false540
                                        #   in Loop: Header=BB87_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB87_90:                              # %cond.end559
                                        #   in Loop: Header=BB87_80 Depth=2
.LBB87_91:                              # %cond.end561
                                        #   in Loop: Header=BB87_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB87_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB87_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB87_94
.LBB87_93:                              # %cond.false592
                                        #   in Loop: Header=BB87_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB87_94:                              # %cond.end611
                                        #   in Loop: Header=BB87_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB87_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB87_100
.LBB87_96:                              # %cond.false618
                                        #   in Loop: Header=BB87_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB87_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB87_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB87_99
.LBB87_98:                              # %cond.false640
                                        #   in Loop: Header=BB87_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB87_99:                              # %cond.end659
                                        #   in Loop: Header=BB87_80 Depth=2
.LBB87_100:                             # %cond.end661
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB87_105
.LBB87_101:                             # %if.else669
                                        #   in Loop: Header=BB87_80 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB87_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB87_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB87_104
.LBB87_103:                             # %if.else692
                                        #   in Loop: Header=BB87_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB87_104:                             # %if.end717
                                        #   in Loop: Header=BB87_80 Depth=2
	jmp	.LBB87_105
.LBB87_105:                             # %if.end718
                                        #   in Loop: Header=BB87_80 Depth=2
	jmp	.LBB87_106
.LBB87_106:                             # %for.inc719
                                        #   in Loop: Header=BB87_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_80
.LBB87_107:                             # %for.end721
                                        #   in Loop: Header=BB87_72 Depth=1
	jmp	.LBB87_108
.LBB87_108:                             # %for.inc722
                                        #   in Loop: Header=BB87_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_72
.LBB87_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB87_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB87_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB87_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB87_111 Depth=1
	movl	$0, -16(%rbp)
.LBB87_113:                             # %for.cond732
                                        #   Parent Loop BB87_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB87_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB87_113 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB87_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB87_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB87_117
.LBB87_116:                             # %if.else761
                                        #   in Loop: Header=BB87_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB87_117:                             # %if.end779
                                        #   in Loop: Header=BB87_113 Depth=2
	jmp	.LBB87_118
.LBB87_118:                             # %for.inc780
                                        #   in Loop: Header=BB87_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_113
.LBB87_119:                             # %for.end782
                                        #   in Loop: Header=BB87_111 Depth=1
	jmp	.LBB87_120
.LBB87_120:                             # %for.inc783
                                        #   in Loop: Header=BB87_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_111
.LBB87_121:                             # %for.end785
	jmp	.LBB87_122
.LBB87_122:                             # %if.end786
	movl	-124(%rbp), %ebx
	cmpl	$870297691, -148(%rbp)  # imm = 0x33DFB05B
	jne	.LBB87_124
.LBB87_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_123
.Lfunc_end87:
	.size	dct_luma.78, .Lfunc_end87-dct_luma.78
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.79             # -- Begin function dct_luma.79
	.p2align	4, 0x90
	.type	dct_luma.79,@function
dct_luma.79:                            # @dct_luma.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$211981834, -148(%rbp)  # imm = 0xCA2960A
	movl	%edi, -32(%rbp)
	movl	%esi, -24(%rbp)
	movq	%rdx, -160(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -128(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -132(%rbp)
	movl	-124(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB88_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB88_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -96(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB88_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB88_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB88_3 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB88_5:                               # %land.end32
                                        #   in Loop: Header=BB88_3 Depth=1
	testb	$1, %al
	jne	.LBB88_6
	jmp	.LBB88_12
.LBB88_6:                               # %for.body
                                        #   in Loop: Header=BB88_3 Depth=1
	movl	$0, -16(%rbp)
.LBB88_7:                               # %for.cond34
                                        #   Parent Loop BB88_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB88_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB88_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB88_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_7
.LBB88_10:                              # %for.end
                                        #   in Loop: Header=BB88_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB88_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_3
.LBB88_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB88_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB88_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB88_13 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB88_15:                              # %land.end101
                                        #   in Loop: Header=BB88_13 Depth=1
	testb	$1, %al
	jne	.LBB88_16
	jmp	.LBB88_22
.LBB88_16:                              # %for.body103
                                        #   in Loop: Header=BB88_13 Depth=1
	movl	$0, -12(%rbp)
.LBB88_17:                              # %for.cond104
                                        #   Parent Loop BB88_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB88_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB88_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB88_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_17
.LBB88_20:                              # %for.end136
                                        #   in Loop: Header=BB88_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB88_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_13
.LBB88_22:                              # %for.end169
	movl	$0, -120(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -84(%rbp)
.LBB88_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -84(%rbp)
	jge	.LBB88_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB88_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB88_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB88_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB88_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB88_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB88_28
.LBB88_27:                              # %if.then
                                        #   in Loop: Header=BB88_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_29
.LBB88_28:                              # %if.else
                                        #   in Loop: Header=BB88_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB88_29:                              # %if.end
                                        #   in Loop: Header=BB88_23 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB88_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB88_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -28(%rbp)
	jmp	.LBB88_35
.LBB88_31:                              # %if.else199
                                        #   in Loop: Header=BB88_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB88_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB88_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB88_34
.LBB88_33:                              # %if.else223
                                        #   in Loop: Header=BB88_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
.LBB88_34:                              # %if.end245
                                        #   in Loop: Header=BB88_23 Depth=1
	jmp	.LBB88_35
.LBB88_35:                              # %if.end246
                                        #   in Loop: Header=BB88_23 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB88_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB88_23 Depth=1
	movl	$1, -120(%rbp)
	cmpl	$1, -28(%rbp)
	jg	.LBB88_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB88_23 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB88_39
.LBB88_38:                              # %if.then254
                                        #   in Loop: Header=BB88_23 Depth=1
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB88_40
.LBB88_39:                              # %if.else256
                                        #   in Loop: Header=BB88_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-104(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-160(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB88_40:                              # %if.end263
                                        #   in Loop: Header=BB88_23 Depth=1
	movl	-28(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-168(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -104(%rbp)
	movl	-28(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -28(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB88_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB88_23 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB88_52
.LBB88_42:                              # %if.else283
                                        #   in Loop: Header=BB88_23 Depth=1
	cmpl	$4, -40(%rbp)
	jge	.LBB88_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB88_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB88_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB88_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB88_46
.LBB88_45:                              # %if.else301
                                        #   in Loop: Header=BB88_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB88_46:                              # %if.end314
                                        #   in Loop: Header=BB88_23 Depth=1
	jmp	.LBB88_51
.LBB88_47:                              # %if.else315
                                        #   in Loop: Header=BB88_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB88_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB88_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB88_50
.LBB88_49:                              # %if.else328
                                        #   in Loop: Header=BB88_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB88_50:                              # %if.end338
                                        #   in Loop: Header=BB88_23 Depth=1
	jmp	.LBB88_51
.LBB88_51:                              # %if.end339
                                        #   in Loop: Header=BB88_23 Depth=1
	jmp	.LBB88_52
.LBB88_52:                              # %if.end340
                                        #   in Loop: Header=BB88_23 Depth=1
	jmp	.LBB88_53
.LBB88_53:                              # %if.end341
                                        #   in Loop: Header=BB88_23 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB88_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB88_23 Depth=1
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB88_55:                              # %if.end349
                                        #   in Loop: Header=BB88_23 Depth=1
	jmp	.LBB88_56
.LBB88_56:                              # %for.inc350
                                        #   in Loop: Header=BB88_23 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB88_23
.LBB88_57:                              # %for.end352
	movq	-168(%rbp), %rax
	movslq	-100(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB88_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_62 Depth 2
                                        #     Child Loop BB88_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB88_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB88_58 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB88_60:                              # %land.end361
                                        #   in Loop: Header=BB88_58 Depth=1
	testb	$1, %al
	jne	.LBB88_61
	jmp	.LBB88_71
.LBB88_61:                              # %for.body363
                                        #   in Loop: Header=BB88_58 Depth=1
	movl	$0, -16(%rbp)
.LBB88_62:                              # %for.cond364
                                        #   Parent Loop BB88_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB88_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB88_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB88_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_62
.LBB88_65:                              # %for.end377
                                        #   in Loop: Header=BB88_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB88_66:                              # %for.cond396
                                        #   Parent Loop BB88_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB88_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB88_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB88_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_66
.LBB88_69:                              # %for.end423
                                        #   in Loop: Header=BB88_58 Depth=1
	jmp	.LBB88_70
.LBB88_70:                              # %for.inc424
                                        #   in Loop: Header=BB88_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_58
.LBB88_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB88_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_76 Depth 2
                                        #     Child Loop BB88_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB88_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB88_72 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB88_74:                              # %land.end433
                                        #   in Loop: Header=BB88_72 Depth=1
	testb	$1, %al
	jne	.LBB88_75
	jmp	.LBB88_109
.LBB88_75:                              # %for.body435
                                        #   in Loop: Header=BB88_72 Depth=1
	movl	$0, -12(%rbp)
.LBB88_76:                              # %for.cond436
                                        #   Parent Loop BB88_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB88_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB88_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB88_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_76
.LBB88_79:                              # %for.end449
                                        #   in Loop: Header=BB88_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB88_80:                              # %for.cond468
                                        #   Parent Loop BB88_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB88_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB88_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB88_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB88_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB88_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB88_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB88_85
.LBB88_84:                              # %cond.false
                                        #   in Loop: Header=BB88_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB88_85:                              # %cond.end
                                        #   in Loop: Header=BB88_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB88_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB88_91
.LBB88_87:                              # %cond.false518
                                        #   in Loop: Header=BB88_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB88_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB88_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB88_90
.LBB88_89:                              # %cond.false540
                                        #   in Loop: Header=BB88_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB88_90:                              # %cond.end559
                                        #   in Loop: Header=BB88_80 Depth=2
.LBB88_91:                              # %cond.end561
                                        #   in Loop: Header=BB88_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB88_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB88_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB88_94
.LBB88_93:                              # %cond.false592
                                        #   in Loop: Header=BB88_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB88_94:                              # %cond.end611
                                        #   in Loop: Header=BB88_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB88_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB88_100
.LBB88_96:                              # %cond.false618
                                        #   in Loop: Header=BB88_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB88_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB88_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB88_99
.LBB88_98:                              # %cond.false640
                                        #   in Loop: Header=BB88_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB88_99:                              # %cond.end659
                                        #   in Loop: Header=BB88_80 Depth=2
.LBB88_100:                             # %cond.end661
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB88_105
.LBB88_101:                             # %if.else669
                                        #   in Loop: Header=BB88_80 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB88_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB88_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB88_104
.LBB88_103:                             # %if.else692
                                        #   in Loop: Header=BB88_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB88_104:                             # %if.end717
                                        #   in Loop: Header=BB88_80 Depth=2
	jmp	.LBB88_105
.LBB88_105:                             # %if.end718
                                        #   in Loop: Header=BB88_80 Depth=2
	jmp	.LBB88_106
.LBB88_106:                             # %for.inc719
                                        #   in Loop: Header=BB88_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_80
.LBB88_107:                             # %for.end721
                                        #   in Loop: Header=BB88_72 Depth=1
	jmp	.LBB88_108
.LBB88_108:                             # %for.inc722
                                        #   in Loop: Header=BB88_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_72
.LBB88_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB88_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB88_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB88_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB88_111 Depth=1
	movl	$0, -16(%rbp)
.LBB88_113:                             # %for.cond732
                                        #   Parent Loop BB88_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB88_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB88_113 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB88_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB88_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB88_117
.LBB88_116:                             # %if.else761
                                        #   in Loop: Header=BB88_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB88_117:                             # %if.end779
                                        #   in Loop: Header=BB88_113 Depth=2
	jmp	.LBB88_118
.LBB88_118:                             # %for.inc780
                                        #   in Loop: Header=BB88_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_113
.LBB88_119:                             # %for.end782
                                        #   in Loop: Header=BB88_111 Depth=1
	jmp	.LBB88_120
.LBB88_120:                             # %for.inc783
                                        #   in Loop: Header=BB88_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_111
.LBB88_121:                             # %for.end785
	jmp	.LBB88_122
.LBB88_122:                             # %if.end786
	movl	-120(%rbp), %ebx
	cmpl	$211981834, -148(%rbp)  # imm = 0xCA2960A
	jne	.LBB88_124
.LBB88_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_123
.Lfunc_end88:
	.size	dct_luma.79, .Lfunc_end88-dct_luma.79
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.80             # -- Begin function dct_luma.80
	.p2align	4, 0x90
	.type	dct_luma.80,@function
dct_luma.80:                            # @dct_luma.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$1599120092, -148(%rbp) # imm = 0x5F50A2DC
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movq	%rdx, -160(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -116(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-116(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -132(%rbp)
	movl	-112(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-116(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB89_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB89_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -92(%rbp)
	movl	-36(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -12(%rbp)
.LBB89_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB89_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB89_3 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB89_5:                               # %land.end32
                                        #   in Loop: Header=BB89_3 Depth=1
	testb	$1, %al
	jne	.LBB89_6
	jmp	.LBB89_12
.LBB89_6:                               # %for.body
                                        #   in Loop: Header=BB89_3 Depth=1
	movl	$0, -16(%rbp)
.LBB89_7:                               # %for.cond34
                                        #   Parent Loop BB89_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB89_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB89_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB89_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_7
.LBB89_10:                              # %for.end
                                        #   in Loop: Header=BB89_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB89_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_3
.LBB89_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB89_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB89_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB89_13 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB89_15:                              # %land.end101
                                        #   in Loop: Header=BB89_13 Depth=1
	testb	$1, %al
	jne	.LBB89_16
	jmp	.LBB89_22
.LBB89_16:                              # %for.body103
                                        #   in Loop: Header=BB89_13 Depth=1
	movl	$0, -12(%rbp)
.LBB89_17:                              # %for.cond104
                                        #   Parent Loop BB89_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB89_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB89_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB89_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_17
.LBB89_20:                              # %for.end136
                                        #   in Loop: Header=BB89_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB89_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_13
.LBB89_22:                              # %for.end169
	movl	$0, -124(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -84(%rbp)
.LBB89_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -84(%rbp)
	jge	.LBB89_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB89_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB89_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB89_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB89_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB89_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB89_28
.LBB89_27:                              # %if.then
                                        #   in Loop: Header=BB89_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_29
.LBB89_28:                              # %if.else
                                        #   in Loop: Header=BB89_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB89_29:                              # %if.end
                                        #   in Loop: Header=BB89_23 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB89_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB89_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -24(%rbp)
	jmp	.LBB89_35
.LBB89_31:                              # %if.else199
                                        #   in Loop: Header=BB89_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB89_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB89_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB89_34
.LBB89_33:                              # %if.else223
                                        #   in Loop: Header=BB89_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
.LBB89_34:                              # %if.end245
                                        #   in Loop: Header=BB89_23 Depth=1
	jmp	.LBB89_35
.LBB89_35:                              # %if.end246
                                        #   in Loop: Header=BB89_23 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB89_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB89_23 Depth=1
	movl	$1, -124(%rbp)
	cmpl	$1, -24(%rbp)
	jg	.LBB89_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB89_23 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB89_39
.LBB89_38:                              # %if.then254
                                        #   in Loop: Header=BB89_23 Depth=1
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB89_40
.LBB89_39:                              # %if.else256
                                        #   in Loop: Header=BB89_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-160(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB89_40:                              # %if.end263
                                        #   in Loop: Header=BB89_23 Depth=1
	movl	-24(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-168(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -100(%rbp)
	movl	-24(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -24(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB89_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB89_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB89_52
.LBB89_42:                              # %if.else283
                                        #   in Loop: Header=BB89_23 Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB89_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB89_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB89_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB89_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB89_46
.LBB89_45:                              # %if.else301
                                        #   in Loop: Header=BB89_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB89_46:                              # %if.end314
                                        #   in Loop: Header=BB89_23 Depth=1
	jmp	.LBB89_51
.LBB89_47:                              # %if.else315
                                        #   in Loop: Header=BB89_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB89_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB89_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB89_50
.LBB89_49:                              # %if.else328
                                        #   in Loop: Header=BB89_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB89_50:                              # %if.end338
                                        #   in Loop: Header=BB89_23 Depth=1
	jmp	.LBB89_51
.LBB89_51:                              # %if.end339
                                        #   in Loop: Header=BB89_23 Depth=1
	jmp	.LBB89_52
.LBB89_52:                              # %if.end340
                                        #   in Loop: Header=BB89_23 Depth=1
	jmp	.LBB89_53
.LBB89_53:                              # %if.end341
                                        #   in Loop: Header=BB89_23 Depth=1
	cmpl	$0, -40(%rbp)
	jne	.LBB89_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB89_23 Depth=1
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB89_55:                              # %if.end349
                                        #   in Loop: Header=BB89_23 Depth=1
	jmp	.LBB89_56
.LBB89_56:                              # %for.inc350
                                        #   in Loop: Header=BB89_23 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB89_23
.LBB89_57:                              # %for.end352
	movq	-168(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB89_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_62 Depth 2
                                        #     Child Loop BB89_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB89_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB89_58 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB89_60:                              # %land.end361
                                        #   in Loop: Header=BB89_58 Depth=1
	testb	$1, %al
	jne	.LBB89_61
	jmp	.LBB89_71
.LBB89_61:                              # %for.body363
                                        #   in Loop: Header=BB89_58 Depth=1
	movl	$0, -16(%rbp)
.LBB89_62:                              # %for.cond364
                                        #   Parent Loop BB89_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB89_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB89_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB89_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_62
.LBB89_65:                              # %for.end377
                                        #   in Loop: Header=BB89_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB89_66:                              # %for.cond396
                                        #   Parent Loop BB89_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB89_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB89_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB89_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_66
.LBB89_69:                              # %for.end423
                                        #   in Loop: Header=BB89_58 Depth=1
	jmp	.LBB89_70
.LBB89_70:                              # %for.inc424
                                        #   in Loop: Header=BB89_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_58
.LBB89_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB89_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_76 Depth 2
                                        #     Child Loop BB89_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB89_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB89_72 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB89_74:                              # %land.end433
                                        #   in Loop: Header=BB89_72 Depth=1
	testb	$1, %al
	jne	.LBB89_75
	jmp	.LBB89_109
.LBB89_75:                              # %for.body435
                                        #   in Loop: Header=BB89_72 Depth=1
	movl	$0, -12(%rbp)
.LBB89_76:                              # %for.cond436
                                        #   Parent Loop BB89_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB89_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB89_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_76
.LBB89_79:                              # %for.end449
                                        #   in Loop: Header=BB89_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB89_80:                              # %for.cond468
                                        #   Parent Loop BB89_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB89_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB89_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB89_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB89_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB89_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB89_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB89_85
.LBB89_84:                              # %cond.false
                                        #   in Loop: Header=BB89_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB89_85:                              # %cond.end
                                        #   in Loop: Header=BB89_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB89_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB89_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB89_91
.LBB89_87:                              # %cond.false518
                                        #   in Loop: Header=BB89_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB89_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB89_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_90
.LBB89_89:                              # %cond.false540
                                        #   in Loop: Header=BB89_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB89_90:                              # %cond.end559
                                        #   in Loop: Header=BB89_80 Depth=2
.LBB89_91:                              # %cond.end561
                                        #   in Loop: Header=BB89_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB89_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB89_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB89_94
.LBB89_93:                              # %cond.false592
                                        #   in Loop: Header=BB89_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB89_94:                              # %cond.end611
                                        #   in Loop: Header=BB89_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB89_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB89_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB89_100
.LBB89_96:                              # %cond.false618
                                        #   in Loop: Header=BB89_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB89_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB89_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_99
.LBB89_98:                              # %cond.false640
                                        #   in Loop: Header=BB89_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB89_99:                              # %cond.end659
                                        #   in Loop: Header=BB89_80 Depth=2
.LBB89_100:                             # %cond.end661
                                        #   in Loop: Header=BB89_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB89_105
.LBB89_101:                             # %if.else669
                                        #   in Loop: Header=BB89_80 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB89_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB89_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB89_104
.LBB89_103:                             # %if.else692
                                        #   in Loop: Header=BB89_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB89_104:                             # %if.end717
                                        #   in Loop: Header=BB89_80 Depth=2
	jmp	.LBB89_105
.LBB89_105:                             # %if.end718
                                        #   in Loop: Header=BB89_80 Depth=2
	jmp	.LBB89_106
.LBB89_106:                             # %for.inc719
                                        #   in Loop: Header=BB89_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_80
.LBB89_107:                             # %for.end721
                                        #   in Loop: Header=BB89_72 Depth=1
	jmp	.LBB89_108
.LBB89_108:                             # %for.inc722
                                        #   in Loop: Header=BB89_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_72
.LBB89_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB89_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB89_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB89_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB89_111 Depth=1
	movl	$0, -16(%rbp)
.LBB89_113:                             # %for.cond732
                                        #   Parent Loop BB89_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB89_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB89_113 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB89_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB89_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB89_117
.LBB89_116:                             # %if.else761
                                        #   in Loop: Header=BB89_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB89_117:                             # %if.end779
                                        #   in Loop: Header=BB89_113 Depth=2
	jmp	.LBB89_118
.LBB89_118:                             # %for.inc780
                                        #   in Loop: Header=BB89_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_113
.LBB89_119:                             # %for.end782
                                        #   in Loop: Header=BB89_111 Depth=1
	jmp	.LBB89_120
.LBB89_120:                             # %for.inc783
                                        #   in Loop: Header=BB89_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_111
.LBB89_121:                             # %for.end785
	jmp	.LBB89_122
.LBB89_122:                             # %if.end786
	movl	-124(%rbp), %ebx
	cmpl	$1599120092, -148(%rbp) # imm = 0x5F50A2DC
	jne	.LBB89_124
.LBB89_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_123
.Lfunc_end89:
	.size	dct_luma.80, .Lfunc_end89-dct_luma.80
	.cfi_endproc
                                        # -- End function
	.type	QP_SCALE_CR,@object     # @QP_SCALE_CR
	.section	.rodata,"a",@progbits
	.globl	QP_SCALE_CR
	.p2align	4
QP_SCALE_CR:
	.ascii	"\000\001\002\003\004\005\006\007\b\t\n\013\f\r\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\035\036\037  !\"\"##$$%%%&&&''''"
	.size	QP_SCALE_CR, 52

	.type	SNGL_SCAN,@object       # @SNGL_SCAN
	.globl	SNGL_SCAN
	.p2align	4
SNGL_SCAN:
	.zero	2
	.asciz	"\001"
	.ascii	"\000\001"
	.ascii	"\000\002"
	.zero	2,1
	.asciz	"\002"
	.asciz	"\003"
	.ascii	"\002\001"
	.ascii	"\001\002"
	.ascii	"\000\003"
	.ascii	"\001\003"
	.zero	2,2
	.ascii	"\003\001"
	.ascii	"\003\002"
	.ascii	"\002\003"
	.zero	2,3
	.size	SNGL_SCAN, 32

	.type	FIELD_SCAN,@object      # @FIELD_SCAN
	.globl	FIELD_SCAN
	.p2align	4
FIELD_SCAN:
	.zero	2
	.ascii	"\000\001"
	.asciz	"\001"
	.ascii	"\000\002"
	.ascii	"\000\003"
	.zero	2,1
	.ascii	"\001\002"
	.ascii	"\001\003"
	.asciz	"\002"
	.ascii	"\002\001"
	.zero	2,2
	.ascii	"\002\003"
	.asciz	"\003"
	.ascii	"\003\001"
	.ascii	"\003\002"
	.zero	2,3
	.size	FIELD_SCAN, 32

	.type	COEFF_COST,@object      # @COEFF_COST
	.globl	COEFF_COST
	.p2align	4
COEFF_COST:
	.byte	3                       # 0x3
	.byte	2                       # 0x2
	.byte	2                       # 0x2
	.byte	1                       # 0x1
	.byte	1                       # 0x1
	.byte	1                       # 0x1
	.zero	10
	.zero	16,9
	.size	COEFF_COST, 32

	.type	COEFF_BIT_COST,@object  # @COEFF_BIT_COST
	.globl	COEFF_BIT_COST
	.p2align	4
COEFF_BIT_COST:
	.ascii	"\003\005\007\t\t\013\013\013\013\r\r\r\r\r\r\r"
	.ascii	"\005\007\t\t\013\013\013\013\r\r\r\r\r\r\r\r"
	.ascii	"\007\t\t\013\013\013\013\r\r\r\r\r\r\r\r\017"
	.ascii	"\007\t\t\013\013\013\013\r\r\r\r\r\r\r\r\017"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\003\005\007\007\007\t\t\t\t\013\013\r\r\r\r\017"
	.ascii	"\005\t\t\013\013\r\r\r\r\017\017\017\017\017\017\017"
	.ascii	"\007\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021"
	.ascii	"\t\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021"
	.ascii	"\t\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.zero	16
	.zero	16
	.ascii	"\003\007\t\t\013\r\r\017\017\017\017\021\021\021\021\021"
	.ascii	"\005\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021"
	.ascii	"\005\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021"
	.ascii	"\007\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\007\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\007\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.size	COEFF_BIT_COST, 768

	.type	SCAN_YUV422,@object     # @SCAN_YUV422
	.globl	SCAN_YUV422
	.p2align	4
SCAN_YUV422:
	.zero	2
	.ascii	"\000\001"
	.asciz	"\001"
	.ascii	"\000\002"
	.ascii	"\000\003"
	.zero	2,1
	.ascii	"\001\002"
	.ascii	"\001\003"
	.size	SCAN_YUV422, 16

	.type	hor_offset,@object      # @hor_offset
	.globl	hor_offset
	.p2align	4
hor_offset:
	.zero	16
	.ascii	"\000\004\000\004"
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.zero	4
	.zero	4
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.size	hor_offset, 64

	.type	ver_offset,@object      # @ver_offset
	.globl	ver_offset
	.p2align	4
ver_offset:
	.zero	16
	.ascii	"\000\000\004\004"
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.zero	4
	.zero	4
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\b\b\f\f"
	.size	ver_offset, 64

	.type	quant_coef,@object      # @quant_coef
	.globl	quant_coef
	.p2align	4
quant_coef:
	.long	13107                   # 0x3333
	.long	8066                    # 0x1f82
	.long	13107                   # 0x3333
	.long	8066                    # 0x1f82
	.long	8066                    # 0x1f82
	.long	5243                    # 0x147b
	.long	8066                    # 0x1f82
	.long	5243                    # 0x147b
	.long	13107                   # 0x3333
	.long	8066                    # 0x1f82
	.long	13107                   # 0x3333
	.long	8066                    # 0x1f82
	.long	8066                    # 0x1f82
	.long	5243                    # 0x147b
	.long	8066                    # 0x1f82
	.long	5243                    # 0x147b
	.long	11916                   # 0x2e8c
	.long	7490                    # 0x1d42
	.long	11916                   # 0x2e8c
	.long	7490                    # 0x1d42
	.long	7490                    # 0x1d42
	.long	4660                    # 0x1234
	.long	7490                    # 0x1d42
	.long	4660                    # 0x1234
	.long	11916                   # 0x2e8c
	.long	7490                    # 0x1d42
	.long	11916                   # 0x2e8c
	.long	7490                    # 0x1d42
	.long	7490                    # 0x1d42
	.long	4660                    # 0x1234
	.long	7490                    # 0x1d42
	.long	4660                    # 0x1234
	.long	10082                   # 0x2762
	.long	6554                    # 0x199a
	.long	10082                   # 0x2762
	.long	6554                    # 0x199a
	.long	6554                    # 0x199a
	.long	4194                    # 0x1062
	.long	6554                    # 0x199a
	.long	4194                    # 0x1062
	.long	10082                   # 0x2762
	.long	6554                    # 0x199a
	.long	10082                   # 0x2762
	.long	6554                    # 0x199a
	.long	6554                    # 0x199a
	.long	4194                    # 0x1062
	.long	6554                    # 0x199a
	.long	4194                    # 0x1062
	.long	9362                    # 0x2492
	.long	5825                    # 0x16c1
	.long	9362                    # 0x2492
	.long	5825                    # 0x16c1
	.long	5825                    # 0x16c1
	.long	3647                    # 0xe3f
	.long	5825                    # 0x16c1
	.long	3647                    # 0xe3f
	.long	9362                    # 0x2492
	.long	5825                    # 0x16c1
	.long	9362                    # 0x2492
	.long	5825                    # 0x16c1
	.long	5825                    # 0x16c1
	.long	3647                    # 0xe3f
	.long	5825                    # 0x16c1
	.long	3647                    # 0xe3f
	.long	8192                    # 0x2000
	.long	5243                    # 0x147b
	.long	8192                    # 0x2000
	.long	5243                    # 0x147b
	.long	5243                    # 0x147b
	.long	3355                    # 0xd1b
	.long	5243                    # 0x147b
	.long	3355                    # 0xd1b
	.long	8192                    # 0x2000
	.long	5243                    # 0x147b
	.long	8192                    # 0x2000
	.long	5243                    # 0x147b
	.long	5243                    # 0x147b
	.long	3355                    # 0xd1b
	.long	5243                    # 0x147b
	.long	3355                    # 0xd1b
	.long	7282                    # 0x1c72
	.long	4559                    # 0x11cf
	.long	7282                    # 0x1c72
	.long	4559                    # 0x11cf
	.long	4559                    # 0x11cf
	.long	2893                    # 0xb4d
	.long	4559                    # 0x11cf
	.long	2893                    # 0xb4d
	.long	7282                    # 0x1c72
	.long	4559                    # 0x11cf
	.long	7282                    # 0x1c72
	.long	4559                    # 0x11cf
	.long	4559                    # 0x11cf
	.long	2893                    # 0xb4d
	.long	4559                    # 0x11cf
	.long	2893                    # 0xb4d
	.size	quant_coef, 384

	.type	dequant_coef,@object    # @dequant_coef
	.globl	dequant_coef
	.p2align	4
dequant_coef:
	.long	10                      # 0xa
	.long	13                      # 0xd
	.long	10                      # 0xa
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	10                      # 0xa
	.long	13                      # 0xd
	.long	10                      # 0xa
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	23                      # 0x17
	.long	29                      # 0x1d
	.long	23                      # 0x17
	.long	29                      # 0x1d
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	23                      # 0x17
	.long	29                      # 0x1d
	.long	23                      # 0x17
	.long	29                      # 0x1d
	.size	dequant_coef, 384

	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	.L__const.dct_chroma.cbpblk_pattern,@object # @__const.dct_chroma.cbpblk_pattern
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	4
.L__const.dct_chroma.cbpblk_pattern:
	.quad	0                       # 0x0
	.quad	983040                  # 0xf0000
	.quad	16711680                # 0xff0000
	.quad	4294901760              # 0xffff0000
	.size	.L__const.dct_chroma.cbpblk_pattern, 32

	.type	cbp_blk_chroma,@object  # @cbp_blk_chroma
	.data
	.p2align	4
cbp_blk_chroma:
	.ascii	"\020\021\022\023"
	.ascii	"\024\025\026\027"
	.ascii	"\030\031\032\033"
	.ascii	"\034\035\036\037"
	.ascii	" !\"#"
	.ascii	"$%&'"
	.ascii	"()*+"
	.ascii	",-./"
	.size	cbp_blk_chroma, 32

	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	A,@object               # @A
	.section	.rodata,"a",@progbits
	.p2align	4
A:
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	25                      # 0x19
	.size	A, 64

	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
