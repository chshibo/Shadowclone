	.text
	.file	"context_ini.c"
	.globl	create_context_memory   # -- Begin function create_context_memory
	.p2align	4, 0x90
	.type	create_context_memory,@function
create_context_memory:                  # @create_context_memory
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB0_17
# %bb.1:                                # %func_create_context_memory.1
	callq	create_context_memory.1
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_create_context_memory.2
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.2
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_create_context_memory.9
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.9
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_create_context_memory.14
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_create_context_memory.16
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.16
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_create_context_memory.20
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.20
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_create_context_memory.23
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.23
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_create_context_memory.26
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.26
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %func_create_context_memory.40
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.40
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %func_create_context_memory.48
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.48
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_11:                               # %func_create_context_memory.52
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.52
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_12:                               # %func_create_context_memory.62
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.62
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_13:                               # %func_create_context_memory.63
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.63
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_14:                               # %func_create_context_memory.73
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.73
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_15:                               # %func_create_context_memory.74
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.74
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_16:                               # %func_create_context_memory.82
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.82
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB0_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB0_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB0_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB0_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB0_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB0_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB0_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB0_15
	jmp	.LBB0_16
.Lfunc_end0:
	.size	create_context_memory, .Lfunc_end0-create_context_memory
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory     # -- Begin function free_context_memory
	.p2align	4, 0x90
	.type	free_context_memory,@function
free_context_memory:                    # @free_context_memory
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB1_2
# %bb.1:                                # %func_free_context_memory.7
	callq	free_context_memory.7
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_free_context_memory.13
	.cfi_def_cfa %rbp, 16
	callq	free_context_memory.13
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	free_context_memory, .Lfunc_end1-free_context_memory
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber       # -- Begin function SetCtxModelNumber
	.p2align	4, 0x90
	.type	SetCtxModelNumber,@function
SetCtxModelNumber:                      # @SetCtxModelNumber
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_7
# %bb.1:                                # %func_SetCtxModelNumber.5
	callq	SetCtxModelNumber.5
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_SetCtxModelNumber.12
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.12
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_SetCtxModelNumber.15
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_SetCtxModelNumber.22
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.22
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %func_SetCtxModelNumber.31
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.31
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_6:                                # %func_SetCtxModelNumber.33
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.33
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB2_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB2_5
	jmp	.LBB2_6
.Lfunc_end2:
	.size	SetCtxModelNumber, .Lfunc_end2-SetCtxModelNumber
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts           # -- Begin function init_contexts
	.p2align	4, 0x90
	.type	init_contexts,@function
init_contexts:                          # @init_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_17
# %bb.1:                                # %func_init_contexts.10
	callq	init_contexts.10
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_init_contexts.24
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.24
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_init_contexts.30
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.30
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_init_contexts.32
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.32
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_init_contexts.47
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.47
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_init_contexts.50
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.50
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_init_contexts.51
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.51
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_init_contexts.55
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.55
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %func_init_contexts.60
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_10:                               # %func_init_contexts.61
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.61
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_11:                               # %func_init_contexts.66
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.66
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_12:                               # %func_init_contexts.70
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.70
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_13:                               # %func_init_contexts.75
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.75
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_14:                               # %func_init_contexts.78
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.78
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_15:                               # %func_init_contexts.81
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.81
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_16:                               # %func_init_contexts.83
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.83
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB3_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB3_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB3_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB3_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB3_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB3_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB3_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB3_15
	jmp	.LBB3_16
.Lfunc_end3:
	.size	init_contexts, .Lfunc_end3-init_contexts
	.cfi_endproc
                                        # -- End function
	.globl	XRate                   # -- Begin function XRate
	.p2align	4, 0x90
	.type	XRate,@function
XRate:                                  # @XRate
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB4_17
# %bb.1:                                # %func_XRate.4
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.4
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_XRate.19
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.19
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_XRate.21
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.21
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_XRate.29
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.29
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %func_XRate.49
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.49
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_6:                                # %func_XRate.54
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.54
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_7:                                # %func_XRate.59
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.59
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_8:                                # %func_XRate.67
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.67
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_9:                                # %func_XRate.68
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.68
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_10:                               # %func_XRate.71
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.71
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_11:                               # %func_XRate.72
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.72
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_12:                               # %func_XRate.76
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.76
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_13:                               # %func_XRate.77
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.77
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_14:                               # %func_XRate.79
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.79
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_15:                               # %func_XRate.80
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.80
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_16:                               # %func_XRate.84
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.84
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB4_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB4_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB4_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB4_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB4_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB4_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB4_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB4_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB4_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB4_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB4_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB4_15
	jmp	.LBB4_16
.Lfunc_end4:
	.size	XRate, .Lfunc_end4-XRate
	.cfi_endproc
                                        # -- End function
	.globl	GetCtxModelNumber       # -- Begin function GetCtxModelNumber
	.p2align	4, 0x90
	.type	GetCtxModelNumber,@function
GetCtxModelNumber:                      # @GetCtxModelNumber
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_17
# %bb.1:                                # %func_GetCtxModelNumber.6
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.6
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_GetCtxModelNumber.11
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.11
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_GetCtxModelNumber.25
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.25
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_GetCtxModelNumber.27
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.27
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_GetCtxModelNumber.28
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.28
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_GetCtxModelNumber.36
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.36
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_GetCtxModelNumber.39
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.39
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_GetCtxModelNumber.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.44
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %func_GetCtxModelNumber.46
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.46
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_10:                               # %func_GetCtxModelNumber.53
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.53
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_11:                               # %func_GetCtxModelNumber.56
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.56
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_12:                               # %func_GetCtxModelNumber.57
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.57
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_13:                               # %func_GetCtxModelNumber.58
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.58
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_14:                               # %func_GetCtxModelNumber.64
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.64
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_15:                               # %func_GetCtxModelNumber.65
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.65
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_16:                               # %func_GetCtxModelNumber.69
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.69
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB5_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB5_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB5_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB5_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB5_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB5_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB5_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB5_15
	jmp	.LBB5_16
.Lfunc_end5:
	.size	GetCtxModelNumber, .Lfunc_end5-GetCtxModelNumber
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts          # -- Begin function store_contexts
	.p2align	4, 0x90
	.type	store_contexts,@function
store_contexts:                         # @store_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_7
# %bb.1:                                # %func_store_contexts.8
	callq	store_contexts.8
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_store_contexts.17
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.17
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_store_contexts.34
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.34
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_store_contexts.35
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.35
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_store_contexts.41
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.41
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_store_contexts.42
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.42
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
	jmp	.LBB6_6
.Lfunc_end6:
	.size	store_contexts, .Lfunc_end6-store_contexts
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts # -- Begin function update_field_frame_contexts
	.p2align	4, 0x90
	.type	update_field_frame_contexts,@function
update_field_frame_contexts:            # @update_field_frame_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB7_7
# %bb.1:                                # %func_update_field_frame_contexts.3
	movl	%ebx, %edi
	callq	update_field_frame_contexts.3
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_update_field_frame_contexts.18
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.18
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_update_field_frame_contexts.37
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.37
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_update_field_frame_contexts.38
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.38
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_update_field_frame_contexts.43
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.43
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_update_field_frame_contexts.45
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.45
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
	jmp	.LBB7_6
.Lfunc_end7:
	.size	update_field_frame_contexts, .Lfunc_end7-update_field_frame_contexts
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.1
.LCPI8_0:
	.quad	4611686018427387904     # double 2
.LCPI8_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.1
	.p2align	4, 0x90
	.type	create_context_memory.1,@function
create_context_memory.1:                # @create_context_memory.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2127911790, -20(%rbp)  # imm = 0x7ED55B6E
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB8_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB8_3
.LBB8_2:                                # %cond.false
	movl	-16(%rbp), %eax
.LBB8_3:                                # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB8_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB8_5:                                # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB8_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB8_7:                                # %if.end5
	movl	$0, -4(%rbp)
.LBB8_8:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB8_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB8_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB8_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB8_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB8_11:                               # %if.end10
                                        #   in Loop: Header=BB8_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB8_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB8_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB8_13:                               # %if.end16
                                        #   in Loop: Header=BB8_8 Depth=1
	movl	$0, -8(%rbp)
.LBB8_14:                               # %for.cond17
                                        #   Parent Loop BB8_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB8_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB8_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB8_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB8_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB8_17:                               # %if.end28
                                        #   in Loop: Header=BB8_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB8_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB8_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB8_19:                               # %if.end39
                                        #   in Loop: Header=BB8_14 Depth=2
	jmp	.LBB8_20
.LBB8_20:                               # %for.inc
                                        #   in Loop: Header=BB8_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_14
.LBB8_21:                               # %for.end
                                        #   in Loop: Header=BB8_8 Depth=1
	jmp	.LBB8_22
.LBB8_22:                               # %for.inc40
                                        #   in Loop: Header=BB8_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_8
.LBB8_23:                               # %for.end42
	movl	$0, -4(%rbp)
.LBB8_24:                               # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_26 Depth 2
                                        #       Child Loop BB8_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB8_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB8_24 Depth=1
	movl	$0, -8(%rbp)
.LBB8_26:                               # %for.cond47
                                        #   Parent Loop BB8_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB8_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB8_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB8_26 Depth=2
	movl	$0, -12(%rbp)
.LBB8_28:                               # %for.cond51
                                        #   Parent Loop BB8_24 Depth=1
                                        #     Parent Loop BB8_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB8_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB8_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB8_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB8_28
.LBB8_31:                               # %for.end63
                                        #   in Loop: Header=BB8_26 Depth=2
	jmp	.LBB8_32
.LBB8_32:                               # %for.inc64
                                        #   in Loop: Header=BB8_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_26
.LBB8_33:                               # %for.end66
                                        #   in Loop: Header=BB8_24 Depth=1
	jmp	.LBB8_34
.LBB8_34:                               # %for.inc67
                                        #   in Loop: Header=BB8_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_24
.LBB8_35:                               # %for.end69
	movl	$0, -4(%rbp)
.LBB8_36:                               # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB8_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB8_36 Depth=1
	vmovsd	.LCPI8_1(%rip), %xmm0   # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI8_0(%rip), %xmm0   # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI8_0(%rip), %xmm0   # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB8_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_36
.LBB8_39:                               # %for.end98
	cmpl	$2127911790, -20(%rbp)  # imm = 0x7ED55B6E
	jne	.LBB8_41
.LBB8_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_41:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB8_40
.Lfunc_end8:
	.size	create_context_memory.1, .Lfunc_end8-create_context_memory.1
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.2
.LCPI9_0:
	.quad	4611686018427387904     # double 2
.LCPI9_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.2
	.p2align	4, 0x90
	.type	create_context_memory.2,@function
create_context_memory.2:                # @create_context_memory.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$343956637, -20(%rbp)   # imm = 0x14805C9D
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB9_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB9_3
.LBB9_2:                                # %cond.false
	movl	-16(%rbp), %eax
.LBB9_3:                                # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB9_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB9_5:                                # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB9_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB9_7:                                # %if.end5
	movl	$0, -4(%rbp)
.LBB9_8:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB9_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB9_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB9_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB9_11:                               # %if.end10
                                        #   in Loop: Header=BB9_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB9_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB9_13:                               # %if.end16
                                        #   in Loop: Header=BB9_8 Depth=1
	movl	$0, -8(%rbp)
.LBB9_14:                               # %for.cond17
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB9_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB9_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB9_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB9_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB9_17:                               # %if.end28
                                        #   in Loop: Header=BB9_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB9_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB9_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB9_19:                               # %if.end39
                                        #   in Loop: Header=BB9_14 Depth=2
	jmp	.LBB9_20
.LBB9_20:                               # %for.inc
                                        #   in Loop: Header=BB9_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_14
.LBB9_21:                               # %for.end
                                        #   in Loop: Header=BB9_8 Depth=1
	jmp	.LBB9_22
.LBB9_22:                               # %for.inc40
                                        #   in Loop: Header=BB9_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_8
.LBB9_23:                               # %for.end42
	movl	$0, -4(%rbp)
.LBB9_24:                               # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_26 Depth 2
                                        #       Child Loop BB9_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB9_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB9_24 Depth=1
	movl	$0, -8(%rbp)
.LBB9_26:                               # %for.cond47
                                        #   Parent Loop BB9_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB9_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB9_26 Depth=2
	movl	$0, -12(%rbp)
.LBB9_28:                               # %for.cond51
                                        #   Parent Loop BB9_24 Depth=1
                                        #     Parent Loop BB9_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB9_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB9_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB9_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB9_28
.LBB9_31:                               # %for.end63
                                        #   in Loop: Header=BB9_26 Depth=2
	jmp	.LBB9_32
.LBB9_32:                               # %for.inc64
                                        #   in Loop: Header=BB9_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_26
.LBB9_33:                               # %for.end66
                                        #   in Loop: Header=BB9_24 Depth=1
	jmp	.LBB9_34
.LBB9_34:                               # %for.inc67
                                        #   in Loop: Header=BB9_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_24
.LBB9_35:                               # %for.end69
	movl	$0, -4(%rbp)
.LBB9_36:                               # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB9_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB9_36 Depth=1
	vmovsd	.LCPI9_1(%rip), %xmm0   # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI9_0(%rip), %xmm0   # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI9_0(%rip), %xmm0   # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB9_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_36
.LBB9_39:                               # %for.end98
	cmpl	$343956637, -20(%rbp)   # imm = 0x14805C9D
	jne	.LBB9_41
.LBB9_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_41:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB9_40
.Lfunc_end9:
	.size	create_context_memory.2, .Lfunc_end9-create_context_memory.2
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.3 # -- Begin function update_field_frame_contexts.3
	.p2align	4, 0x90
	.type	update_field_frame_contexts.3,@function
update_field_frame_contexts.3:          # @update_field_frame_contexts.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1688665129, -16(%rbp)  # imm = 0x64A6FC29
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB10_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB10_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB10_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB10_2 Depth=1
	movl	$0, -8(%rbp)
.LBB10_4:                               # %for.cond1
                                        #   Parent Loop BB10_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB10_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB10_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB10_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_4
.LBB10_7:                               # %for.end
                                        #   in Loop: Header=BB10_2 Depth=1
	jmp	.LBB10_8
.LBB10_8:                               # %for.inc23
                                        #   in Loop: Header=BB10_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_2
.LBB10_9:                               # %for.end25
	jmp	.LBB10_19
.LBB10_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB10_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB10_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB10_11 Depth=1
	movl	$0, -8(%rbp)
.LBB10_13:                              # %for.cond29
                                        #   Parent Loop BB10_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB10_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB10_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_13
.LBB10_16:                              # %for.end56
                                        #   in Loop: Header=BB10_11 Depth=1
	jmp	.LBB10_17
.LBB10_17:                              # %for.inc57
                                        #   in Loop: Header=BB10_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_11
.LBB10_18:                              # %for.end59
	jmp	.LBB10_19
.LBB10_19:                              # %if.end
	cmpl	$1688665129, -16(%rbp)  # imm = 0x64A6FC29
	jne	.LBB10_21
.LBB10_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB10_20
.Lfunc_end10:
	.size	update_field_frame_contexts.3, .Lfunc_end10-update_field_frame_contexts.3
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.4
.LCPI11_0:
	.quad	4607182418800017408     # double 1
.LCPI11_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI11_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI11_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.4
	.p2align	4, 0x90
	.type	XRate.4,@function
XRate.4:                                # @XRate.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1111787842, -36(%rbp)  # imm = 0x42448942
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB11_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB11_3
.LBB11_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB11_3:                               # %cond.end
	vmovsd	.LCPI11_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI11_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI11_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI11_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB11_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI11_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB11_6
.LBB11_5:                               # %cond.false6
	vmovsd	.LCPI11_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI11_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI11_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB11_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB11_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB11_9
.LBB11_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB11_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB11_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB11_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB11_13
.LBB11_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB11_13:                              # %cond.end26
	jmp	.LBB11_15
.LBB11_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB11_15
.LBB11_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB11_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB11_18
.LBB11_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB11_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1111787842, -36(%rbp)  # imm = 0x42448942
	jne	.LBB11_20
.LBB11_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB11_19
.Lfunc_end11:
	.size	XRate.4, .Lfunc_end11-XRate.4
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.5     # -- Begin function SetCtxModelNumber.5
	.p2align	4, 0x90
	.type	SetCtxModelNumber.5,@function
SetCtxModelNumber.5:                    # @SetCtxModelNumber.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1063598153, -16(%rbp)  # imm = 0x3F653849
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB12_11
.LBB12_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB12_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB12_11
.LBB12_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB12_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB12_11
.LBB12_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB12_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB12_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB12_10
.LBB12_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB12_10:                              # %if.end38
	jmp	.LBB12_11
.LBB12_11:                              # %if.end39
	cmpl	$1063598153, -16(%rbp)  # imm = 0x3F653849
	jne	.LBB12_13
.LBB12_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_12
.Lfunc_end12:
	.size	SetCtxModelNumber.5, .Lfunc_end12-SetCtxModelNumber.5
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.6
.LCPI13_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.6
	.p2align	4, 0x90
	.type	GetCtxModelNumber.6,@function
GetCtxModelNumber.6:                    # @GetCtxModelNumber.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI13_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$209009054, -48(%rbp)   # imm = 0xC75399E
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB13_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_3 Depth 2
                                        #       Child Loop BB13_5 Depth 3
                                        #     Child Loop BB13_14 Depth 2
                                        #       Child Loop BB13_16 Depth 3
                                        #     Child Loop BB13_25 Depth 2
                                        #       Child Loop BB13_27 Depth 3
                                        #     Child Loop BB13_36 Depth 2
                                        #       Child Loop BB13_38 Depth 3
                                        #     Child Loop BB13_47 Depth 2
                                        #     Child Loop BB13_54 Depth 2
                                        #     Child Loop BB13_61 Depth 2
                                        #     Child Loop BB13_68 Depth 2
                                        #     Child Loop BB13_75 Depth 2
                                        #     Child Loop BB13_82 Depth 2
                                        #       Child Loop BB13_84 Depth 3
                                        #     Child Loop BB13_93 Depth 2
                                        #       Child Loop BB13_95 Depth 3
                                        #     Child Loop BB13_104 Depth 2
                                        #       Child Loop BB13_106 Depth 3
                                        #     Child Loop BB13_115 Depth 2
                                        #       Child Loop BB13_117 Depth 3
                                        #     Child Loop BB13_126 Depth 2
                                        #       Child Loop BB13_128 Depth 3
                                        #     Child Loop BB13_137 Depth 2
                                        #       Child Loop BB13_139 Depth 3
                                        #     Child Loop BB13_148 Depth 2
                                        #       Child Loop BB13_150 Depth 3
                                        #     Child Loop BB13_159 Depth 2
                                        #       Child Loop BB13_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB13_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB13_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB13_3:                               # %for.cond2
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB13_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB13_3 Depth=2
	movl	$0, -4(%rbp)
.LBB13_5:                               # %for.cond5
                                        #   Parent Loop BB13_1 Depth=1
                                        #     Parent Loop BB13_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB13_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB13_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB13_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB13_9
.LBB13_8:                               # %if.else
                                        #   in Loop: Header=BB13_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB13_9:                               # %if.end
                                        #   in Loop: Header=BB13_5 Depth=3
	jmp	.LBB13_10
.LBB13_10:                              # %for.inc
                                        #   in Loop: Header=BB13_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_5
.LBB13_11:                              # %for.end
                                        #   in Loop: Header=BB13_3 Depth=2
	jmp	.LBB13_12
.LBB13_12:                              # %for.inc33
                                        #   in Loop: Header=BB13_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_3
.LBB13_13:                              # %for.end35
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -8(%rbp)
.LBB13_14:                              # %for.cond36
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB13_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB13_14 Depth=2
	movl	$0, -4(%rbp)
.LBB13_16:                              # %for.cond39
                                        #   Parent Loop BB13_1 Depth=1
                                        #     Parent Loop BB13_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB13_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB13_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB13_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB13_20
.LBB13_19:                              # %if.else58
                                        #   in Loop: Header=BB13_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB13_20:                              # %if.end73
                                        #   in Loop: Header=BB13_16 Depth=3
	jmp	.LBB13_21
.LBB13_21:                              # %for.inc74
                                        #   in Loop: Header=BB13_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_16
.LBB13_22:                              # %for.end76
                                        #   in Loop: Header=BB13_14 Depth=2
	jmp	.LBB13_23
.LBB13_23:                              # %for.inc77
                                        #   in Loop: Header=BB13_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_14
.LBB13_24:                              # %for.end79
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -8(%rbp)
.LBB13_25:                              # %for.cond80
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB13_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB13_25 Depth=2
	movl	$0, -4(%rbp)
.LBB13_27:                              # %for.cond83
                                        #   Parent Loop BB13_1 Depth=1
                                        #     Parent Loop BB13_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB13_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB13_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB13_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB13_31
.LBB13_30:                              # %if.else102
                                        #   in Loop: Header=BB13_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB13_31:                              # %if.end117
                                        #   in Loop: Header=BB13_27 Depth=3
	jmp	.LBB13_32
.LBB13_32:                              # %for.inc118
                                        #   in Loop: Header=BB13_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_27
.LBB13_33:                              # %for.end120
                                        #   in Loop: Header=BB13_25 Depth=2
	jmp	.LBB13_34
.LBB13_34:                              # %for.inc121
                                        #   in Loop: Header=BB13_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_25
.LBB13_35:                              # %for.end123
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -8(%rbp)
.LBB13_36:                              # %for.cond124
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB13_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB13_36 Depth=2
	movl	$0, -4(%rbp)
.LBB13_38:                              # %for.cond127
                                        #   Parent Loop BB13_1 Depth=1
                                        #     Parent Loop BB13_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB13_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB13_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB13_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB13_42
.LBB13_41:                              # %if.else146
                                        #   in Loop: Header=BB13_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB13_42:                              # %if.end161
                                        #   in Loop: Header=BB13_38 Depth=3
	jmp	.LBB13_43
.LBB13_43:                              # %for.inc162
                                        #   in Loop: Header=BB13_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_38
.LBB13_44:                              # %for.end164
                                        #   in Loop: Header=BB13_36 Depth=2
	jmp	.LBB13_45
.LBB13_45:                              # %for.inc165
                                        #   in Loop: Header=BB13_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_36
.LBB13_46:                              # %for.end167
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -4(%rbp)
.LBB13_47:                              # %for.cond168
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB13_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB13_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB13_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB13_51
.LBB13_50:                              # %if.else184
                                        #   in Loop: Header=BB13_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB13_51:                              # %if.end196
                                        #   in Loop: Header=BB13_47 Depth=2
	jmp	.LBB13_52
.LBB13_52:                              # %for.inc197
                                        #   in Loop: Header=BB13_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_47
.LBB13_53:                              # %for.end199
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -4(%rbp)
.LBB13_54:                              # %for.cond200
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB13_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB13_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB13_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB13_58
.LBB13_57:                              # %if.else216
                                        #   in Loop: Header=BB13_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB13_58:                              # %if.end228
                                        #   in Loop: Header=BB13_54 Depth=2
	jmp	.LBB13_59
.LBB13_59:                              # %for.inc229
                                        #   in Loop: Header=BB13_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_54
.LBB13_60:                              # %for.end231
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -4(%rbp)
.LBB13_61:                              # %for.cond232
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB13_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB13_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB13_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB13_65
.LBB13_64:                              # %if.else248
                                        #   in Loop: Header=BB13_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB13_65:                              # %if.end260
                                        #   in Loop: Header=BB13_61 Depth=2
	jmp	.LBB13_66
.LBB13_66:                              # %for.inc261
                                        #   in Loop: Header=BB13_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_61
.LBB13_67:                              # %for.end263
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -4(%rbp)
.LBB13_68:                              # %for.cond264
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB13_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB13_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB13_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB13_72
.LBB13_71:                              # %if.else280
                                        #   in Loop: Header=BB13_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB13_72:                              # %if.end292
                                        #   in Loop: Header=BB13_68 Depth=2
	jmp	.LBB13_73
.LBB13_73:                              # %for.inc293
                                        #   in Loop: Header=BB13_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_68
.LBB13_74:                              # %for.end295
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -4(%rbp)
.LBB13_75:                              # %for.cond296
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB13_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB13_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB13_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB13_79
.LBB13_78:                              # %if.else312
                                        #   in Loop: Header=BB13_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB13_79:                              # %if.end324
                                        #   in Loop: Header=BB13_75 Depth=2
	jmp	.LBB13_80
.LBB13_80:                              # %for.inc325
                                        #   in Loop: Header=BB13_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_75
.LBB13_81:                              # %for.end327
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -8(%rbp)
.LBB13_82:                              # %for.cond328
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB13_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB13_82 Depth=2
	movl	$0, -4(%rbp)
.LBB13_84:                              # %for.cond331
                                        #   Parent Loop BB13_1 Depth=1
                                        #     Parent Loop BB13_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB13_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB13_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB13_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB13_88
.LBB13_87:                              # %if.else350
                                        #   in Loop: Header=BB13_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB13_88:                              # %if.end365
                                        #   in Loop: Header=BB13_84 Depth=3
	jmp	.LBB13_89
.LBB13_89:                              # %for.inc366
                                        #   in Loop: Header=BB13_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_84
.LBB13_90:                              # %for.end368
                                        #   in Loop: Header=BB13_82 Depth=2
	jmp	.LBB13_91
.LBB13_91:                              # %for.inc369
                                        #   in Loop: Header=BB13_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_82
.LBB13_92:                              # %for.end371
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -8(%rbp)
.LBB13_93:                              # %for.cond372
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB13_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB13_93 Depth=2
	movl	$0, -4(%rbp)
.LBB13_95:                              # %for.cond375
                                        #   Parent Loop BB13_1 Depth=1
                                        #     Parent Loop BB13_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB13_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB13_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB13_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB13_99
.LBB13_98:                              # %if.else394
                                        #   in Loop: Header=BB13_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB13_99:                              # %if.end409
                                        #   in Loop: Header=BB13_95 Depth=3
	jmp	.LBB13_100
.LBB13_100:                             # %for.inc410
                                        #   in Loop: Header=BB13_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_95
.LBB13_101:                             # %for.end412
                                        #   in Loop: Header=BB13_93 Depth=2
	jmp	.LBB13_102
.LBB13_102:                             # %for.inc413
                                        #   in Loop: Header=BB13_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_93
.LBB13_103:                             # %for.end415
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -8(%rbp)
.LBB13_104:                             # %for.cond416
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB13_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB13_104 Depth=2
	movl	$0, -4(%rbp)
.LBB13_106:                             # %for.cond419
                                        #   Parent Loop BB13_1 Depth=1
                                        #     Parent Loop BB13_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB13_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB13_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB13_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB13_110
.LBB13_109:                             # %if.else438
                                        #   in Loop: Header=BB13_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB13_110:                             # %if.end453
                                        #   in Loop: Header=BB13_106 Depth=3
	jmp	.LBB13_111
.LBB13_111:                             # %for.inc454
                                        #   in Loop: Header=BB13_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_106
.LBB13_112:                             # %for.end456
                                        #   in Loop: Header=BB13_104 Depth=2
	jmp	.LBB13_113
.LBB13_113:                             # %for.inc457
                                        #   in Loop: Header=BB13_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_104
.LBB13_114:                             # %for.end459
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -8(%rbp)
.LBB13_115:                             # %for.cond460
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB13_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB13_115 Depth=2
	movl	$0, -4(%rbp)
.LBB13_117:                             # %for.cond463
                                        #   Parent Loop BB13_1 Depth=1
                                        #     Parent Loop BB13_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB13_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB13_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB13_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB13_121
.LBB13_120:                             # %if.else482
                                        #   in Loop: Header=BB13_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB13_121:                             # %if.end497
                                        #   in Loop: Header=BB13_117 Depth=3
	jmp	.LBB13_122
.LBB13_122:                             # %for.inc498
                                        #   in Loop: Header=BB13_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_117
.LBB13_123:                             # %for.end500
                                        #   in Loop: Header=BB13_115 Depth=2
	jmp	.LBB13_124
.LBB13_124:                             # %for.inc501
                                        #   in Loop: Header=BB13_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_115
.LBB13_125:                             # %for.end503
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -8(%rbp)
.LBB13_126:                             # %for.cond504
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB13_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB13_126 Depth=2
	movl	$0, -4(%rbp)
.LBB13_128:                             # %for.cond507
                                        #   Parent Loop BB13_1 Depth=1
                                        #     Parent Loop BB13_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB13_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB13_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB13_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB13_132
.LBB13_131:                             # %if.else526
                                        #   in Loop: Header=BB13_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB13_132:                             # %if.end541
                                        #   in Loop: Header=BB13_128 Depth=3
	jmp	.LBB13_133
.LBB13_133:                             # %for.inc542
                                        #   in Loop: Header=BB13_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_128
.LBB13_134:                             # %for.end544
                                        #   in Loop: Header=BB13_126 Depth=2
	jmp	.LBB13_135
.LBB13_135:                             # %for.inc545
                                        #   in Loop: Header=BB13_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_126
.LBB13_136:                             # %for.end547
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -8(%rbp)
.LBB13_137:                             # %for.cond548
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB13_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB13_137 Depth=2
	movl	$0, -4(%rbp)
.LBB13_139:                             # %for.cond551
                                        #   Parent Loop BB13_1 Depth=1
                                        #     Parent Loop BB13_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB13_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB13_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB13_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB13_143
.LBB13_142:                             # %if.else570
                                        #   in Loop: Header=BB13_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB13_143:                             # %if.end585
                                        #   in Loop: Header=BB13_139 Depth=3
	jmp	.LBB13_144
.LBB13_144:                             # %for.inc586
                                        #   in Loop: Header=BB13_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_139
.LBB13_145:                             # %for.end588
                                        #   in Loop: Header=BB13_137 Depth=2
	jmp	.LBB13_146
.LBB13_146:                             # %for.inc589
                                        #   in Loop: Header=BB13_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_137
.LBB13_147:                             # %for.end591
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -8(%rbp)
.LBB13_148:                             # %for.cond592
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB13_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB13_148 Depth=2
	movl	$0, -4(%rbp)
.LBB13_150:                             # %for.cond595
                                        #   Parent Loop BB13_1 Depth=1
                                        #     Parent Loop BB13_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB13_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB13_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB13_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB13_154
.LBB13_153:                             # %if.else614
                                        #   in Loop: Header=BB13_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB13_154:                             # %if.end629
                                        #   in Loop: Header=BB13_150 Depth=3
	jmp	.LBB13_155
.LBB13_155:                             # %for.inc630
                                        #   in Loop: Header=BB13_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_150
.LBB13_156:                             # %for.end632
                                        #   in Loop: Header=BB13_148 Depth=2
	jmp	.LBB13_157
.LBB13_157:                             # %for.inc633
                                        #   in Loop: Header=BB13_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_148
.LBB13_158:                             # %for.end635
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -8(%rbp)
.LBB13_159:                             # %for.cond636
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB13_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB13_159 Depth=2
	movl	$0, -4(%rbp)
.LBB13_161:                             # %for.cond639
                                        #   Parent Loop BB13_1 Depth=1
                                        #     Parent Loop BB13_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB13_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB13_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB13_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB13_165
.LBB13_164:                             # %if.else658
                                        #   in Loop: Header=BB13_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB13_165:                             # %if.end673
                                        #   in Loop: Header=BB13_161 Depth=3
	jmp	.LBB13_166
.LBB13_166:                             # %for.inc674
                                        #   in Loop: Header=BB13_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_161
.LBB13_167:                             # %for.end676
                                        #   in Loop: Header=BB13_159 Depth=2
	jmp	.LBB13_168
.LBB13_168:                             # %for.inc677
                                        #   in Loop: Header=BB13_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_159
.LBB13_169:                             # %for.end679
                                        #   in Loop: Header=BB13_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB13_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB13_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB13_171:                             # %if.end682
                                        #   in Loop: Header=BB13_1 Depth=1
	jmp	.LBB13_172
.LBB13_172:                             # %for.inc683
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_1
.LBB13_173:                             # %for.end685
	cmpl	$209009054, -48(%rbp)   # imm = 0xC75399E
	jne	.LBB13_175
.LBB13_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_174
.Lfunc_end13:
	.size	GetCtxModelNumber.6, .Lfunc_end13-GetCtxModelNumber.6
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory.7   # -- Begin function free_context_memory.7
	.p2align	4, 0x90
	.type	free_context_memory.7,@function
free_context_memory.7:                  # @free_context_memory.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1960174751, -12(%rbp)  # imm = 0x74D5E49F
	movl	$0, -4(%rbp)
.LBB14_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_3 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB14_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	$0, -8(%rbp)
.LBB14_3:                               # %for.cond1
                                        #   Parent Loop BB14_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB14_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_3
.LBB14_6:                               # %for.end
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.7:                                # %for.inc14
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_1
.LBB14_8:                               # %for.end16
	movq	initialized, %rdi
	callq	free
	movq	model_number, %rdi
	callq	free
	cmpl	$1960174751, -12(%rbp)  # imm = 0x74D5E49F
	jne	.LBB14_10
.LBB14_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_9
.Lfunc_end14:
	.size	free_context_memory.7, .Lfunc_end14-free_context_memory.7
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.8        # -- Begin function store_contexts.8
	.p2align	4, 0x90
	.type	store_contexts.8,@function
store_contexts.8:                       # @store_contexts.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$653490876, -16(%rbp)   # imm = 0x26F37ABC
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -12(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB15_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-12(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB15_3
.LBB15_2:                               # %if.else
	jmp	.LBB15_3
.LBB15_3:                               # %if.end
	cmpl	$653490876, -16(%rbp)   # imm = 0x26F37ABC
	jne	.LBB15_5
.LBB15_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_4
.Lfunc_end15:
	.size	store_contexts.8, .Lfunc_end15-store_contexts.8
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.9
.LCPI16_0:
	.quad	4611686018427387904     # double 2
.LCPI16_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.9
	.p2align	4, 0x90
	.type	create_context_memory.9,@function
create_context_memory.9:                # @create_context_memory.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$193197511, -20(%rbp)   # imm = 0xB83F5C7
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB16_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB16_3
.LBB16_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB16_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB16_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB16_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB16_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB16_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB16_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB16_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB16_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB16_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB16_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB16_11:                              # %if.end10
                                        #   in Loop: Header=BB16_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB16_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB16_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB16_13:                              # %if.end16
                                        #   in Loop: Header=BB16_8 Depth=1
	movl	$0, -8(%rbp)
.LBB16_14:                              # %for.cond17
                                        #   Parent Loop BB16_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB16_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB16_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB16_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB16_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB16_17:                              # %if.end28
                                        #   in Loop: Header=BB16_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB16_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB16_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB16_19:                              # %if.end39
                                        #   in Loop: Header=BB16_14 Depth=2
	jmp	.LBB16_20
.LBB16_20:                              # %for.inc
                                        #   in Loop: Header=BB16_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_14
.LBB16_21:                              # %for.end
                                        #   in Loop: Header=BB16_8 Depth=1
	jmp	.LBB16_22
.LBB16_22:                              # %for.inc40
                                        #   in Loop: Header=BB16_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_8
.LBB16_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB16_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_26 Depth 2
                                        #       Child Loop BB16_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB16_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB16_24 Depth=1
	movl	$0, -8(%rbp)
.LBB16_26:                              # %for.cond47
                                        #   Parent Loop BB16_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB16_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB16_26 Depth=2
	movl	$0, -12(%rbp)
.LBB16_28:                              # %for.cond51
                                        #   Parent Loop BB16_24 Depth=1
                                        #     Parent Loop BB16_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB16_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB16_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB16_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_28
.LBB16_31:                              # %for.end63
                                        #   in Loop: Header=BB16_26 Depth=2
	jmp	.LBB16_32
.LBB16_32:                              # %for.inc64
                                        #   in Loop: Header=BB16_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_26
.LBB16_33:                              # %for.end66
                                        #   in Loop: Header=BB16_24 Depth=1
	jmp	.LBB16_34
.LBB16_34:                              # %for.inc67
                                        #   in Loop: Header=BB16_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_24
.LBB16_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB16_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB16_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB16_36 Depth=1
	vmovsd	.LCPI16_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI16_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI16_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_36
.LBB16_39:                              # %for.end98
	cmpl	$193197511, -20(%rbp)   # imm = 0xB83F5C7
	jne	.LBB16_41
.LBB16_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_40
.Lfunc_end16:
	.size	create_context_memory.9, .Lfunc_end16-create_context_memory.9
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.10        # -- Begin function init_contexts.10
	.p2align	4, 0x90
	.type	init_contexts.10,@function
init_contexts.10:                       # @init_contexts.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1764895256, -28(%rbp)  # imm = 0x69322A18
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB17_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB17_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	$0, -4(%rbp)
.LBB17_3:                               # %for.cond2
                                        #   Parent Loop BB17_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB17_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB17_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB17_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB17_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB17_7
.LBB17_6:                               # %if.else
                                        #   in Loop: Header=BB17_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB17_7:                               # %if.end
                                        #   in Loop: Header=BB17_3 Depth=2
	jmp	.LBB17_8
.LBB17_8:                               # %for.inc
                                        #   in Loop: Header=BB17_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_3
.LBB17_9:                               # %for.end
                                        #   in Loop: Header=BB17_1 Depth=1
	jmp	.LBB17_10
.LBB17_10:                              # %for.inc28
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_1
.LBB17_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB17_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB17_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB17_12 Depth=1
	movl	$0, -4(%rbp)
.LBB17_14:                              # %for.cond34
                                        #   Parent Loop BB17_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB17_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB17_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB17_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB17_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB17_18
.LBB17_17:                              # %if.else52
                                        #   in Loop: Header=BB17_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB17_18:                              # %if.end66
                                        #   in Loop: Header=BB17_14 Depth=2
	jmp	.LBB17_19
.LBB17_19:                              # %for.inc67
                                        #   in Loop: Header=BB17_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_14
.LBB17_20:                              # %for.end69
                                        #   in Loop: Header=BB17_12 Depth=1
	jmp	.LBB17_21
.LBB17_21:                              # %for.inc70
                                        #   in Loop: Header=BB17_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_12
.LBB17_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB17_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB17_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB17_23 Depth=1
	movl	$0, -4(%rbp)
.LBB17_25:                              # %for.cond76
                                        #   Parent Loop BB17_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB17_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB17_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB17_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB17_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB17_29
.LBB17_28:                              # %if.else94
                                        #   in Loop: Header=BB17_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB17_29:                              # %if.end108
                                        #   in Loop: Header=BB17_25 Depth=2
	jmp	.LBB17_30
.LBB17_30:                              # %for.inc109
                                        #   in Loop: Header=BB17_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_25
.LBB17_31:                              # %for.end111
                                        #   in Loop: Header=BB17_23 Depth=1
	jmp	.LBB17_32
.LBB17_32:                              # %for.inc112
                                        #   in Loop: Header=BB17_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_23
.LBB17_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB17_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB17_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB17_34 Depth=1
	movl	$0, -4(%rbp)
.LBB17_36:                              # %for.cond118
                                        #   Parent Loop BB17_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB17_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB17_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB17_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB17_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB17_40
.LBB17_39:                              # %if.else136
                                        #   in Loop: Header=BB17_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB17_40:                              # %if.end150
                                        #   in Loop: Header=BB17_36 Depth=2
	jmp	.LBB17_41
.LBB17_41:                              # %for.inc151
                                        #   in Loop: Header=BB17_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_36
.LBB17_42:                              # %for.end153
                                        #   in Loop: Header=BB17_34 Depth=1
	jmp	.LBB17_43
.LBB17_43:                              # %for.inc154
                                        #   in Loop: Header=BB17_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_34
.LBB17_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB17_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB17_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB17_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB17_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB17_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB17_49
.LBB17_48:                              # %if.else172
                                        #   in Loop: Header=BB17_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB17_49:                              # %if.end183
                                        #   in Loop: Header=BB17_45 Depth=1
	jmp	.LBB17_50
.LBB17_50:                              # %for.inc184
                                        #   in Loop: Header=BB17_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_45
.LBB17_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB17_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB17_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB17_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB17_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB17_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB17_56
.LBB17_55:                              # %if.else202
                                        #   in Loop: Header=BB17_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB17_56:                              # %if.end213
                                        #   in Loop: Header=BB17_52 Depth=1
	jmp	.LBB17_57
.LBB17_57:                              # %for.inc214
                                        #   in Loop: Header=BB17_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_52
.LBB17_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB17_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB17_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB17_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB17_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB17_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB17_63
.LBB17_62:                              # %if.else232
                                        #   in Loop: Header=BB17_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB17_63:                              # %if.end243
                                        #   in Loop: Header=BB17_59 Depth=1
	jmp	.LBB17_64
.LBB17_64:                              # %for.inc244
                                        #   in Loop: Header=BB17_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_59
.LBB17_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB17_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB17_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB17_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB17_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB17_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB17_70
.LBB17_69:                              # %if.else262
                                        #   in Loop: Header=BB17_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB17_70:                              # %if.end273
                                        #   in Loop: Header=BB17_66 Depth=1
	jmp	.LBB17_71
.LBB17_71:                              # %for.inc274
                                        #   in Loop: Header=BB17_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_66
.LBB17_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB17_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB17_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB17_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB17_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB17_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB17_77
.LBB17_76:                              # %if.else292
                                        #   in Loop: Header=BB17_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB17_77:                              # %if.end303
                                        #   in Loop: Header=BB17_73 Depth=1
	jmp	.LBB17_78
.LBB17_78:                              # %for.inc304
                                        #   in Loop: Header=BB17_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_73
.LBB17_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB17_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB17_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB17_80 Depth=1
	movl	$0, -4(%rbp)
.LBB17_82:                              # %for.cond310
                                        #   Parent Loop BB17_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB17_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB17_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB17_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB17_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB17_86
.LBB17_85:                              # %if.else328
                                        #   in Loop: Header=BB17_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB17_86:                              # %if.end342
                                        #   in Loop: Header=BB17_82 Depth=2
	jmp	.LBB17_87
.LBB17_87:                              # %for.inc343
                                        #   in Loop: Header=BB17_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_82
.LBB17_88:                              # %for.end345
                                        #   in Loop: Header=BB17_80 Depth=1
	jmp	.LBB17_89
.LBB17_89:                              # %for.inc346
                                        #   in Loop: Header=BB17_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_80
.LBB17_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB17_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB17_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB17_91 Depth=1
	movl	$0, -4(%rbp)
.LBB17_93:                              # %for.cond352
                                        #   Parent Loop BB17_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB17_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB17_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB17_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB17_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB17_97
.LBB17_96:                              # %if.else370
                                        #   in Loop: Header=BB17_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB17_97:                              # %if.end384
                                        #   in Loop: Header=BB17_93 Depth=2
	jmp	.LBB17_98
.LBB17_98:                              # %for.inc385
                                        #   in Loop: Header=BB17_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_93
.LBB17_99:                              # %for.end387
                                        #   in Loop: Header=BB17_91 Depth=1
	jmp	.LBB17_100
.LBB17_100:                             # %for.inc388
                                        #   in Loop: Header=BB17_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_91
.LBB17_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB17_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB17_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB17_102 Depth=1
	movl	$0, -4(%rbp)
.LBB17_104:                             # %for.cond394
                                        #   Parent Loop BB17_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB17_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB17_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB17_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB17_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB17_108
.LBB17_107:                             # %if.else412
                                        #   in Loop: Header=BB17_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB17_108:                             # %if.end426
                                        #   in Loop: Header=BB17_104 Depth=2
	jmp	.LBB17_109
.LBB17_109:                             # %for.inc427
                                        #   in Loop: Header=BB17_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_104
.LBB17_110:                             # %for.end429
                                        #   in Loop: Header=BB17_102 Depth=1
	jmp	.LBB17_111
.LBB17_111:                             # %for.inc430
                                        #   in Loop: Header=BB17_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_102
.LBB17_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB17_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB17_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB17_113 Depth=1
	movl	$0, -4(%rbp)
.LBB17_115:                             # %for.cond436
                                        #   Parent Loop BB17_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB17_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB17_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB17_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB17_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB17_119
.LBB17_118:                             # %if.else454
                                        #   in Loop: Header=BB17_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB17_119:                             # %if.end468
                                        #   in Loop: Header=BB17_115 Depth=2
	jmp	.LBB17_120
.LBB17_120:                             # %for.inc469
                                        #   in Loop: Header=BB17_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_115
.LBB17_121:                             # %for.end471
                                        #   in Loop: Header=BB17_113 Depth=1
	jmp	.LBB17_122
.LBB17_122:                             # %for.inc472
                                        #   in Loop: Header=BB17_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_113
.LBB17_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB17_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB17_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB17_124 Depth=1
	movl	$0, -4(%rbp)
.LBB17_126:                             # %for.cond478
                                        #   Parent Loop BB17_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB17_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB17_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB17_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB17_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB17_130
.LBB17_129:                             # %if.else496
                                        #   in Loop: Header=BB17_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB17_130:                             # %if.end510
                                        #   in Loop: Header=BB17_126 Depth=2
	jmp	.LBB17_131
.LBB17_131:                             # %for.inc511
                                        #   in Loop: Header=BB17_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_126
.LBB17_132:                             # %for.end513
                                        #   in Loop: Header=BB17_124 Depth=1
	jmp	.LBB17_133
.LBB17_133:                             # %for.inc514
                                        #   in Loop: Header=BB17_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_124
.LBB17_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB17_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB17_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB17_135 Depth=1
	movl	$0, -4(%rbp)
.LBB17_137:                             # %for.cond520
                                        #   Parent Loop BB17_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB17_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB17_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB17_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB17_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB17_141
.LBB17_140:                             # %if.else538
                                        #   in Loop: Header=BB17_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB17_141:                             # %if.end552
                                        #   in Loop: Header=BB17_137 Depth=2
	jmp	.LBB17_142
.LBB17_142:                             # %for.inc553
                                        #   in Loop: Header=BB17_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_137
.LBB17_143:                             # %for.end555
                                        #   in Loop: Header=BB17_135 Depth=1
	jmp	.LBB17_144
.LBB17_144:                             # %for.inc556
                                        #   in Loop: Header=BB17_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_135
.LBB17_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB17_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB17_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB17_146 Depth=1
	movl	$0, -4(%rbp)
.LBB17_148:                             # %for.cond562
                                        #   Parent Loop BB17_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB17_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB17_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB17_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB17_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB17_152
.LBB17_151:                             # %if.else580
                                        #   in Loop: Header=BB17_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB17_152:                             # %if.end594
                                        #   in Loop: Header=BB17_148 Depth=2
	jmp	.LBB17_153
.LBB17_153:                             # %for.inc595
                                        #   in Loop: Header=BB17_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_148
.LBB17_154:                             # %for.end597
                                        #   in Loop: Header=BB17_146 Depth=1
	jmp	.LBB17_155
.LBB17_155:                             # %for.inc598
                                        #   in Loop: Header=BB17_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_146
.LBB17_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB17_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB17_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB17_157 Depth=1
	movl	$0, -4(%rbp)
.LBB17_159:                             # %for.cond604
                                        #   Parent Loop BB17_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB17_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB17_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB17_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB17_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB17_163
.LBB17_162:                             # %if.else622
                                        #   in Loop: Header=BB17_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB17_163:                             # %if.end636
                                        #   in Loop: Header=BB17_159 Depth=2
	jmp	.LBB17_164
.LBB17_164:                             # %for.inc637
                                        #   in Loop: Header=BB17_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_159
.LBB17_165:                             # %for.end639
                                        #   in Loop: Header=BB17_157 Depth=1
	jmp	.LBB17_166
.LBB17_166:                             # %for.inc640
                                        #   in Loop: Header=BB17_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_157
.LBB17_167:                             # %for.end642
	cmpl	$1764895256, -28(%rbp)  # imm = 0x69322A18
	jne	.LBB17_169
.LBB17_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_168
.Lfunc_end17:
	.size	init_contexts.10, .Lfunc_end17-init_contexts.10
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.11
.LCPI18_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.11
	.p2align	4, 0x90
	.type	GetCtxModelNumber.11,@function
GetCtxModelNumber.11:                   # @GetCtxModelNumber.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI18_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1444593023, -48(%rbp)  # imm = 0x561ABD7F
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB18_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_3 Depth 2
                                        #       Child Loop BB18_5 Depth 3
                                        #     Child Loop BB18_14 Depth 2
                                        #       Child Loop BB18_16 Depth 3
                                        #     Child Loop BB18_25 Depth 2
                                        #       Child Loop BB18_27 Depth 3
                                        #     Child Loop BB18_36 Depth 2
                                        #       Child Loop BB18_38 Depth 3
                                        #     Child Loop BB18_47 Depth 2
                                        #     Child Loop BB18_54 Depth 2
                                        #     Child Loop BB18_61 Depth 2
                                        #     Child Loop BB18_68 Depth 2
                                        #     Child Loop BB18_75 Depth 2
                                        #     Child Loop BB18_82 Depth 2
                                        #       Child Loop BB18_84 Depth 3
                                        #     Child Loop BB18_93 Depth 2
                                        #       Child Loop BB18_95 Depth 3
                                        #     Child Loop BB18_104 Depth 2
                                        #       Child Loop BB18_106 Depth 3
                                        #     Child Loop BB18_115 Depth 2
                                        #       Child Loop BB18_117 Depth 3
                                        #     Child Loop BB18_126 Depth 2
                                        #       Child Loop BB18_128 Depth 3
                                        #     Child Loop BB18_137 Depth 2
                                        #       Child Loop BB18_139 Depth 3
                                        #     Child Loop BB18_148 Depth 2
                                        #       Child Loop BB18_150 Depth 3
                                        #     Child Loop BB18_159 Depth 2
                                        #       Child Loop BB18_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB18_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB18_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB18_3:                               # %for.cond2
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB18_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB18_3 Depth=2
	movl	$0, -4(%rbp)
.LBB18_5:                               # %for.cond5
                                        #   Parent Loop BB18_1 Depth=1
                                        #     Parent Loop BB18_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB18_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB18_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB18_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB18_9
.LBB18_8:                               # %if.else
                                        #   in Loop: Header=BB18_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB18_9:                               # %if.end
                                        #   in Loop: Header=BB18_5 Depth=3
	jmp	.LBB18_10
.LBB18_10:                              # %for.inc
                                        #   in Loop: Header=BB18_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_5
.LBB18_11:                              # %for.end
                                        #   in Loop: Header=BB18_3 Depth=2
	jmp	.LBB18_12
.LBB18_12:                              # %for.inc33
                                        #   in Loop: Header=BB18_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_3
.LBB18_13:                              # %for.end35
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -8(%rbp)
.LBB18_14:                              # %for.cond36
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB18_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB18_14 Depth=2
	movl	$0, -4(%rbp)
.LBB18_16:                              # %for.cond39
                                        #   Parent Loop BB18_1 Depth=1
                                        #     Parent Loop BB18_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB18_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB18_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB18_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB18_20
.LBB18_19:                              # %if.else58
                                        #   in Loop: Header=BB18_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB18_20:                              # %if.end73
                                        #   in Loop: Header=BB18_16 Depth=3
	jmp	.LBB18_21
.LBB18_21:                              # %for.inc74
                                        #   in Loop: Header=BB18_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_16
.LBB18_22:                              # %for.end76
                                        #   in Loop: Header=BB18_14 Depth=2
	jmp	.LBB18_23
.LBB18_23:                              # %for.inc77
                                        #   in Loop: Header=BB18_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_14
.LBB18_24:                              # %for.end79
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -8(%rbp)
.LBB18_25:                              # %for.cond80
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB18_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB18_25 Depth=2
	movl	$0, -4(%rbp)
.LBB18_27:                              # %for.cond83
                                        #   Parent Loop BB18_1 Depth=1
                                        #     Parent Loop BB18_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB18_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB18_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB18_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB18_31
.LBB18_30:                              # %if.else102
                                        #   in Loop: Header=BB18_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB18_31:                              # %if.end117
                                        #   in Loop: Header=BB18_27 Depth=3
	jmp	.LBB18_32
.LBB18_32:                              # %for.inc118
                                        #   in Loop: Header=BB18_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_27
.LBB18_33:                              # %for.end120
                                        #   in Loop: Header=BB18_25 Depth=2
	jmp	.LBB18_34
.LBB18_34:                              # %for.inc121
                                        #   in Loop: Header=BB18_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_25
.LBB18_35:                              # %for.end123
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -8(%rbp)
.LBB18_36:                              # %for.cond124
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB18_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB18_36 Depth=2
	movl	$0, -4(%rbp)
.LBB18_38:                              # %for.cond127
                                        #   Parent Loop BB18_1 Depth=1
                                        #     Parent Loop BB18_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB18_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB18_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB18_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB18_42
.LBB18_41:                              # %if.else146
                                        #   in Loop: Header=BB18_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB18_42:                              # %if.end161
                                        #   in Loop: Header=BB18_38 Depth=3
	jmp	.LBB18_43
.LBB18_43:                              # %for.inc162
                                        #   in Loop: Header=BB18_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_38
.LBB18_44:                              # %for.end164
                                        #   in Loop: Header=BB18_36 Depth=2
	jmp	.LBB18_45
.LBB18_45:                              # %for.inc165
                                        #   in Loop: Header=BB18_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_36
.LBB18_46:                              # %for.end167
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -4(%rbp)
.LBB18_47:                              # %for.cond168
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB18_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB18_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB18_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB18_51
.LBB18_50:                              # %if.else184
                                        #   in Loop: Header=BB18_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB18_51:                              # %if.end196
                                        #   in Loop: Header=BB18_47 Depth=2
	jmp	.LBB18_52
.LBB18_52:                              # %for.inc197
                                        #   in Loop: Header=BB18_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_47
.LBB18_53:                              # %for.end199
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -4(%rbp)
.LBB18_54:                              # %for.cond200
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB18_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB18_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB18_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB18_58
.LBB18_57:                              # %if.else216
                                        #   in Loop: Header=BB18_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB18_58:                              # %if.end228
                                        #   in Loop: Header=BB18_54 Depth=2
	jmp	.LBB18_59
.LBB18_59:                              # %for.inc229
                                        #   in Loop: Header=BB18_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_54
.LBB18_60:                              # %for.end231
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -4(%rbp)
.LBB18_61:                              # %for.cond232
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB18_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB18_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB18_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB18_65
.LBB18_64:                              # %if.else248
                                        #   in Loop: Header=BB18_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB18_65:                              # %if.end260
                                        #   in Loop: Header=BB18_61 Depth=2
	jmp	.LBB18_66
.LBB18_66:                              # %for.inc261
                                        #   in Loop: Header=BB18_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_61
.LBB18_67:                              # %for.end263
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -4(%rbp)
.LBB18_68:                              # %for.cond264
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB18_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB18_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB18_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB18_72
.LBB18_71:                              # %if.else280
                                        #   in Loop: Header=BB18_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB18_72:                              # %if.end292
                                        #   in Loop: Header=BB18_68 Depth=2
	jmp	.LBB18_73
.LBB18_73:                              # %for.inc293
                                        #   in Loop: Header=BB18_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_68
.LBB18_74:                              # %for.end295
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -4(%rbp)
.LBB18_75:                              # %for.cond296
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB18_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB18_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB18_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB18_79
.LBB18_78:                              # %if.else312
                                        #   in Loop: Header=BB18_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB18_79:                              # %if.end324
                                        #   in Loop: Header=BB18_75 Depth=2
	jmp	.LBB18_80
.LBB18_80:                              # %for.inc325
                                        #   in Loop: Header=BB18_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_75
.LBB18_81:                              # %for.end327
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -8(%rbp)
.LBB18_82:                              # %for.cond328
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB18_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB18_82 Depth=2
	movl	$0, -4(%rbp)
.LBB18_84:                              # %for.cond331
                                        #   Parent Loop BB18_1 Depth=1
                                        #     Parent Loop BB18_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB18_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB18_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB18_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB18_88
.LBB18_87:                              # %if.else350
                                        #   in Loop: Header=BB18_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB18_88:                              # %if.end365
                                        #   in Loop: Header=BB18_84 Depth=3
	jmp	.LBB18_89
.LBB18_89:                              # %for.inc366
                                        #   in Loop: Header=BB18_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_84
.LBB18_90:                              # %for.end368
                                        #   in Loop: Header=BB18_82 Depth=2
	jmp	.LBB18_91
.LBB18_91:                              # %for.inc369
                                        #   in Loop: Header=BB18_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_82
.LBB18_92:                              # %for.end371
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -8(%rbp)
.LBB18_93:                              # %for.cond372
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB18_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB18_93 Depth=2
	movl	$0, -4(%rbp)
.LBB18_95:                              # %for.cond375
                                        #   Parent Loop BB18_1 Depth=1
                                        #     Parent Loop BB18_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB18_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB18_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB18_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB18_99
.LBB18_98:                              # %if.else394
                                        #   in Loop: Header=BB18_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB18_99:                              # %if.end409
                                        #   in Loop: Header=BB18_95 Depth=3
	jmp	.LBB18_100
.LBB18_100:                             # %for.inc410
                                        #   in Loop: Header=BB18_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_95
.LBB18_101:                             # %for.end412
                                        #   in Loop: Header=BB18_93 Depth=2
	jmp	.LBB18_102
.LBB18_102:                             # %for.inc413
                                        #   in Loop: Header=BB18_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_93
.LBB18_103:                             # %for.end415
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -8(%rbp)
.LBB18_104:                             # %for.cond416
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB18_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB18_104 Depth=2
	movl	$0, -4(%rbp)
.LBB18_106:                             # %for.cond419
                                        #   Parent Loop BB18_1 Depth=1
                                        #     Parent Loop BB18_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB18_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB18_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB18_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB18_110
.LBB18_109:                             # %if.else438
                                        #   in Loop: Header=BB18_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB18_110:                             # %if.end453
                                        #   in Loop: Header=BB18_106 Depth=3
	jmp	.LBB18_111
.LBB18_111:                             # %for.inc454
                                        #   in Loop: Header=BB18_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_106
.LBB18_112:                             # %for.end456
                                        #   in Loop: Header=BB18_104 Depth=2
	jmp	.LBB18_113
.LBB18_113:                             # %for.inc457
                                        #   in Loop: Header=BB18_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_104
.LBB18_114:                             # %for.end459
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -8(%rbp)
.LBB18_115:                             # %for.cond460
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB18_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB18_115 Depth=2
	movl	$0, -4(%rbp)
.LBB18_117:                             # %for.cond463
                                        #   Parent Loop BB18_1 Depth=1
                                        #     Parent Loop BB18_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB18_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB18_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB18_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB18_121
.LBB18_120:                             # %if.else482
                                        #   in Loop: Header=BB18_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB18_121:                             # %if.end497
                                        #   in Loop: Header=BB18_117 Depth=3
	jmp	.LBB18_122
.LBB18_122:                             # %for.inc498
                                        #   in Loop: Header=BB18_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_117
.LBB18_123:                             # %for.end500
                                        #   in Loop: Header=BB18_115 Depth=2
	jmp	.LBB18_124
.LBB18_124:                             # %for.inc501
                                        #   in Loop: Header=BB18_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_115
.LBB18_125:                             # %for.end503
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -8(%rbp)
.LBB18_126:                             # %for.cond504
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB18_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB18_126 Depth=2
	movl	$0, -4(%rbp)
.LBB18_128:                             # %for.cond507
                                        #   Parent Loop BB18_1 Depth=1
                                        #     Parent Loop BB18_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB18_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB18_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB18_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB18_132
.LBB18_131:                             # %if.else526
                                        #   in Loop: Header=BB18_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB18_132:                             # %if.end541
                                        #   in Loop: Header=BB18_128 Depth=3
	jmp	.LBB18_133
.LBB18_133:                             # %for.inc542
                                        #   in Loop: Header=BB18_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_128
.LBB18_134:                             # %for.end544
                                        #   in Loop: Header=BB18_126 Depth=2
	jmp	.LBB18_135
.LBB18_135:                             # %for.inc545
                                        #   in Loop: Header=BB18_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_126
.LBB18_136:                             # %for.end547
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -8(%rbp)
.LBB18_137:                             # %for.cond548
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB18_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB18_137 Depth=2
	movl	$0, -4(%rbp)
.LBB18_139:                             # %for.cond551
                                        #   Parent Loop BB18_1 Depth=1
                                        #     Parent Loop BB18_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB18_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB18_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB18_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB18_143
.LBB18_142:                             # %if.else570
                                        #   in Loop: Header=BB18_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB18_143:                             # %if.end585
                                        #   in Loop: Header=BB18_139 Depth=3
	jmp	.LBB18_144
.LBB18_144:                             # %for.inc586
                                        #   in Loop: Header=BB18_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_139
.LBB18_145:                             # %for.end588
                                        #   in Loop: Header=BB18_137 Depth=2
	jmp	.LBB18_146
.LBB18_146:                             # %for.inc589
                                        #   in Loop: Header=BB18_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_137
.LBB18_147:                             # %for.end591
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -8(%rbp)
.LBB18_148:                             # %for.cond592
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB18_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB18_148 Depth=2
	movl	$0, -4(%rbp)
.LBB18_150:                             # %for.cond595
                                        #   Parent Loop BB18_1 Depth=1
                                        #     Parent Loop BB18_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB18_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB18_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB18_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB18_154
.LBB18_153:                             # %if.else614
                                        #   in Loop: Header=BB18_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB18_154:                             # %if.end629
                                        #   in Loop: Header=BB18_150 Depth=3
	jmp	.LBB18_155
.LBB18_155:                             # %for.inc630
                                        #   in Loop: Header=BB18_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_150
.LBB18_156:                             # %for.end632
                                        #   in Loop: Header=BB18_148 Depth=2
	jmp	.LBB18_157
.LBB18_157:                             # %for.inc633
                                        #   in Loop: Header=BB18_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_148
.LBB18_158:                             # %for.end635
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -8(%rbp)
.LBB18_159:                             # %for.cond636
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB18_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB18_159 Depth=2
	movl	$0, -4(%rbp)
.LBB18_161:                             # %for.cond639
                                        #   Parent Loop BB18_1 Depth=1
                                        #     Parent Loop BB18_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB18_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB18_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB18_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB18_165
.LBB18_164:                             # %if.else658
                                        #   in Loop: Header=BB18_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB18_165:                             # %if.end673
                                        #   in Loop: Header=BB18_161 Depth=3
	jmp	.LBB18_166
.LBB18_166:                             # %for.inc674
                                        #   in Loop: Header=BB18_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_161
.LBB18_167:                             # %for.end676
                                        #   in Loop: Header=BB18_159 Depth=2
	jmp	.LBB18_168
.LBB18_168:                             # %for.inc677
                                        #   in Loop: Header=BB18_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_159
.LBB18_169:                             # %for.end679
                                        #   in Loop: Header=BB18_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB18_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB18_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB18_171:                             # %if.end682
                                        #   in Loop: Header=BB18_1 Depth=1
	jmp	.LBB18_172
.LBB18_172:                             # %for.inc683
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_1
.LBB18_173:                             # %for.end685
	cmpl	$1444593023, -48(%rbp)  # imm = 0x561ABD7F
	jne	.LBB18_175
.LBB18_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_174
.Lfunc_end18:
	.size	GetCtxModelNumber.11, .Lfunc_end18-GetCtxModelNumber.11
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.12    # -- Begin function SetCtxModelNumber.12
	.p2align	4, 0x90
	.type	SetCtxModelNumber.12,@function
SetCtxModelNumber.12:                   # @SetCtxModelNumber.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1006305827, -16(%rbp)  # imm = 0x3BFB0223
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB19_11
.LBB19_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB19_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB19_11
.LBB19_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB19_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB19_11
.LBB19_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB19_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB19_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB19_10
.LBB19_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB19_10:                              # %if.end38
	jmp	.LBB19_11
.LBB19_11:                              # %if.end39
	cmpl	$1006305827, -16(%rbp)  # imm = 0x3BFB0223
	jne	.LBB19_13
.LBB19_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_12
.Lfunc_end19:
	.size	SetCtxModelNumber.12, .Lfunc_end19-SetCtxModelNumber.12
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory.13  # -- Begin function free_context_memory.13
	.p2align	4, 0x90
	.type	free_context_memory.13,@function
free_context_memory.13:                 # @free_context_memory.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$629332880, -12(%rbp)   # imm = 0x2582DB90
	movl	$0, -4(%rbp)
.LBB20_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_3 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB20_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	$0, -8(%rbp)
.LBB20_3:                               # %for.cond1
                                        #   Parent Loop BB20_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB20_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB20_3 Depth=2
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_3
.LBB20_6:                               # %for.end
                                        #   in Loop: Header=BB20_1 Depth=1
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.7:                                # %for.inc14
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_1
.LBB20_8:                               # %for.end16
	movq	initialized, %rdi
	callq	free
	movq	model_number, %rdi
	callq	free
	cmpl	$629332880, -12(%rbp)   # imm = 0x2582DB90
	jne	.LBB20_10
.LBB20_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_9
.Lfunc_end20:
	.size	free_context_memory.13, .Lfunc_end20-free_context_memory.13
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.14
.LCPI21_0:
	.quad	4611686018427387904     # double 2
.LCPI21_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.14
	.p2align	4, 0x90
	.type	create_context_memory.14,@function
create_context_memory.14:               # @create_context_memory.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1826354676, -20(%rbp)  # imm = 0x6CDBF5F4
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB21_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB21_3
.LBB21_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB21_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB21_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB21_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB21_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB21_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB21_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB21_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB21_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB21_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB21_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB21_11:                              # %if.end10
                                        #   in Loop: Header=BB21_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB21_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB21_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB21_13:                              # %if.end16
                                        #   in Loop: Header=BB21_8 Depth=1
	movl	$0, -8(%rbp)
.LBB21_14:                              # %for.cond17
                                        #   Parent Loop BB21_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB21_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB21_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB21_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB21_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB21_17:                              # %if.end28
                                        #   in Loop: Header=BB21_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB21_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB21_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB21_19:                              # %if.end39
                                        #   in Loop: Header=BB21_14 Depth=2
	jmp	.LBB21_20
.LBB21_20:                              # %for.inc
                                        #   in Loop: Header=BB21_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_14
.LBB21_21:                              # %for.end
                                        #   in Loop: Header=BB21_8 Depth=1
	jmp	.LBB21_22
.LBB21_22:                              # %for.inc40
                                        #   in Loop: Header=BB21_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_8
.LBB21_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB21_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_26 Depth 2
                                        #       Child Loop BB21_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB21_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB21_24 Depth=1
	movl	$0, -8(%rbp)
.LBB21_26:                              # %for.cond47
                                        #   Parent Loop BB21_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB21_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB21_26 Depth=2
	movl	$0, -12(%rbp)
.LBB21_28:                              # %for.cond51
                                        #   Parent Loop BB21_24 Depth=1
                                        #     Parent Loop BB21_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB21_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB21_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB21_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_28
.LBB21_31:                              # %for.end63
                                        #   in Loop: Header=BB21_26 Depth=2
	jmp	.LBB21_32
.LBB21_32:                              # %for.inc64
                                        #   in Loop: Header=BB21_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_26
.LBB21_33:                              # %for.end66
                                        #   in Loop: Header=BB21_24 Depth=1
	jmp	.LBB21_34
.LBB21_34:                              # %for.inc67
                                        #   in Loop: Header=BB21_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_24
.LBB21_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB21_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB21_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB21_36 Depth=1
	vmovsd	.LCPI21_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI21_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI21_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB21_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_36
.LBB21_39:                              # %for.end98
	cmpl	$1826354676, -20(%rbp)  # imm = 0x6CDBF5F4
	jne	.LBB21_41
.LBB21_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_40
.Lfunc_end21:
	.size	create_context_memory.14, .Lfunc_end21-create_context_memory.14
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.15    # -- Begin function SetCtxModelNumber.15
	.p2align	4, 0x90
	.type	SetCtxModelNumber.15,@function
SetCtxModelNumber.15:                   # @SetCtxModelNumber.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1087389809, -16(%rbp)  # imm = 0x40D04071
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB22_11
.LBB22_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB22_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB22_11
.LBB22_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB22_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB22_11
.LBB22_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB22_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB22_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB22_10
.LBB22_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB22_10:                              # %if.end38
	jmp	.LBB22_11
.LBB22_11:                              # %if.end39
	cmpl	$1087389809, -16(%rbp)  # imm = 0x40D04071
	jne	.LBB22_13
.LBB22_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_12
.Lfunc_end22:
	.size	SetCtxModelNumber.15, .Lfunc_end22-SetCtxModelNumber.15
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.16
.LCPI23_0:
	.quad	4611686018427387904     # double 2
.LCPI23_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.16
	.p2align	4, 0x90
	.type	create_context_memory.16,@function
create_context_memory.16:               # @create_context_memory.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$794717460, -20(%rbp)   # imm = 0x2F5E6D14
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB23_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB23_3
.LBB23_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB23_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB23_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB23_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB23_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB23_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB23_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB23_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB23_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB23_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB23_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB23_11:                              # %if.end10
                                        #   in Loop: Header=BB23_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB23_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB23_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB23_13:                              # %if.end16
                                        #   in Loop: Header=BB23_8 Depth=1
	movl	$0, -8(%rbp)
.LBB23_14:                              # %for.cond17
                                        #   Parent Loop BB23_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB23_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB23_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB23_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB23_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB23_17:                              # %if.end28
                                        #   in Loop: Header=BB23_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB23_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB23_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB23_19:                              # %if.end39
                                        #   in Loop: Header=BB23_14 Depth=2
	jmp	.LBB23_20
.LBB23_20:                              # %for.inc
                                        #   in Loop: Header=BB23_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_14
.LBB23_21:                              # %for.end
                                        #   in Loop: Header=BB23_8 Depth=1
	jmp	.LBB23_22
.LBB23_22:                              # %for.inc40
                                        #   in Loop: Header=BB23_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_8
.LBB23_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB23_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_26 Depth 2
                                        #       Child Loop BB23_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB23_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB23_24 Depth=1
	movl	$0, -8(%rbp)
.LBB23_26:                              # %for.cond47
                                        #   Parent Loop BB23_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB23_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB23_26 Depth=2
	movl	$0, -12(%rbp)
.LBB23_28:                              # %for.cond51
                                        #   Parent Loop BB23_24 Depth=1
                                        #     Parent Loop BB23_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB23_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB23_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB23_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_28
.LBB23_31:                              # %for.end63
                                        #   in Loop: Header=BB23_26 Depth=2
	jmp	.LBB23_32
.LBB23_32:                              # %for.inc64
                                        #   in Loop: Header=BB23_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_26
.LBB23_33:                              # %for.end66
                                        #   in Loop: Header=BB23_24 Depth=1
	jmp	.LBB23_34
.LBB23_34:                              # %for.inc67
                                        #   in Loop: Header=BB23_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_24
.LBB23_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB23_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB23_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB23_36 Depth=1
	vmovsd	.LCPI23_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI23_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI23_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB23_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_36
.LBB23_39:                              # %for.end98
	cmpl	$794717460, -20(%rbp)   # imm = 0x2F5E6D14
	jne	.LBB23_41
.LBB23_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_40
.Lfunc_end23:
	.size	create_context_memory.16, .Lfunc_end23-create_context_memory.16
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.17       # -- Begin function store_contexts.17
	.p2align	4, 0x90
	.type	store_contexts.17,@function
store_contexts.17:                      # @store_contexts.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1913825823, -16(%rbp)  # imm = 0x7212AA1F
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -8(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB24_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB24_3
.LBB24_2:                               # %if.else
	jmp	.LBB24_3
.LBB24_3:                               # %if.end
	cmpl	$1913825823, -16(%rbp)  # imm = 0x7212AA1F
	jne	.LBB24_5
.LBB24_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_4
.Lfunc_end24:
	.size	store_contexts.17, .Lfunc_end24-store_contexts.17
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.18 # -- Begin function update_field_frame_contexts.18
	.p2align	4, 0x90
	.type	update_field_frame_contexts.18,@function
update_field_frame_contexts.18:         # @update_field_frame_contexts.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1360917991, -12(%rbp)  # imm = 0x511DF5E7
	movl	%edi, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB25_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB25_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB25_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB25_2 Depth=1
	movl	$0, -4(%rbp)
.LBB25_4:                               # %for.cond1
                                        #   Parent Loop BB25_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB25_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB25_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB25_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_4
.LBB25_7:                               # %for.end
                                        #   in Loop: Header=BB25_2 Depth=1
	jmp	.LBB25_8
.LBB25_8:                               # %for.inc23
                                        #   in Loop: Header=BB25_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_2
.LBB25_9:                               # %for.end25
	jmp	.LBB25_19
.LBB25_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB25_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB25_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB25_11 Depth=1
	movl	$0, -4(%rbp)
.LBB25_13:                              # %for.cond29
                                        #   Parent Loop BB25_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB25_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB25_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_13
.LBB25_16:                              # %for.end56
                                        #   in Loop: Header=BB25_11 Depth=1
	jmp	.LBB25_17
.LBB25_17:                              # %for.inc57
                                        #   in Loop: Header=BB25_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_11
.LBB25_18:                              # %for.end59
	jmp	.LBB25_19
.LBB25_19:                              # %if.end
	cmpl	$1360917991, -12(%rbp)  # imm = 0x511DF5E7
	jne	.LBB25_21
.LBB25_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_20
.Lfunc_end25:
	.size	update_field_frame_contexts.18, .Lfunc_end25-update_field_frame_contexts.18
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.19
.LCPI26_0:
	.quad	4607182418800017408     # double 1
.LCPI26_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI26_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI26_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.19
	.p2align	4, 0x90
	.type	XRate.19,@function
XRate.19:                               # @XRate.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$281162798, -36(%rbp)   # imm = 0x10C2342E
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB26_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB26_3
.LBB26_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB26_3:                               # %cond.end
	vmovsd	.LCPI26_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI26_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI26_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI26_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB26_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI26_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB26_6
.LBB26_5:                               # %cond.false6
	vmovsd	.LCPI26_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI26_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI26_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB26_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB26_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB26_9
.LBB26_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB26_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB26_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB26_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB26_13
.LBB26_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB26_13:                              # %cond.end26
	jmp	.LBB26_15
.LBB26_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB26_15
.LBB26_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB26_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB26_18
.LBB26_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB26_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$281162798, -36(%rbp)   # imm = 0x10C2342E
	jne	.LBB26_20
.LBB26_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB26_19
.Lfunc_end26:
	.size	XRate.19, .Lfunc_end26-XRate.19
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.20
.LCPI27_0:
	.quad	4611686018427387904     # double 2
.LCPI27_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.20
	.p2align	4, 0x90
	.type	create_context_memory.20,@function
create_context_memory.20:               # @create_context_memory.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$742994147, -20(%rbp)   # imm = 0x2C4930E3
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB27_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB27_3
.LBB27_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB27_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB27_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB27_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB27_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB27_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB27_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB27_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB27_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB27_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB27_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB27_11:                              # %if.end10
                                        #   in Loop: Header=BB27_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB27_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB27_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB27_13:                              # %if.end16
                                        #   in Loop: Header=BB27_8 Depth=1
	movl	$0, -8(%rbp)
.LBB27_14:                              # %for.cond17
                                        #   Parent Loop BB27_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB27_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB27_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB27_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB27_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB27_17:                              # %if.end28
                                        #   in Loop: Header=BB27_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB27_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB27_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB27_19:                              # %if.end39
                                        #   in Loop: Header=BB27_14 Depth=2
	jmp	.LBB27_20
.LBB27_20:                              # %for.inc
                                        #   in Loop: Header=BB27_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_14
.LBB27_21:                              # %for.end
                                        #   in Loop: Header=BB27_8 Depth=1
	jmp	.LBB27_22
.LBB27_22:                              # %for.inc40
                                        #   in Loop: Header=BB27_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_8
.LBB27_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB27_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_26 Depth 2
                                        #       Child Loop BB27_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB27_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB27_24 Depth=1
	movl	$0, -8(%rbp)
.LBB27_26:                              # %for.cond47
                                        #   Parent Loop BB27_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB27_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB27_26 Depth=2
	movl	$0, -12(%rbp)
.LBB27_28:                              # %for.cond51
                                        #   Parent Loop BB27_24 Depth=1
                                        #     Parent Loop BB27_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB27_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB27_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB27_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_28
.LBB27_31:                              # %for.end63
                                        #   in Loop: Header=BB27_26 Depth=2
	jmp	.LBB27_32
.LBB27_32:                              # %for.inc64
                                        #   in Loop: Header=BB27_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_26
.LBB27_33:                              # %for.end66
                                        #   in Loop: Header=BB27_24 Depth=1
	jmp	.LBB27_34
.LBB27_34:                              # %for.inc67
                                        #   in Loop: Header=BB27_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_24
.LBB27_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB27_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB27_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB27_36 Depth=1
	vmovsd	.LCPI27_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI27_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI27_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB27_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_36
.LBB27_39:                              # %for.end98
	cmpl	$742994147, -20(%rbp)   # imm = 0x2C4930E3
	jne	.LBB27_41
.LBB27_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_40
.Lfunc_end27:
	.size	create_context_memory.20, .Lfunc_end27-create_context_memory.20
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.21
.LCPI28_0:
	.quad	4607182418800017408     # double 1
.LCPI28_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI28_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI28_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.21
	.p2align	4, 0x90
	.type	XRate.21,@function
XRate.21:                               # @XRate.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1374509521, -36(%rbp)  # imm = 0x51ED59D1
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB28_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB28_3
.LBB28_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB28_3:                               # %cond.end
	vmovsd	.LCPI28_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI28_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI28_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI28_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB28_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI28_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB28_6
.LBB28_5:                               # %cond.false6
	vmovsd	.LCPI28_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI28_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI28_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB28_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB28_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB28_9
.LBB28_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB28_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB28_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB28_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB28_13
.LBB28_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB28_13:                              # %cond.end26
	jmp	.LBB28_15
.LBB28_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB28_15
.LBB28_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB28_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB28_18
.LBB28_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB28_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1374509521, -36(%rbp)  # imm = 0x51ED59D1
	jne	.LBB28_20
.LBB28_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB28_19
.Lfunc_end28:
	.size	XRate.21, .Lfunc_end28-XRate.21
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.22    # -- Begin function SetCtxModelNumber.22
	.p2align	4, 0x90
	.type	SetCtxModelNumber.22,@function
SetCtxModelNumber.22:                   # @SetCtxModelNumber.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2085963445, -16(%rbp)  # imm = 0x7C5546B5
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB29_11
.LBB29_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB29_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB29_11
.LBB29_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB29_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB29_11
.LBB29_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB29_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB29_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB29_10
.LBB29_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB29_10:                              # %if.end38
	jmp	.LBB29_11
.LBB29_11:                              # %if.end39
	cmpl	$2085963445, -16(%rbp)  # imm = 0x7C5546B5
	jne	.LBB29_13
.LBB29_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_12
.Lfunc_end29:
	.size	SetCtxModelNumber.22, .Lfunc_end29-SetCtxModelNumber.22
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.23
.LCPI30_0:
	.quad	4611686018427387904     # double 2
.LCPI30_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.23
	.p2align	4, 0x90
	.type	create_context_memory.23,@function
create_context_memory.23:               # @create_context_memory.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$125074691, -20(%rbp)   # imm = 0x7747D03
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB30_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB30_3
.LBB30_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB30_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB30_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB30_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB30_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB30_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB30_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB30_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB30_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB30_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB30_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB30_11:                              # %if.end10
                                        #   in Loop: Header=BB30_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB30_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB30_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB30_13:                              # %if.end16
                                        #   in Loop: Header=BB30_8 Depth=1
	movl	$0, -8(%rbp)
.LBB30_14:                              # %for.cond17
                                        #   Parent Loop BB30_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB30_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB30_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB30_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB30_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB30_17:                              # %if.end28
                                        #   in Loop: Header=BB30_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB30_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB30_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB30_19:                              # %if.end39
                                        #   in Loop: Header=BB30_14 Depth=2
	jmp	.LBB30_20
.LBB30_20:                              # %for.inc
                                        #   in Loop: Header=BB30_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_14
.LBB30_21:                              # %for.end
                                        #   in Loop: Header=BB30_8 Depth=1
	jmp	.LBB30_22
.LBB30_22:                              # %for.inc40
                                        #   in Loop: Header=BB30_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_8
.LBB30_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB30_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_26 Depth 2
                                        #       Child Loop BB30_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB30_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB30_24 Depth=1
	movl	$0, -8(%rbp)
.LBB30_26:                              # %for.cond47
                                        #   Parent Loop BB30_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB30_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB30_26 Depth=2
	movl	$0, -12(%rbp)
.LBB30_28:                              # %for.cond51
                                        #   Parent Loop BB30_24 Depth=1
                                        #     Parent Loop BB30_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB30_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB30_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB30_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_28
.LBB30_31:                              # %for.end63
                                        #   in Loop: Header=BB30_26 Depth=2
	jmp	.LBB30_32
.LBB30_32:                              # %for.inc64
                                        #   in Loop: Header=BB30_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_26
.LBB30_33:                              # %for.end66
                                        #   in Loop: Header=BB30_24 Depth=1
	jmp	.LBB30_34
.LBB30_34:                              # %for.inc67
                                        #   in Loop: Header=BB30_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_24
.LBB30_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB30_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB30_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB30_36 Depth=1
	vmovsd	.LCPI30_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI30_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI30_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB30_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_36
.LBB30_39:                              # %for.end98
	cmpl	$125074691, -20(%rbp)   # imm = 0x7747D03
	jne	.LBB30_41
.LBB30_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_40
.Lfunc_end30:
	.size	create_context_memory.23, .Lfunc_end30-create_context_memory.23
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.24        # -- Begin function init_contexts.24
	.p2align	4, 0x90
	.type	init_contexts.24,@function
init_contexts.24:                       # @init_contexts.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$882721494, -28(%rbp)   # imm = 0x349D42D6
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB31_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB31_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -4(%rbp)
.LBB31_3:                               # %for.cond2
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB31_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB31_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB31_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB31_7
.LBB31_6:                               # %if.else
                                        #   in Loop: Header=BB31_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB31_7:                               # %if.end
                                        #   in Loop: Header=BB31_3 Depth=2
	jmp	.LBB31_8
.LBB31_8:                               # %for.inc
                                        #   in Loop: Header=BB31_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_3
.LBB31_9:                               # %for.end
                                        #   in Loop: Header=BB31_1 Depth=1
	jmp	.LBB31_10
.LBB31_10:                              # %for.inc28
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_1
.LBB31_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB31_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB31_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB31_12 Depth=1
	movl	$0, -4(%rbp)
.LBB31_14:                              # %for.cond34
                                        #   Parent Loop BB31_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB31_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB31_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB31_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB31_18
.LBB31_17:                              # %if.else52
                                        #   in Loop: Header=BB31_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB31_18:                              # %if.end66
                                        #   in Loop: Header=BB31_14 Depth=2
	jmp	.LBB31_19
.LBB31_19:                              # %for.inc67
                                        #   in Loop: Header=BB31_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_14
.LBB31_20:                              # %for.end69
                                        #   in Loop: Header=BB31_12 Depth=1
	jmp	.LBB31_21
.LBB31_21:                              # %for.inc70
                                        #   in Loop: Header=BB31_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_12
.LBB31_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB31_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB31_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB31_23 Depth=1
	movl	$0, -4(%rbp)
.LBB31_25:                              # %for.cond76
                                        #   Parent Loop BB31_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB31_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB31_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB31_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB31_29
.LBB31_28:                              # %if.else94
                                        #   in Loop: Header=BB31_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB31_29:                              # %if.end108
                                        #   in Loop: Header=BB31_25 Depth=2
	jmp	.LBB31_30
.LBB31_30:                              # %for.inc109
                                        #   in Loop: Header=BB31_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_25
.LBB31_31:                              # %for.end111
                                        #   in Loop: Header=BB31_23 Depth=1
	jmp	.LBB31_32
.LBB31_32:                              # %for.inc112
                                        #   in Loop: Header=BB31_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_23
.LBB31_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB31_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB31_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB31_34 Depth=1
	movl	$0, -4(%rbp)
.LBB31_36:                              # %for.cond118
                                        #   Parent Loop BB31_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB31_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB31_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB31_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB31_40
.LBB31_39:                              # %if.else136
                                        #   in Loop: Header=BB31_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB31_40:                              # %if.end150
                                        #   in Loop: Header=BB31_36 Depth=2
	jmp	.LBB31_41
.LBB31_41:                              # %for.inc151
                                        #   in Loop: Header=BB31_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_36
.LBB31_42:                              # %for.end153
                                        #   in Loop: Header=BB31_34 Depth=1
	jmp	.LBB31_43
.LBB31_43:                              # %for.inc154
                                        #   in Loop: Header=BB31_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_34
.LBB31_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB31_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB31_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB31_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB31_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB31_49
.LBB31_48:                              # %if.else172
                                        #   in Loop: Header=BB31_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB31_49:                              # %if.end183
                                        #   in Loop: Header=BB31_45 Depth=1
	jmp	.LBB31_50
.LBB31_50:                              # %for.inc184
                                        #   in Loop: Header=BB31_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_45
.LBB31_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB31_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB31_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB31_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB31_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB31_56
.LBB31_55:                              # %if.else202
                                        #   in Loop: Header=BB31_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB31_56:                              # %if.end213
                                        #   in Loop: Header=BB31_52 Depth=1
	jmp	.LBB31_57
.LBB31_57:                              # %for.inc214
                                        #   in Loop: Header=BB31_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_52
.LBB31_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB31_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB31_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB31_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB31_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB31_63
.LBB31_62:                              # %if.else232
                                        #   in Loop: Header=BB31_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB31_63:                              # %if.end243
                                        #   in Loop: Header=BB31_59 Depth=1
	jmp	.LBB31_64
.LBB31_64:                              # %for.inc244
                                        #   in Loop: Header=BB31_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_59
.LBB31_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB31_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB31_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB31_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB31_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB31_70
.LBB31_69:                              # %if.else262
                                        #   in Loop: Header=BB31_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB31_70:                              # %if.end273
                                        #   in Loop: Header=BB31_66 Depth=1
	jmp	.LBB31_71
.LBB31_71:                              # %for.inc274
                                        #   in Loop: Header=BB31_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_66
.LBB31_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB31_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB31_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB31_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB31_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB31_77
.LBB31_76:                              # %if.else292
                                        #   in Loop: Header=BB31_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB31_77:                              # %if.end303
                                        #   in Loop: Header=BB31_73 Depth=1
	jmp	.LBB31_78
.LBB31_78:                              # %for.inc304
                                        #   in Loop: Header=BB31_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_73
.LBB31_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB31_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB31_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB31_80 Depth=1
	movl	$0, -4(%rbp)
.LBB31_82:                              # %for.cond310
                                        #   Parent Loop BB31_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB31_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB31_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB31_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB31_86
.LBB31_85:                              # %if.else328
                                        #   in Loop: Header=BB31_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB31_86:                              # %if.end342
                                        #   in Loop: Header=BB31_82 Depth=2
	jmp	.LBB31_87
.LBB31_87:                              # %for.inc343
                                        #   in Loop: Header=BB31_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_82
.LBB31_88:                              # %for.end345
                                        #   in Loop: Header=BB31_80 Depth=1
	jmp	.LBB31_89
.LBB31_89:                              # %for.inc346
                                        #   in Loop: Header=BB31_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_80
.LBB31_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB31_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB31_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB31_91 Depth=1
	movl	$0, -4(%rbp)
.LBB31_93:                              # %for.cond352
                                        #   Parent Loop BB31_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB31_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB31_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB31_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB31_97
.LBB31_96:                              # %if.else370
                                        #   in Loop: Header=BB31_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB31_97:                              # %if.end384
                                        #   in Loop: Header=BB31_93 Depth=2
	jmp	.LBB31_98
.LBB31_98:                              # %for.inc385
                                        #   in Loop: Header=BB31_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_93
.LBB31_99:                              # %for.end387
                                        #   in Loop: Header=BB31_91 Depth=1
	jmp	.LBB31_100
.LBB31_100:                             # %for.inc388
                                        #   in Loop: Header=BB31_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_91
.LBB31_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB31_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB31_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB31_102 Depth=1
	movl	$0, -4(%rbp)
.LBB31_104:                             # %for.cond394
                                        #   Parent Loop BB31_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB31_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB31_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB31_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB31_108
.LBB31_107:                             # %if.else412
                                        #   in Loop: Header=BB31_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB31_108:                             # %if.end426
                                        #   in Loop: Header=BB31_104 Depth=2
	jmp	.LBB31_109
.LBB31_109:                             # %for.inc427
                                        #   in Loop: Header=BB31_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_104
.LBB31_110:                             # %for.end429
                                        #   in Loop: Header=BB31_102 Depth=1
	jmp	.LBB31_111
.LBB31_111:                             # %for.inc430
                                        #   in Loop: Header=BB31_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_102
.LBB31_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB31_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB31_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB31_113 Depth=1
	movl	$0, -4(%rbp)
.LBB31_115:                             # %for.cond436
                                        #   Parent Loop BB31_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB31_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB31_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB31_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB31_119
.LBB31_118:                             # %if.else454
                                        #   in Loop: Header=BB31_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB31_119:                             # %if.end468
                                        #   in Loop: Header=BB31_115 Depth=2
	jmp	.LBB31_120
.LBB31_120:                             # %for.inc469
                                        #   in Loop: Header=BB31_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_115
.LBB31_121:                             # %for.end471
                                        #   in Loop: Header=BB31_113 Depth=1
	jmp	.LBB31_122
.LBB31_122:                             # %for.inc472
                                        #   in Loop: Header=BB31_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_113
.LBB31_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB31_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB31_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB31_124 Depth=1
	movl	$0, -4(%rbp)
.LBB31_126:                             # %for.cond478
                                        #   Parent Loop BB31_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB31_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB31_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB31_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB31_130
.LBB31_129:                             # %if.else496
                                        #   in Loop: Header=BB31_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB31_130:                             # %if.end510
                                        #   in Loop: Header=BB31_126 Depth=2
	jmp	.LBB31_131
.LBB31_131:                             # %for.inc511
                                        #   in Loop: Header=BB31_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_126
.LBB31_132:                             # %for.end513
                                        #   in Loop: Header=BB31_124 Depth=1
	jmp	.LBB31_133
.LBB31_133:                             # %for.inc514
                                        #   in Loop: Header=BB31_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_124
.LBB31_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB31_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB31_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	$0, -4(%rbp)
.LBB31_137:                             # %for.cond520
                                        #   Parent Loop BB31_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB31_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB31_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB31_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB31_141
.LBB31_140:                             # %if.else538
                                        #   in Loop: Header=BB31_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB31_141:                             # %if.end552
                                        #   in Loop: Header=BB31_137 Depth=2
	jmp	.LBB31_142
.LBB31_142:                             # %for.inc553
                                        #   in Loop: Header=BB31_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_137
.LBB31_143:                             # %for.end555
                                        #   in Loop: Header=BB31_135 Depth=1
	jmp	.LBB31_144
.LBB31_144:                             # %for.inc556
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_135
.LBB31_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB31_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB31_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB31_146 Depth=1
	movl	$0, -4(%rbp)
.LBB31_148:                             # %for.cond562
                                        #   Parent Loop BB31_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB31_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB31_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB31_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB31_152
.LBB31_151:                             # %if.else580
                                        #   in Loop: Header=BB31_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB31_152:                             # %if.end594
                                        #   in Loop: Header=BB31_148 Depth=2
	jmp	.LBB31_153
.LBB31_153:                             # %for.inc595
                                        #   in Loop: Header=BB31_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_148
.LBB31_154:                             # %for.end597
                                        #   in Loop: Header=BB31_146 Depth=1
	jmp	.LBB31_155
.LBB31_155:                             # %for.inc598
                                        #   in Loop: Header=BB31_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_146
.LBB31_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB31_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB31_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB31_157 Depth=1
	movl	$0, -4(%rbp)
.LBB31_159:                             # %for.cond604
                                        #   Parent Loop BB31_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB31_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB31_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB31_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB31_163
.LBB31_162:                             # %if.else622
                                        #   in Loop: Header=BB31_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB31_163:                             # %if.end636
                                        #   in Loop: Header=BB31_159 Depth=2
	jmp	.LBB31_164
.LBB31_164:                             # %for.inc637
                                        #   in Loop: Header=BB31_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_159
.LBB31_165:                             # %for.end639
                                        #   in Loop: Header=BB31_157 Depth=1
	jmp	.LBB31_166
.LBB31_166:                             # %for.inc640
                                        #   in Loop: Header=BB31_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_157
.LBB31_167:                             # %for.end642
	cmpl	$882721494, -28(%rbp)   # imm = 0x349D42D6
	jne	.LBB31_169
.LBB31_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_168
.Lfunc_end31:
	.size	init_contexts.24, .Lfunc_end31-init_contexts.24
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.25
.LCPI32_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.25
	.p2align	4, 0x90
	.type	GetCtxModelNumber.25,@function
GetCtxModelNumber.25:                   # @GetCtxModelNumber.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1979741483, -48(%rbp)  # imm = 0x7600752B
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB32_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_3 Depth 2
                                        #       Child Loop BB32_5 Depth 3
                                        #     Child Loop BB32_14 Depth 2
                                        #       Child Loop BB32_16 Depth 3
                                        #     Child Loop BB32_25 Depth 2
                                        #       Child Loop BB32_27 Depth 3
                                        #     Child Loop BB32_36 Depth 2
                                        #       Child Loop BB32_38 Depth 3
                                        #     Child Loop BB32_47 Depth 2
                                        #     Child Loop BB32_54 Depth 2
                                        #     Child Loop BB32_61 Depth 2
                                        #     Child Loop BB32_68 Depth 2
                                        #     Child Loop BB32_75 Depth 2
                                        #     Child Loop BB32_82 Depth 2
                                        #       Child Loop BB32_84 Depth 3
                                        #     Child Loop BB32_93 Depth 2
                                        #       Child Loop BB32_95 Depth 3
                                        #     Child Loop BB32_104 Depth 2
                                        #       Child Loop BB32_106 Depth 3
                                        #     Child Loop BB32_115 Depth 2
                                        #       Child Loop BB32_117 Depth 3
                                        #     Child Loop BB32_126 Depth 2
                                        #       Child Loop BB32_128 Depth 3
                                        #     Child Loop BB32_137 Depth 2
                                        #       Child Loop BB32_139 Depth 3
                                        #     Child Loop BB32_148 Depth 2
                                        #       Child Loop BB32_150 Depth 3
                                        #     Child Loop BB32_159 Depth 2
                                        #       Child Loop BB32_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB32_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB32_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB32_3:                               # %for.cond2
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB32_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	$0, -4(%rbp)
.LBB32_5:                               # %for.cond5
                                        #   Parent Loop BB32_1 Depth=1
                                        #     Parent Loop BB32_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB32_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB32_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB32_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB32_9
.LBB32_8:                               # %if.else
                                        #   in Loop: Header=BB32_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB32_9:                               # %if.end
                                        #   in Loop: Header=BB32_5 Depth=3
	jmp	.LBB32_10
.LBB32_10:                              # %for.inc
                                        #   in Loop: Header=BB32_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_5
.LBB32_11:                              # %for.end
                                        #   in Loop: Header=BB32_3 Depth=2
	jmp	.LBB32_12
.LBB32_12:                              # %for.inc33
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_3
.LBB32_13:                              # %for.end35
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -8(%rbp)
.LBB32_14:                              # %for.cond36
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB32_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB32_14 Depth=2
	movl	$0, -4(%rbp)
.LBB32_16:                              # %for.cond39
                                        #   Parent Loop BB32_1 Depth=1
                                        #     Parent Loop BB32_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB32_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB32_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB32_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB32_20
.LBB32_19:                              # %if.else58
                                        #   in Loop: Header=BB32_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB32_20:                              # %if.end73
                                        #   in Loop: Header=BB32_16 Depth=3
	jmp	.LBB32_21
.LBB32_21:                              # %for.inc74
                                        #   in Loop: Header=BB32_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_16
.LBB32_22:                              # %for.end76
                                        #   in Loop: Header=BB32_14 Depth=2
	jmp	.LBB32_23
.LBB32_23:                              # %for.inc77
                                        #   in Loop: Header=BB32_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_14
.LBB32_24:                              # %for.end79
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -8(%rbp)
.LBB32_25:                              # %for.cond80
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB32_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB32_25 Depth=2
	movl	$0, -4(%rbp)
.LBB32_27:                              # %for.cond83
                                        #   Parent Loop BB32_1 Depth=1
                                        #     Parent Loop BB32_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB32_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB32_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB32_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB32_31
.LBB32_30:                              # %if.else102
                                        #   in Loop: Header=BB32_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB32_31:                              # %if.end117
                                        #   in Loop: Header=BB32_27 Depth=3
	jmp	.LBB32_32
.LBB32_32:                              # %for.inc118
                                        #   in Loop: Header=BB32_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_27
.LBB32_33:                              # %for.end120
                                        #   in Loop: Header=BB32_25 Depth=2
	jmp	.LBB32_34
.LBB32_34:                              # %for.inc121
                                        #   in Loop: Header=BB32_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_25
.LBB32_35:                              # %for.end123
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -8(%rbp)
.LBB32_36:                              # %for.cond124
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB32_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB32_36 Depth=2
	movl	$0, -4(%rbp)
.LBB32_38:                              # %for.cond127
                                        #   Parent Loop BB32_1 Depth=1
                                        #     Parent Loop BB32_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB32_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB32_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB32_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB32_42
.LBB32_41:                              # %if.else146
                                        #   in Loop: Header=BB32_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB32_42:                              # %if.end161
                                        #   in Loop: Header=BB32_38 Depth=3
	jmp	.LBB32_43
.LBB32_43:                              # %for.inc162
                                        #   in Loop: Header=BB32_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_38
.LBB32_44:                              # %for.end164
                                        #   in Loop: Header=BB32_36 Depth=2
	jmp	.LBB32_45
.LBB32_45:                              # %for.inc165
                                        #   in Loop: Header=BB32_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_36
.LBB32_46:                              # %for.end167
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -4(%rbp)
.LBB32_47:                              # %for.cond168
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB32_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB32_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB32_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB32_51
.LBB32_50:                              # %if.else184
                                        #   in Loop: Header=BB32_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB32_51:                              # %if.end196
                                        #   in Loop: Header=BB32_47 Depth=2
	jmp	.LBB32_52
.LBB32_52:                              # %for.inc197
                                        #   in Loop: Header=BB32_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_47
.LBB32_53:                              # %for.end199
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -4(%rbp)
.LBB32_54:                              # %for.cond200
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB32_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB32_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB32_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB32_58
.LBB32_57:                              # %if.else216
                                        #   in Loop: Header=BB32_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB32_58:                              # %if.end228
                                        #   in Loop: Header=BB32_54 Depth=2
	jmp	.LBB32_59
.LBB32_59:                              # %for.inc229
                                        #   in Loop: Header=BB32_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_54
.LBB32_60:                              # %for.end231
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -4(%rbp)
.LBB32_61:                              # %for.cond232
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB32_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB32_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB32_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB32_65
.LBB32_64:                              # %if.else248
                                        #   in Loop: Header=BB32_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB32_65:                              # %if.end260
                                        #   in Loop: Header=BB32_61 Depth=2
	jmp	.LBB32_66
.LBB32_66:                              # %for.inc261
                                        #   in Loop: Header=BB32_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_61
.LBB32_67:                              # %for.end263
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -4(%rbp)
.LBB32_68:                              # %for.cond264
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB32_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB32_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB32_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB32_72
.LBB32_71:                              # %if.else280
                                        #   in Loop: Header=BB32_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB32_72:                              # %if.end292
                                        #   in Loop: Header=BB32_68 Depth=2
	jmp	.LBB32_73
.LBB32_73:                              # %for.inc293
                                        #   in Loop: Header=BB32_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_68
.LBB32_74:                              # %for.end295
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -4(%rbp)
.LBB32_75:                              # %for.cond296
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB32_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB32_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB32_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB32_79
.LBB32_78:                              # %if.else312
                                        #   in Loop: Header=BB32_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB32_79:                              # %if.end324
                                        #   in Loop: Header=BB32_75 Depth=2
	jmp	.LBB32_80
.LBB32_80:                              # %for.inc325
                                        #   in Loop: Header=BB32_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_75
.LBB32_81:                              # %for.end327
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -8(%rbp)
.LBB32_82:                              # %for.cond328
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB32_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB32_82 Depth=2
	movl	$0, -4(%rbp)
.LBB32_84:                              # %for.cond331
                                        #   Parent Loop BB32_1 Depth=1
                                        #     Parent Loop BB32_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB32_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB32_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB32_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB32_88
.LBB32_87:                              # %if.else350
                                        #   in Loop: Header=BB32_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB32_88:                              # %if.end365
                                        #   in Loop: Header=BB32_84 Depth=3
	jmp	.LBB32_89
.LBB32_89:                              # %for.inc366
                                        #   in Loop: Header=BB32_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_84
.LBB32_90:                              # %for.end368
                                        #   in Loop: Header=BB32_82 Depth=2
	jmp	.LBB32_91
.LBB32_91:                              # %for.inc369
                                        #   in Loop: Header=BB32_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_82
.LBB32_92:                              # %for.end371
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -8(%rbp)
.LBB32_93:                              # %for.cond372
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB32_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB32_93 Depth=2
	movl	$0, -4(%rbp)
.LBB32_95:                              # %for.cond375
                                        #   Parent Loop BB32_1 Depth=1
                                        #     Parent Loop BB32_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB32_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB32_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB32_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB32_99
.LBB32_98:                              # %if.else394
                                        #   in Loop: Header=BB32_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB32_99:                              # %if.end409
                                        #   in Loop: Header=BB32_95 Depth=3
	jmp	.LBB32_100
.LBB32_100:                             # %for.inc410
                                        #   in Loop: Header=BB32_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_95
.LBB32_101:                             # %for.end412
                                        #   in Loop: Header=BB32_93 Depth=2
	jmp	.LBB32_102
.LBB32_102:                             # %for.inc413
                                        #   in Loop: Header=BB32_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_93
.LBB32_103:                             # %for.end415
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -8(%rbp)
.LBB32_104:                             # %for.cond416
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB32_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB32_104 Depth=2
	movl	$0, -4(%rbp)
.LBB32_106:                             # %for.cond419
                                        #   Parent Loop BB32_1 Depth=1
                                        #     Parent Loop BB32_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB32_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB32_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB32_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB32_110
.LBB32_109:                             # %if.else438
                                        #   in Loop: Header=BB32_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB32_110:                             # %if.end453
                                        #   in Loop: Header=BB32_106 Depth=3
	jmp	.LBB32_111
.LBB32_111:                             # %for.inc454
                                        #   in Loop: Header=BB32_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_106
.LBB32_112:                             # %for.end456
                                        #   in Loop: Header=BB32_104 Depth=2
	jmp	.LBB32_113
.LBB32_113:                             # %for.inc457
                                        #   in Loop: Header=BB32_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_104
.LBB32_114:                             # %for.end459
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -8(%rbp)
.LBB32_115:                             # %for.cond460
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB32_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB32_115 Depth=2
	movl	$0, -4(%rbp)
.LBB32_117:                             # %for.cond463
                                        #   Parent Loop BB32_1 Depth=1
                                        #     Parent Loop BB32_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB32_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB32_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB32_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB32_121
.LBB32_120:                             # %if.else482
                                        #   in Loop: Header=BB32_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB32_121:                             # %if.end497
                                        #   in Loop: Header=BB32_117 Depth=3
	jmp	.LBB32_122
.LBB32_122:                             # %for.inc498
                                        #   in Loop: Header=BB32_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_117
.LBB32_123:                             # %for.end500
                                        #   in Loop: Header=BB32_115 Depth=2
	jmp	.LBB32_124
.LBB32_124:                             # %for.inc501
                                        #   in Loop: Header=BB32_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_115
.LBB32_125:                             # %for.end503
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -8(%rbp)
.LBB32_126:                             # %for.cond504
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB32_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB32_126 Depth=2
	movl	$0, -4(%rbp)
.LBB32_128:                             # %for.cond507
                                        #   Parent Loop BB32_1 Depth=1
                                        #     Parent Loop BB32_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB32_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB32_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB32_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB32_132
.LBB32_131:                             # %if.else526
                                        #   in Loop: Header=BB32_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB32_132:                             # %if.end541
                                        #   in Loop: Header=BB32_128 Depth=3
	jmp	.LBB32_133
.LBB32_133:                             # %for.inc542
                                        #   in Loop: Header=BB32_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_128
.LBB32_134:                             # %for.end544
                                        #   in Loop: Header=BB32_126 Depth=2
	jmp	.LBB32_135
.LBB32_135:                             # %for.inc545
                                        #   in Loop: Header=BB32_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_126
.LBB32_136:                             # %for.end547
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -8(%rbp)
.LBB32_137:                             # %for.cond548
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB32_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB32_137 Depth=2
	movl	$0, -4(%rbp)
.LBB32_139:                             # %for.cond551
                                        #   Parent Loop BB32_1 Depth=1
                                        #     Parent Loop BB32_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB32_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB32_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB32_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB32_143
.LBB32_142:                             # %if.else570
                                        #   in Loop: Header=BB32_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB32_143:                             # %if.end585
                                        #   in Loop: Header=BB32_139 Depth=3
	jmp	.LBB32_144
.LBB32_144:                             # %for.inc586
                                        #   in Loop: Header=BB32_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_139
.LBB32_145:                             # %for.end588
                                        #   in Loop: Header=BB32_137 Depth=2
	jmp	.LBB32_146
.LBB32_146:                             # %for.inc589
                                        #   in Loop: Header=BB32_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_137
.LBB32_147:                             # %for.end591
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -8(%rbp)
.LBB32_148:                             # %for.cond592
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB32_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB32_148 Depth=2
	movl	$0, -4(%rbp)
.LBB32_150:                             # %for.cond595
                                        #   Parent Loop BB32_1 Depth=1
                                        #     Parent Loop BB32_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB32_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB32_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB32_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB32_154
.LBB32_153:                             # %if.else614
                                        #   in Loop: Header=BB32_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB32_154:                             # %if.end629
                                        #   in Loop: Header=BB32_150 Depth=3
	jmp	.LBB32_155
.LBB32_155:                             # %for.inc630
                                        #   in Loop: Header=BB32_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_150
.LBB32_156:                             # %for.end632
                                        #   in Loop: Header=BB32_148 Depth=2
	jmp	.LBB32_157
.LBB32_157:                             # %for.inc633
                                        #   in Loop: Header=BB32_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_148
.LBB32_158:                             # %for.end635
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -8(%rbp)
.LBB32_159:                             # %for.cond636
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB32_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB32_159 Depth=2
	movl	$0, -4(%rbp)
.LBB32_161:                             # %for.cond639
                                        #   Parent Loop BB32_1 Depth=1
                                        #     Parent Loop BB32_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB32_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB32_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB32_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB32_165
.LBB32_164:                             # %if.else658
                                        #   in Loop: Header=BB32_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB32_165:                             # %if.end673
                                        #   in Loop: Header=BB32_161 Depth=3
	jmp	.LBB32_166
.LBB32_166:                             # %for.inc674
                                        #   in Loop: Header=BB32_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_161
.LBB32_167:                             # %for.end676
                                        #   in Loop: Header=BB32_159 Depth=2
	jmp	.LBB32_168
.LBB32_168:                             # %for.inc677
                                        #   in Loop: Header=BB32_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_159
.LBB32_169:                             # %for.end679
                                        #   in Loop: Header=BB32_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB32_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB32_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB32_171:                             # %if.end682
                                        #   in Loop: Header=BB32_1 Depth=1
	jmp	.LBB32_172
.LBB32_172:                             # %for.inc683
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_1
.LBB32_173:                             # %for.end685
	cmpl	$1979741483, -48(%rbp)  # imm = 0x7600752B
	jne	.LBB32_175
.LBB32_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_174
.Lfunc_end32:
	.size	GetCtxModelNumber.25, .Lfunc_end32-GetCtxModelNumber.25
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.26
.LCPI33_0:
	.quad	4611686018427387904     # double 2
.LCPI33_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.26
	.p2align	4, 0x90
	.type	create_context_memory.26,@function
create_context_memory.26:               # @create_context_memory.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1593427999, -20(%rbp)  # imm = 0x5EF9C81F
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB33_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB33_3
.LBB33_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB33_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB33_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB33_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB33_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB33_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB33_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB33_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB33_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB33_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB33_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB33_11:                              # %if.end10
                                        #   in Loop: Header=BB33_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB33_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB33_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB33_13:                              # %if.end16
                                        #   in Loop: Header=BB33_8 Depth=1
	movl	$0, -8(%rbp)
.LBB33_14:                              # %for.cond17
                                        #   Parent Loop BB33_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB33_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB33_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB33_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB33_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB33_17:                              # %if.end28
                                        #   in Loop: Header=BB33_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB33_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB33_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB33_19:                              # %if.end39
                                        #   in Loop: Header=BB33_14 Depth=2
	jmp	.LBB33_20
.LBB33_20:                              # %for.inc
                                        #   in Loop: Header=BB33_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_14
.LBB33_21:                              # %for.end
                                        #   in Loop: Header=BB33_8 Depth=1
	jmp	.LBB33_22
.LBB33_22:                              # %for.inc40
                                        #   in Loop: Header=BB33_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_8
.LBB33_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB33_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_26 Depth 2
                                        #       Child Loop BB33_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB33_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB33_24 Depth=1
	movl	$0, -8(%rbp)
.LBB33_26:                              # %for.cond47
                                        #   Parent Loop BB33_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB33_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB33_26 Depth=2
	movl	$0, -12(%rbp)
.LBB33_28:                              # %for.cond51
                                        #   Parent Loop BB33_24 Depth=1
                                        #     Parent Loop BB33_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB33_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB33_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB33_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_28
.LBB33_31:                              # %for.end63
                                        #   in Loop: Header=BB33_26 Depth=2
	jmp	.LBB33_32
.LBB33_32:                              # %for.inc64
                                        #   in Loop: Header=BB33_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_26
.LBB33_33:                              # %for.end66
                                        #   in Loop: Header=BB33_24 Depth=1
	jmp	.LBB33_34
.LBB33_34:                              # %for.inc67
                                        #   in Loop: Header=BB33_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_24
.LBB33_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB33_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB33_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB33_36 Depth=1
	vmovsd	.LCPI33_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI33_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI33_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB33_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_36
.LBB33_39:                              # %for.end98
	cmpl	$1593427999, -20(%rbp)  # imm = 0x5EF9C81F
	jne	.LBB33_41
.LBB33_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_40
.Lfunc_end33:
	.size	create_context_memory.26, .Lfunc_end33-create_context_memory.26
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.27
.LCPI34_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.27
	.p2align	4, 0x90
	.type	GetCtxModelNumber.27,@function
GetCtxModelNumber.27:                   # @GetCtxModelNumber.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI34_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$684374829, -44(%rbp)   # imm = 0x28CABB2D
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB34_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_3 Depth 2
                                        #       Child Loop BB34_5 Depth 3
                                        #     Child Loop BB34_14 Depth 2
                                        #       Child Loop BB34_16 Depth 3
                                        #     Child Loop BB34_25 Depth 2
                                        #       Child Loop BB34_27 Depth 3
                                        #     Child Loop BB34_36 Depth 2
                                        #       Child Loop BB34_38 Depth 3
                                        #     Child Loop BB34_47 Depth 2
                                        #     Child Loop BB34_54 Depth 2
                                        #     Child Loop BB34_61 Depth 2
                                        #     Child Loop BB34_68 Depth 2
                                        #     Child Loop BB34_75 Depth 2
                                        #     Child Loop BB34_82 Depth 2
                                        #       Child Loop BB34_84 Depth 3
                                        #     Child Loop BB34_93 Depth 2
                                        #       Child Loop BB34_95 Depth 3
                                        #     Child Loop BB34_104 Depth 2
                                        #       Child Loop BB34_106 Depth 3
                                        #     Child Loop BB34_115 Depth 2
                                        #       Child Loop BB34_117 Depth 3
                                        #     Child Loop BB34_126 Depth 2
                                        #       Child Loop BB34_128 Depth 3
                                        #     Child Loop BB34_137 Depth 2
                                        #       Child Loop BB34_139 Depth 3
                                        #     Child Loop BB34_148 Depth 2
                                        #       Child Loop BB34_150 Depth 3
                                        #     Child Loop BB34_159 Depth 2
                                        #       Child Loop BB34_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB34_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB34_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB34_3:                               # %for.cond2
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB34_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB34_3 Depth=2
	movl	$0, -4(%rbp)
.LBB34_5:                               # %for.cond5
                                        #   Parent Loop BB34_1 Depth=1
                                        #     Parent Loop BB34_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB34_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB34_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB34_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB34_9
.LBB34_8:                               # %if.else
                                        #   in Loop: Header=BB34_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB34_9:                               # %if.end
                                        #   in Loop: Header=BB34_5 Depth=3
	jmp	.LBB34_10
.LBB34_10:                              # %for.inc
                                        #   in Loop: Header=BB34_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_5
.LBB34_11:                              # %for.end
                                        #   in Loop: Header=BB34_3 Depth=2
	jmp	.LBB34_12
.LBB34_12:                              # %for.inc33
                                        #   in Loop: Header=BB34_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_3
.LBB34_13:                              # %for.end35
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -8(%rbp)
.LBB34_14:                              # %for.cond36
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB34_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB34_14 Depth=2
	movl	$0, -4(%rbp)
.LBB34_16:                              # %for.cond39
                                        #   Parent Loop BB34_1 Depth=1
                                        #     Parent Loop BB34_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB34_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB34_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB34_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB34_20
.LBB34_19:                              # %if.else58
                                        #   in Loop: Header=BB34_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB34_20:                              # %if.end73
                                        #   in Loop: Header=BB34_16 Depth=3
	jmp	.LBB34_21
.LBB34_21:                              # %for.inc74
                                        #   in Loop: Header=BB34_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_16
.LBB34_22:                              # %for.end76
                                        #   in Loop: Header=BB34_14 Depth=2
	jmp	.LBB34_23
.LBB34_23:                              # %for.inc77
                                        #   in Loop: Header=BB34_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_14
.LBB34_24:                              # %for.end79
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -8(%rbp)
.LBB34_25:                              # %for.cond80
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB34_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB34_25 Depth=2
	movl	$0, -4(%rbp)
.LBB34_27:                              # %for.cond83
                                        #   Parent Loop BB34_1 Depth=1
                                        #     Parent Loop BB34_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB34_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB34_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB34_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB34_31
.LBB34_30:                              # %if.else102
                                        #   in Loop: Header=BB34_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB34_31:                              # %if.end117
                                        #   in Loop: Header=BB34_27 Depth=3
	jmp	.LBB34_32
.LBB34_32:                              # %for.inc118
                                        #   in Loop: Header=BB34_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_27
.LBB34_33:                              # %for.end120
                                        #   in Loop: Header=BB34_25 Depth=2
	jmp	.LBB34_34
.LBB34_34:                              # %for.inc121
                                        #   in Loop: Header=BB34_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_25
.LBB34_35:                              # %for.end123
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -8(%rbp)
.LBB34_36:                              # %for.cond124
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB34_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB34_36 Depth=2
	movl	$0, -4(%rbp)
.LBB34_38:                              # %for.cond127
                                        #   Parent Loop BB34_1 Depth=1
                                        #     Parent Loop BB34_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB34_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB34_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB34_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB34_42
.LBB34_41:                              # %if.else146
                                        #   in Loop: Header=BB34_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB34_42:                              # %if.end161
                                        #   in Loop: Header=BB34_38 Depth=3
	jmp	.LBB34_43
.LBB34_43:                              # %for.inc162
                                        #   in Loop: Header=BB34_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_38
.LBB34_44:                              # %for.end164
                                        #   in Loop: Header=BB34_36 Depth=2
	jmp	.LBB34_45
.LBB34_45:                              # %for.inc165
                                        #   in Loop: Header=BB34_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_36
.LBB34_46:                              # %for.end167
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -4(%rbp)
.LBB34_47:                              # %for.cond168
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB34_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB34_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB34_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB34_51
.LBB34_50:                              # %if.else184
                                        #   in Loop: Header=BB34_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB34_51:                              # %if.end196
                                        #   in Loop: Header=BB34_47 Depth=2
	jmp	.LBB34_52
.LBB34_52:                              # %for.inc197
                                        #   in Loop: Header=BB34_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_47
.LBB34_53:                              # %for.end199
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -4(%rbp)
.LBB34_54:                              # %for.cond200
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB34_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB34_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB34_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB34_58
.LBB34_57:                              # %if.else216
                                        #   in Loop: Header=BB34_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB34_58:                              # %if.end228
                                        #   in Loop: Header=BB34_54 Depth=2
	jmp	.LBB34_59
.LBB34_59:                              # %for.inc229
                                        #   in Loop: Header=BB34_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_54
.LBB34_60:                              # %for.end231
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -4(%rbp)
.LBB34_61:                              # %for.cond232
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB34_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB34_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB34_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB34_65
.LBB34_64:                              # %if.else248
                                        #   in Loop: Header=BB34_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB34_65:                              # %if.end260
                                        #   in Loop: Header=BB34_61 Depth=2
	jmp	.LBB34_66
.LBB34_66:                              # %for.inc261
                                        #   in Loop: Header=BB34_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_61
.LBB34_67:                              # %for.end263
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -4(%rbp)
.LBB34_68:                              # %for.cond264
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB34_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB34_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB34_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB34_72
.LBB34_71:                              # %if.else280
                                        #   in Loop: Header=BB34_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB34_72:                              # %if.end292
                                        #   in Loop: Header=BB34_68 Depth=2
	jmp	.LBB34_73
.LBB34_73:                              # %for.inc293
                                        #   in Loop: Header=BB34_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_68
.LBB34_74:                              # %for.end295
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -4(%rbp)
.LBB34_75:                              # %for.cond296
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB34_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB34_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB34_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB34_79
.LBB34_78:                              # %if.else312
                                        #   in Loop: Header=BB34_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB34_79:                              # %if.end324
                                        #   in Loop: Header=BB34_75 Depth=2
	jmp	.LBB34_80
.LBB34_80:                              # %for.inc325
                                        #   in Loop: Header=BB34_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_75
.LBB34_81:                              # %for.end327
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -8(%rbp)
.LBB34_82:                              # %for.cond328
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB34_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB34_82 Depth=2
	movl	$0, -4(%rbp)
.LBB34_84:                              # %for.cond331
                                        #   Parent Loop BB34_1 Depth=1
                                        #     Parent Loop BB34_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB34_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB34_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB34_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB34_88
.LBB34_87:                              # %if.else350
                                        #   in Loop: Header=BB34_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB34_88:                              # %if.end365
                                        #   in Loop: Header=BB34_84 Depth=3
	jmp	.LBB34_89
.LBB34_89:                              # %for.inc366
                                        #   in Loop: Header=BB34_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_84
.LBB34_90:                              # %for.end368
                                        #   in Loop: Header=BB34_82 Depth=2
	jmp	.LBB34_91
.LBB34_91:                              # %for.inc369
                                        #   in Loop: Header=BB34_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_82
.LBB34_92:                              # %for.end371
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -8(%rbp)
.LBB34_93:                              # %for.cond372
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB34_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB34_93 Depth=2
	movl	$0, -4(%rbp)
.LBB34_95:                              # %for.cond375
                                        #   Parent Loop BB34_1 Depth=1
                                        #     Parent Loop BB34_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB34_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB34_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB34_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB34_99
.LBB34_98:                              # %if.else394
                                        #   in Loop: Header=BB34_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB34_99:                              # %if.end409
                                        #   in Loop: Header=BB34_95 Depth=3
	jmp	.LBB34_100
.LBB34_100:                             # %for.inc410
                                        #   in Loop: Header=BB34_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_95
.LBB34_101:                             # %for.end412
                                        #   in Loop: Header=BB34_93 Depth=2
	jmp	.LBB34_102
.LBB34_102:                             # %for.inc413
                                        #   in Loop: Header=BB34_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_93
.LBB34_103:                             # %for.end415
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -8(%rbp)
.LBB34_104:                             # %for.cond416
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB34_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB34_104 Depth=2
	movl	$0, -4(%rbp)
.LBB34_106:                             # %for.cond419
                                        #   Parent Loop BB34_1 Depth=1
                                        #     Parent Loop BB34_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB34_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB34_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB34_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB34_110
.LBB34_109:                             # %if.else438
                                        #   in Loop: Header=BB34_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB34_110:                             # %if.end453
                                        #   in Loop: Header=BB34_106 Depth=3
	jmp	.LBB34_111
.LBB34_111:                             # %for.inc454
                                        #   in Loop: Header=BB34_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_106
.LBB34_112:                             # %for.end456
                                        #   in Loop: Header=BB34_104 Depth=2
	jmp	.LBB34_113
.LBB34_113:                             # %for.inc457
                                        #   in Loop: Header=BB34_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_104
.LBB34_114:                             # %for.end459
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -8(%rbp)
.LBB34_115:                             # %for.cond460
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB34_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB34_115 Depth=2
	movl	$0, -4(%rbp)
.LBB34_117:                             # %for.cond463
                                        #   Parent Loop BB34_1 Depth=1
                                        #     Parent Loop BB34_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB34_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB34_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB34_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB34_121
.LBB34_120:                             # %if.else482
                                        #   in Loop: Header=BB34_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB34_121:                             # %if.end497
                                        #   in Loop: Header=BB34_117 Depth=3
	jmp	.LBB34_122
.LBB34_122:                             # %for.inc498
                                        #   in Loop: Header=BB34_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_117
.LBB34_123:                             # %for.end500
                                        #   in Loop: Header=BB34_115 Depth=2
	jmp	.LBB34_124
.LBB34_124:                             # %for.inc501
                                        #   in Loop: Header=BB34_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_115
.LBB34_125:                             # %for.end503
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -8(%rbp)
.LBB34_126:                             # %for.cond504
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB34_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB34_126 Depth=2
	movl	$0, -4(%rbp)
.LBB34_128:                             # %for.cond507
                                        #   Parent Loop BB34_1 Depth=1
                                        #     Parent Loop BB34_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB34_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB34_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB34_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB34_132
.LBB34_131:                             # %if.else526
                                        #   in Loop: Header=BB34_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB34_132:                             # %if.end541
                                        #   in Loop: Header=BB34_128 Depth=3
	jmp	.LBB34_133
.LBB34_133:                             # %for.inc542
                                        #   in Loop: Header=BB34_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_128
.LBB34_134:                             # %for.end544
                                        #   in Loop: Header=BB34_126 Depth=2
	jmp	.LBB34_135
.LBB34_135:                             # %for.inc545
                                        #   in Loop: Header=BB34_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_126
.LBB34_136:                             # %for.end547
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -8(%rbp)
.LBB34_137:                             # %for.cond548
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB34_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB34_137 Depth=2
	movl	$0, -4(%rbp)
.LBB34_139:                             # %for.cond551
                                        #   Parent Loop BB34_1 Depth=1
                                        #     Parent Loop BB34_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB34_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB34_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB34_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB34_143
.LBB34_142:                             # %if.else570
                                        #   in Loop: Header=BB34_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB34_143:                             # %if.end585
                                        #   in Loop: Header=BB34_139 Depth=3
	jmp	.LBB34_144
.LBB34_144:                             # %for.inc586
                                        #   in Loop: Header=BB34_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_139
.LBB34_145:                             # %for.end588
                                        #   in Loop: Header=BB34_137 Depth=2
	jmp	.LBB34_146
.LBB34_146:                             # %for.inc589
                                        #   in Loop: Header=BB34_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_137
.LBB34_147:                             # %for.end591
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -8(%rbp)
.LBB34_148:                             # %for.cond592
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB34_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB34_148 Depth=2
	movl	$0, -4(%rbp)
.LBB34_150:                             # %for.cond595
                                        #   Parent Loop BB34_1 Depth=1
                                        #     Parent Loop BB34_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB34_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB34_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB34_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB34_154
.LBB34_153:                             # %if.else614
                                        #   in Loop: Header=BB34_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB34_154:                             # %if.end629
                                        #   in Loop: Header=BB34_150 Depth=3
	jmp	.LBB34_155
.LBB34_155:                             # %for.inc630
                                        #   in Loop: Header=BB34_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_150
.LBB34_156:                             # %for.end632
                                        #   in Loop: Header=BB34_148 Depth=2
	jmp	.LBB34_157
.LBB34_157:                             # %for.inc633
                                        #   in Loop: Header=BB34_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_148
.LBB34_158:                             # %for.end635
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -8(%rbp)
.LBB34_159:                             # %for.cond636
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB34_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB34_159 Depth=2
	movl	$0, -4(%rbp)
.LBB34_161:                             # %for.cond639
                                        #   Parent Loop BB34_1 Depth=1
                                        #     Parent Loop BB34_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB34_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB34_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB34_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB34_165
.LBB34_164:                             # %if.else658
                                        #   in Loop: Header=BB34_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB34_165:                             # %if.end673
                                        #   in Loop: Header=BB34_161 Depth=3
	jmp	.LBB34_166
.LBB34_166:                             # %for.inc674
                                        #   in Loop: Header=BB34_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_161
.LBB34_167:                             # %for.end676
                                        #   in Loop: Header=BB34_159 Depth=2
	jmp	.LBB34_168
.LBB34_168:                             # %for.inc677
                                        #   in Loop: Header=BB34_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_159
.LBB34_169:                             # %for.end679
                                        #   in Loop: Header=BB34_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB34_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB34_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB34_171:                             # %if.end682
                                        #   in Loop: Header=BB34_1 Depth=1
	jmp	.LBB34_172
.LBB34_172:                             # %for.inc683
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_1
.LBB34_173:                             # %for.end685
	cmpl	$684374829, -44(%rbp)   # imm = 0x28CABB2D
	jne	.LBB34_175
.LBB34_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_174
.Lfunc_end34:
	.size	GetCtxModelNumber.27, .Lfunc_end34-GetCtxModelNumber.27
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.28
.LCPI35_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.28
	.p2align	4, 0x90
	.type	GetCtxModelNumber.28,@function
GetCtxModelNumber.28:                   # @GetCtxModelNumber.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI35_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1393590430, -48(%rbp)  # imm = 0x5310809E
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB35_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_3 Depth 2
                                        #       Child Loop BB35_5 Depth 3
                                        #     Child Loop BB35_14 Depth 2
                                        #       Child Loop BB35_16 Depth 3
                                        #     Child Loop BB35_25 Depth 2
                                        #       Child Loop BB35_27 Depth 3
                                        #     Child Loop BB35_36 Depth 2
                                        #       Child Loop BB35_38 Depth 3
                                        #     Child Loop BB35_47 Depth 2
                                        #     Child Loop BB35_54 Depth 2
                                        #     Child Loop BB35_61 Depth 2
                                        #     Child Loop BB35_68 Depth 2
                                        #     Child Loop BB35_75 Depth 2
                                        #     Child Loop BB35_82 Depth 2
                                        #       Child Loop BB35_84 Depth 3
                                        #     Child Loop BB35_93 Depth 2
                                        #       Child Loop BB35_95 Depth 3
                                        #     Child Loop BB35_104 Depth 2
                                        #       Child Loop BB35_106 Depth 3
                                        #     Child Loop BB35_115 Depth 2
                                        #       Child Loop BB35_117 Depth 3
                                        #     Child Loop BB35_126 Depth 2
                                        #       Child Loop BB35_128 Depth 3
                                        #     Child Loop BB35_137 Depth 2
                                        #       Child Loop BB35_139 Depth 3
                                        #     Child Loop BB35_148 Depth 2
                                        #       Child Loop BB35_150 Depth 3
                                        #     Child Loop BB35_159 Depth 2
                                        #       Child Loop BB35_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB35_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB35_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB35_3:                               # %for.cond2
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB35_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB35_3 Depth=2
	movl	$0, -4(%rbp)
.LBB35_5:                               # %for.cond5
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB35_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB35_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB35_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_9
.LBB35_8:                               # %if.else
                                        #   in Loop: Header=BB35_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_9:                               # %if.end
                                        #   in Loop: Header=BB35_5 Depth=3
	jmp	.LBB35_10
.LBB35_10:                              # %for.inc
                                        #   in Loop: Header=BB35_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_5
.LBB35_11:                              # %for.end
                                        #   in Loop: Header=BB35_3 Depth=2
	jmp	.LBB35_12
.LBB35_12:                              # %for.inc33
                                        #   in Loop: Header=BB35_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_3
.LBB35_13:                              # %for.end35
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_14:                              # %for.cond36
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB35_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB35_14 Depth=2
	movl	$0, -4(%rbp)
.LBB35_16:                              # %for.cond39
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB35_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB35_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB35_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_20
.LBB35_19:                              # %if.else58
                                        #   in Loop: Header=BB35_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_20:                              # %if.end73
                                        #   in Loop: Header=BB35_16 Depth=3
	jmp	.LBB35_21
.LBB35_21:                              # %for.inc74
                                        #   in Loop: Header=BB35_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_16
.LBB35_22:                              # %for.end76
                                        #   in Loop: Header=BB35_14 Depth=2
	jmp	.LBB35_23
.LBB35_23:                              # %for.inc77
                                        #   in Loop: Header=BB35_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_14
.LBB35_24:                              # %for.end79
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_25:                              # %for.cond80
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB35_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB35_25 Depth=2
	movl	$0, -4(%rbp)
.LBB35_27:                              # %for.cond83
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB35_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB35_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB35_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_31
.LBB35_30:                              # %if.else102
                                        #   in Loop: Header=BB35_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_31:                              # %if.end117
                                        #   in Loop: Header=BB35_27 Depth=3
	jmp	.LBB35_32
.LBB35_32:                              # %for.inc118
                                        #   in Loop: Header=BB35_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_27
.LBB35_33:                              # %for.end120
                                        #   in Loop: Header=BB35_25 Depth=2
	jmp	.LBB35_34
.LBB35_34:                              # %for.inc121
                                        #   in Loop: Header=BB35_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_25
.LBB35_35:                              # %for.end123
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_36:                              # %for.cond124
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB35_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB35_36 Depth=2
	movl	$0, -4(%rbp)
.LBB35_38:                              # %for.cond127
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB35_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB35_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB35_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_42
.LBB35_41:                              # %if.else146
                                        #   in Loop: Header=BB35_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_42:                              # %if.end161
                                        #   in Loop: Header=BB35_38 Depth=3
	jmp	.LBB35_43
.LBB35_43:                              # %for.inc162
                                        #   in Loop: Header=BB35_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_38
.LBB35_44:                              # %for.end164
                                        #   in Loop: Header=BB35_36 Depth=2
	jmp	.LBB35_45
.LBB35_45:                              # %for.inc165
                                        #   in Loop: Header=BB35_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_36
.LBB35_46:                              # %for.end167
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -4(%rbp)
.LBB35_47:                              # %for.cond168
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB35_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB35_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_51
.LBB35_50:                              # %if.else184
                                        #   in Loop: Header=BB35_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_51:                              # %if.end196
                                        #   in Loop: Header=BB35_47 Depth=2
	jmp	.LBB35_52
.LBB35_52:                              # %for.inc197
                                        #   in Loop: Header=BB35_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_47
.LBB35_53:                              # %for.end199
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -4(%rbp)
.LBB35_54:                              # %for.cond200
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB35_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB35_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_58
.LBB35_57:                              # %if.else216
                                        #   in Loop: Header=BB35_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_58:                              # %if.end228
                                        #   in Loop: Header=BB35_54 Depth=2
	jmp	.LBB35_59
.LBB35_59:                              # %for.inc229
                                        #   in Loop: Header=BB35_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_54
.LBB35_60:                              # %for.end231
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -4(%rbp)
.LBB35_61:                              # %for.cond232
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB35_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB35_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB35_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_65
.LBB35_64:                              # %if.else248
                                        #   in Loop: Header=BB35_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_65:                              # %if.end260
                                        #   in Loop: Header=BB35_61 Depth=2
	jmp	.LBB35_66
.LBB35_66:                              # %for.inc261
                                        #   in Loop: Header=BB35_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_61
.LBB35_67:                              # %for.end263
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -4(%rbp)
.LBB35_68:                              # %for.cond264
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB35_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB35_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB35_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_72
.LBB35_71:                              # %if.else280
                                        #   in Loop: Header=BB35_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_72:                              # %if.end292
                                        #   in Loop: Header=BB35_68 Depth=2
	jmp	.LBB35_73
.LBB35_73:                              # %for.inc293
                                        #   in Loop: Header=BB35_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_68
.LBB35_74:                              # %for.end295
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -4(%rbp)
.LBB35_75:                              # %for.cond296
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB35_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB35_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_79
.LBB35_78:                              # %if.else312
                                        #   in Loop: Header=BB35_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_79:                              # %if.end324
                                        #   in Loop: Header=BB35_75 Depth=2
	jmp	.LBB35_80
.LBB35_80:                              # %for.inc325
                                        #   in Loop: Header=BB35_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_75
.LBB35_81:                              # %for.end327
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_82:                              # %for.cond328
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB35_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB35_82 Depth=2
	movl	$0, -4(%rbp)
.LBB35_84:                              # %for.cond331
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB35_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB35_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB35_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_88
.LBB35_87:                              # %if.else350
                                        #   in Loop: Header=BB35_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_88:                              # %if.end365
                                        #   in Loop: Header=BB35_84 Depth=3
	jmp	.LBB35_89
.LBB35_89:                              # %for.inc366
                                        #   in Loop: Header=BB35_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_84
.LBB35_90:                              # %for.end368
                                        #   in Loop: Header=BB35_82 Depth=2
	jmp	.LBB35_91
.LBB35_91:                              # %for.inc369
                                        #   in Loop: Header=BB35_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_82
.LBB35_92:                              # %for.end371
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_93:                              # %for.cond372
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB35_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB35_93 Depth=2
	movl	$0, -4(%rbp)
.LBB35_95:                              # %for.cond375
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB35_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB35_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB35_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_99
.LBB35_98:                              # %if.else394
                                        #   in Loop: Header=BB35_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_99:                              # %if.end409
                                        #   in Loop: Header=BB35_95 Depth=3
	jmp	.LBB35_100
.LBB35_100:                             # %for.inc410
                                        #   in Loop: Header=BB35_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_95
.LBB35_101:                             # %for.end412
                                        #   in Loop: Header=BB35_93 Depth=2
	jmp	.LBB35_102
.LBB35_102:                             # %for.inc413
                                        #   in Loop: Header=BB35_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_93
.LBB35_103:                             # %for.end415
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_104:                             # %for.cond416
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB35_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB35_104 Depth=2
	movl	$0, -4(%rbp)
.LBB35_106:                             # %for.cond419
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB35_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB35_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB35_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_110
.LBB35_109:                             # %if.else438
                                        #   in Loop: Header=BB35_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_110:                             # %if.end453
                                        #   in Loop: Header=BB35_106 Depth=3
	jmp	.LBB35_111
.LBB35_111:                             # %for.inc454
                                        #   in Loop: Header=BB35_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_106
.LBB35_112:                             # %for.end456
                                        #   in Loop: Header=BB35_104 Depth=2
	jmp	.LBB35_113
.LBB35_113:                             # %for.inc457
                                        #   in Loop: Header=BB35_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_104
.LBB35_114:                             # %for.end459
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_115:                             # %for.cond460
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB35_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB35_115 Depth=2
	movl	$0, -4(%rbp)
.LBB35_117:                             # %for.cond463
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB35_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB35_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB35_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_121
.LBB35_120:                             # %if.else482
                                        #   in Loop: Header=BB35_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_121:                             # %if.end497
                                        #   in Loop: Header=BB35_117 Depth=3
	jmp	.LBB35_122
.LBB35_122:                             # %for.inc498
                                        #   in Loop: Header=BB35_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_117
.LBB35_123:                             # %for.end500
                                        #   in Loop: Header=BB35_115 Depth=2
	jmp	.LBB35_124
.LBB35_124:                             # %for.inc501
                                        #   in Loop: Header=BB35_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_115
.LBB35_125:                             # %for.end503
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_126:                             # %for.cond504
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB35_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB35_126 Depth=2
	movl	$0, -4(%rbp)
.LBB35_128:                             # %for.cond507
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB35_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB35_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB35_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_132
.LBB35_131:                             # %if.else526
                                        #   in Loop: Header=BB35_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_132:                             # %if.end541
                                        #   in Loop: Header=BB35_128 Depth=3
	jmp	.LBB35_133
.LBB35_133:                             # %for.inc542
                                        #   in Loop: Header=BB35_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_128
.LBB35_134:                             # %for.end544
                                        #   in Loop: Header=BB35_126 Depth=2
	jmp	.LBB35_135
.LBB35_135:                             # %for.inc545
                                        #   in Loop: Header=BB35_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_126
.LBB35_136:                             # %for.end547
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_137:                             # %for.cond548
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB35_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB35_137 Depth=2
	movl	$0, -4(%rbp)
.LBB35_139:                             # %for.cond551
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB35_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB35_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB35_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_143
.LBB35_142:                             # %if.else570
                                        #   in Loop: Header=BB35_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_143:                             # %if.end585
                                        #   in Loop: Header=BB35_139 Depth=3
	jmp	.LBB35_144
.LBB35_144:                             # %for.inc586
                                        #   in Loop: Header=BB35_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_139
.LBB35_145:                             # %for.end588
                                        #   in Loop: Header=BB35_137 Depth=2
	jmp	.LBB35_146
.LBB35_146:                             # %for.inc589
                                        #   in Loop: Header=BB35_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_137
.LBB35_147:                             # %for.end591
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_148:                             # %for.cond592
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB35_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB35_148 Depth=2
	movl	$0, -4(%rbp)
.LBB35_150:                             # %for.cond595
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB35_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB35_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB35_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_154
.LBB35_153:                             # %if.else614
                                        #   in Loop: Header=BB35_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_154:                             # %if.end629
                                        #   in Loop: Header=BB35_150 Depth=3
	jmp	.LBB35_155
.LBB35_155:                             # %for.inc630
                                        #   in Loop: Header=BB35_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_150
.LBB35_156:                             # %for.end632
                                        #   in Loop: Header=BB35_148 Depth=2
	jmp	.LBB35_157
.LBB35_157:                             # %for.inc633
                                        #   in Loop: Header=BB35_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_148
.LBB35_158:                             # %for.end635
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_159:                             # %for.cond636
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB35_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB35_159 Depth=2
	movl	$0, -4(%rbp)
.LBB35_161:                             # %for.cond639
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB35_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB35_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB35_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_165
.LBB35_164:                             # %if.else658
                                        #   in Loop: Header=BB35_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_165:                             # %if.end673
                                        #   in Loop: Header=BB35_161 Depth=3
	jmp	.LBB35_166
.LBB35_166:                             # %for.inc674
                                        #   in Loop: Header=BB35_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_161
.LBB35_167:                             # %for.end676
                                        #   in Loop: Header=BB35_159 Depth=2
	jmp	.LBB35_168
.LBB35_168:                             # %for.inc677
                                        #   in Loop: Header=BB35_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_159
.LBB35_169:                             # %for.end679
                                        #   in Loop: Header=BB35_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB35_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB35_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB35_171:                             # %if.end682
                                        #   in Loop: Header=BB35_1 Depth=1
	jmp	.LBB35_172
.LBB35_172:                             # %for.inc683
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_1
.LBB35_173:                             # %for.end685
	cmpl	$1393590430, -48(%rbp)  # imm = 0x5310809E
	jne	.LBB35_175
.LBB35_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_174
.Lfunc_end35:
	.size	GetCtxModelNumber.28, .Lfunc_end35-GetCtxModelNumber.28
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.29
.LCPI36_0:
	.quad	4607182418800017408     # double 1
.LCPI36_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI36_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI36_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.29
	.p2align	4, 0x90
	.type	XRate.29,@function
XRate.29:                               # @XRate.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$387812627, -32(%rbp)   # imm = 0x171D8D13
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB36_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB36_3
.LBB36_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB36_3:                               # %cond.end
	vmovsd	.LCPI36_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI36_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI36_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI36_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB36_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI36_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB36_6
.LBB36_5:                               # %cond.false6
	vmovsd	.LCPI36_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI36_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI36_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB36_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB36_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB36_9
.LBB36_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB36_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB36_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB36_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB36_13
.LBB36_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB36_13:                              # %cond.end26
	jmp	.LBB36_15
.LBB36_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB36_15
.LBB36_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB36_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB36_18
.LBB36_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB36_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$387812627, -32(%rbp)   # imm = 0x171D8D13
	jne	.LBB36_20
.LBB36_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB36_19
.Lfunc_end36:
	.size	XRate.29, .Lfunc_end36-XRate.29
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.30        # -- Begin function init_contexts.30
	.p2align	4, 0x90
	.type	init_contexts.30,@function
init_contexts.30:                       # @init_contexts.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1387346674, -28(%rbp)  # imm = 0x52B13AF2
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB37_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB37_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$0, -4(%rbp)
.LBB37_3:                               # %for.cond2
                                        #   Parent Loop BB37_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB37_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB37_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB37_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_7
.LBB37_6:                               # %if.else
                                        #   in Loop: Header=BB37_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_7:                               # %if.end
                                        #   in Loop: Header=BB37_3 Depth=2
	jmp	.LBB37_8
.LBB37_8:                               # %for.inc
                                        #   in Loop: Header=BB37_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_3
.LBB37_9:                               # %for.end
                                        #   in Loop: Header=BB37_1 Depth=1
	jmp	.LBB37_10
.LBB37_10:                              # %for.inc28
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_1
.LBB37_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB37_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB37_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB37_12 Depth=1
	movl	$0, -4(%rbp)
.LBB37_14:                              # %for.cond34
                                        #   Parent Loop BB37_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB37_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB37_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB37_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_18
.LBB37_17:                              # %if.else52
                                        #   in Loop: Header=BB37_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_18:                              # %if.end66
                                        #   in Loop: Header=BB37_14 Depth=2
	jmp	.LBB37_19
.LBB37_19:                              # %for.inc67
                                        #   in Loop: Header=BB37_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_14
.LBB37_20:                              # %for.end69
                                        #   in Loop: Header=BB37_12 Depth=1
	jmp	.LBB37_21
.LBB37_21:                              # %for.inc70
                                        #   in Loop: Header=BB37_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_12
.LBB37_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB37_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB37_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB37_23 Depth=1
	movl	$0, -4(%rbp)
.LBB37_25:                              # %for.cond76
                                        #   Parent Loop BB37_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB37_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB37_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB37_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_29
.LBB37_28:                              # %if.else94
                                        #   in Loop: Header=BB37_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_29:                              # %if.end108
                                        #   in Loop: Header=BB37_25 Depth=2
	jmp	.LBB37_30
.LBB37_30:                              # %for.inc109
                                        #   in Loop: Header=BB37_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_25
.LBB37_31:                              # %for.end111
                                        #   in Loop: Header=BB37_23 Depth=1
	jmp	.LBB37_32
.LBB37_32:                              # %for.inc112
                                        #   in Loop: Header=BB37_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_23
.LBB37_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB37_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB37_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB37_34 Depth=1
	movl	$0, -4(%rbp)
.LBB37_36:                              # %for.cond118
                                        #   Parent Loop BB37_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB37_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB37_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB37_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_40
.LBB37_39:                              # %if.else136
                                        #   in Loop: Header=BB37_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_40:                              # %if.end150
                                        #   in Loop: Header=BB37_36 Depth=2
	jmp	.LBB37_41
.LBB37_41:                              # %for.inc151
                                        #   in Loop: Header=BB37_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_36
.LBB37_42:                              # %for.end153
                                        #   in Loop: Header=BB37_34 Depth=1
	jmp	.LBB37_43
.LBB37_43:                              # %for.inc154
                                        #   in Loop: Header=BB37_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_34
.LBB37_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB37_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB37_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB37_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB37_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_49
.LBB37_48:                              # %if.else172
                                        #   in Loop: Header=BB37_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_49:                              # %if.end183
                                        #   in Loop: Header=BB37_45 Depth=1
	jmp	.LBB37_50
.LBB37_50:                              # %for.inc184
                                        #   in Loop: Header=BB37_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_45
.LBB37_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB37_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB37_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB37_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB37_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_56
.LBB37_55:                              # %if.else202
                                        #   in Loop: Header=BB37_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_56:                              # %if.end213
                                        #   in Loop: Header=BB37_52 Depth=1
	jmp	.LBB37_57
.LBB37_57:                              # %for.inc214
                                        #   in Loop: Header=BB37_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_52
.LBB37_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB37_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB37_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB37_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB37_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_63
.LBB37_62:                              # %if.else232
                                        #   in Loop: Header=BB37_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_63:                              # %if.end243
                                        #   in Loop: Header=BB37_59 Depth=1
	jmp	.LBB37_64
.LBB37_64:                              # %for.inc244
                                        #   in Loop: Header=BB37_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_59
.LBB37_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB37_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB37_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB37_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB37_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_70
.LBB37_69:                              # %if.else262
                                        #   in Loop: Header=BB37_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_70:                              # %if.end273
                                        #   in Loop: Header=BB37_66 Depth=1
	jmp	.LBB37_71
.LBB37_71:                              # %for.inc274
                                        #   in Loop: Header=BB37_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_66
.LBB37_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB37_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB37_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB37_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB37_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_77
.LBB37_76:                              # %if.else292
                                        #   in Loop: Header=BB37_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_77:                              # %if.end303
                                        #   in Loop: Header=BB37_73 Depth=1
	jmp	.LBB37_78
.LBB37_78:                              # %for.inc304
                                        #   in Loop: Header=BB37_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_73
.LBB37_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB37_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB37_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB37_80 Depth=1
	movl	$0, -4(%rbp)
.LBB37_82:                              # %for.cond310
                                        #   Parent Loop BB37_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB37_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB37_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB37_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_86
.LBB37_85:                              # %if.else328
                                        #   in Loop: Header=BB37_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_86:                              # %if.end342
                                        #   in Loop: Header=BB37_82 Depth=2
	jmp	.LBB37_87
.LBB37_87:                              # %for.inc343
                                        #   in Loop: Header=BB37_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_82
.LBB37_88:                              # %for.end345
                                        #   in Loop: Header=BB37_80 Depth=1
	jmp	.LBB37_89
.LBB37_89:                              # %for.inc346
                                        #   in Loop: Header=BB37_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_80
.LBB37_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB37_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB37_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB37_91 Depth=1
	movl	$0, -4(%rbp)
.LBB37_93:                              # %for.cond352
                                        #   Parent Loop BB37_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB37_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB37_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB37_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_97
.LBB37_96:                              # %if.else370
                                        #   in Loop: Header=BB37_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_97:                              # %if.end384
                                        #   in Loop: Header=BB37_93 Depth=2
	jmp	.LBB37_98
.LBB37_98:                              # %for.inc385
                                        #   in Loop: Header=BB37_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_93
.LBB37_99:                              # %for.end387
                                        #   in Loop: Header=BB37_91 Depth=1
	jmp	.LBB37_100
.LBB37_100:                             # %for.inc388
                                        #   in Loop: Header=BB37_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_91
.LBB37_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB37_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB37_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB37_102 Depth=1
	movl	$0, -4(%rbp)
.LBB37_104:                             # %for.cond394
                                        #   Parent Loop BB37_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB37_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB37_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB37_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_108
.LBB37_107:                             # %if.else412
                                        #   in Loop: Header=BB37_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_108:                             # %if.end426
                                        #   in Loop: Header=BB37_104 Depth=2
	jmp	.LBB37_109
.LBB37_109:                             # %for.inc427
                                        #   in Loop: Header=BB37_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_104
.LBB37_110:                             # %for.end429
                                        #   in Loop: Header=BB37_102 Depth=1
	jmp	.LBB37_111
.LBB37_111:                             # %for.inc430
                                        #   in Loop: Header=BB37_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_102
.LBB37_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB37_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB37_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB37_113 Depth=1
	movl	$0, -4(%rbp)
.LBB37_115:                             # %for.cond436
                                        #   Parent Loop BB37_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB37_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB37_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB37_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_119
.LBB37_118:                             # %if.else454
                                        #   in Loop: Header=BB37_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_119:                             # %if.end468
                                        #   in Loop: Header=BB37_115 Depth=2
	jmp	.LBB37_120
.LBB37_120:                             # %for.inc469
                                        #   in Loop: Header=BB37_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_115
.LBB37_121:                             # %for.end471
                                        #   in Loop: Header=BB37_113 Depth=1
	jmp	.LBB37_122
.LBB37_122:                             # %for.inc472
                                        #   in Loop: Header=BB37_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_113
.LBB37_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB37_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB37_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB37_124 Depth=1
	movl	$0, -4(%rbp)
.LBB37_126:                             # %for.cond478
                                        #   Parent Loop BB37_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB37_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB37_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB37_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_130
.LBB37_129:                             # %if.else496
                                        #   in Loop: Header=BB37_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_130:                             # %if.end510
                                        #   in Loop: Header=BB37_126 Depth=2
	jmp	.LBB37_131
.LBB37_131:                             # %for.inc511
                                        #   in Loop: Header=BB37_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_126
.LBB37_132:                             # %for.end513
                                        #   in Loop: Header=BB37_124 Depth=1
	jmp	.LBB37_133
.LBB37_133:                             # %for.inc514
                                        #   in Loop: Header=BB37_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_124
.LBB37_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB37_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB37_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB37_135 Depth=1
	movl	$0, -4(%rbp)
.LBB37_137:                             # %for.cond520
                                        #   Parent Loop BB37_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB37_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB37_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB37_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_141
.LBB37_140:                             # %if.else538
                                        #   in Loop: Header=BB37_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_141:                             # %if.end552
                                        #   in Loop: Header=BB37_137 Depth=2
	jmp	.LBB37_142
.LBB37_142:                             # %for.inc553
                                        #   in Loop: Header=BB37_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_137
.LBB37_143:                             # %for.end555
                                        #   in Loop: Header=BB37_135 Depth=1
	jmp	.LBB37_144
.LBB37_144:                             # %for.inc556
                                        #   in Loop: Header=BB37_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_135
.LBB37_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB37_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB37_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB37_146 Depth=1
	movl	$0, -4(%rbp)
.LBB37_148:                             # %for.cond562
                                        #   Parent Loop BB37_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB37_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB37_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB37_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_152
.LBB37_151:                             # %if.else580
                                        #   in Loop: Header=BB37_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_152:                             # %if.end594
                                        #   in Loop: Header=BB37_148 Depth=2
	jmp	.LBB37_153
.LBB37_153:                             # %for.inc595
                                        #   in Loop: Header=BB37_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_148
.LBB37_154:                             # %for.end597
                                        #   in Loop: Header=BB37_146 Depth=1
	jmp	.LBB37_155
.LBB37_155:                             # %for.inc598
                                        #   in Loop: Header=BB37_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_146
.LBB37_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB37_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB37_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB37_157 Depth=1
	movl	$0, -4(%rbp)
.LBB37_159:                             # %for.cond604
                                        #   Parent Loop BB37_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB37_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB37_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB37_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_163
.LBB37_162:                             # %if.else622
                                        #   in Loop: Header=BB37_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_163:                             # %if.end636
                                        #   in Loop: Header=BB37_159 Depth=2
	jmp	.LBB37_164
.LBB37_164:                             # %for.inc637
                                        #   in Loop: Header=BB37_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_159
.LBB37_165:                             # %for.end639
                                        #   in Loop: Header=BB37_157 Depth=1
	jmp	.LBB37_166
.LBB37_166:                             # %for.inc640
                                        #   in Loop: Header=BB37_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_157
.LBB37_167:                             # %for.end642
	cmpl	$1387346674, -28(%rbp)  # imm = 0x52B13AF2
	jne	.LBB37_169
.LBB37_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_168
.Lfunc_end37:
	.size	init_contexts.30, .Lfunc_end37-init_contexts.30
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.31    # -- Begin function SetCtxModelNumber.31
	.p2align	4, 0x90
	.type	SetCtxModelNumber.31,@function
SetCtxModelNumber.31:                   # @SetCtxModelNumber.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1260206887, -16(%rbp)  # imm = 0x4B1D3B27
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB38_11
.LBB38_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB38_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB38_11
.LBB38_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB38_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB38_11
.LBB38_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB38_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB38_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB38_10
.LBB38_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB38_10:                              # %if.end38
	jmp	.LBB38_11
.LBB38_11:                              # %if.end39
	cmpl	$1260206887, -16(%rbp)  # imm = 0x4B1D3B27
	jne	.LBB38_13
.LBB38_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_12
.Lfunc_end38:
	.size	SetCtxModelNumber.31, .Lfunc_end38-SetCtxModelNumber.31
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.32        # -- Begin function init_contexts.32
	.p2align	4, 0x90
	.type	init_contexts.32,@function
init_contexts.32:                       # @init_contexts.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$525981755, -28(%rbp)   # imm = 0x1F59D83B
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB39_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB39_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -4(%rbp)
.LBB39_3:                               # %for.cond2
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB39_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB39_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB39_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_7
.LBB39_6:                               # %if.else
                                        #   in Loop: Header=BB39_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_7:                               # %if.end
                                        #   in Loop: Header=BB39_3 Depth=2
	jmp	.LBB39_8
.LBB39_8:                               # %for.inc
                                        #   in Loop: Header=BB39_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_3
.LBB39_9:                               # %for.end
                                        #   in Loop: Header=BB39_1 Depth=1
	jmp	.LBB39_10
.LBB39_10:                              # %for.inc28
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_1
.LBB39_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB39_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB39_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB39_12 Depth=1
	movl	$0, -4(%rbp)
.LBB39_14:                              # %for.cond34
                                        #   Parent Loop BB39_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB39_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB39_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB39_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_18
.LBB39_17:                              # %if.else52
                                        #   in Loop: Header=BB39_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_18:                              # %if.end66
                                        #   in Loop: Header=BB39_14 Depth=2
	jmp	.LBB39_19
.LBB39_19:                              # %for.inc67
                                        #   in Loop: Header=BB39_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_14
.LBB39_20:                              # %for.end69
                                        #   in Loop: Header=BB39_12 Depth=1
	jmp	.LBB39_21
.LBB39_21:                              # %for.inc70
                                        #   in Loop: Header=BB39_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_12
.LBB39_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB39_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB39_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB39_23 Depth=1
	movl	$0, -4(%rbp)
.LBB39_25:                              # %for.cond76
                                        #   Parent Loop BB39_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB39_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB39_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB39_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_29
.LBB39_28:                              # %if.else94
                                        #   in Loop: Header=BB39_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_29:                              # %if.end108
                                        #   in Loop: Header=BB39_25 Depth=2
	jmp	.LBB39_30
.LBB39_30:                              # %for.inc109
                                        #   in Loop: Header=BB39_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_25
.LBB39_31:                              # %for.end111
                                        #   in Loop: Header=BB39_23 Depth=1
	jmp	.LBB39_32
.LBB39_32:                              # %for.inc112
                                        #   in Loop: Header=BB39_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_23
.LBB39_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB39_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB39_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB39_34 Depth=1
	movl	$0, -4(%rbp)
.LBB39_36:                              # %for.cond118
                                        #   Parent Loop BB39_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB39_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB39_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB39_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_40
.LBB39_39:                              # %if.else136
                                        #   in Loop: Header=BB39_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_40:                              # %if.end150
                                        #   in Loop: Header=BB39_36 Depth=2
	jmp	.LBB39_41
.LBB39_41:                              # %for.inc151
                                        #   in Loop: Header=BB39_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_36
.LBB39_42:                              # %for.end153
                                        #   in Loop: Header=BB39_34 Depth=1
	jmp	.LBB39_43
.LBB39_43:                              # %for.inc154
                                        #   in Loop: Header=BB39_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_34
.LBB39_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB39_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB39_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB39_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB39_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_49
.LBB39_48:                              # %if.else172
                                        #   in Loop: Header=BB39_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_49:                              # %if.end183
                                        #   in Loop: Header=BB39_45 Depth=1
	jmp	.LBB39_50
.LBB39_50:                              # %for.inc184
                                        #   in Loop: Header=BB39_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_45
.LBB39_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB39_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB39_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB39_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB39_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_56
.LBB39_55:                              # %if.else202
                                        #   in Loop: Header=BB39_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_56:                              # %if.end213
                                        #   in Loop: Header=BB39_52 Depth=1
	jmp	.LBB39_57
.LBB39_57:                              # %for.inc214
                                        #   in Loop: Header=BB39_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_52
.LBB39_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB39_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB39_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB39_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB39_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_63
.LBB39_62:                              # %if.else232
                                        #   in Loop: Header=BB39_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_63:                              # %if.end243
                                        #   in Loop: Header=BB39_59 Depth=1
	jmp	.LBB39_64
.LBB39_64:                              # %for.inc244
                                        #   in Loop: Header=BB39_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_59
.LBB39_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB39_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB39_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB39_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB39_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_70
.LBB39_69:                              # %if.else262
                                        #   in Loop: Header=BB39_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_70:                              # %if.end273
                                        #   in Loop: Header=BB39_66 Depth=1
	jmp	.LBB39_71
.LBB39_71:                              # %for.inc274
                                        #   in Loop: Header=BB39_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_66
.LBB39_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB39_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB39_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB39_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB39_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_77
.LBB39_76:                              # %if.else292
                                        #   in Loop: Header=BB39_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_77:                              # %if.end303
                                        #   in Loop: Header=BB39_73 Depth=1
	jmp	.LBB39_78
.LBB39_78:                              # %for.inc304
                                        #   in Loop: Header=BB39_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_73
.LBB39_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB39_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB39_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB39_80 Depth=1
	movl	$0, -4(%rbp)
.LBB39_82:                              # %for.cond310
                                        #   Parent Loop BB39_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB39_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB39_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB39_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_86
.LBB39_85:                              # %if.else328
                                        #   in Loop: Header=BB39_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_86:                              # %if.end342
                                        #   in Loop: Header=BB39_82 Depth=2
	jmp	.LBB39_87
.LBB39_87:                              # %for.inc343
                                        #   in Loop: Header=BB39_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_82
.LBB39_88:                              # %for.end345
                                        #   in Loop: Header=BB39_80 Depth=1
	jmp	.LBB39_89
.LBB39_89:                              # %for.inc346
                                        #   in Loop: Header=BB39_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_80
.LBB39_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB39_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB39_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB39_91 Depth=1
	movl	$0, -4(%rbp)
.LBB39_93:                              # %for.cond352
                                        #   Parent Loop BB39_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB39_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB39_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB39_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_97
.LBB39_96:                              # %if.else370
                                        #   in Loop: Header=BB39_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_97:                              # %if.end384
                                        #   in Loop: Header=BB39_93 Depth=2
	jmp	.LBB39_98
.LBB39_98:                              # %for.inc385
                                        #   in Loop: Header=BB39_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_93
.LBB39_99:                              # %for.end387
                                        #   in Loop: Header=BB39_91 Depth=1
	jmp	.LBB39_100
.LBB39_100:                             # %for.inc388
                                        #   in Loop: Header=BB39_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_91
.LBB39_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB39_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB39_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB39_102 Depth=1
	movl	$0, -4(%rbp)
.LBB39_104:                             # %for.cond394
                                        #   Parent Loop BB39_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB39_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB39_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB39_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_108
.LBB39_107:                             # %if.else412
                                        #   in Loop: Header=BB39_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_108:                             # %if.end426
                                        #   in Loop: Header=BB39_104 Depth=2
	jmp	.LBB39_109
.LBB39_109:                             # %for.inc427
                                        #   in Loop: Header=BB39_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_104
.LBB39_110:                             # %for.end429
                                        #   in Loop: Header=BB39_102 Depth=1
	jmp	.LBB39_111
.LBB39_111:                             # %for.inc430
                                        #   in Loop: Header=BB39_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_102
.LBB39_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB39_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB39_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB39_113 Depth=1
	movl	$0, -4(%rbp)
.LBB39_115:                             # %for.cond436
                                        #   Parent Loop BB39_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB39_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB39_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB39_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_119
.LBB39_118:                             # %if.else454
                                        #   in Loop: Header=BB39_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_119:                             # %if.end468
                                        #   in Loop: Header=BB39_115 Depth=2
	jmp	.LBB39_120
.LBB39_120:                             # %for.inc469
                                        #   in Loop: Header=BB39_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_115
.LBB39_121:                             # %for.end471
                                        #   in Loop: Header=BB39_113 Depth=1
	jmp	.LBB39_122
.LBB39_122:                             # %for.inc472
                                        #   in Loop: Header=BB39_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_113
.LBB39_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB39_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB39_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB39_124 Depth=1
	movl	$0, -4(%rbp)
.LBB39_126:                             # %for.cond478
                                        #   Parent Loop BB39_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB39_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB39_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB39_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_130
.LBB39_129:                             # %if.else496
                                        #   in Loop: Header=BB39_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_130:                             # %if.end510
                                        #   in Loop: Header=BB39_126 Depth=2
	jmp	.LBB39_131
.LBB39_131:                             # %for.inc511
                                        #   in Loop: Header=BB39_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_126
.LBB39_132:                             # %for.end513
                                        #   in Loop: Header=BB39_124 Depth=1
	jmp	.LBB39_133
.LBB39_133:                             # %for.inc514
                                        #   in Loop: Header=BB39_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_124
.LBB39_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB39_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB39_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB39_135 Depth=1
	movl	$0, -4(%rbp)
.LBB39_137:                             # %for.cond520
                                        #   Parent Loop BB39_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB39_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB39_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB39_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_141
.LBB39_140:                             # %if.else538
                                        #   in Loop: Header=BB39_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_141:                             # %if.end552
                                        #   in Loop: Header=BB39_137 Depth=2
	jmp	.LBB39_142
.LBB39_142:                             # %for.inc553
                                        #   in Loop: Header=BB39_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_137
.LBB39_143:                             # %for.end555
                                        #   in Loop: Header=BB39_135 Depth=1
	jmp	.LBB39_144
.LBB39_144:                             # %for.inc556
                                        #   in Loop: Header=BB39_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_135
.LBB39_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB39_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB39_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB39_146 Depth=1
	movl	$0, -4(%rbp)
.LBB39_148:                             # %for.cond562
                                        #   Parent Loop BB39_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB39_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB39_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB39_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_152
.LBB39_151:                             # %if.else580
                                        #   in Loop: Header=BB39_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_152:                             # %if.end594
                                        #   in Loop: Header=BB39_148 Depth=2
	jmp	.LBB39_153
.LBB39_153:                             # %for.inc595
                                        #   in Loop: Header=BB39_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_148
.LBB39_154:                             # %for.end597
                                        #   in Loop: Header=BB39_146 Depth=1
	jmp	.LBB39_155
.LBB39_155:                             # %for.inc598
                                        #   in Loop: Header=BB39_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_146
.LBB39_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB39_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB39_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB39_157 Depth=1
	movl	$0, -4(%rbp)
.LBB39_159:                             # %for.cond604
                                        #   Parent Loop BB39_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB39_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB39_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB39_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_163
.LBB39_162:                             # %if.else622
                                        #   in Loop: Header=BB39_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_163:                             # %if.end636
                                        #   in Loop: Header=BB39_159 Depth=2
	jmp	.LBB39_164
.LBB39_164:                             # %for.inc637
                                        #   in Loop: Header=BB39_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_159
.LBB39_165:                             # %for.end639
                                        #   in Loop: Header=BB39_157 Depth=1
	jmp	.LBB39_166
.LBB39_166:                             # %for.inc640
                                        #   in Loop: Header=BB39_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_157
.LBB39_167:                             # %for.end642
	cmpl	$525981755, -28(%rbp)   # imm = 0x1F59D83B
	jne	.LBB39_169
.LBB39_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_168
.Lfunc_end39:
	.size	init_contexts.32, .Lfunc_end39-init_contexts.32
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.33    # -- Begin function SetCtxModelNumber.33
	.p2align	4, 0x90
	.type	SetCtxModelNumber.33,@function
SetCtxModelNumber.33:                   # @SetCtxModelNumber.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1634371927, -16(%rbp)  # imm = 0x616A8957
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB40_11
.LBB40_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB40_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB40_11
.LBB40_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB40_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB40_11
.LBB40_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB40_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB40_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB40_10
.LBB40_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB40_10:                              # %if.end38
	jmp	.LBB40_11
.LBB40_11:                              # %if.end39
	cmpl	$1634371927, -16(%rbp)  # imm = 0x616A8957
	jne	.LBB40_13
.LBB40_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_12
.Lfunc_end40:
	.size	SetCtxModelNumber.33, .Lfunc_end40-SetCtxModelNumber.33
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.34       # -- Begin function store_contexts.34
	.p2align	4, 0x90
	.type	store_contexts.34,@function
store_contexts.34:                      # @store_contexts.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$480834492, -16(%rbp)   # imm = 0x1CA8F3BC
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -8(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB41_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB41_3
.LBB41_2:                               # %if.else
	jmp	.LBB41_3
.LBB41_3:                               # %if.end
	cmpl	$480834492, -16(%rbp)   # imm = 0x1CA8F3BC
	jne	.LBB41_5
.LBB41_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_4
.Lfunc_end41:
	.size	store_contexts.34, .Lfunc_end41-store_contexts.34
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.35       # -- Begin function store_contexts.35
	.p2align	4, 0x90
	.type	store_contexts.35,@function
store_contexts.35:                      # @store_contexts.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1134613938, -16(%rbp)  # imm = 0x43A0D5B2
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB42_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB42_3
.LBB42_2:                               # %if.else
	jmp	.LBB42_3
.LBB42_3:                               # %if.end
	cmpl	$1134613938, -16(%rbp)  # imm = 0x43A0D5B2
	jne	.LBB42_5
.LBB42_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_4
.Lfunc_end42:
	.size	store_contexts.35, .Lfunc_end42-store_contexts.35
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.36
.LCPI43_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.36
	.p2align	4, 0x90
	.type	GetCtxModelNumber.36,@function
GetCtxModelNumber.36:                   # @GetCtxModelNumber.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI43_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1747468478, -44(%rbp)  # imm = 0x682840BE
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB43_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_3 Depth 2
                                        #       Child Loop BB43_5 Depth 3
                                        #     Child Loop BB43_14 Depth 2
                                        #       Child Loop BB43_16 Depth 3
                                        #     Child Loop BB43_25 Depth 2
                                        #       Child Loop BB43_27 Depth 3
                                        #     Child Loop BB43_36 Depth 2
                                        #       Child Loop BB43_38 Depth 3
                                        #     Child Loop BB43_47 Depth 2
                                        #     Child Loop BB43_54 Depth 2
                                        #     Child Loop BB43_61 Depth 2
                                        #     Child Loop BB43_68 Depth 2
                                        #     Child Loop BB43_75 Depth 2
                                        #     Child Loop BB43_82 Depth 2
                                        #       Child Loop BB43_84 Depth 3
                                        #     Child Loop BB43_93 Depth 2
                                        #       Child Loop BB43_95 Depth 3
                                        #     Child Loop BB43_104 Depth 2
                                        #       Child Loop BB43_106 Depth 3
                                        #     Child Loop BB43_115 Depth 2
                                        #       Child Loop BB43_117 Depth 3
                                        #     Child Loop BB43_126 Depth 2
                                        #       Child Loop BB43_128 Depth 3
                                        #     Child Loop BB43_137 Depth 2
                                        #       Child Loop BB43_139 Depth 3
                                        #     Child Loop BB43_148 Depth 2
                                        #       Child Loop BB43_150 Depth 3
                                        #     Child Loop BB43_159 Depth 2
                                        #       Child Loop BB43_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB43_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB43_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB43_3:                               # %for.cond2
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB43_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB43_3 Depth=2
	movl	$0, -4(%rbp)
.LBB43_5:                               # %for.cond5
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB43_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB43_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB43_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_9
.LBB43_8:                               # %if.else
                                        #   in Loop: Header=BB43_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_9:                               # %if.end
                                        #   in Loop: Header=BB43_5 Depth=3
	jmp	.LBB43_10
.LBB43_10:                              # %for.inc
                                        #   in Loop: Header=BB43_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_5
.LBB43_11:                              # %for.end
                                        #   in Loop: Header=BB43_3 Depth=2
	jmp	.LBB43_12
.LBB43_12:                              # %for.inc33
                                        #   in Loop: Header=BB43_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_3
.LBB43_13:                              # %for.end35
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_14:                              # %for.cond36
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB43_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB43_14 Depth=2
	movl	$0, -4(%rbp)
.LBB43_16:                              # %for.cond39
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB43_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB43_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB43_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_20
.LBB43_19:                              # %if.else58
                                        #   in Loop: Header=BB43_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_20:                              # %if.end73
                                        #   in Loop: Header=BB43_16 Depth=3
	jmp	.LBB43_21
.LBB43_21:                              # %for.inc74
                                        #   in Loop: Header=BB43_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_16
.LBB43_22:                              # %for.end76
                                        #   in Loop: Header=BB43_14 Depth=2
	jmp	.LBB43_23
.LBB43_23:                              # %for.inc77
                                        #   in Loop: Header=BB43_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_14
.LBB43_24:                              # %for.end79
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_25:                              # %for.cond80
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB43_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB43_25 Depth=2
	movl	$0, -4(%rbp)
.LBB43_27:                              # %for.cond83
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB43_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB43_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB43_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_31
.LBB43_30:                              # %if.else102
                                        #   in Loop: Header=BB43_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_31:                              # %if.end117
                                        #   in Loop: Header=BB43_27 Depth=3
	jmp	.LBB43_32
.LBB43_32:                              # %for.inc118
                                        #   in Loop: Header=BB43_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_27
.LBB43_33:                              # %for.end120
                                        #   in Loop: Header=BB43_25 Depth=2
	jmp	.LBB43_34
.LBB43_34:                              # %for.inc121
                                        #   in Loop: Header=BB43_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_25
.LBB43_35:                              # %for.end123
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_36:                              # %for.cond124
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB43_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB43_36 Depth=2
	movl	$0, -4(%rbp)
.LBB43_38:                              # %for.cond127
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB43_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB43_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB43_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_42
.LBB43_41:                              # %if.else146
                                        #   in Loop: Header=BB43_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_42:                              # %if.end161
                                        #   in Loop: Header=BB43_38 Depth=3
	jmp	.LBB43_43
.LBB43_43:                              # %for.inc162
                                        #   in Loop: Header=BB43_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_38
.LBB43_44:                              # %for.end164
                                        #   in Loop: Header=BB43_36 Depth=2
	jmp	.LBB43_45
.LBB43_45:                              # %for.inc165
                                        #   in Loop: Header=BB43_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_36
.LBB43_46:                              # %for.end167
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -4(%rbp)
.LBB43_47:                              # %for.cond168
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB43_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB43_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_51
.LBB43_50:                              # %if.else184
                                        #   in Loop: Header=BB43_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_51:                              # %if.end196
                                        #   in Loop: Header=BB43_47 Depth=2
	jmp	.LBB43_52
.LBB43_52:                              # %for.inc197
                                        #   in Loop: Header=BB43_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_47
.LBB43_53:                              # %for.end199
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -4(%rbp)
.LBB43_54:                              # %for.cond200
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB43_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB43_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_58
.LBB43_57:                              # %if.else216
                                        #   in Loop: Header=BB43_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_58:                              # %if.end228
                                        #   in Loop: Header=BB43_54 Depth=2
	jmp	.LBB43_59
.LBB43_59:                              # %for.inc229
                                        #   in Loop: Header=BB43_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_54
.LBB43_60:                              # %for.end231
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -4(%rbp)
.LBB43_61:                              # %for.cond232
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB43_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB43_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB43_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_65
.LBB43_64:                              # %if.else248
                                        #   in Loop: Header=BB43_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_65:                              # %if.end260
                                        #   in Loop: Header=BB43_61 Depth=2
	jmp	.LBB43_66
.LBB43_66:                              # %for.inc261
                                        #   in Loop: Header=BB43_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_61
.LBB43_67:                              # %for.end263
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -4(%rbp)
.LBB43_68:                              # %for.cond264
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB43_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB43_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB43_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_72
.LBB43_71:                              # %if.else280
                                        #   in Loop: Header=BB43_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_72:                              # %if.end292
                                        #   in Loop: Header=BB43_68 Depth=2
	jmp	.LBB43_73
.LBB43_73:                              # %for.inc293
                                        #   in Loop: Header=BB43_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_68
.LBB43_74:                              # %for.end295
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -4(%rbp)
.LBB43_75:                              # %for.cond296
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB43_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB43_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_79
.LBB43_78:                              # %if.else312
                                        #   in Loop: Header=BB43_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_79:                              # %if.end324
                                        #   in Loop: Header=BB43_75 Depth=2
	jmp	.LBB43_80
.LBB43_80:                              # %for.inc325
                                        #   in Loop: Header=BB43_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_75
.LBB43_81:                              # %for.end327
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_82:                              # %for.cond328
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB43_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB43_82 Depth=2
	movl	$0, -4(%rbp)
.LBB43_84:                              # %for.cond331
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB43_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB43_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB43_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_88
.LBB43_87:                              # %if.else350
                                        #   in Loop: Header=BB43_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_88:                              # %if.end365
                                        #   in Loop: Header=BB43_84 Depth=3
	jmp	.LBB43_89
.LBB43_89:                              # %for.inc366
                                        #   in Loop: Header=BB43_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_84
.LBB43_90:                              # %for.end368
                                        #   in Loop: Header=BB43_82 Depth=2
	jmp	.LBB43_91
.LBB43_91:                              # %for.inc369
                                        #   in Loop: Header=BB43_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_82
.LBB43_92:                              # %for.end371
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_93:                              # %for.cond372
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB43_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB43_93 Depth=2
	movl	$0, -4(%rbp)
.LBB43_95:                              # %for.cond375
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB43_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB43_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB43_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_99
.LBB43_98:                              # %if.else394
                                        #   in Loop: Header=BB43_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_99:                              # %if.end409
                                        #   in Loop: Header=BB43_95 Depth=3
	jmp	.LBB43_100
.LBB43_100:                             # %for.inc410
                                        #   in Loop: Header=BB43_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_95
.LBB43_101:                             # %for.end412
                                        #   in Loop: Header=BB43_93 Depth=2
	jmp	.LBB43_102
.LBB43_102:                             # %for.inc413
                                        #   in Loop: Header=BB43_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_93
.LBB43_103:                             # %for.end415
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_104:                             # %for.cond416
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB43_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB43_104 Depth=2
	movl	$0, -4(%rbp)
.LBB43_106:                             # %for.cond419
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB43_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB43_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB43_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_110
.LBB43_109:                             # %if.else438
                                        #   in Loop: Header=BB43_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_110:                             # %if.end453
                                        #   in Loop: Header=BB43_106 Depth=3
	jmp	.LBB43_111
.LBB43_111:                             # %for.inc454
                                        #   in Loop: Header=BB43_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_106
.LBB43_112:                             # %for.end456
                                        #   in Loop: Header=BB43_104 Depth=2
	jmp	.LBB43_113
.LBB43_113:                             # %for.inc457
                                        #   in Loop: Header=BB43_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_104
.LBB43_114:                             # %for.end459
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_115:                             # %for.cond460
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB43_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB43_115 Depth=2
	movl	$0, -4(%rbp)
.LBB43_117:                             # %for.cond463
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB43_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB43_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB43_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_121
.LBB43_120:                             # %if.else482
                                        #   in Loop: Header=BB43_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_121:                             # %if.end497
                                        #   in Loop: Header=BB43_117 Depth=3
	jmp	.LBB43_122
.LBB43_122:                             # %for.inc498
                                        #   in Loop: Header=BB43_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_117
.LBB43_123:                             # %for.end500
                                        #   in Loop: Header=BB43_115 Depth=2
	jmp	.LBB43_124
.LBB43_124:                             # %for.inc501
                                        #   in Loop: Header=BB43_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_115
.LBB43_125:                             # %for.end503
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_126:                             # %for.cond504
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB43_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB43_126 Depth=2
	movl	$0, -4(%rbp)
.LBB43_128:                             # %for.cond507
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB43_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB43_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB43_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_132
.LBB43_131:                             # %if.else526
                                        #   in Loop: Header=BB43_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_132:                             # %if.end541
                                        #   in Loop: Header=BB43_128 Depth=3
	jmp	.LBB43_133
.LBB43_133:                             # %for.inc542
                                        #   in Loop: Header=BB43_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_128
.LBB43_134:                             # %for.end544
                                        #   in Loop: Header=BB43_126 Depth=2
	jmp	.LBB43_135
.LBB43_135:                             # %for.inc545
                                        #   in Loop: Header=BB43_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_126
.LBB43_136:                             # %for.end547
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_137:                             # %for.cond548
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB43_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB43_137 Depth=2
	movl	$0, -4(%rbp)
.LBB43_139:                             # %for.cond551
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB43_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB43_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB43_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_143
.LBB43_142:                             # %if.else570
                                        #   in Loop: Header=BB43_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_143:                             # %if.end585
                                        #   in Loop: Header=BB43_139 Depth=3
	jmp	.LBB43_144
.LBB43_144:                             # %for.inc586
                                        #   in Loop: Header=BB43_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_139
.LBB43_145:                             # %for.end588
                                        #   in Loop: Header=BB43_137 Depth=2
	jmp	.LBB43_146
.LBB43_146:                             # %for.inc589
                                        #   in Loop: Header=BB43_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_137
.LBB43_147:                             # %for.end591
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_148:                             # %for.cond592
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB43_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB43_148 Depth=2
	movl	$0, -4(%rbp)
.LBB43_150:                             # %for.cond595
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB43_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB43_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB43_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_154
.LBB43_153:                             # %if.else614
                                        #   in Loop: Header=BB43_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_154:                             # %if.end629
                                        #   in Loop: Header=BB43_150 Depth=3
	jmp	.LBB43_155
.LBB43_155:                             # %for.inc630
                                        #   in Loop: Header=BB43_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_150
.LBB43_156:                             # %for.end632
                                        #   in Loop: Header=BB43_148 Depth=2
	jmp	.LBB43_157
.LBB43_157:                             # %for.inc633
                                        #   in Loop: Header=BB43_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_148
.LBB43_158:                             # %for.end635
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_159:                             # %for.cond636
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB43_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB43_159 Depth=2
	movl	$0, -4(%rbp)
.LBB43_161:                             # %for.cond639
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB43_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB43_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB43_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_165
.LBB43_164:                             # %if.else658
                                        #   in Loop: Header=BB43_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_165:                             # %if.end673
                                        #   in Loop: Header=BB43_161 Depth=3
	jmp	.LBB43_166
.LBB43_166:                             # %for.inc674
                                        #   in Loop: Header=BB43_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_161
.LBB43_167:                             # %for.end676
                                        #   in Loop: Header=BB43_159 Depth=2
	jmp	.LBB43_168
.LBB43_168:                             # %for.inc677
                                        #   in Loop: Header=BB43_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_159
.LBB43_169:                             # %for.end679
                                        #   in Loop: Header=BB43_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB43_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB43_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB43_171:                             # %if.end682
                                        #   in Loop: Header=BB43_1 Depth=1
	jmp	.LBB43_172
.LBB43_172:                             # %for.inc683
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_1
.LBB43_173:                             # %for.end685
	cmpl	$1747468478, -44(%rbp)  # imm = 0x682840BE
	jne	.LBB43_175
.LBB43_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_174
.Lfunc_end43:
	.size	GetCtxModelNumber.36, .Lfunc_end43-GetCtxModelNumber.36
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.37 # -- Begin function update_field_frame_contexts.37
	.p2align	4, 0x90
	.type	update_field_frame_contexts.37,@function
update_field_frame_contexts.37:         # @update_field_frame_contexts.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1578941672, -12(%rbp)  # imm = 0x5E1CBCE8
	movl	%edi, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB44_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB44_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB44_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB44_2 Depth=1
	movl	$0, -4(%rbp)
.LBB44_4:                               # %for.cond1
                                        #   Parent Loop BB44_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB44_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB44_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB44_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_4
.LBB44_7:                               # %for.end
                                        #   in Loop: Header=BB44_2 Depth=1
	jmp	.LBB44_8
.LBB44_8:                               # %for.inc23
                                        #   in Loop: Header=BB44_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_2
.LBB44_9:                               # %for.end25
	jmp	.LBB44_19
.LBB44_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB44_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB44_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB44_11 Depth=1
	movl	$0, -4(%rbp)
.LBB44_13:                              # %for.cond29
                                        #   Parent Loop BB44_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB44_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB44_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_13
.LBB44_16:                              # %for.end56
                                        #   in Loop: Header=BB44_11 Depth=1
	jmp	.LBB44_17
.LBB44_17:                              # %for.inc57
                                        #   in Loop: Header=BB44_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_11
.LBB44_18:                              # %for.end59
	jmp	.LBB44_19
.LBB44_19:                              # %if.end
	cmpl	$1578941672, -12(%rbp)  # imm = 0x5E1CBCE8
	jne	.LBB44_21
.LBB44_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_20
.Lfunc_end44:
	.size	update_field_frame_contexts.37, .Lfunc_end44-update_field_frame_contexts.37
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.38 # -- Begin function update_field_frame_contexts.38
	.p2align	4, 0x90
	.type	update_field_frame_contexts.38,@function
update_field_frame_contexts.38:         # @update_field_frame_contexts.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1219268554, -16(%rbp)  # imm = 0x48AC8FCA
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB45_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB45_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB45_2 Depth=1
	movl	$0, -8(%rbp)
.LBB45_4:                               # %for.cond1
                                        #   Parent Loop BB45_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB45_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB45_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB45_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_4
.LBB45_7:                               # %for.end
                                        #   in Loop: Header=BB45_2 Depth=1
	jmp	.LBB45_8
.LBB45_8:                               # %for.inc23
                                        #   in Loop: Header=BB45_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_2
.LBB45_9:                               # %for.end25
	jmp	.LBB45_19
.LBB45_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB45_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB45_11 Depth=1
	movl	$0, -8(%rbp)
.LBB45_13:                              # %for.cond29
                                        #   Parent Loop BB45_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB45_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB45_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_13
.LBB45_16:                              # %for.end56
                                        #   in Loop: Header=BB45_11 Depth=1
	jmp	.LBB45_17
.LBB45_17:                              # %for.inc57
                                        #   in Loop: Header=BB45_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_11
.LBB45_18:                              # %for.end59
	jmp	.LBB45_19
.LBB45_19:                              # %if.end
	cmpl	$1219268554, -16(%rbp)  # imm = 0x48AC8FCA
	jne	.LBB45_21
.LBB45_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_20
.Lfunc_end45:
	.size	update_field_frame_contexts.38, .Lfunc_end45-update_field_frame_contexts.38
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.39
.LCPI46_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.39
	.p2align	4, 0x90
	.type	GetCtxModelNumber.39,@function
GetCtxModelNumber.39:                   # @GetCtxModelNumber.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI46_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$644199853, -48(%rbp)   # imm = 0x2665B5AD
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB46_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_3 Depth 2
                                        #       Child Loop BB46_5 Depth 3
                                        #     Child Loop BB46_14 Depth 2
                                        #       Child Loop BB46_16 Depth 3
                                        #     Child Loop BB46_25 Depth 2
                                        #       Child Loop BB46_27 Depth 3
                                        #     Child Loop BB46_36 Depth 2
                                        #       Child Loop BB46_38 Depth 3
                                        #     Child Loop BB46_47 Depth 2
                                        #     Child Loop BB46_54 Depth 2
                                        #     Child Loop BB46_61 Depth 2
                                        #     Child Loop BB46_68 Depth 2
                                        #     Child Loop BB46_75 Depth 2
                                        #     Child Loop BB46_82 Depth 2
                                        #       Child Loop BB46_84 Depth 3
                                        #     Child Loop BB46_93 Depth 2
                                        #       Child Loop BB46_95 Depth 3
                                        #     Child Loop BB46_104 Depth 2
                                        #       Child Loop BB46_106 Depth 3
                                        #     Child Loop BB46_115 Depth 2
                                        #       Child Loop BB46_117 Depth 3
                                        #     Child Loop BB46_126 Depth 2
                                        #       Child Loop BB46_128 Depth 3
                                        #     Child Loop BB46_137 Depth 2
                                        #       Child Loop BB46_139 Depth 3
                                        #     Child Loop BB46_148 Depth 2
                                        #       Child Loop BB46_150 Depth 3
                                        #     Child Loop BB46_159 Depth 2
                                        #       Child Loop BB46_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB46_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB46_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB46_3:                               # %for.cond2
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB46_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB46_3 Depth=2
	movl	$0, -4(%rbp)
.LBB46_5:                               # %for.cond5
                                        #   Parent Loop BB46_1 Depth=1
                                        #     Parent Loop BB46_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB46_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB46_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB46_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB46_9
.LBB46_8:                               # %if.else
                                        #   in Loop: Header=BB46_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB46_9:                               # %if.end
                                        #   in Loop: Header=BB46_5 Depth=3
	jmp	.LBB46_10
.LBB46_10:                              # %for.inc
                                        #   in Loop: Header=BB46_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_5
.LBB46_11:                              # %for.end
                                        #   in Loop: Header=BB46_3 Depth=2
	jmp	.LBB46_12
.LBB46_12:                              # %for.inc33
                                        #   in Loop: Header=BB46_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_3
.LBB46_13:                              # %for.end35
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -8(%rbp)
.LBB46_14:                              # %for.cond36
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB46_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB46_14 Depth=2
	movl	$0, -4(%rbp)
.LBB46_16:                              # %for.cond39
                                        #   Parent Loop BB46_1 Depth=1
                                        #     Parent Loop BB46_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB46_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB46_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB46_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB46_20
.LBB46_19:                              # %if.else58
                                        #   in Loop: Header=BB46_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB46_20:                              # %if.end73
                                        #   in Loop: Header=BB46_16 Depth=3
	jmp	.LBB46_21
.LBB46_21:                              # %for.inc74
                                        #   in Loop: Header=BB46_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_16
.LBB46_22:                              # %for.end76
                                        #   in Loop: Header=BB46_14 Depth=2
	jmp	.LBB46_23
.LBB46_23:                              # %for.inc77
                                        #   in Loop: Header=BB46_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_14
.LBB46_24:                              # %for.end79
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -8(%rbp)
.LBB46_25:                              # %for.cond80
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB46_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB46_25 Depth=2
	movl	$0, -4(%rbp)
.LBB46_27:                              # %for.cond83
                                        #   Parent Loop BB46_1 Depth=1
                                        #     Parent Loop BB46_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB46_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB46_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB46_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB46_31
.LBB46_30:                              # %if.else102
                                        #   in Loop: Header=BB46_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB46_31:                              # %if.end117
                                        #   in Loop: Header=BB46_27 Depth=3
	jmp	.LBB46_32
.LBB46_32:                              # %for.inc118
                                        #   in Loop: Header=BB46_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_27
.LBB46_33:                              # %for.end120
                                        #   in Loop: Header=BB46_25 Depth=2
	jmp	.LBB46_34
.LBB46_34:                              # %for.inc121
                                        #   in Loop: Header=BB46_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_25
.LBB46_35:                              # %for.end123
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -8(%rbp)
.LBB46_36:                              # %for.cond124
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB46_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB46_36 Depth=2
	movl	$0, -4(%rbp)
.LBB46_38:                              # %for.cond127
                                        #   Parent Loop BB46_1 Depth=1
                                        #     Parent Loop BB46_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB46_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB46_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB46_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB46_42
.LBB46_41:                              # %if.else146
                                        #   in Loop: Header=BB46_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB46_42:                              # %if.end161
                                        #   in Loop: Header=BB46_38 Depth=3
	jmp	.LBB46_43
.LBB46_43:                              # %for.inc162
                                        #   in Loop: Header=BB46_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_38
.LBB46_44:                              # %for.end164
                                        #   in Loop: Header=BB46_36 Depth=2
	jmp	.LBB46_45
.LBB46_45:                              # %for.inc165
                                        #   in Loop: Header=BB46_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_36
.LBB46_46:                              # %for.end167
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -4(%rbp)
.LBB46_47:                              # %for.cond168
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB46_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB46_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB46_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB46_51
.LBB46_50:                              # %if.else184
                                        #   in Loop: Header=BB46_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB46_51:                              # %if.end196
                                        #   in Loop: Header=BB46_47 Depth=2
	jmp	.LBB46_52
.LBB46_52:                              # %for.inc197
                                        #   in Loop: Header=BB46_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_47
.LBB46_53:                              # %for.end199
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -4(%rbp)
.LBB46_54:                              # %for.cond200
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB46_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB46_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB46_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB46_58
.LBB46_57:                              # %if.else216
                                        #   in Loop: Header=BB46_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB46_58:                              # %if.end228
                                        #   in Loop: Header=BB46_54 Depth=2
	jmp	.LBB46_59
.LBB46_59:                              # %for.inc229
                                        #   in Loop: Header=BB46_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_54
.LBB46_60:                              # %for.end231
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -4(%rbp)
.LBB46_61:                              # %for.cond232
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB46_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB46_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB46_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB46_65
.LBB46_64:                              # %if.else248
                                        #   in Loop: Header=BB46_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB46_65:                              # %if.end260
                                        #   in Loop: Header=BB46_61 Depth=2
	jmp	.LBB46_66
.LBB46_66:                              # %for.inc261
                                        #   in Loop: Header=BB46_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_61
.LBB46_67:                              # %for.end263
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -4(%rbp)
.LBB46_68:                              # %for.cond264
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB46_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB46_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB46_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB46_72
.LBB46_71:                              # %if.else280
                                        #   in Loop: Header=BB46_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB46_72:                              # %if.end292
                                        #   in Loop: Header=BB46_68 Depth=2
	jmp	.LBB46_73
.LBB46_73:                              # %for.inc293
                                        #   in Loop: Header=BB46_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_68
.LBB46_74:                              # %for.end295
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -4(%rbp)
.LBB46_75:                              # %for.cond296
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB46_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB46_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB46_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB46_79
.LBB46_78:                              # %if.else312
                                        #   in Loop: Header=BB46_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB46_79:                              # %if.end324
                                        #   in Loop: Header=BB46_75 Depth=2
	jmp	.LBB46_80
.LBB46_80:                              # %for.inc325
                                        #   in Loop: Header=BB46_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_75
.LBB46_81:                              # %for.end327
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -8(%rbp)
.LBB46_82:                              # %for.cond328
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB46_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB46_82 Depth=2
	movl	$0, -4(%rbp)
.LBB46_84:                              # %for.cond331
                                        #   Parent Loop BB46_1 Depth=1
                                        #     Parent Loop BB46_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB46_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB46_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB46_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB46_88
.LBB46_87:                              # %if.else350
                                        #   in Loop: Header=BB46_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB46_88:                              # %if.end365
                                        #   in Loop: Header=BB46_84 Depth=3
	jmp	.LBB46_89
.LBB46_89:                              # %for.inc366
                                        #   in Loop: Header=BB46_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_84
.LBB46_90:                              # %for.end368
                                        #   in Loop: Header=BB46_82 Depth=2
	jmp	.LBB46_91
.LBB46_91:                              # %for.inc369
                                        #   in Loop: Header=BB46_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_82
.LBB46_92:                              # %for.end371
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -8(%rbp)
.LBB46_93:                              # %for.cond372
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB46_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB46_93 Depth=2
	movl	$0, -4(%rbp)
.LBB46_95:                              # %for.cond375
                                        #   Parent Loop BB46_1 Depth=1
                                        #     Parent Loop BB46_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB46_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB46_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB46_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB46_99
.LBB46_98:                              # %if.else394
                                        #   in Loop: Header=BB46_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB46_99:                              # %if.end409
                                        #   in Loop: Header=BB46_95 Depth=3
	jmp	.LBB46_100
.LBB46_100:                             # %for.inc410
                                        #   in Loop: Header=BB46_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_95
.LBB46_101:                             # %for.end412
                                        #   in Loop: Header=BB46_93 Depth=2
	jmp	.LBB46_102
.LBB46_102:                             # %for.inc413
                                        #   in Loop: Header=BB46_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_93
.LBB46_103:                             # %for.end415
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -8(%rbp)
.LBB46_104:                             # %for.cond416
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB46_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB46_104 Depth=2
	movl	$0, -4(%rbp)
.LBB46_106:                             # %for.cond419
                                        #   Parent Loop BB46_1 Depth=1
                                        #     Parent Loop BB46_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB46_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB46_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB46_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB46_110
.LBB46_109:                             # %if.else438
                                        #   in Loop: Header=BB46_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB46_110:                             # %if.end453
                                        #   in Loop: Header=BB46_106 Depth=3
	jmp	.LBB46_111
.LBB46_111:                             # %for.inc454
                                        #   in Loop: Header=BB46_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_106
.LBB46_112:                             # %for.end456
                                        #   in Loop: Header=BB46_104 Depth=2
	jmp	.LBB46_113
.LBB46_113:                             # %for.inc457
                                        #   in Loop: Header=BB46_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_104
.LBB46_114:                             # %for.end459
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -8(%rbp)
.LBB46_115:                             # %for.cond460
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB46_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB46_115 Depth=2
	movl	$0, -4(%rbp)
.LBB46_117:                             # %for.cond463
                                        #   Parent Loop BB46_1 Depth=1
                                        #     Parent Loop BB46_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB46_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB46_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB46_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB46_121
.LBB46_120:                             # %if.else482
                                        #   in Loop: Header=BB46_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB46_121:                             # %if.end497
                                        #   in Loop: Header=BB46_117 Depth=3
	jmp	.LBB46_122
.LBB46_122:                             # %for.inc498
                                        #   in Loop: Header=BB46_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_117
.LBB46_123:                             # %for.end500
                                        #   in Loop: Header=BB46_115 Depth=2
	jmp	.LBB46_124
.LBB46_124:                             # %for.inc501
                                        #   in Loop: Header=BB46_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_115
.LBB46_125:                             # %for.end503
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -8(%rbp)
.LBB46_126:                             # %for.cond504
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB46_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB46_126 Depth=2
	movl	$0, -4(%rbp)
.LBB46_128:                             # %for.cond507
                                        #   Parent Loop BB46_1 Depth=1
                                        #     Parent Loop BB46_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB46_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB46_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB46_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB46_132
.LBB46_131:                             # %if.else526
                                        #   in Loop: Header=BB46_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB46_132:                             # %if.end541
                                        #   in Loop: Header=BB46_128 Depth=3
	jmp	.LBB46_133
.LBB46_133:                             # %for.inc542
                                        #   in Loop: Header=BB46_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_128
.LBB46_134:                             # %for.end544
                                        #   in Loop: Header=BB46_126 Depth=2
	jmp	.LBB46_135
.LBB46_135:                             # %for.inc545
                                        #   in Loop: Header=BB46_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_126
.LBB46_136:                             # %for.end547
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -8(%rbp)
.LBB46_137:                             # %for.cond548
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB46_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB46_137 Depth=2
	movl	$0, -4(%rbp)
.LBB46_139:                             # %for.cond551
                                        #   Parent Loop BB46_1 Depth=1
                                        #     Parent Loop BB46_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB46_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB46_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB46_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB46_143
.LBB46_142:                             # %if.else570
                                        #   in Loop: Header=BB46_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB46_143:                             # %if.end585
                                        #   in Loop: Header=BB46_139 Depth=3
	jmp	.LBB46_144
.LBB46_144:                             # %for.inc586
                                        #   in Loop: Header=BB46_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_139
.LBB46_145:                             # %for.end588
                                        #   in Loop: Header=BB46_137 Depth=2
	jmp	.LBB46_146
.LBB46_146:                             # %for.inc589
                                        #   in Loop: Header=BB46_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_137
.LBB46_147:                             # %for.end591
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -8(%rbp)
.LBB46_148:                             # %for.cond592
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB46_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB46_148 Depth=2
	movl	$0, -4(%rbp)
.LBB46_150:                             # %for.cond595
                                        #   Parent Loop BB46_1 Depth=1
                                        #     Parent Loop BB46_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB46_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB46_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB46_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB46_154
.LBB46_153:                             # %if.else614
                                        #   in Loop: Header=BB46_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB46_154:                             # %if.end629
                                        #   in Loop: Header=BB46_150 Depth=3
	jmp	.LBB46_155
.LBB46_155:                             # %for.inc630
                                        #   in Loop: Header=BB46_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_150
.LBB46_156:                             # %for.end632
                                        #   in Loop: Header=BB46_148 Depth=2
	jmp	.LBB46_157
.LBB46_157:                             # %for.inc633
                                        #   in Loop: Header=BB46_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_148
.LBB46_158:                             # %for.end635
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -8(%rbp)
.LBB46_159:                             # %for.cond636
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB46_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB46_159 Depth=2
	movl	$0, -4(%rbp)
.LBB46_161:                             # %for.cond639
                                        #   Parent Loop BB46_1 Depth=1
                                        #     Parent Loop BB46_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB46_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB46_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB46_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB46_165
.LBB46_164:                             # %if.else658
                                        #   in Loop: Header=BB46_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB46_165:                             # %if.end673
                                        #   in Loop: Header=BB46_161 Depth=3
	jmp	.LBB46_166
.LBB46_166:                             # %for.inc674
                                        #   in Loop: Header=BB46_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_161
.LBB46_167:                             # %for.end676
                                        #   in Loop: Header=BB46_159 Depth=2
	jmp	.LBB46_168
.LBB46_168:                             # %for.inc677
                                        #   in Loop: Header=BB46_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_159
.LBB46_169:                             # %for.end679
                                        #   in Loop: Header=BB46_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB46_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB46_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB46_171:                             # %if.end682
                                        #   in Loop: Header=BB46_1 Depth=1
	jmp	.LBB46_172
.LBB46_172:                             # %for.inc683
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_1
.LBB46_173:                             # %for.end685
	cmpl	$644199853, -48(%rbp)   # imm = 0x2665B5AD
	jne	.LBB46_175
.LBB46_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_174
.Lfunc_end46:
	.size	GetCtxModelNumber.39, .Lfunc_end46-GetCtxModelNumber.39
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.40
.LCPI47_0:
	.quad	4611686018427387904     # double 2
.LCPI47_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.40
	.p2align	4, 0x90
	.type	create_context_memory.40,@function
create_context_memory.40:               # @create_context_memory.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2116484709, -20(%rbp)  # imm = 0x7E26FE65
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB47_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB47_3
.LBB47_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB47_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB47_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB47_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB47_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB47_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB47_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB47_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB47_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB47_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB47_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB47_11:                              # %if.end10
                                        #   in Loop: Header=BB47_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB47_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB47_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB47_13:                              # %if.end16
                                        #   in Loop: Header=BB47_8 Depth=1
	movl	$0, -8(%rbp)
.LBB47_14:                              # %for.cond17
                                        #   Parent Loop BB47_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB47_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB47_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB47_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB47_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB47_17:                              # %if.end28
                                        #   in Loop: Header=BB47_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB47_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB47_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB47_19:                              # %if.end39
                                        #   in Loop: Header=BB47_14 Depth=2
	jmp	.LBB47_20
.LBB47_20:                              # %for.inc
                                        #   in Loop: Header=BB47_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_14
.LBB47_21:                              # %for.end
                                        #   in Loop: Header=BB47_8 Depth=1
	jmp	.LBB47_22
.LBB47_22:                              # %for.inc40
                                        #   in Loop: Header=BB47_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_8
.LBB47_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB47_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_26 Depth 2
                                        #       Child Loop BB47_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB47_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB47_24 Depth=1
	movl	$0, -8(%rbp)
.LBB47_26:                              # %for.cond47
                                        #   Parent Loop BB47_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB47_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB47_26 Depth=2
	movl	$0, -12(%rbp)
.LBB47_28:                              # %for.cond51
                                        #   Parent Loop BB47_24 Depth=1
                                        #     Parent Loop BB47_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB47_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB47_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB47_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_28
.LBB47_31:                              # %for.end63
                                        #   in Loop: Header=BB47_26 Depth=2
	jmp	.LBB47_32
.LBB47_32:                              # %for.inc64
                                        #   in Loop: Header=BB47_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_26
.LBB47_33:                              # %for.end66
                                        #   in Loop: Header=BB47_24 Depth=1
	jmp	.LBB47_34
.LBB47_34:                              # %for.inc67
                                        #   in Loop: Header=BB47_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_24
.LBB47_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB47_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB47_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB47_36 Depth=1
	vmovsd	.LCPI47_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI47_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI47_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB47_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_36
.LBB47_39:                              # %for.end98
	cmpl	$2116484709, -20(%rbp)  # imm = 0x7E26FE65
	jne	.LBB47_41
.LBB47_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_40
.Lfunc_end47:
	.size	create_context_memory.40, .Lfunc_end47-create_context_memory.40
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.41       # -- Begin function store_contexts.41
	.p2align	4, 0x90
	.type	store_contexts.41,@function
store_contexts.41:                      # @store_contexts.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1177358905, -16(%rbp)  # imm = 0x462D1239
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -12(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB48_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-12(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB48_3
.LBB48_2:                               # %if.else
	jmp	.LBB48_3
.LBB48_3:                               # %if.end
	cmpl	$1177358905, -16(%rbp)  # imm = 0x462D1239
	jne	.LBB48_5
.LBB48_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_4
.Lfunc_end48:
	.size	store_contexts.41, .Lfunc_end48-store_contexts.41
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.42       # -- Begin function store_contexts.42
	.p2align	4, 0x90
	.type	store_contexts.42,@function
store_contexts.42:                      # @store_contexts.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$110753333, -16(%rbp)   # imm = 0x699F635
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB49_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB49_3
.LBB49_2:                               # %if.else
	jmp	.LBB49_3
.LBB49_3:                               # %if.end
	cmpl	$110753333, -16(%rbp)   # imm = 0x699F635
	jne	.LBB49_5
.LBB49_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_4
.Lfunc_end49:
	.size	store_contexts.42, .Lfunc_end49-store_contexts.42
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.43 # -- Begin function update_field_frame_contexts.43
	.p2align	4, 0x90
	.type	update_field_frame_contexts.43,@function
update_field_frame_contexts.43:         # @update_field_frame_contexts.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$57515582, -16(%rbp)    # imm = 0x36D9E3E
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB50_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB50_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB50_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB50_2 Depth=1
	movl	$0, -4(%rbp)
.LBB50_4:                               # %for.cond1
                                        #   Parent Loop BB50_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB50_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB50_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB50_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_4
.LBB50_7:                               # %for.end
                                        #   in Loop: Header=BB50_2 Depth=1
	jmp	.LBB50_8
.LBB50_8:                               # %for.inc23
                                        #   in Loop: Header=BB50_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_2
.LBB50_9:                               # %for.end25
	jmp	.LBB50_19
.LBB50_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB50_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB50_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB50_11 Depth=1
	movl	$0, -4(%rbp)
.LBB50_13:                              # %for.cond29
                                        #   Parent Loop BB50_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB50_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB50_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_13
.LBB50_16:                              # %for.end56
                                        #   in Loop: Header=BB50_11 Depth=1
	jmp	.LBB50_17
.LBB50_17:                              # %for.inc57
                                        #   in Loop: Header=BB50_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_11
.LBB50_18:                              # %for.end59
	jmp	.LBB50_19
.LBB50_19:                              # %if.end
	cmpl	$57515582, -16(%rbp)    # imm = 0x36D9E3E
	jne	.LBB50_21
.LBB50_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_20
.Lfunc_end50:
	.size	update_field_frame_contexts.43, .Lfunc_end50-update_field_frame_contexts.43
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.44
.LCPI51_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.44
	.p2align	4, 0x90
	.type	GetCtxModelNumber.44,@function
GetCtxModelNumber.44:                   # @GetCtxModelNumber.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$751579414, -44(%rbp)   # imm = 0x2CCC3116
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB51_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_3 Depth 2
                                        #       Child Loop BB51_5 Depth 3
                                        #     Child Loop BB51_14 Depth 2
                                        #       Child Loop BB51_16 Depth 3
                                        #     Child Loop BB51_25 Depth 2
                                        #       Child Loop BB51_27 Depth 3
                                        #     Child Loop BB51_36 Depth 2
                                        #       Child Loop BB51_38 Depth 3
                                        #     Child Loop BB51_47 Depth 2
                                        #     Child Loop BB51_54 Depth 2
                                        #     Child Loop BB51_61 Depth 2
                                        #     Child Loop BB51_68 Depth 2
                                        #     Child Loop BB51_75 Depth 2
                                        #     Child Loop BB51_82 Depth 2
                                        #       Child Loop BB51_84 Depth 3
                                        #     Child Loop BB51_93 Depth 2
                                        #       Child Loop BB51_95 Depth 3
                                        #     Child Loop BB51_104 Depth 2
                                        #       Child Loop BB51_106 Depth 3
                                        #     Child Loop BB51_115 Depth 2
                                        #       Child Loop BB51_117 Depth 3
                                        #     Child Loop BB51_126 Depth 2
                                        #       Child Loop BB51_128 Depth 3
                                        #     Child Loop BB51_137 Depth 2
                                        #       Child Loop BB51_139 Depth 3
                                        #     Child Loop BB51_148 Depth 2
                                        #       Child Loop BB51_150 Depth 3
                                        #     Child Loop BB51_159 Depth 2
                                        #       Child Loop BB51_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB51_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB51_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB51_3:                               # %for.cond2
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB51_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	$0, -4(%rbp)
.LBB51_5:                               # %for.cond5
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB51_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB51_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB51_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_9
.LBB51_8:                               # %if.else
                                        #   in Loop: Header=BB51_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_9:                               # %if.end
                                        #   in Loop: Header=BB51_5 Depth=3
	jmp	.LBB51_10
.LBB51_10:                              # %for.inc
                                        #   in Loop: Header=BB51_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_5
.LBB51_11:                              # %for.end
                                        #   in Loop: Header=BB51_3 Depth=2
	jmp	.LBB51_12
.LBB51_12:                              # %for.inc33
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_3
.LBB51_13:                              # %for.end35
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_14:                              # %for.cond36
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB51_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB51_14 Depth=2
	movl	$0, -4(%rbp)
.LBB51_16:                              # %for.cond39
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB51_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB51_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB51_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_20
.LBB51_19:                              # %if.else58
                                        #   in Loop: Header=BB51_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_20:                              # %if.end73
                                        #   in Loop: Header=BB51_16 Depth=3
	jmp	.LBB51_21
.LBB51_21:                              # %for.inc74
                                        #   in Loop: Header=BB51_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_16
.LBB51_22:                              # %for.end76
                                        #   in Loop: Header=BB51_14 Depth=2
	jmp	.LBB51_23
.LBB51_23:                              # %for.inc77
                                        #   in Loop: Header=BB51_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_14
.LBB51_24:                              # %for.end79
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_25:                              # %for.cond80
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB51_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB51_25 Depth=2
	movl	$0, -4(%rbp)
.LBB51_27:                              # %for.cond83
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB51_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB51_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB51_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_31
.LBB51_30:                              # %if.else102
                                        #   in Loop: Header=BB51_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_31:                              # %if.end117
                                        #   in Loop: Header=BB51_27 Depth=3
	jmp	.LBB51_32
.LBB51_32:                              # %for.inc118
                                        #   in Loop: Header=BB51_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_27
.LBB51_33:                              # %for.end120
                                        #   in Loop: Header=BB51_25 Depth=2
	jmp	.LBB51_34
.LBB51_34:                              # %for.inc121
                                        #   in Loop: Header=BB51_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_25
.LBB51_35:                              # %for.end123
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_36:                              # %for.cond124
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB51_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB51_36 Depth=2
	movl	$0, -4(%rbp)
.LBB51_38:                              # %for.cond127
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB51_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB51_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB51_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_42
.LBB51_41:                              # %if.else146
                                        #   in Loop: Header=BB51_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_42:                              # %if.end161
                                        #   in Loop: Header=BB51_38 Depth=3
	jmp	.LBB51_43
.LBB51_43:                              # %for.inc162
                                        #   in Loop: Header=BB51_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_38
.LBB51_44:                              # %for.end164
                                        #   in Loop: Header=BB51_36 Depth=2
	jmp	.LBB51_45
.LBB51_45:                              # %for.inc165
                                        #   in Loop: Header=BB51_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_36
.LBB51_46:                              # %for.end167
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -4(%rbp)
.LBB51_47:                              # %for.cond168
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB51_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB51_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB51_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_51
.LBB51_50:                              # %if.else184
                                        #   in Loop: Header=BB51_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_51:                              # %if.end196
                                        #   in Loop: Header=BB51_47 Depth=2
	jmp	.LBB51_52
.LBB51_52:                              # %for.inc197
                                        #   in Loop: Header=BB51_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_47
.LBB51_53:                              # %for.end199
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -4(%rbp)
.LBB51_54:                              # %for.cond200
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB51_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB51_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB51_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_58
.LBB51_57:                              # %if.else216
                                        #   in Loop: Header=BB51_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_58:                              # %if.end228
                                        #   in Loop: Header=BB51_54 Depth=2
	jmp	.LBB51_59
.LBB51_59:                              # %for.inc229
                                        #   in Loop: Header=BB51_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_54
.LBB51_60:                              # %for.end231
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -4(%rbp)
.LBB51_61:                              # %for.cond232
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB51_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB51_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB51_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_65
.LBB51_64:                              # %if.else248
                                        #   in Loop: Header=BB51_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_65:                              # %if.end260
                                        #   in Loop: Header=BB51_61 Depth=2
	jmp	.LBB51_66
.LBB51_66:                              # %for.inc261
                                        #   in Loop: Header=BB51_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_61
.LBB51_67:                              # %for.end263
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -4(%rbp)
.LBB51_68:                              # %for.cond264
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB51_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB51_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB51_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_72
.LBB51_71:                              # %if.else280
                                        #   in Loop: Header=BB51_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_72:                              # %if.end292
                                        #   in Loop: Header=BB51_68 Depth=2
	jmp	.LBB51_73
.LBB51_73:                              # %for.inc293
                                        #   in Loop: Header=BB51_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_68
.LBB51_74:                              # %for.end295
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -4(%rbp)
.LBB51_75:                              # %for.cond296
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB51_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB51_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB51_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_79
.LBB51_78:                              # %if.else312
                                        #   in Loop: Header=BB51_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_79:                              # %if.end324
                                        #   in Loop: Header=BB51_75 Depth=2
	jmp	.LBB51_80
.LBB51_80:                              # %for.inc325
                                        #   in Loop: Header=BB51_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_75
.LBB51_81:                              # %for.end327
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_82:                              # %for.cond328
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB51_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB51_82 Depth=2
	movl	$0, -4(%rbp)
.LBB51_84:                              # %for.cond331
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB51_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB51_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB51_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_88
.LBB51_87:                              # %if.else350
                                        #   in Loop: Header=BB51_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_88:                              # %if.end365
                                        #   in Loop: Header=BB51_84 Depth=3
	jmp	.LBB51_89
.LBB51_89:                              # %for.inc366
                                        #   in Loop: Header=BB51_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_84
.LBB51_90:                              # %for.end368
                                        #   in Loop: Header=BB51_82 Depth=2
	jmp	.LBB51_91
.LBB51_91:                              # %for.inc369
                                        #   in Loop: Header=BB51_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_82
.LBB51_92:                              # %for.end371
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_93:                              # %for.cond372
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB51_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB51_93 Depth=2
	movl	$0, -4(%rbp)
.LBB51_95:                              # %for.cond375
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB51_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB51_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB51_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_99
.LBB51_98:                              # %if.else394
                                        #   in Loop: Header=BB51_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_99:                              # %if.end409
                                        #   in Loop: Header=BB51_95 Depth=3
	jmp	.LBB51_100
.LBB51_100:                             # %for.inc410
                                        #   in Loop: Header=BB51_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_95
.LBB51_101:                             # %for.end412
                                        #   in Loop: Header=BB51_93 Depth=2
	jmp	.LBB51_102
.LBB51_102:                             # %for.inc413
                                        #   in Loop: Header=BB51_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_93
.LBB51_103:                             # %for.end415
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_104:                             # %for.cond416
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB51_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB51_104 Depth=2
	movl	$0, -4(%rbp)
.LBB51_106:                             # %for.cond419
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB51_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB51_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB51_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_110
.LBB51_109:                             # %if.else438
                                        #   in Loop: Header=BB51_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_110:                             # %if.end453
                                        #   in Loop: Header=BB51_106 Depth=3
	jmp	.LBB51_111
.LBB51_111:                             # %for.inc454
                                        #   in Loop: Header=BB51_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_106
.LBB51_112:                             # %for.end456
                                        #   in Loop: Header=BB51_104 Depth=2
	jmp	.LBB51_113
.LBB51_113:                             # %for.inc457
                                        #   in Loop: Header=BB51_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_104
.LBB51_114:                             # %for.end459
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_115:                             # %for.cond460
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB51_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB51_115 Depth=2
	movl	$0, -4(%rbp)
.LBB51_117:                             # %for.cond463
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB51_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB51_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB51_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_121
.LBB51_120:                             # %if.else482
                                        #   in Loop: Header=BB51_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_121:                             # %if.end497
                                        #   in Loop: Header=BB51_117 Depth=3
	jmp	.LBB51_122
.LBB51_122:                             # %for.inc498
                                        #   in Loop: Header=BB51_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_117
.LBB51_123:                             # %for.end500
                                        #   in Loop: Header=BB51_115 Depth=2
	jmp	.LBB51_124
.LBB51_124:                             # %for.inc501
                                        #   in Loop: Header=BB51_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_115
.LBB51_125:                             # %for.end503
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_126:                             # %for.cond504
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB51_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB51_126 Depth=2
	movl	$0, -4(%rbp)
.LBB51_128:                             # %for.cond507
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB51_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB51_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB51_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_132
.LBB51_131:                             # %if.else526
                                        #   in Loop: Header=BB51_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_132:                             # %if.end541
                                        #   in Loop: Header=BB51_128 Depth=3
	jmp	.LBB51_133
.LBB51_133:                             # %for.inc542
                                        #   in Loop: Header=BB51_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_128
.LBB51_134:                             # %for.end544
                                        #   in Loop: Header=BB51_126 Depth=2
	jmp	.LBB51_135
.LBB51_135:                             # %for.inc545
                                        #   in Loop: Header=BB51_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_126
.LBB51_136:                             # %for.end547
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_137:                             # %for.cond548
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB51_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB51_137 Depth=2
	movl	$0, -4(%rbp)
.LBB51_139:                             # %for.cond551
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB51_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB51_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB51_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_143
.LBB51_142:                             # %if.else570
                                        #   in Loop: Header=BB51_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_143:                             # %if.end585
                                        #   in Loop: Header=BB51_139 Depth=3
	jmp	.LBB51_144
.LBB51_144:                             # %for.inc586
                                        #   in Loop: Header=BB51_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_139
.LBB51_145:                             # %for.end588
                                        #   in Loop: Header=BB51_137 Depth=2
	jmp	.LBB51_146
.LBB51_146:                             # %for.inc589
                                        #   in Loop: Header=BB51_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_137
.LBB51_147:                             # %for.end591
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_148:                             # %for.cond592
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB51_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB51_148 Depth=2
	movl	$0, -4(%rbp)
.LBB51_150:                             # %for.cond595
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB51_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB51_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB51_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_154
.LBB51_153:                             # %if.else614
                                        #   in Loop: Header=BB51_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_154:                             # %if.end629
                                        #   in Loop: Header=BB51_150 Depth=3
	jmp	.LBB51_155
.LBB51_155:                             # %for.inc630
                                        #   in Loop: Header=BB51_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_150
.LBB51_156:                             # %for.end632
                                        #   in Loop: Header=BB51_148 Depth=2
	jmp	.LBB51_157
.LBB51_157:                             # %for.inc633
                                        #   in Loop: Header=BB51_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_148
.LBB51_158:                             # %for.end635
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_159:                             # %for.cond636
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB51_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB51_159 Depth=2
	movl	$0, -4(%rbp)
.LBB51_161:                             # %for.cond639
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB51_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB51_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB51_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_165
.LBB51_164:                             # %if.else658
                                        #   in Loop: Header=BB51_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_165:                             # %if.end673
                                        #   in Loop: Header=BB51_161 Depth=3
	jmp	.LBB51_166
.LBB51_166:                             # %for.inc674
                                        #   in Loop: Header=BB51_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_161
.LBB51_167:                             # %for.end676
                                        #   in Loop: Header=BB51_159 Depth=2
	jmp	.LBB51_168
.LBB51_168:                             # %for.inc677
                                        #   in Loop: Header=BB51_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_159
.LBB51_169:                             # %for.end679
                                        #   in Loop: Header=BB51_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB51_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB51_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB51_171:                             # %if.end682
                                        #   in Loop: Header=BB51_1 Depth=1
	jmp	.LBB51_172
.LBB51_172:                             # %for.inc683
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_1
.LBB51_173:                             # %for.end685
	cmpl	$751579414, -44(%rbp)   # imm = 0x2CCC3116
	jne	.LBB51_175
.LBB51_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_174
.Lfunc_end51:
	.size	GetCtxModelNumber.44, .Lfunc_end51-GetCtxModelNumber.44
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.45 # -- Begin function update_field_frame_contexts.45
	.p2align	4, 0x90
	.type	update_field_frame_contexts.45,@function
update_field_frame_contexts.45:         # @update_field_frame_contexts.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2086011296, -16(%rbp)  # imm = 0x7C5601A0
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB52_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB52_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB52_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB52_2 Depth=1
	movl	$0, -8(%rbp)
.LBB52_4:                               # %for.cond1
                                        #   Parent Loop BB52_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB52_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB52_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB52_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_4
.LBB52_7:                               # %for.end
                                        #   in Loop: Header=BB52_2 Depth=1
	jmp	.LBB52_8
.LBB52_8:                               # %for.inc23
                                        #   in Loop: Header=BB52_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_2
.LBB52_9:                               # %for.end25
	jmp	.LBB52_19
.LBB52_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB52_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB52_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB52_11 Depth=1
	movl	$0, -8(%rbp)
.LBB52_13:                              # %for.cond29
                                        #   Parent Loop BB52_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB52_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB52_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_13
.LBB52_16:                              # %for.end56
                                        #   in Loop: Header=BB52_11 Depth=1
	jmp	.LBB52_17
.LBB52_17:                              # %for.inc57
                                        #   in Loop: Header=BB52_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_11
.LBB52_18:                              # %for.end59
	jmp	.LBB52_19
.LBB52_19:                              # %if.end
	cmpl	$2086011296, -16(%rbp)  # imm = 0x7C5601A0
	jne	.LBB52_21
.LBB52_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_20
.Lfunc_end52:
	.size	update_field_frame_contexts.45, .Lfunc_end52-update_field_frame_contexts.45
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.46
.LCPI53_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.46
	.p2align	4, 0x90
	.type	GetCtxModelNumber.46,@function
GetCtxModelNumber.46:                   # @GetCtxModelNumber.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI53_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1193802749, -48(%rbp)  # imm = 0x4727FBFD
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB53_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_3 Depth 2
                                        #       Child Loop BB53_5 Depth 3
                                        #     Child Loop BB53_14 Depth 2
                                        #       Child Loop BB53_16 Depth 3
                                        #     Child Loop BB53_25 Depth 2
                                        #       Child Loop BB53_27 Depth 3
                                        #     Child Loop BB53_36 Depth 2
                                        #       Child Loop BB53_38 Depth 3
                                        #     Child Loop BB53_47 Depth 2
                                        #     Child Loop BB53_54 Depth 2
                                        #     Child Loop BB53_61 Depth 2
                                        #     Child Loop BB53_68 Depth 2
                                        #     Child Loop BB53_75 Depth 2
                                        #     Child Loop BB53_82 Depth 2
                                        #       Child Loop BB53_84 Depth 3
                                        #     Child Loop BB53_93 Depth 2
                                        #       Child Loop BB53_95 Depth 3
                                        #     Child Loop BB53_104 Depth 2
                                        #       Child Loop BB53_106 Depth 3
                                        #     Child Loop BB53_115 Depth 2
                                        #       Child Loop BB53_117 Depth 3
                                        #     Child Loop BB53_126 Depth 2
                                        #       Child Loop BB53_128 Depth 3
                                        #     Child Loop BB53_137 Depth 2
                                        #       Child Loop BB53_139 Depth 3
                                        #     Child Loop BB53_148 Depth 2
                                        #       Child Loop BB53_150 Depth 3
                                        #     Child Loop BB53_159 Depth 2
                                        #       Child Loop BB53_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB53_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB53_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB53_3:                               # %for.cond2
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB53_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB53_3 Depth=2
	movl	$0, -4(%rbp)
.LBB53_5:                               # %for.cond5
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB53_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB53_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB53_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_9
.LBB53_8:                               # %if.else
                                        #   in Loop: Header=BB53_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_9:                               # %if.end
                                        #   in Loop: Header=BB53_5 Depth=3
	jmp	.LBB53_10
.LBB53_10:                              # %for.inc
                                        #   in Loop: Header=BB53_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_5
.LBB53_11:                              # %for.end
                                        #   in Loop: Header=BB53_3 Depth=2
	jmp	.LBB53_12
.LBB53_12:                              # %for.inc33
                                        #   in Loop: Header=BB53_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_3
.LBB53_13:                              # %for.end35
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_14:                              # %for.cond36
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB53_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB53_14 Depth=2
	movl	$0, -4(%rbp)
.LBB53_16:                              # %for.cond39
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB53_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB53_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB53_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_20
.LBB53_19:                              # %if.else58
                                        #   in Loop: Header=BB53_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_20:                              # %if.end73
                                        #   in Loop: Header=BB53_16 Depth=3
	jmp	.LBB53_21
.LBB53_21:                              # %for.inc74
                                        #   in Loop: Header=BB53_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_16
.LBB53_22:                              # %for.end76
                                        #   in Loop: Header=BB53_14 Depth=2
	jmp	.LBB53_23
.LBB53_23:                              # %for.inc77
                                        #   in Loop: Header=BB53_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_14
.LBB53_24:                              # %for.end79
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_25:                              # %for.cond80
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB53_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB53_25 Depth=2
	movl	$0, -4(%rbp)
.LBB53_27:                              # %for.cond83
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB53_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB53_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB53_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_31
.LBB53_30:                              # %if.else102
                                        #   in Loop: Header=BB53_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_31:                              # %if.end117
                                        #   in Loop: Header=BB53_27 Depth=3
	jmp	.LBB53_32
.LBB53_32:                              # %for.inc118
                                        #   in Loop: Header=BB53_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_27
.LBB53_33:                              # %for.end120
                                        #   in Loop: Header=BB53_25 Depth=2
	jmp	.LBB53_34
.LBB53_34:                              # %for.inc121
                                        #   in Loop: Header=BB53_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_25
.LBB53_35:                              # %for.end123
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_36:                              # %for.cond124
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB53_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB53_36 Depth=2
	movl	$0, -4(%rbp)
.LBB53_38:                              # %for.cond127
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB53_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB53_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB53_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_42
.LBB53_41:                              # %if.else146
                                        #   in Loop: Header=BB53_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_42:                              # %if.end161
                                        #   in Loop: Header=BB53_38 Depth=3
	jmp	.LBB53_43
.LBB53_43:                              # %for.inc162
                                        #   in Loop: Header=BB53_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_38
.LBB53_44:                              # %for.end164
                                        #   in Loop: Header=BB53_36 Depth=2
	jmp	.LBB53_45
.LBB53_45:                              # %for.inc165
                                        #   in Loop: Header=BB53_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_36
.LBB53_46:                              # %for.end167
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -4(%rbp)
.LBB53_47:                              # %for.cond168
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB53_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB53_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_51
.LBB53_50:                              # %if.else184
                                        #   in Loop: Header=BB53_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_51:                              # %if.end196
                                        #   in Loop: Header=BB53_47 Depth=2
	jmp	.LBB53_52
.LBB53_52:                              # %for.inc197
                                        #   in Loop: Header=BB53_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_47
.LBB53_53:                              # %for.end199
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -4(%rbp)
.LBB53_54:                              # %for.cond200
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB53_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB53_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_58
.LBB53_57:                              # %if.else216
                                        #   in Loop: Header=BB53_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_58:                              # %if.end228
                                        #   in Loop: Header=BB53_54 Depth=2
	jmp	.LBB53_59
.LBB53_59:                              # %for.inc229
                                        #   in Loop: Header=BB53_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_54
.LBB53_60:                              # %for.end231
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -4(%rbp)
.LBB53_61:                              # %for.cond232
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB53_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB53_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB53_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_65
.LBB53_64:                              # %if.else248
                                        #   in Loop: Header=BB53_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_65:                              # %if.end260
                                        #   in Loop: Header=BB53_61 Depth=2
	jmp	.LBB53_66
.LBB53_66:                              # %for.inc261
                                        #   in Loop: Header=BB53_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_61
.LBB53_67:                              # %for.end263
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -4(%rbp)
.LBB53_68:                              # %for.cond264
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB53_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB53_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB53_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_72
.LBB53_71:                              # %if.else280
                                        #   in Loop: Header=BB53_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_72:                              # %if.end292
                                        #   in Loop: Header=BB53_68 Depth=2
	jmp	.LBB53_73
.LBB53_73:                              # %for.inc293
                                        #   in Loop: Header=BB53_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_68
.LBB53_74:                              # %for.end295
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -4(%rbp)
.LBB53_75:                              # %for.cond296
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB53_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB53_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_79
.LBB53_78:                              # %if.else312
                                        #   in Loop: Header=BB53_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_79:                              # %if.end324
                                        #   in Loop: Header=BB53_75 Depth=2
	jmp	.LBB53_80
.LBB53_80:                              # %for.inc325
                                        #   in Loop: Header=BB53_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_75
.LBB53_81:                              # %for.end327
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_82:                              # %for.cond328
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB53_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB53_82 Depth=2
	movl	$0, -4(%rbp)
.LBB53_84:                              # %for.cond331
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB53_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB53_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB53_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_88
.LBB53_87:                              # %if.else350
                                        #   in Loop: Header=BB53_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_88:                              # %if.end365
                                        #   in Loop: Header=BB53_84 Depth=3
	jmp	.LBB53_89
.LBB53_89:                              # %for.inc366
                                        #   in Loop: Header=BB53_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_84
.LBB53_90:                              # %for.end368
                                        #   in Loop: Header=BB53_82 Depth=2
	jmp	.LBB53_91
.LBB53_91:                              # %for.inc369
                                        #   in Loop: Header=BB53_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_82
.LBB53_92:                              # %for.end371
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_93:                              # %for.cond372
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB53_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB53_93 Depth=2
	movl	$0, -4(%rbp)
.LBB53_95:                              # %for.cond375
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB53_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB53_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB53_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_99
.LBB53_98:                              # %if.else394
                                        #   in Loop: Header=BB53_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_99:                              # %if.end409
                                        #   in Loop: Header=BB53_95 Depth=3
	jmp	.LBB53_100
.LBB53_100:                             # %for.inc410
                                        #   in Loop: Header=BB53_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_95
.LBB53_101:                             # %for.end412
                                        #   in Loop: Header=BB53_93 Depth=2
	jmp	.LBB53_102
.LBB53_102:                             # %for.inc413
                                        #   in Loop: Header=BB53_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_93
.LBB53_103:                             # %for.end415
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_104:                             # %for.cond416
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB53_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB53_104 Depth=2
	movl	$0, -4(%rbp)
.LBB53_106:                             # %for.cond419
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB53_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB53_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB53_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_110
.LBB53_109:                             # %if.else438
                                        #   in Loop: Header=BB53_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_110:                             # %if.end453
                                        #   in Loop: Header=BB53_106 Depth=3
	jmp	.LBB53_111
.LBB53_111:                             # %for.inc454
                                        #   in Loop: Header=BB53_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_106
.LBB53_112:                             # %for.end456
                                        #   in Loop: Header=BB53_104 Depth=2
	jmp	.LBB53_113
.LBB53_113:                             # %for.inc457
                                        #   in Loop: Header=BB53_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_104
.LBB53_114:                             # %for.end459
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_115:                             # %for.cond460
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB53_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB53_115 Depth=2
	movl	$0, -4(%rbp)
.LBB53_117:                             # %for.cond463
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB53_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB53_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB53_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_121
.LBB53_120:                             # %if.else482
                                        #   in Loop: Header=BB53_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_121:                             # %if.end497
                                        #   in Loop: Header=BB53_117 Depth=3
	jmp	.LBB53_122
.LBB53_122:                             # %for.inc498
                                        #   in Loop: Header=BB53_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_117
.LBB53_123:                             # %for.end500
                                        #   in Loop: Header=BB53_115 Depth=2
	jmp	.LBB53_124
.LBB53_124:                             # %for.inc501
                                        #   in Loop: Header=BB53_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_115
.LBB53_125:                             # %for.end503
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_126:                             # %for.cond504
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB53_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB53_126 Depth=2
	movl	$0, -4(%rbp)
.LBB53_128:                             # %for.cond507
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB53_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB53_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB53_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_132
.LBB53_131:                             # %if.else526
                                        #   in Loop: Header=BB53_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_132:                             # %if.end541
                                        #   in Loop: Header=BB53_128 Depth=3
	jmp	.LBB53_133
.LBB53_133:                             # %for.inc542
                                        #   in Loop: Header=BB53_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_128
.LBB53_134:                             # %for.end544
                                        #   in Loop: Header=BB53_126 Depth=2
	jmp	.LBB53_135
.LBB53_135:                             # %for.inc545
                                        #   in Loop: Header=BB53_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_126
.LBB53_136:                             # %for.end547
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_137:                             # %for.cond548
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB53_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB53_137 Depth=2
	movl	$0, -4(%rbp)
.LBB53_139:                             # %for.cond551
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB53_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB53_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB53_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_143
.LBB53_142:                             # %if.else570
                                        #   in Loop: Header=BB53_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_143:                             # %if.end585
                                        #   in Loop: Header=BB53_139 Depth=3
	jmp	.LBB53_144
.LBB53_144:                             # %for.inc586
                                        #   in Loop: Header=BB53_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_139
.LBB53_145:                             # %for.end588
                                        #   in Loop: Header=BB53_137 Depth=2
	jmp	.LBB53_146
.LBB53_146:                             # %for.inc589
                                        #   in Loop: Header=BB53_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_137
.LBB53_147:                             # %for.end591
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_148:                             # %for.cond592
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB53_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB53_148 Depth=2
	movl	$0, -4(%rbp)
.LBB53_150:                             # %for.cond595
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB53_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB53_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB53_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_154
.LBB53_153:                             # %if.else614
                                        #   in Loop: Header=BB53_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_154:                             # %if.end629
                                        #   in Loop: Header=BB53_150 Depth=3
	jmp	.LBB53_155
.LBB53_155:                             # %for.inc630
                                        #   in Loop: Header=BB53_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_150
.LBB53_156:                             # %for.end632
                                        #   in Loop: Header=BB53_148 Depth=2
	jmp	.LBB53_157
.LBB53_157:                             # %for.inc633
                                        #   in Loop: Header=BB53_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_148
.LBB53_158:                             # %for.end635
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_159:                             # %for.cond636
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB53_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB53_159 Depth=2
	movl	$0, -4(%rbp)
.LBB53_161:                             # %for.cond639
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB53_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB53_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB53_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_165
.LBB53_164:                             # %if.else658
                                        #   in Loop: Header=BB53_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_165:                             # %if.end673
                                        #   in Loop: Header=BB53_161 Depth=3
	jmp	.LBB53_166
.LBB53_166:                             # %for.inc674
                                        #   in Loop: Header=BB53_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_161
.LBB53_167:                             # %for.end676
                                        #   in Loop: Header=BB53_159 Depth=2
	jmp	.LBB53_168
.LBB53_168:                             # %for.inc677
                                        #   in Loop: Header=BB53_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_159
.LBB53_169:                             # %for.end679
                                        #   in Loop: Header=BB53_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB53_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB53_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB53_171:                             # %if.end682
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_172
.LBB53_172:                             # %for.inc683
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_1
.LBB53_173:                             # %for.end685
	cmpl	$1193802749, -48(%rbp)  # imm = 0x4727FBFD
	jne	.LBB53_175
.LBB53_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_174
.Lfunc_end53:
	.size	GetCtxModelNumber.46, .Lfunc_end53-GetCtxModelNumber.46
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.47        # -- Begin function init_contexts.47
	.p2align	4, 0x90
	.type	init_contexts.47,@function
init_contexts.47:                       # @init_contexts.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$559903420, -28(%rbp)   # imm = 0x215F72BC
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB54_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB54_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -4(%rbp)
.LBB54_3:                               # %for.cond2
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB54_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_7
.LBB54_6:                               # %if.else
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_7:                               # %if.end
                                        #   in Loop: Header=BB54_3 Depth=2
	jmp	.LBB54_8
.LBB54_8:                               # %for.inc
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_3
.LBB54_9:                               # %for.end
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_10
.LBB54_10:                              # %for.inc28
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_1
.LBB54_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB54_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB54_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB54_12 Depth=1
	movl	$0, -4(%rbp)
.LBB54_14:                              # %for.cond34
                                        #   Parent Loop BB54_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB54_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB54_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB54_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_18
.LBB54_17:                              # %if.else52
                                        #   in Loop: Header=BB54_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_18:                              # %if.end66
                                        #   in Loop: Header=BB54_14 Depth=2
	jmp	.LBB54_19
.LBB54_19:                              # %for.inc67
                                        #   in Loop: Header=BB54_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_14
.LBB54_20:                              # %for.end69
                                        #   in Loop: Header=BB54_12 Depth=1
	jmp	.LBB54_21
.LBB54_21:                              # %for.inc70
                                        #   in Loop: Header=BB54_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_12
.LBB54_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB54_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB54_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB54_23 Depth=1
	movl	$0, -4(%rbp)
.LBB54_25:                              # %for.cond76
                                        #   Parent Loop BB54_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB54_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB54_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB54_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_29
.LBB54_28:                              # %if.else94
                                        #   in Loop: Header=BB54_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_29:                              # %if.end108
                                        #   in Loop: Header=BB54_25 Depth=2
	jmp	.LBB54_30
.LBB54_30:                              # %for.inc109
                                        #   in Loop: Header=BB54_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_25
.LBB54_31:                              # %for.end111
                                        #   in Loop: Header=BB54_23 Depth=1
	jmp	.LBB54_32
.LBB54_32:                              # %for.inc112
                                        #   in Loop: Header=BB54_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_23
.LBB54_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB54_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB54_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB54_34 Depth=1
	movl	$0, -4(%rbp)
.LBB54_36:                              # %for.cond118
                                        #   Parent Loop BB54_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB54_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB54_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB54_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_40
.LBB54_39:                              # %if.else136
                                        #   in Loop: Header=BB54_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_40:                              # %if.end150
                                        #   in Loop: Header=BB54_36 Depth=2
	jmp	.LBB54_41
.LBB54_41:                              # %for.inc151
                                        #   in Loop: Header=BB54_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_36
.LBB54_42:                              # %for.end153
                                        #   in Loop: Header=BB54_34 Depth=1
	jmp	.LBB54_43
.LBB54_43:                              # %for.inc154
                                        #   in Loop: Header=BB54_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_34
.LBB54_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB54_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB54_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB54_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB54_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_49
.LBB54_48:                              # %if.else172
                                        #   in Loop: Header=BB54_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_49:                              # %if.end183
                                        #   in Loop: Header=BB54_45 Depth=1
	jmp	.LBB54_50
.LBB54_50:                              # %for.inc184
                                        #   in Loop: Header=BB54_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_45
.LBB54_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB54_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB54_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB54_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB54_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_56
.LBB54_55:                              # %if.else202
                                        #   in Loop: Header=BB54_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_56:                              # %if.end213
                                        #   in Loop: Header=BB54_52 Depth=1
	jmp	.LBB54_57
.LBB54_57:                              # %for.inc214
                                        #   in Loop: Header=BB54_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_52
.LBB54_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB54_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB54_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB54_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB54_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_63
.LBB54_62:                              # %if.else232
                                        #   in Loop: Header=BB54_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_63:                              # %if.end243
                                        #   in Loop: Header=BB54_59 Depth=1
	jmp	.LBB54_64
.LBB54_64:                              # %for.inc244
                                        #   in Loop: Header=BB54_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_59
.LBB54_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB54_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB54_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB54_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB54_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_70
.LBB54_69:                              # %if.else262
                                        #   in Loop: Header=BB54_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_70:                              # %if.end273
                                        #   in Loop: Header=BB54_66 Depth=1
	jmp	.LBB54_71
.LBB54_71:                              # %for.inc274
                                        #   in Loop: Header=BB54_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_66
.LBB54_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB54_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB54_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB54_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB54_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_77
.LBB54_76:                              # %if.else292
                                        #   in Loop: Header=BB54_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_77:                              # %if.end303
                                        #   in Loop: Header=BB54_73 Depth=1
	jmp	.LBB54_78
.LBB54_78:                              # %for.inc304
                                        #   in Loop: Header=BB54_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_73
.LBB54_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB54_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB54_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB54_80 Depth=1
	movl	$0, -4(%rbp)
.LBB54_82:                              # %for.cond310
                                        #   Parent Loop BB54_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB54_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB54_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB54_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_86
.LBB54_85:                              # %if.else328
                                        #   in Loop: Header=BB54_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_86:                              # %if.end342
                                        #   in Loop: Header=BB54_82 Depth=2
	jmp	.LBB54_87
.LBB54_87:                              # %for.inc343
                                        #   in Loop: Header=BB54_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_82
.LBB54_88:                              # %for.end345
                                        #   in Loop: Header=BB54_80 Depth=1
	jmp	.LBB54_89
.LBB54_89:                              # %for.inc346
                                        #   in Loop: Header=BB54_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_80
.LBB54_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB54_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB54_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB54_91 Depth=1
	movl	$0, -4(%rbp)
.LBB54_93:                              # %for.cond352
                                        #   Parent Loop BB54_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB54_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB54_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB54_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_97
.LBB54_96:                              # %if.else370
                                        #   in Loop: Header=BB54_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_97:                              # %if.end384
                                        #   in Loop: Header=BB54_93 Depth=2
	jmp	.LBB54_98
.LBB54_98:                              # %for.inc385
                                        #   in Loop: Header=BB54_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_93
.LBB54_99:                              # %for.end387
                                        #   in Loop: Header=BB54_91 Depth=1
	jmp	.LBB54_100
.LBB54_100:                             # %for.inc388
                                        #   in Loop: Header=BB54_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_91
.LBB54_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB54_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB54_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB54_102 Depth=1
	movl	$0, -4(%rbp)
.LBB54_104:                             # %for.cond394
                                        #   Parent Loop BB54_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB54_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB54_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB54_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_108
.LBB54_107:                             # %if.else412
                                        #   in Loop: Header=BB54_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_108:                             # %if.end426
                                        #   in Loop: Header=BB54_104 Depth=2
	jmp	.LBB54_109
.LBB54_109:                             # %for.inc427
                                        #   in Loop: Header=BB54_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_104
.LBB54_110:                             # %for.end429
                                        #   in Loop: Header=BB54_102 Depth=1
	jmp	.LBB54_111
.LBB54_111:                             # %for.inc430
                                        #   in Loop: Header=BB54_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_102
.LBB54_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB54_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB54_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB54_113 Depth=1
	movl	$0, -4(%rbp)
.LBB54_115:                             # %for.cond436
                                        #   Parent Loop BB54_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB54_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB54_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB54_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_119
.LBB54_118:                             # %if.else454
                                        #   in Loop: Header=BB54_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_119:                             # %if.end468
                                        #   in Loop: Header=BB54_115 Depth=2
	jmp	.LBB54_120
.LBB54_120:                             # %for.inc469
                                        #   in Loop: Header=BB54_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_115
.LBB54_121:                             # %for.end471
                                        #   in Loop: Header=BB54_113 Depth=1
	jmp	.LBB54_122
.LBB54_122:                             # %for.inc472
                                        #   in Loop: Header=BB54_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_113
.LBB54_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB54_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB54_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB54_124 Depth=1
	movl	$0, -4(%rbp)
.LBB54_126:                             # %for.cond478
                                        #   Parent Loop BB54_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB54_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB54_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB54_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_130
.LBB54_129:                             # %if.else496
                                        #   in Loop: Header=BB54_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_130:                             # %if.end510
                                        #   in Loop: Header=BB54_126 Depth=2
	jmp	.LBB54_131
.LBB54_131:                             # %for.inc511
                                        #   in Loop: Header=BB54_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_126
.LBB54_132:                             # %for.end513
                                        #   in Loop: Header=BB54_124 Depth=1
	jmp	.LBB54_133
.LBB54_133:                             # %for.inc514
                                        #   in Loop: Header=BB54_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_124
.LBB54_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB54_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB54_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB54_135 Depth=1
	movl	$0, -4(%rbp)
.LBB54_137:                             # %for.cond520
                                        #   Parent Loop BB54_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB54_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB54_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB54_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_141
.LBB54_140:                             # %if.else538
                                        #   in Loop: Header=BB54_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_141:                             # %if.end552
                                        #   in Loop: Header=BB54_137 Depth=2
	jmp	.LBB54_142
.LBB54_142:                             # %for.inc553
                                        #   in Loop: Header=BB54_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_137
.LBB54_143:                             # %for.end555
                                        #   in Loop: Header=BB54_135 Depth=1
	jmp	.LBB54_144
.LBB54_144:                             # %for.inc556
                                        #   in Loop: Header=BB54_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_135
.LBB54_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB54_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB54_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB54_146 Depth=1
	movl	$0, -4(%rbp)
.LBB54_148:                             # %for.cond562
                                        #   Parent Loop BB54_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB54_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB54_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB54_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_152
.LBB54_151:                             # %if.else580
                                        #   in Loop: Header=BB54_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_152:                             # %if.end594
                                        #   in Loop: Header=BB54_148 Depth=2
	jmp	.LBB54_153
.LBB54_153:                             # %for.inc595
                                        #   in Loop: Header=BB54_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_148
.LBB54_154:                             # %for.end597
                                        #   in Loop: Header=BB54_146 Depth=1
	jmp	.LBB54_155
.LBB54_155:                             # %for.inc598
                                        #   in Loop: Header=BB54_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_146
.LBB54_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB54_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB54_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB54_157 Depth=1
	movl	$0, -4(%rbp)
.LBB54_159:                             # %for.cond604
                                        #   Parent Loop BB54_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB54_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB54_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB54_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_163
.LBB54_162:                             # %if.else622
                                        #   in Loop: Header=BB54_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_163:                             # %if.end636
                                        #   in Loop: Header=BB54_159 Depth=2
	jmp	.LBB54_164
.LBB54_164:                             # %for.inc637
                                        #   in Loop: Header=BB54_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_159
.LBB54_165:                             # %for.end639
                                        #   in Loop: Header=BB54_157 Depth=1
	jmp	.LBB54_166
.LBB54_166:                             # %for.inc640
                                        #   in Loop: Header=BB54_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_157
.LBB54_167:                             # %for.end642
	cmpl	$559903420, -28(%rbp)   # imm = 0x215F72BC
	jne	.LBB54_169
.LBB54_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_168
.Lfunc_end54:
	.size	init_contexts.47, .Lfunc_end54-init_contexts.47
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.48
.LCPI55_0:
	.quad	4611686018427387904     # double 2
.LCPI55_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.48
	.p2align	4, 0x90
	.type	create_context_memory.48,@function
create_context_memory.48:               # @create_context_memory.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$266675575, -20(%rbp)   # imm = 0xFE52577
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB55_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB55_3
.LBB55_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB55_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB55_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB55_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB55_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB55_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB55_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB55_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB55_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB55_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB55_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB55_11:                              # %if.end10
                                        #   in Loop: Header=BB55_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB55_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB55_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB55_13:                              # %if.end16
                                        #   in Loop: Header=BB55_8 Depth=1
	movl	$0, -8(%rbp)
.LBB55_14:                              # %for.cond17
                                        #   Parent Loop BB55_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB55_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB55_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB55_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB55_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB55_17:                              # %if.end28
                                        #   in Loop: Header=BB55_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB55_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB55_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB55_19:                              # %if.end39
                                        #   in Loop: Header=BB55_14 Depth=2
	jmp	.LBB55_20
.LBB55_20:                              # %for.inc
                                        #   in Loop: Header=BB55_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_14
.LBB55_21:                              # %for.end
                                        #   in Loop: Header=BB55_8 Depth=1
	jmp	.LBB55_22
.LBB55_22:                              # %for.inc40
                                        #   in Loop: Header=BB55_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_8
.LBB55_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB55_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_26 Depth 2
                                        #       Child Loop BB55_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB55_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB55_24 Depth=1
	movl	$0, -8(%rbp)
.LBB55_26:                              # %for.cond47
                                        #   Parent Loop BB55_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB55_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB55_26 Depth=2
	movl	$0, -12(%rbp)
.LBB55_28:                              # %for.cond51
                                        #   Parent Loop BB55_24 Depth=1
                                        #     Parent Loop BB55_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB55_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB55_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB55_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_28
.LBB55_31:                              # %for.end63
                                        #   in Loop: Header=BB55_26 Depth=2
	jmp	.LBB55_32
.LBB55_32:                              # %for.inc64
                                        #   in Loop: Header=BB55_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_26
.LBB55_33:                              # %for.end66
                                        #   in Loop: Header=BB55_24 Depth=1
	jmp	.LBB55_34
.LBB55_34:                              # %for.inc67
                                        #   in Loop: Header=BB55_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_24
.LBB55_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB55_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB55_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB55_36 Depth=1
	vmovsd	.LCPI55_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI55_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI55_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB55_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_36
.LBB55_39:                              # %for.end98
	cmpl	$266675575, -20(%rbp)   # imm = 0xFE52577
	jne	.LBB55_41
.LBB55_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_40
.Lfunc_end55:
	.size	create_context_memory.48, .Lfunc_end55-create_context_memory.48
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.49
.LCPI56_0:
	.quad	4607182418800017408     # double 1
.LCPI56_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI56_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI56_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.49
	.p2align	4, 0x90
	.type	XRate.49,@function
XRate.49:                               # @XRate.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$854917719, -36(%rbp)   # imm = 0x32F50257
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB56_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB56_3
.LBB56_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB56_3:                               # %cond.end
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI56_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI56_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI56_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB56_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB56_6
.LBB56_5:                               # %cond.false6
	vmovsd	.LCPI56_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI56_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI56_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB56_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB56_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB56_9
.LBB56_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB56_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB56_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB56_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB56_13
.LBB56_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB56_13:                              # %cond.end26
	jmp	.LBB56_15
.LBB56_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB56_15
.LBB56_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB56_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB56_18
.LBB56_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB56_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$854917719, -36(%rbp)   # imm = 0x32F50257
	jne	.LBB56_20
.LBB56_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB56_19
.Lfunc_end56:
	.size	XRate.49, .Lfunc_end56-XRate.49
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.50        # -- Begin function init_contexts.50
	.p2align	4, 0x90
	.type	init_contexts.50,@function
init_contexts.50:                       # @init_contexts.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$951210680, -28(%rbp)   # imm = 0x38B252B8
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB57_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB57_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	$0, -4(%rbp)
.LBB57_3:                               # %for.cond2
                                        #   Parent Loop BB57_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB57_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_7
.LBB57_6:                               # %if.else
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_7:                               # %if.end
                                        #   in Loop: Header=BB57_3 Depth=2
	jmp	.LBB57_8
.LBB57_8:                               # %for.inc
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_3
.LBB57_9:                               # %for.end
                                        #   in Loop: Header=BB57_1 Depth=1
	jmp	.LBB57_10
.LBB57_10:                              # %for.inc28
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_1
.LBB57_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB57_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB57_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB57_12 Depth=1
	movl	$0, -4(%rbp)
.LBB57_14:                              # %for.cond34
                                        #   Parent Loop BB57_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB57_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB57_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB57_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_18
.LBB57_17:                              # %if.else52
                                        #   in Loop: Header=BB57_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_18:                              # %if.end66
                                        #   in Loop: Header=BB57_14 Depth=2
	jmp	.LBB57_19
.LBB57_19:                              # %for.inc67
                                        #   in Loop: Header=BB57_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_14
.LBB57_20:                              # %for.end69
                                        #   in Loop: Header=BB57_12 Depth=1
	jmp	.LBB57_21
.LBB57_21:                              # %for.inc70
                                        #   in Loop: Header=BB57_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_12
.LBB57_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB57_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB57_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB57_23 Depth=1
	movl	$0, -4(%rbp)
.LBB57_25:                              # %for.cond76
                                        #   Parent Loop BB57_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB57_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB57_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB57_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_29
.LBB57_28:                              # %if.else94
                                        #   in Loop: Header=BB57_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_29:                              # %if.end108
                                        #   in Loop: Header=BB57_25 Depth=2
	jmp	.LBB57_30
.LBB57_30:                              # %for.inc109
                                        #   in Loop: Header=BB57_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_25
.LBB57_31:                              # %for.end111
                                        #   in Loop: Header=BB57_23 Depth=1
	jmp	.LBB57_32
.LBB57_32:                              # %for.inc112
                                        #   in Loop: Header=BB57_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_23
.LBB57_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB57_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB57_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB57_34 Depth=1
	movl	$0, -4(%rbp)
.LBB57_36:                              # %for.cond118
                                        #   Parent Loop BB57_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB57_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB57_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB57_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_40
.LBB57_39:                              # %if.else136
                                        #   in Loop: Header=BB57_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_40:                              # %if.end150
                                        #   in Loop: Header=BB57_36 Depth=2
	jmp	.LBB57_41
.LBB57_41:                              # %for.inc151
                                        #   in Loop: Header=BB57_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_36
.LBB57_42:                              # %for.end153
                                        #   in Loop: Header=BB57_34 Depth=1
	jmp	.LBB57_43
.LBB57_43:                              # %for.inc154
                                        #   in Loop: Header=BB57_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_34
.LBB57_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB57_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB57_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB57_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB57_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_49
.LBB57_48:                              # %if.else172
                                        #   in Loop: Header=BB57_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_49:                              # %if.end183
                                        #   in Loop: Header=BB57_45 Depth=1
	jmp	.LBB57_50
.LBB57_50:                              # %for.inc184
                                        #   in Loop: Header=BB57_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_45
.LBB57_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB57_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB57_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB57_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB57_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_56
.LBB57_55:                              # %if.else202
                                        #   in Loop: Header=BB57_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_56:                              # %if.end213
                                        #   in Loop: Header=BB57_52 Depth=1
	jmp	.LBB57_57
.LBB57_57:                              # %for.inc214
                                        #   in Loop: Header=BB57_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_52
.LBB57_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB57_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB57_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB57_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB57_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_63
.LBB57_62:                              # %if.else232
                                        #   in Loop: Header=BB57_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_63:                              # %if.end243
                                        #   in Loop: Header=BB57_59 Depth=1
	jmp	.LBB57_64
.LBB57_64:                              # %for.inc244
                                        #   in Loop: Header=BB57_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_59
.LBB57_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB57_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB57_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB57_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB57_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_70
.LBB57_69:                              # %if.else262
                                        #   in Loop: Header=BB57_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_70:                              # %if.end273
                                        #   in Loop: Header=BB57_66 Depth=1
	jmp	.LBB57_71
.LBB57_71:                              # %for.inc274
                                        #   in Loop: Header=BB57_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_66
.LBB57_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB57_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB57_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB57_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB57_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_77
.LBB57_76:                              # %if.else292
                                        #   in Loop: Header=BB57_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_77:                              # %if.end303
                                        #   in Loop: Header=BB57_73 Depth=1
	jmp	.LBB57_78
.LBB57_78:                              # %for.inc304
                                        #   in Loop: Header=BB57_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_73
.LBB57_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB57_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB57_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB57_80 Depth=1
	movl	$0, -4(%rbp)
.LBB57_82:                              # %for.cond310
                                        #   Parent Loop BB57_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB57_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB57_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB57_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_86
.LBB57_85:                              # %if.else328
                                        #   in Loop: Header=BB57_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_86:                              # %if.end342
                                        #   in Loop: Header=BB57_82 Depth=2
	jmp	.LBB57_87
.LBB57_87:                              # %for.inc343
                                        #   in Loop: Header=BB57_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_82
.LBB57_88:                              # %for.end345
                                        #   in Loop: Header=BB57_80 Depth=1
	jmp	.LBB57_89
.LBB57_89:                              # %for.inc346
                                        #   in Loop: Header=BB57_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_80
.LBB57_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB57_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB57_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB57_91 Depth=1
	movl	$0, -4(%rbp)
.LBB57_93:                              # %for.cond352
                                        #   Parent Loop BB57_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB57_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB57_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB57_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_97
.LBB57_96:                              # %if.else370
                                        #   in Loop: Header=BB57_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_97:                              # %if.end384
                                        #   in Loop: Header=BB57_93 Depth=2
	jmp	.LBB57_98
.LBB57_98:                              # %for.inc385
                                        #   in Loop: Header=BB57_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_93
.LBB57_99:                              # %for.end387
                                        #   in Loop: Header=BB57_91 Depth=1
	jmp	.LBB57_100
.LBB57_100:                             # %for.inc388
                                        #   in Loop: Header=BB57_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_91
.LBB57_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB57_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB57_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB57_102 Depth=1
	movl	$0, -4(%rbp)
.LBB57_104:                             # %for.cond394
                                        #   Parent Loop BB57_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB57_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB57_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB57_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_108
.LBB57_107:                             # %if.else412
                                        #   in Loop: Header=BB57_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_108:                             # %if.end426
                                        #   in Loop: Header=BB57_104 Depth=2
	jmp	.LBB57_109
.LBB57_109:                             # %for.inc427
                                        #   in Loop: Header=BB57_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_104
.LBB57_110:                             # %for.end429
                                        #   in Loop: Header=BB57_102 Depth=1
	jmp	.LBB57_111
.LBB57_111:                             # %for.inc430
                                        #   in Loop: Header=BB57_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_102
.LBB57_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB57_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB57_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB57_113 Depth=1
	movl	$0, -4(%rbp)
.LBB57_115:                             # %for.cond436
                                        #   Parent Loop BB57_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB57_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB57_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB57_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_119
.LBB57_118:                             # %if.else454
                                        #   in Loop: Header=BB57_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_119:                             # %if.end468
                                        #   in Loop: Header=BB57_115 Depth=2
	jmp	.LBB57_120
.LBB57_120:                             # %for.inc469
                                        #   in Loop: Header=BB57_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_115
.LBB57_121:                             # %for.end471
                                        #   in Loop: Header=BB57_113 Depth=1
	jmp	.LBB57_122
.LBB57_122:                             # %for.inc472
                                        #   in Loop: Header=BB57_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_113
.LBB57_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB57_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB57_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB57_124 Depth=1
	movl	$0, -4(%rbp)
.LBB57_126:                             # %for.cond478
                                        #   Parent Loop BB57_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB57_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB57_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB57_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_130
.LBB57_129:                             # %if.else496
                                        #   in Loop: Header=BB57_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_130:                             # %if.end510
                                        #   in Loop: Header=BB57_126 Depth=2
	jmp	.LBB57_131
.LBB57_131:                             # %for.inc511
                                        #   in Loop: Header=BB57_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_126
.LBB57_132:                             # %for.end513
                                        #   in Loop: Header=BB57_124 Depth=1
	jmp	.LBB57_133
.LBB57_133:                             # %for.inc514
                                        #   in Loop: Header=BB57_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_124
.LBB57_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB57_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB57_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB57_135 Depth=1
	movl	$0, -4(%rbp)
.LBB57_137:                             # %for.cond520
                                        #   Parent Loop BB57_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB57_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB57_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB57_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_141
.LBB57_140:                             # %if.else538
                                        #   in Loop: Header=BB57_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_141:                             # %if.end552
                                        #   in Loop: Header=BB57_137 Depth=2
	jmp	.LBB57_142
.LBB57_142:                             # %for.inc553
                                        #   in Loop: Header=BB57_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_137
.LBB57_143:                             # %for.end555
                                        #   in Loop: Header=BB57_135 Depth=1
	jmp	.LBB57_144
.LBB57_144:                             # %for.inc556
                                        #   in Loop: Header=BB57_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_135
.LBB57_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB57_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB57_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB57_146 Depth=1
	movl	$0, -4(%rbp)
.LBB57_148:                             # %for.cond562
                                        #   Parent Loop BB57_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB57_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB57_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB57_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_152
.LBB57_151:                             # %if.else580
                                        #   in Loop: Header=BB57_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_152:                             # %if.end594
                                        #   in Loop: Header=BB57_148 Depth=2
	jmp	.LBB57_153
.LBB57_153:                             # %for.inc595
                                        #   in Loop: Header=BB57_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_148
.LBB57_154:                             # %for.end597
                                        #   in Loop: Header=BB57_146 Depth=1
	jmp	.LBB57_155
.LBB57_155:                             # %for.inc598
                                        #   in Loop: Header=BB57_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_146
.LBB57_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB57_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB57_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB57_157 Depth=1
	movl	$0, -4(%rbp)
.LBB57_159:                             # %for.cond604
                                        #   Parent Loop BB57_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB57_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB57_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB57_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_163
.LBB57_162:                             # %if.else622
                                        #   in Loop: Header=BB57_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_163:                             # %if.end636
                                        #   in Loop: Header=BB57_159 Depth=2
	jmp	.LBB57_164
.LBB57_164:                             # %for.inc637
                                        #   in Loop: Header=BB57_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_159
.LBB57_165:                             # %for.end639
                                        #   in Loop: Header=BB57_157 Depth=1
	jmp	.LBB57_166
.LBB57_166:                             # %for.inc640
                                        #   in Loop: Header=BB57_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_157
.LBB57_167:                             # %for.end642
	cmpl	$951210680, -28(%rbp)   # imm = 0x38B252B8
	jne	.LBB57_169
.LBB57_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_168
.Lfunc_end57:
	.size	init_contexts.50, .Lfunc_end57-init_contexts.50
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.51        # -- Begin function init_contexts.51
	.p2align	4, 0x90
	.type	init_contexts.51,@function
init_contexts.51:                       # @init_contexts.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$471806722, -28(%rbp)   # imm = 0x1C1F3302
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB58_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB58_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -4(%rbp)
.LBB58_3:                               # %for.cond2
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB58_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB58_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB58_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_7
.LBB58_6:                               # %if.else
                                        #   in Loop: Header=BB58_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_7:                               # %if.end
                                        #   in Loop: Header=BB58_3 Depth=2
	jmp	.LBB58_8
.LBB58_8:                               # %for.inc
                                        #   in Loop: Header=BB58_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_3
.LBB58_9:                               # %for.end
                                        #   in Loop: Header=BB58_1 Depth=1
	jmp	.LBB58_10
.LBB58_10:                              # %for.inc28
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_1
.LBB58_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB58_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB58_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB58_12 Depth=1
	movl	$0, -4(%rbp)
.LBB58_14:                              # %for.cond34
                                        #   Parent Loop BB58_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB58_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_18
.LBB58_17:                              # %if.else52
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_18:                              # %if.end66
                                        #   in Loop: Header=BB58_14 Depth=2
	jmp	.LBB58_19
.LBB58_19:                              # %for.inc67
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_14
.LBB58_20:                              # %for.end69
                                        #   in Loop: Header=BB58_12 Depth=1
	jmp	.LBB58_21
.LBB58_21:                              # %for.inc70
                                        #   in Loop: Header=BB58_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_12
.LBB58_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB58_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB58_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB58_23 Depth=1
	movl	$0, -4(%rbp)
.LBB58_25:                              # %for.cond76
                                        #   Parent Loop BB58_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB58_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB58_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB58_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_29
.LBB58_28:                              # %if.else94
                                        #   in Loop: Header=BB58_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_29:                              # %if.end108
                                        #   in Loop: Header=BB58_25 Depth=2
	jmp	.LBB58_30
.LBB58_30:                              # %for.inc109
                                        #   in Loop: Header=BB58_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_25
.LBB58_31:                              # %for.end111
                                        #   in Loop: Header=BB58_23 Depth=1
	jmp	.LBB58_32
.LBB58_32:                              # %for.inc112
                                        #   in Loop: Header=BB58_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_23
.LBB58_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB58_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB58_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB58_34 Depth=1
	movl	$0, -4(%rbp)
.LBB58_36:                              # %for.cond118
                                        #   Parent Loop BB58_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB58_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB58_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB58_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_40
.LBB58_39:                              # %if.else136
                                        #   in Loop: Header=BB58_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_40:                              # %if.end150
                                        #   in Loop: Header=BB58_36 Depth=2
	jmp	.LBB58_41
.LBB58_41:                              # %for.inc151
                                        #   in Loop: Header=BB58_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_36
.LBB58_42:                              # %for.end153
                                        #   in Loop: Header=BB58_34 Depth=1
	jmp	.LBB58_43
.LBB58_43:                              # %for.inc154
                                        #   in Loop: Header=BB58_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_34
.LBB58_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB58_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB58_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB58_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB58_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_49
.LBB58_48:                              # %if.else172
                                        #   in Loop: Header=BB58_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_49:                              # %if.end183
                                        #   in Loop: Header=BB58_45 Depth=1
	jmp	.LBB58_50
.LBB58_50:                              # %for.inc184
                                        #   in Loop: Header=BB58_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_45
.LBB58_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB58_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB58_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB58_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB58_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_56
.LBB58_55:                              # %if.else202
                                        #   in Loop: Header=BB58_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_56:                              # %if.end213
                                        #   in Loop: Header=BB58_52 Depth=1
	jmp	.LBB58_57
.LBB58_57:                              # %for.inc214
                                        #   in Loop: Header=BB58_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_52
.LBB58_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB58_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB58_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB58_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB58_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_63
.LBB58_62:                              # %if.else232
                                        #   in Loop: Header=BB58_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_63:                              # %if.end243
                                        #   in Loop: Header=BB58_59 Depth=1
	jmp	.LBB58_64
.LBB58_64:                              # %for.inc244
                                        #   in Loop: Header=BB58_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_59
.LBB58_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB58_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB58_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB58_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB58_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_70
.LBB58_69:                              # %if.else262
                                        #   in Loop: Header=BB58_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_70:                              # %if.end273
                                        #   in Loop: Header=BB58_66 Depth=1
	jmp	.LBB58_71
.LBB58_71:                              # %for.inc274
                                        #   in Loop: Header=BB58_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_66
.LBB58_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB58_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB58_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB58_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB58_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_77
.LBB58_76:                              # %if.else292
                                        #   in Loop: Header=BB58_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_77:                              # %if.end303
                                        #   in Loop: Header=BB58_73 Depth=1
	jmp	.LBB58_78
.LBB58_78:                              # %for.inc304
                                        #   in Loop: Header=BB58_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_73
.LBB58_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB58_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB58_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB58_80 Depth=1
	movl	$0, -4(%rbp)
.LBB58_82:                              # %for.cond310
                                        #   Parent Loop BB58_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB58_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB58_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB58_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_86
.LBB58_85:                              # %if.else328
                                        #   in Loop: Header=BB58_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_86:                              # %if.end342
                                        #   in Loop: Header=BB58_82 Depth=2
	jmp	.LBB58_87
.LBB58_87:                              # %for.inc343
                                        #   in Loop: Header=BB58_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_82
.LBB58_88:                              # %for.end345
                                        #   in Loop: Header=BB58_80 Depth=1
	jmp	.LBB58_89
.LBB58_89:                              # %for.inc346
                                        #   in Loop: Header=BB58_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_80
.LBB58_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB58_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB58_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB58_91 Depth=1
	movl	$0, -4(%rbp)
.LBB58_93:                              # %for.cond352
                                        #   Parent Loop BB58_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB58_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB58_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB58_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_97
.LBB58_96:                              # %if.else370
                                        #   in Loop: Header=BB58_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_97:                              # %if.end384
                                        #   in Loop: Header=BB58_93 Depth=2
	jmp	.LBB58_98
.LBB58_98:                              # %for.inc385
                                        #   in Loop: Header=BB58_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_93
.LBB58_99:                              # %for.end387
                                        #   in Loop: Header=BB58_91 Depth=1
	jmp	.LBB58_100
.LBB58_100:                             # %for.inc388
                                        #   in Loop: Header=BB58_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_91
.LBB58_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB58_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB58_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB58_102 Depth=1
	movl	$0, -4(%rbp)
.LBB58_104:                             # %for.cond394
                                        #   Parent Loop BB58_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB58_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB58_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB58_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_108
.LBB58_107:                             # %if.else412
                                        #   in Loop: Header=BB58_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_108:                             # %if.end426
                                        #   in Loop: Header=BB58_104 Depth=2
	jmp	.LBB58_109
.LBB58_109:                             # %for.inc427
                                        #   in Loop: Header=BB58_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_104
.LBB58_110:                             # %for.end429
                                        #   in Loop: Header=BB58_102 Depth=1
	jmp	.LBB58_111
.LBB58_111:                             # %for.inc430
                                        #   in Loop: Header=BB58_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_102
.LBB58_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB58_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB58_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB58_113 Depth=1
	movl	$0, -4(%rbp)
.LBB58_115:                             # %for.cond436
                                        #   Parent Loop BB58_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB58_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB58_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB58_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_119
.LBB58_118:                             # %if.else454
                                        #   in Loop: Header=BB58_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_119:                             # %if.end468
                                        #   in Loop: Header=BB58_115 Depth=2
	jmp	.LBB58_120
.LBB58_120:                             # %for.inc469
                                        #   in Loop: Header=BB58_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_115
.LBB58_121:                             # %for.end471
                                        #   in Loop: Header=BB58_113 Depth=1
	jmp	.LBB58_122
.LBB58_122:                             # %for.inc472
                                        #   in Loop: Header=BB58_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_113
.LBB58_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB58_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB58_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB58_124 Depth=1
	movl	$0, -4(%rbp)
.LBB58_126:                             # %for.cond478
                                        #   Parent Loop BB58_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB58_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB58_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB58_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_130
.LBB58_129:                             # %if.else496
                                        #   in Loop: Header=BB58_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_130:                             # %if.end510
                                        #   in Loop: Header=BB58_126 Depth=2
	jmp	.LBB58_131
.LBB58_131:                             # %for.inc511
                                        #   in Loop: Header=BB58_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_126
.LBB58_132:                             # %for.end513
                                        #   in Loop: Header=BB58_124 Depth=1
	jmp	.LBB58_133
.LBB58_133:                             # %for.inc514
                                        #   in Loop: Header=BB58_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_124
.LBB58_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB58_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB58_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	$0, -4(%rbp)
.LBB58_137:                             # %for.cond520
                                        #   Parent Loop BB58_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB58_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB58_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB58_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_141
.LBB58_140:                             # %if.else538
                                        #   in Loop: Header=BB58_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_141:                             # %if.end552
                                        #   in Loop: Header=BB58_137 Depth=2
	jmp	.LBB58_142
.LBB58_142:                             # %for.inc553
                                        #   in Loop: Header=BB58_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_137
.LBB58_143:                             # %for.end555
                                        #   in Loop: Header=BB58_135 Depth=1
	jmp	.LBB58_144
.LBB58_144:                             # %for.inc556
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_135
.LBB58_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB58_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB58_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB58_146 Depth=1
	movl	$0, -4(%rbp)
.LBB58_148:                             # %for.cond562
                                        #   Parent Loop BB58_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB58_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB58_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB58_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_152
.LBB58_151:                             # %if.else580
                                        #   in Loop: Header=BB58_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_152:                             # %if.end594
                                        #   in Loop: Header=BB58_148 Depth=2
	jmp	.LBB58_153
.LBB58_153:                             # %for.inc595
                                        #   in Loop: Header=BB58_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_148
.LBB58_154:                             # %for.end597
                                        #   in Loop: Header=BB58_146 Depth=1
	jmp	.LBB58_155
.LBB58_155:                             # %for.inc598
                                        #   in Loop: Header=BB58_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_146
.LBB58_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB58_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB58_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB58_157 Depth=1
	movl	$0, -4(%rbp)
.LBB58_159:                             # %for.cond604
                                        #   Parent Loop BB58_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB58_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB58_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB58_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_163
.LBB58_162:                             # %if.else622
                                        #   in Loop: Header=BB58_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_163:                             # %if.end636
                                        #   in Loop: Header=BB58_159 Depth=2
	jmp	.LBB58_164
.LBB58_164:                             # %for.inc637
                                        #   in Loop: Header=BB58_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_159
.LBB58_165:                             # %for.end639
                                        #   in Loop: Header=BB58_157 Depth=1
	jmp	.LBB58_166
.LBB58_166:                             # %for.inc640
                                        #   in Loop: Header=BB58_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_157
.LBB58_167:                             # %for.end642
	cmpl	$471806722, -28(%rbp)   # imm = 0x1C1F3302
	jne	.LBB58_169
.LBB58_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_168
.Lfunc_end58:
	.size	init_contexts.51, .Lfunc_end58-init_contexts.51
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.52
.LCPI59_0:
	.quad	4611686018427387904     # double 2
.LCPI59_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.52
	.p2align	4, 0x90
	.type	create_context_memory.52,@function
create_context_memory.52:               # @create_context_memory.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1542246365, -20(%rbp)  # imm = 0x5BECCFDD
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB59_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB59_3
.LBB59_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB59_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB59_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB59_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB59_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB59_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB59_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB59_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB59_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB59_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB59_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB59_11:                              # %if.end10
                                        #   in Loop: Header=BB59_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB59_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB59_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB59_13:                              # %if.end16
                                        #   in Loop: Header=BB59_8 Depth=1
	movl	$0, -8(%rbp)
.LBB59_14:                              # %for.cond17
                                        #   Parent Loop BB59_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB59_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB59_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB59_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB59_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB59_17:                              # %if.end28
                                        #   in Loop: Header=BB59_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB59_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB59_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB59_19:                              # %if.end39
                                        #   in Loop: Header=BB59_14 Depth=2
	jmp	.LBB59_20
.LBB59_20:                              # %for.inc
                                        #   in Loop: Header=BB59_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_14
.LBB59_21:                              # %for.end
                                        #   in Loop: Header=BB59_8 Depth=1
	jmp	.LBB59_22
.LBB59_22:                              # %for.inc40
                                        #   in Loop: Header=BB59_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_8
.LBB59_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB59_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_26 Depth 2
                                        #       Child Loop BB59_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB59_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB59_24 Depth=1
	movl	$0, -8(%rbp)
.LBB59_26:                              # %for.cond47
                                        #   Parent Loop BB59_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB59_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB59_26 Depth=2
	movl	$0, -12(%rbp)
.LBB59_28:                              # %for.cond51
                                        #   Parent Loop BB59_24 Depth=1
                                        #     Parent Loop BB59_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB59_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB59_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB59_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_28
.LBB59_31:                              # %for.end63
                                        #   in Loop: Header=BB59_26 Depth=2
	jmp	.LBB59_32
.LBB59_32:                              # %for.inc64
                                        #   in Loop: Header=BB59_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_26
.LBB59_33:                              # %for.end66
                                        #   in Loop: Header=BB59_24 Depth=1
	jmp	.LBB59_34
.LBB59_34:                              # %for.inc67
                                        #   in Loop: Header=BB59_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_24
.LBB59_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB59_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB59_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB59_36 Depth=1
	vmovsd	.LCPI59_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI59_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI59_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB59_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_36
.LBB59_39:                              # %for.end98
	cmpl	$1542246365, -20(%rbp)  # imm = 0x5BECCFDD
	jne	.LBB59_41
.LBB59_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_40
.Lfunc_end59:
	.size	create_context_memory.52, .Lfunc_end59-create_context_memory.52
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.53
.LCPI60_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.53
	.p2align	4, 0x90
	.type	GetCtxModelNumber.53,@function
GetCtxModelNumber.53:                   # @GetCtxModelNumber.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI60_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1903194452, -48(%rbp)  # imm = 0x71707154
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB60_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_3 Depth 2
                                        #       Child Loop BB60_5 Depth 3
                                        #     Child Loop BB60_14 Depth 2
                                        #       Child Loop BB60_16 Depth 3
                                        #     Child Loop BB60_25 Depth 2
                                        #       Child Loop BB60_27 Depth 3
                                        #     Child Loop BB60_36 Depth 2
                                        #       Child Loop BB60_38 Depth 3
                                        #     Child Loop BB60_47 Depth 2
                                        #     Child Loop BB60_54 Depth 2
                                        #     Child Loop BB60_61 Depth 2
                                        #     Child Loop BB60_68 Depth 2
                                        #     Child Loop BB60_75 Depth 2
                                        #     Child Loop BB60_82 Depth 2
                                        #       Child Loop BB60_84 Depth 3
                                        #     Child Loop BB60_93 Depth 2
                                        #       Child Loop BB60_95 Depth 3
                                        #     Child Loop BB60_104 Depth 2
                                        #       Child Loop BB60_106 Depth 3
                                        #     Child Loop BB60_115 Depth 2
                                        #       Child Loop BB60_117 Depth 3
                                        #     Child Loop BB60_126 Depth 2
                                        #       Child Loop BB60_128 Depth 3
                                        #     Child Loop BB60_137 Depth 2
                                        #       Child Loop BB60_139 Depth 3
                                        #     Child Loop BB60_148 Depth 2
                                        #       Child Loop BB60_150 Depth 3
                                        #     Child Loop BB60_159 Depth 2
                                        #       Child Loop BB60_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB60_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB60_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB60_3:                               # %for.cond2
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB60_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	$0, -4(%rbp)
.LBB60_5:                               # %for.cond5
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB60_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB60_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB60_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_9
.LBB60_8:                               # %if.else
                                        #   in Loop: Header=BB60_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_9:                               # %if.end
                                        #   in Loop: Header=BB60_5 Depth=3
	jmp	.LBB60_10
.LBB60_10:                              # %for.inc
                                        #   in Loop: Header=BB60_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_5
.LBB60_11:                              # %for.end
                                        #   in Loop: Header=BB60_3 Depth=2
	jmp	.LBB60_12
.LBB60_12:                              # %for.inc33
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_3
.LBB60_13:                              # %for.end35
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_14:                              # %for.cond36
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB60_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	$0, -4(%rbp)
.LBB60_16:                              # %for.cond39
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB60_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB60_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB60_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_20
.LBB60_19:                              # %if.else58
                                        #   in Loop: Header=BB60_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_20:                              # %if.end73
                                        #   in Loop: Header=BB60_16 Depth=3
	jmp	.LBB60_21
.LBB60_21:                              # %for.inc74
                                        #   in Loop: Header=BB60_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_16
.LBB60_22:                              # %for.end76
                                        #   in Loop: Header=BB60_14 Depth=2
	jmp	.LBB60_23
.LBB60_23:                              # %for.inc77
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_14
.LBB60_24:                              # %for.end79
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_25:                              # %for.cond80
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB60_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB60_25 Depth=2
	movl	$0, -4(%rbp)
.LBB60_27:                              # %for.cond83
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB60_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB60_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB60_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_31
.LBB60_30:                              # %if.else102
                                        #   in Loop: Header=BB60_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_31:                              # %if.end117
                                        #   in Loop: Header=BB60_27 Depth=3
	jmp	.LBB60_32
.LBB60_32:                              # %for.inc118
                                        #   in Loop: Header=BB60_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_27
.LBB60_33:                              # %for.end120
                                        #   in Loop: Header=BB60_25 Depth=2
	jmp	.LBB60_34
.LBB60_34:                              # %for.inc121
                                        #   in Loop: Header=BB60_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_25
.LBB60_35:                              # %for.end123
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_36:                              # %for.cond124
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB60_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB60_36 Depth=2
	movl	$0, -4(%rbp)
.LBB60_38:                              # %for.cond127
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB60_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB60_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB60_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_42
.LBB60_41:                              # %if.else146
                                        #   in Loop: Header=BB60_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_42:                              # %if.end161
                                        #   in Loop: Header=BB60_38 Depth=3
	jmp	.LBB60_43
.LBB60_43:                              # %for.inc162
                                        #   in Loop: Header=BB60_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_38
.LBB60_44:                              # %for.end164
                                        #   in Loop: Header=BB60_36 Depth=2
	jmp	.LBB60_45
.LBB60_45:                              # %for.inc165
                                        #   in Loop: Header=BB60_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_36
.LBB60_46:                              # %for.end167
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -4(%rbp)
.LBB60_47:                              # %for.cond168
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB60_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB60_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB60_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_51
.LBB60_50:                              # %if.else184
                                        #   in Loop: Header=BB60_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_51:                              # %if.end196
                                        #   in Loop: Header=BB60_47 Depth=2
	jmp	.LBB60_52
.LBB60_52:                              # %for.inc197
                                        #   in Loop: Header=BB60_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_47
.LBB60_53:                              # %for.end199
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -4(%rbp)
.LBB60_54:                              # %for.cond200
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB60_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB60_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB60_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_58
.LBB60_57:                              # %if.else216
                                        #   in Loop: Header=BB60_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_58:                              # %if.end228
                                        #   in Loop: Header=BB60_54 Depth=2
	jmp	.LBB60_59
.LBB60_59:                              # %for.inc229
                                        #   in Loop: Header=BB60_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_54
.LBB60_60:                              # %for.end231
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -4(%rbp)
.LBB60_61:                              # %for.cond232
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB60_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB60_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB60_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_65
.LBB60_64:                              # %if.else248
                                        #   in Loop: Header=BB60_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_65:                              # %if.end260
                                        #   in Loop: Header=BB60_61 Depth=2
	jmp	.LBB60_66
.LBB60_66:                              # %for.inc261
                                        #   in Loop: Header=BB60_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_61
.LBB60_67:                              # %for.end263
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -4(%rbp)
.LBB60_68:                              # %for.cond264
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB60_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB60_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB60_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_72
.LBB60_71:                              # %if.else280
                                        #   in Loop: Header=BB60_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_72:                              # %if.end292
                                        #   in Loop: Header=BB60_68 Depth=2
	jmp	.LBB60_73
.LBB60_73:                              # %for.inc293
                                        #   in Loop: Header=BB60_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_68
.LBB60_74:                              # %for.end295
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -4(%rbp)
.LBB60_75:                              # %for.cond296
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB60_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB60_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB60_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_79
.LBB60_78:                              # %if.else312
                                        #   in Loop: Header=BB60_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_79:                              # %if.end324
                                        #   in Loop: Header=BB60_75 Depth=2
	jmp	.LBB60_80
.LBB60_80:                              # %for.inc325
                                        #   in Loop: Header=BB60_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_75
.LBB60_81:                              # %for.end327
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_82:                              # %for.cond328
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB60_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB60_82 Depth=2
	movl	$0, -4(%rbp)
.LBB60_84:                              # %for.cond331
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB60_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB60_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB60_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_88
.LBB60_87:                              # %if.else350
                                        #   in Loop: Header=BB60_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_88:                              # %if.end365
                                        #   in Loop: Header=BB60_84 Depth=3
	jmp	.LBB60_89
.LBB60_89:                              # %for.inc366
                                        #   in Loop: Header=BB60_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_84
.LBB60_90:                              # %for.end368
                                        #   in Loop: Header=BB60_82 Depth=2
	jmp	.LBB60_91
.LBB60_91:                              # %for.inc369
                                        #   in Loop: Header=BB60_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_82
.LBB60_92:                              # %for.end371
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_93:                              # %for.cond372
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB60_93 Depth=2
	movl	$0, -4(%rbp)
.LBB60_95:                              # %for.cond375
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB60_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB60_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB60_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_99
.LBB60_98:                              # %if.else394
                                        #   in Loop: Header=BB60_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_99:                              # %if.end409
                                        #   in Loop: Header=BB60_95 Depth=3
	jmp	.LBB60_100
.LBB60_100:                             # %for.inc410
                                        #   in Loop: Header=BB60_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_95
.LBB60_101:                             # %for.end412
                                        #   in Loop: Header=BB60_93 Depth=2
	jmp	.LBB60_102
.LBB60_102:                             # %for.inc413
                                        #   in Loop: Header=BB60_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_93
.LBB60_103:                             # %for.end415
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_104:                             # %for.cond416
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB60_104 Depth=2
	movl	$0, -4(%rbp)
.LBB60_106:                             # %for.cond419
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB60_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB60_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB60_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_110
.LBB60_109:                             # %if.else438
                                        #   in Loop: Header=BB60_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_110:                             # %if.end453
                                        #   in Loop: Header=BB60_106 Depth=3
	jmp	.LBB60_111
.LBB60_111:                             # %for.inc454
                                        #   in Loop: Header=BB60_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_106
.LBB60_112:                             # %for.end456
                                        #   in Loop: Header=BB60_104 Depth=2
	jmp	.LBB60_113
.LBB60_113:                             # %for.inc457
                                        #   in Loop: Header=BB60_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_104
.LBB60_114:                             # %for.end459
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_115:                             # %for.cond460
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB60_115 Depth=2
	movl	$0, -4(%rbp)
.LBB60_117:                             # %for.cond463
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB60_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB60_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB60_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_121
.LBB60_120:                             # %if.else482
                                        #   in Loop: Header=BB60_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_121:                             # %if.end497
                                        #   in Loop: Header=BB60_117 Depth=3
	jmp	.LBB60_122
.LBB60_122:                             # %for.inc498
                                        #   in Loop: Header=BB60_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_117
.LBB60_123:                             # %for.end500
                                        #   in Loop: Header=BB60_115 Depth=2
	jmp	.LBB60_124
.LBB60_124:                             # %for.inc501
                                        #   in Loop: Header=BB60_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_115
.LBB60_125:                             # %for.end503
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_126:                             # %for.cond504
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB60_126 Depth=2
	movl	$0, -4(%rbp)
.LBB60_128:                             # %for.cond507
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB60_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB60_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB60_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_132
.LBB60_131:                             # %if.else526
                                        #   in Loop: Header=BB60_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_132:                             # %if.end541
                                        #   in Loop: Header=BB60_128 Depth=3
	jmp	.LBB60_133
.LBB60_133:                             # %for.inc542
                                        #   in Loop: Header=BB60_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_128
.LBB60_134:                             # %for.end544
                                        #   in Loop: Header=BB60_126 Depth=2
	jmp	.LBB60_135
.LBB60_135:                             # %for.inc545
                                        #   in Loop: Header=BB60_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_126
.LBB60_136:                             # %for.end547
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_137:                             # %for.cond548
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB60_137 Depth=2
	movl	$0, -4(%rbp)
.LBB60_139:                             # %for.cond551
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB60_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB60_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB60_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_143
.LBB60_142:                             # %if.else570
                                        #   in Loop: Header=BB60_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_143:                             # %if.end585
                                        #   in Loop: Header=BB60_139 Depth=3
	jmp	.LBB60_144
.LBB60_144:                             # %for.inc586
                                        #   in Loop: Header=BB60_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_139
.LBB60_145:                             # %for.end588
                                        #   in Loop: Header=BB60_137 Depth=2
	jmp	.LBB60_146
.LBB60_146:                             # %for.inc589
                                        #   in Loop: Header=BB60_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_137
.LBB60_147:                             # %for.end591
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_148:                             # %for.cond592
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB60_148 Depth=2
	movl	$0, -4(%rbp)
.LBB60_150:                             # %for.cond595
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB60_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB60_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB60_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_154
.LBB60_153:                             # %if.else614
                                        #   in Loop: Header=BB60_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_154:                             # %if.end629
                                        #   in Loop: Header=BB60_150 Depth=3
	jmp	.LBB60_155
.LBB60_155:                             # %for.inc630
                                        #   in Loop: Header=BB60_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_150
.LBB60_156:                             # %for.end632
                                        #   in Loop: Header=BB60_148 Depth=2
	jmp	.LBB60_157
.LBB60_157:                             # %for.inc633
                                        #   in Loop: Header=BB60_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_148
.LBB60_158:                             # %for.end635
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_159:                             # %for.cond636
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB60_159 Depth=2
	movl	$0, -4(%rbp)
.LBB60_161:                             # %for.cond639
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB60_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB60_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB60_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_165
.LBB60_164:                             # %if.else658
                                        #   in Loop: Header=BB60_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_165:                             # %if.end673
                                        #   in Loop: Header=BB60_161 Depth=3
	jmp	.LBB60_166
.LBB60_166:                             # %for.inc674
                                        #   in Loop: Header=BB60_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_161
.LBB60_167:                             # %for.end676
                                        #   in Loop: Header=BB60_159 Depth=2
	jmp	.LBB60_168
.LBB60_168:                             # %for.inc677
                                        #   in Loop: Header=BB60_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_159
.LBB60_169:                             # %for.end679
                                        #   in Loop: Header=BB60_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB60_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB60_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB60_171:                             # %if.end682
                                        #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_172
.LBB60_172:                             # %for.inc683
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_1
.LBB60_173:                             # %for.end685
	cmpl	$1903194452, -48(%rbp)  # imm = 0x71707154
	jne	.LBB60_175
.LBB60_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_174
.Lfunc_end60:
	.size	GetCtxModelNumber.53, .Lfunc_end60-GetCtxModelNumber.53
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.54
.LCPI61_0:
	.quad	4607182418800017408     # double 1
.LCPI61_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI61_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI61_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.54
	.p2align	4, 0x90
	.type	XRate.54,@function
XRate.54:                               # @XRate.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1832838589, -32(%rbp)  # imm = 0x6D3EE5BD
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB61_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB61_3
.LBB61_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB61_3:                               # %cond.end
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI61_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI61_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB61_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB61_6
.LBB61_5:                               # %cond.false6
	vmovsd	.LCPI61_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI61_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI61_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB61_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB61_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB61_9
.LBB61_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB61_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB61_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB61_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB61_13
.LBB61_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB61_13:                              # %cond.end26
	jmp	.LBB61_15
.LBB61_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB61_15
.LBB61_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB61_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB61_18
.LBB61_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB61_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1832838589, -32(%rbp)  # imm = 0x6D3EE5BD
	jne	.LBB61_20
.LBB61_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB61_19
.Lfunc_end61:
	.size	XRate.54, .Lfunc_end61-XRate.54
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.55        # -- Begin function init_contexts.55
	.p2align	4, 0x90
	.type	init_contexts.55,@function
init_contexts.55:                       # @init_contexts.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$456490165, -28(%rbp)   # imm = 0x1B357CB5
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB62_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB62_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -4(%rbp)
.LBB62_3:                               # %for.cond2
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB62_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_7
.LBB62_6:                               # %if.else
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_7:                               # %if.end
                                        #   in Loop: Header=BB62_3 Depth=2
	jmp	.LBB62_8
.LBB62_8:                               # %for.inc
                                        #   in Loop: Header=BB62_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_3
.LBB62_9:                               # %for.end
                                        #   in Loop: Header=BB62_1 Depth=1
	jmp	.LBB62_10
.LBB62_10:                              # %for.inc28
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_1
.LBB62_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB62_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB62_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB62_12 Depth=1
	movl	$0, -4(%rbp)
.LBB62_14:                              # %for.cond34
                                        #   Parent Loop BB62_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB62_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_18
.LBB62_17:                              # %if.else52
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_18:                              # %if.end66
                                        #   in Loop: Header=BB62_14 Depth=2
	jmp	.LBB62_19
.LBB62_19:                              # %for.inc67
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_14
.LBB62_20:                              # %for.end69
                                        #   in Loop: Header=BB62_12 Depth=1
	jmp	.LBB62_21
.LBB62_21:                              # %for.inc70
                                        #   in Loop: Header=BB62_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_12
.LBB62_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB62_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB62_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB62_23 Depth=1
	movl	$0, -4(%rbp)
.LBB62_25:                              # %for.cond76
                                        #   Parent Loop BB62_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB62_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB62_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB62_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_29
.LBB62_28:                              # %if.else94
                                        #   in Loop: Header=BB62_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_29:                              # %if.end108
                                        #   in Loop: Header=BB62_25 Depth=2
	jmp	.LBB62_30
.LBB62_30:                              # %for.inc109
                                        #   in Loop: Header=BB62_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_25
.LBB62_31:                              # %for.end111
                                        #   in Loop: Header=BB62_23 Depth=1
	jmp	.LBB62_32
.LBB62_32:                              # %for.inc112
                                        #   in Loop: Header=BB62_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_23
.LBB62_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB62_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB62_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB62_34 Depth=1
	movl	$0, -4(%rbp)
.LBB62_36:                              # %for.cond118
                                        #   Parent Loop BB62_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB62_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB62_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB62_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_40
.LBB62_39:                              # %if.else136
                                        #   in Loop: Header=BB62_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_40:                              # %if.end150
                                        #   in Loop: Header=BB62_36 Depth=2
	jmp	.LBB62_41
.LBB62_41:                              # %for.inc151
                                        #   in Loop: Header=BB62_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_36
.LBB62_42:                              # %for.end153
                                        #   in Loop: Header=BB62_34 Depth=1
	jmp	.LBB62_43
.LBB62_43:                              # %for.inc154
                                        #   in Loop: Header=BB62_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_34
.LBB62_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB62_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB62_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB62_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB62_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_49
.LBB62_48:                              # %if.else172
                                        #   in Loop: Header=BB62_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_49:                              # %if.end183
                                        #   in Loop: Header=BB62_45 Depth=1
	jmp	.LBB62_50
.LBB62_50:                              # %for.inc184
                                        #   in Loop: Header=BB62_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_45
.LBB62_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB62_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB62_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB62_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB62_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_56
.LBB62_55:                              # %if.else202
                                        #   in Loop: Header=BB62_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_56:                              # %if.end213
                                        #   in Loop: Header=BB62_52 Depth=1
	jmp	.LBB62_57
.LBB62_57:                              # %for.inc214
                                        #   in Loop: Header=BB62_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_52
.LBB62_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB62_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB62_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB62_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB62_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_63
.LBB62_62:                              # %if.else232
                                        #   in Loop: Header=BB62_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_63:                              # %if.end243
                                        #   in Loop: Header=BB62_59 Depth=1
	jmp	.LBB62_64
.LBB62_64:                              # %for.inc244
                                        #   in Loop: Header=BB62_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_59
.LBB62_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB62_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB62_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB62_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB62_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_70
.LBB62_69:                              # %if.else262
                                        #   in Loop: Header=BB62_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_70:                              # %if.end273
                                        #   in Loop: Header=BB62_66 Depth=1
	jmp	.LBB62_71
.LBB62_71:                              # %for.inc274
                                        #   in Loop: Header=BB62_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_66
.LBB62_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB62_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB62_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB62_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB62_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_77
.LBB62_76:                              # %if.else292
                                        #   in Loop: Header=BB62_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_77:                              # %if.end303
                                        #   in Loop: Header=BB62_73 Depth=1
	jmp	.LBB62_78
.LBB62_78:                              # %for.inc304
                                        #   in Loop: Header=BB62_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_73
.LBB62_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB62_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB62_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB62_80 Depth=1
	movl	$0, -4(%rbp)
.LBB62_82:                              # %for.cond310
                                        #   Parent Loop BB62_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB62_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB62_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB62_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_86
.LBB62_85:                              # %if.else328
                                        #   in Loop: Header=BB62_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_86:                              # %if.end342
                                        #   in Loop: Header=BB62_82 Depth=2
	jmp	.LBB62_87
.LBB62_87:                              # %for.inc343
                                        #   in Loop: Header=BB62_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_82
.LBB62_88:                              # %for.end345
                                        #   in Loop: Header=BB62_80 Depth=1
	jmp	.LBB62_89
.LBB62_89:                              # %for.inc346
                                        #   in Loop: Header=BB62_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_80
.LBB62_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB62_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB62_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB62_91 Depth=1
	movl	$0, -4(%rbp)
.LBB62_93:                              # %for.cond352
                                        #   Parent Loop BB62_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB62_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB62_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB62_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_97
.LBB62_96:                              # %if.else370
                                        #   in Loop: Header=BB62_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_97:                              # %if.end384
                                        #   in Loop: Header=BB62_93 Depth=2
	jmp	.LBB62_98
.LBB62_98:                              # %for.inc385
                                        #   in Loop: Header=BB62_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_93
.LBB62_99:                              # %for.end387
                                        #   in Loop: Header=BB62_91 Depth=1
	jmp	.LBB62_100
.LBB62_100:                             # %for.inc388
                                        #   in Loop: Header=BB62_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_91
.LBB62_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB62_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB62_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB62_102 Depth=1
	movl	$0, -4(%rbp)
.LBB62_104:                             # %for.cond394
                                        #   Parent Loop BB62_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB62_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB62_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB62_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_108
.LBB62_107:                             # %if.else412
                                        #   in Loop: Header=BB62_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_108:                             # %if.end426
                                        #   in Loop: Header=BB62_104 Depth=2
	jmp	.LBB62_109
.LBB62_109:                             # %for.inc427
                                        #   in Loop: Header=BB62_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_104
.LBB62_110:                             # %for.end429
                                        #   in Loop: Header=BB62_102 Depth=1
	jmp	.LBB62_111
.LBB62_111:                             # %for.inc430
                                        #   in Loop: Header=BB62_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_102
.LBB62_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB62_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB62_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB62_113 Depth=1
	movl	$0, -4(%rbp)
.LBB62_115:                             # %for.cond436
                                        #   Parent Loop BB62_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB62_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB62_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB62_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_119
.LBB62_118:                             # %if.else454
                                        #   in Loop: Header=BB62_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_119:                             # %if.end468
                                        #   in Loop: Header=BB62_115 Depth=2
	jmp	.LBB62_120
.LBB62_120:                             # %for.inc469
                                        #   in Loop: Header=BB62_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_115
.LBB62_121:                             # %for.end471
                                        #   in Loop: Header=BB62_113 Depth=1
	jmp	.LBB62_122
.LBB62_122:                             # %for.inc472
                                        #   in Loop: Header=BB62_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_113
.LBB62_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB62_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB62_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB62_124 Depth=1
	movl	$0, -4(%rbp)
.LBB62_126:                             # %for.cond478
                                        #   Parent Loop BB62_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB62_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB62_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB62_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_130
.LBB62_129:                             # %if.else496
                                        #   in Loop: Header=BB62_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_130:                             # %if.end510
                                        #   in Loop: Header=BB62_126 Depth=2
	jmp	.LBB62_131
.LBB62_131:                             # %for.inc511
                                        #   in Loop: Header=BB62_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_126
.LBB62_132:                             # %for.end513
                                        #   in Loop: Header=BB62_124 Depth=1
	jmp	.LBB62_133
.LBB62_133:                             # %for.inc514
                                        #   in Loop: Header=BB62_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_124
.LBB62_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB62_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB62_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB62_135 Depth=1
	movl	$0, -4(%rbp)
.LBB62_137:                             # %for.cond520
                                        #   Parent Loop BB62_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB62_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB62_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB62_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_141
.LBB62_140:                             # %if.else538
                                        #   in Loop: Header=BB62_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_141:                             # %if.end552
                                        #   in Loop: Header=BB62_137 Depth=2
	jmp	.LBB62_142
.LBB62_142:                             # %for.inc553
                                        #   in Loop: Header=BB62_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_137
.LBB62_143:                             # %for.end555
                                        #   in Loop: Header=BB62_135 Depth=1
	jmp	.LBB62_144
.LBB62_144:                             # %for.inc556
                                        #   in Loop: Header=BB62_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_135
.LBB62_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB62_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB62_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB62_146 Depth=1
	movl	$0, -4(%rbp)
.LBB62_148:                             # %for.cond562
                                        #   Parent Loop BB62_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB62_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB62_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB62_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_152
.LBB62_151:                             # %if.else580
                                        #   in Loop: Header=BB62_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_152:                             # %if.end594
                                        #   in Loop: Header=BB62_148 Depth=2
	jmp	.LBB62_153
.LBB62_153:                             # %for.inc595
                                        #   in Loop: Header=BB62_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_148
.LBB62_154:                             # %for.end597
                                        #   in Loop: Header=BB62_146 Depth=1
	jmp	.LBB62_155
.LBB62_155:                             # %for.inc598
                                        #   in Loop: Header=BB62_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_146
.LBB62_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB62_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB62_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB62_157 Depth=1
	movl	$0, -4(%rbp)
.LBB62_159:                             # %for.cond604
                                        #   Parent Loop BB62_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB62_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB62_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB62_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_163
.LBB62_162:                             # %if.else622
                                        #   in Loop: Header=BB62_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_163:                             # %if.end636
                                        #   in Loop: Header=BB62_159 Depth=2
	jmp	.LBB62_164
.LBB62_164:                             # %for.inc637
                                        #   in Loop: Header=BB62_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_159
.LBB62_165:                             # %for.end639
                                        #   in Loop: Header=BB62_157 Depth=1
	jmp	.LBB62_166
.LBB62_166:                             # %for.inc640
                                        #   in Loop: Header=BB62_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_157
.LBB62_167:                             # %for.end642
	cmpl	$456490165, -28(%rbp)   # imm = 0x1B357CB5
	jne	.LBB62_169
.LBB62_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_168
.Lfunc_end62:
	.size	init_contexts.55, .Lfunc_end62-init_contexts.55
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.56
.LCPI63_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.56
	.p2align	4, 0x90
	.type	GetCtxModelNumber.56,@function
GetCtxModelNumber.56:                   # @GetCtxModelNumber.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI63_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1648675122, -44(%rbp)  # imm = 0x6244C932
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB63_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_3 Depth 2
                                        #       Child Loop BB63_5 Depth 3
                                        #     Child Loop BB63_14 Depth 2
                                        #       Child Loop BB63_16 Depth 3
                                        #     Child Loop BB63_25 Depth 2
                                        #       Child Loop BB63_27 Depth 3
                                        #     Child Loop BB63_36 Depth 2
                                        #       Child Loop BB63_38 Depth 3
                                        #     Child Loop BB63_47 Depth 2
                                        #     Child Loop BB63_54 Depth 2
                                        #     Child Loop BB63_61 Depth 2
                                        #     Child Loop BB63_68 Depth 2
                                        #     Child Loop BB63_75 Depth 2
                                        #     Child Loop BB63_82 Depth 2
                                        #       Child Loop BB63_84 Depth 3
                                        #     Child Loop BB63_93 Depth 2
                                        #       Child Loop BB63_95 Depth 3
                                        #     Child Loop BB63_104 Depth 2
                                        #       Child Loop BB63_106 Depth 3
                                        #     Child Loop BB63_115 Depth 2
                                        #       Child Loop BB63_117 Depth 3
                                        #     Child Loop BB63_126 Depth 2
                                        #       Child Loop BB63_128 Depth 3
                                        #     Child Loop BB63_137 Depth 2
                                        #       Child Loop BB63_139 Depth 3
                                        #     Child Loop BB63_148 Depth 2
                                        #       Child Loop BB63_150 Depth 3
                                        #     Child Loop BB63_159 Depth 2
                                        #       Child Loop BB63_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB63_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB63_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB63_3:                               # %for.cond2
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB63_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB63_3 Depth=2
	movl	$0, -4(%rbp)
.LBB63_5:                               # %for.cond5
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB63_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB63_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB63_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_9
.LBB63_8:                               # %if.else
                                        #   in Loop: Header=BB63_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_9:                               # %if.end
                                        #   in Loop: Header=BB63_5 Depth=3
	jmp	.LBB63_10
.LBB63_10:                              # %for.inc
                                        #   in Loop: Header=BB63_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_5
.LBB63_11:                              # %for.end
                                        #   in Loop: Header=BB63_3 Depth=2
	jmp	.LBB63_12
.LBB63_12:                              # %for.inc33
                                        #   in Loop: Header=BB63_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_3
.LBB63_13:                              # %for.end35
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_14:                              # %for.cond36
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB63_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	$0, -4(%rbp)
.LBB63_16:                              # %for.cond39
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB63_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB63_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB63_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_20
.LBB63_19:                              # %if.else58
                                        #   in Loop: Header=BB63_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_20:                              # %if.end73
                                        #   in Loop: Header=BB63_16 Depth=3
	jmp	.LBB63_21
.LBB63_21:                              # %for.inc74
                                        #   in Loop: Header=BB63_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_16
.LBB63_22:                              # %for.end76
                                        #   in Loop: Header=BB63_14 Depth=2
	jmp	.LBB63_23
.LBB63_23:                              # %for.inc77
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_14
.LBB63_24:                              # %for.end79
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_25:                              # %for.cond80
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB63_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB63_25 Depth=2
	movl	$0, -4(%rbp)
.LBB63_27:                              # %for.cond83
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB63_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB63_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB63_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_31
.LBB63_30:                              # %if.else102
                                        #   in Loop: Header=BB63_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_31:                              # %if.end117
                                        #   in Loop: Header=BB63_27 Depth=3
	jmp	.LBB63_32
.LBB63_32:                              # %for.inc118
                                        #   in Loop: Header=BB63_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_27
.LBB63_33:                              # %for.end120
                                        #   in Loop: Header=BB63_25 Depth=2
	jmp	.LBB63_34
.LBB63_34:                              # %for.inc121
                                        #   in Loop: Header=BB63_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_25
.LBB63_35:                              # %for.end123
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_36:                              # %for.cond124
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB63_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB63_36 Depth=2
	movl	$0, -4(%rbp)
.LBB63_38:                              # %for.cond127
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB63_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB63_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB63_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_42
.LBB63_41:                              # %if.else146
                                        #   in Loop: Header=BB63_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_42:                              # %if.end161
                                        #   in Loop: Header=BB63_38 Depth=3
	jmp	.LBB63_43
.LBB63_43:                              # %for.inc162
                                        #   in Loop: Header=BB63_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_38
.LBB63_44:                              # %for.end164
                                        #   in Loop: Header=BB63_36 Depth=2
	jmp	.LBB63_45
.LBB63_45:                              # %for.inc165
                                        #   in Loop: Header=BB63_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_36
.LBB63_46:                              # %for.end167
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -4(%rbp)
.LBB63_47:                              # %for.cond168
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB63_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB63_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB63_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_51
.LBB63_50:                              # %if.else184
                                        #   in Loop: Header=BB63_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_51:                              # %if.end196
                                        #   in Loop: Header=BB63_47 Depth=2
	jmp	.LBB63_52
.LBB63_52:                              # %for.inc197
                                        #   in Loop: Header=BB63_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_47
.LBB63_53:                              # %for.end199
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -4(%rbp)
.LBB63_54:                              # %for.cond200
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB63_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB63_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB63_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_58
.LBB63_57:                              # %if.else216
                                        #   in Loop: Header=BB63_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_58:                              # %if.end228
                                        #   in Loop: Header=BB63_54 Depth=2
	jmp	.LBB63_59
.LBB63_59:                              # %for.inc229
                                        #   in Loop: Header=BB63_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_54
.LBB63_60:                              # %for.end231
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -4(%rbp)
.LBB63_61:                              # %for.cond232
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB63_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB63_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB63_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_65
.LBB63_64:                              # %if.else248
                                        #   in Loop: Header=BB63_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_65:                              # %if.end260
                                        #   in Loop: Header=BB63_61 Depth=2
	jmp	.LBB63_66
.LBB63_66:                              # %for.inc261
                                        #   in Loop: Header=BB63_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_61
.LBB63_67:                              # %for.end263
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -4(%rbp)
.LBB63_68:                              # %for.cond264
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB63_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB63_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB63_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_72
.LBB63_71:                              # %if.else280
                                        #   in Loop: Header=BB63_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_72:                              # %if.end292
                                        #   in Loop: Header=BB63_68 Depth=2
	jmp	.LBB63_73
.LBB63_73:                              # %for.inc293
                                        #   in Loop: Header=BB63_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_68
.LBB63_74:                              # %for.end295
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -4(%rbp)
.LBB63_75:                              # %for.cond296
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB63_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB63_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB63_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_79
.LBB63_78:                              # %if.else312
                                        #   in Loop: Header=BB63_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_79:                              # %if.end324
                                        #   in Loop: Header=BB63_75 Depth=2
	jmp	.LBB63_80
.LBB63_80:                              # %for.inc325
                                        #   in Loop: Header=BB63_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_75
.LBB63_81:                              # %for.end327
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_82:                              # %for.cond328
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB63_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB63_82 Depth=2
	movl	$0, -4(%rbp)
.LBB63_84:                              # %for.cond331
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB63_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB63_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB63_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_88
.LBB63_87:                              # %if.else350
                                        #   in Loop: Header=BB63_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_88:                              # %if.end365
                                        #   in Loop: Header=BB63_84 Depth=3
	jmp	.LBB63_89
.LBB63_89:                              # %for.inc366
                                        #   in Loop: Header=BB63_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_84
.LBB63_90:                              # %for.end368
                                        #   in Loop: Header=BB63_82 Depth=2
	jmp	.LBB63_91
.LBB63_91:                              # %for.inc369
                                        #   in Loop: Header=BB63_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_82
.LBB63_92:                              # %for.end371
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_93:                              # %for.cond372
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB63_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB63_93 Depth=2
	movl	$0, -4(%rbp)
.LBB63_95:                              # %for.cond375
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB63_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB63_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB63_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_99
.LBB63_98:                              # %if.else394
                                        #   in Loop: Header=BB63_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_99:                              # %if.end409
                                        #   in Loop: Header=BB63_95 Depth=3
	jmp	.LBB63_100
.LBB63_100:                             # %for.inc410
                                        #   in Loop: Header=BB63_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_95
.LBB63_101:                             # %for.end412
                                        #   in Loop: Header=BB63_93 Depth=2
	jmp	.LBB63_102
.LBB63_102:                             # %for.inc413
                                        #   in Loop: Header=BB63_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_93
.LBB63_103:                             # %for.end415
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_104:                             # %for.cond416
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB63_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB63_104 Depth=2
	movl	$0, -4(%rbp)
.LBB63_106:                             # %for.cond419
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB63_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB63_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB63_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_110
.LBB63_109:                             # %if.else438
                                        #   in Loop: Header=BB63_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_110:                             # %if.end453
                                        #   in Loop: Header=BB63_106 Depth=3
	jmp	.LBB63_111
.LBB63_111:                             # %for.inc454
                                        #   in Loop: Header=BB63_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_106
.LBB63_112:                             # %for.end456
                                        #   in Loop: Header=BB63_104 Depth=2
	jmp	.LBB63_113
.LBB63_113:                             # %for.inc457
                                        #   in Loop: Header=BB63_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_104
.LBB63_114:                             # %for.end459
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_115:                             # %for.cond460
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB63_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB63_115 Depth=2
	movl	$0, -4(%rbp)
.LBB63_117:                             # %for.cond463
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB63_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB63_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB63_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_121
.LBB63_120:                             # %if.else482
                                        #   in Loop: Header=BB63_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_121:                             # %if.end497
                                        #   in Loop: Header=BB63_117 Depth=3
	jmp	.LBB63_122
.LBB63_122:                             # %for.inc498
                                        #   in Loop: Header=BB63_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_117
.LBB63_123:                             # %for.end500
                                        #   in Loop: Header=BB63_115 Depth=2
	jmp	.LBB63_124
.LBB63_124:                             # %for.inc501
                                        #   in Loop: Header=BB63_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_115
.LBB63_125:                             # %for.end503
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_126:                             # %for.cond504
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB63_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB63_126 Depth=2
	movl	$0, -4(%rbp)
.LBB63_128:                             # %for.cond507
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB63_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB63_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB63_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_132
.LBB63_131:                             # %if.else526
                                        #   in Loop: Header=BB63_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_132:                             # %if.end541
                                        #   in Loop: Header=BB63_128 Depth=3
	jmp	.LBB63_133
.LBB63_133:                             # %for.inc542
                                        #   in Loop: Header=BB63_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_128
.LBB63_134:                             # %for.end544
                                        #   in Loop: Header=BB63_126 Depth=2
	jmp	.LBB63_135
.LBB63_135:                             # %for.inc545
                                        #   in Loop: Header=BB63_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_126
.LBB63_136:                             # %for.end547
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_137:                             # %for.cond548
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB63_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB63_137 Depth=2
	movl	$0, -4(%rbp)
.LBB63_139:                             # %for.cond551
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB63_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB63_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB63_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_143
.LBB63_142:                             # %if.else570
                                        #   in Loop: Header=BB63_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_143:                             # %if.end585
                                        #   in Loop: Header=BB63_139 Depth=3
	jmp	.LBB63_144
.LBB63_144:                             # %for.inc586
                                        #   in Loop: Header=BB63_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_139
.LBB63_145:                             # %for.end588
                                        #   in Loop: Header=BB63_137 Depth=2
	jmp	.LBB63_146
.LBB63_146:                             # %for.inc589
                                        #   in Loop: Header=BB63_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_137
.LBB63_147:                             # %for.end591
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_148:                             # %for.cond592
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB63_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB63_148 Depth=2
	movl	$0, -4(%rbp)
.LBB63_150:                             # %for.cond595
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB63_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB63_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB63_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_154
.LBB63_153:                             # %if.else614
                                        #   in Loop: Header=BB63_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_154:                             # %if.end629
                                        #   in Loop: Header=BB63_150 Depth=3
	jmp	.LBB63_155
.LBB63_155:                             # %for.inc630
                                        #   in Loop: Header=BB63_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_150
.LBB63_156:                             # %for.end632
                                        #   in Loop: Header=BB63_148 Depth=2
	jmp	.LBB63_157
.LBB63_157:                             # %for.inc633
                                        #   in Loop: Header=BB63_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_148
.LBB63_158:                             # %for.end635
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_159:                             # %for.cond636
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB63_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB63_159 Depth=2
	movl	$0, -4(%rbp)
.LBB63_161:                             # %for.cond639
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB63_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB63_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB63_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_165
.LBB63_164:                             # %if.else658
                                        #   in Loop: Header=BB63_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_165:                             # %if.end673
                                        #   in Loop: Header=BB63_161 Depth=3
	jmp	.LBB63_166
.LBB63_166:                             # %for.inc674
                                        #   in Loop: Header=BB63_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_161
.LBB63_167:                             # %for.end676
                                        #   in Loop: Header=BB63_159 Depth=2
	jmp	.LBB63_168
.LBB63_168:                             # %for.inc677
                                        #   in Loop: Header=BB63_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_159
.LBB63_169:                             # %for.end679
                                        #   in Loop: Header=BB63_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB63_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB63_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB63_171:                             # %if.end682
                                        #   in Loop: Header=BB63_1 Depth=1
	jmp	.LBB63_172
.LBB63_172:                             # %for.inc683
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_1
.LBB63_173:                             # %for.end685
	cmpl	$1648675122, -44(%rbp)  # imm = 0x6244C932
	jne	.LBB63_175
.LBB63_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_174
.Lfunc_end63:
	.size	GetCtxModelNumber.56, .Lfunc_end63-GetCtxModelNumber.56
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.57
.LCPI64_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.57
	.p2align	4, 0x90
	.type	GetCtxModelNumber.57,@function
GetCtxModelNumber.57:                   # @GetCtxModelNumber.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI64_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1451339734, -48(%rbp)  # imm = 0x5681AFD6
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB64_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_3 Depth 2
                                        #       Child Loop BB64_5 Depth 3
                                        #     Child Loop BB64_14 Depth 2
                                        #       Child Loop BB64_16 Depth 3
                                        #     Child Loop BB64_25 Depth 2
                                        #       Child Loop BB64_27 Depth 3
                                        #     Child Loop BB64_36 Depth 2
                                        #       Child Loop BB64_38 Depth 3
                                        #     Child Loop BB64_47 Depth 2
                                        #     Child Loop BB64_54 Depth 2
                                        #     Child Loop BB64_61 Depth 2
                                        #     Child Loop BB64_68 Depth 2
                                        #     Child Loop BB64_75 Depth 2
                                        #     Child Loop BB64_82 Depth 2
                                        #       Child Loop BB64_84 Depth 3
                                        #     Child Loop BB64_93 Depth 2
                                        #       Child Loop BB64_95 Depth 3
                                        #     Child Loop BB64_104 Depth 2
                                        #       Child Loop BB64_106 Depth 3
                                        #     Child Loop BB64_115 Depth 2
                                        #       Child Loop BB64_117 Depth 3
                                        #     Child Loop BB64_126 Depth 2
                                        #       Child Loop BB64_128 Depth 3
                                        #     Child Loop BB64_137 Depth 2
                                        #       Child Loop BB64_139 Depth 3
                                        #     Child Loop BB64_148 Depth 2
                                        #       Child Loop BB64_150 Depth 3
                                        #     Child Loop BB64_159 Depth 2
                                        #       Child Loop BB64_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB64_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB64_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB64_3:                               # %for.cond2
                                        #   Parent Loop BB64_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB64_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB64_3 Depth=2
	movl	$0, -4(%rbp)
.LBB64_5:                               # %for.cond5
                                        #   Parent Loop BB64_1 Depth=1
                                        #     Parent Loop BB64_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB64_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB64_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB64_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB64_9
.LBB64_8:                               # %if.else
                                        #   in Loop: Header=BB64_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB64_9:                               # %if.end
                                        #   in Loop: Header=BB64_5 Depth=3
	jmp	.LBB64_10
.LBB64_10:                              # %for.inc
                                        #   in Loop: Header=BB64_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_5
.LBB64_11:                              # %for.end
                                        #   in Loop: Header=BB64_3 Depth=2
	jmp	.LBB64_12
.LBB64_12:                              # %for.inc33
                                        #   in Loop: Header=BB64_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_3
.LBB64_13:                              # %for.end35
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	$0, -8(%rbp)
.LBB64_14:                              # %for.cond36
                                        #   Parent Loop BB64_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB64_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB64_14 Depth=2
	movl	$0, -4(%rbp)
.LBB64_16:                              # %for.cond39
                                        #   Parent Loop BB64_1 Depth=1
                                        #     Parent Loop BB64_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB64_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB64_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB64_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB64_20
.LBB64_19:                              # %if.else58
                                        #   in Loop: Header=BB64_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB64_20:                              # %if.end73
                                        #   in Loop: Header=BB64_16 Depth=3
	jmp	.LBB64_21
.LBB64_21:                              # %for.inc74
                                        #   in Loop: Header=BB64_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_16
.LBB64_22:                              # %for.end76
                                        #   in Loop: Header=BB64_14 Depth=2
	jmp	.LBB64_23
.LBB64_23:                              # %for.inc77
                                        #   in Loop: Header=BB64_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_14
.LBB64_24:                              # %for.end79
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	$0, -8(%rbp)
.LBB64_25:                              # %for.cond80
                                        #   Parent Loop BB64_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB64_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB64_25 Depth=2
	movl	$0, -4(%rbp)
.LBB64_27:                              # %for.cond83
                                        #   Parent Loop BB64_1 Depth=1
                                        #     Parent Loop BB64_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB64_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB64_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB64_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB64_31
.LBB64_30:                              # %if.else102
                                        #   in Loop: Header=BB64_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB64_31:                              # %if.end117
                                        #   in Loop: Header=BB64_27 Depth=3
	jmp	.LBB64_32
.LBB64_32:                              # %for.inc118
                                        #   in Loop: Header=BB64_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_27
.LBB64_33:                              # %for.end120
                                        #   in Loop: Header=BB64_25 Depth=2
	jmp	.LBB64_34
.LBB64_34:                              # %for.inc121
                                        #   in Loop: Header=BB64_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_25
.LBB64_35:                              # %for.end123
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	$0, -8(%rbp)
.LBB64_36:                              # %for.cond124
                                        #   Parent Loop BB64_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB64_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB64_36 Depth=2
	movl	$0, -4(%rbp)
.LBB64_38:                              # %for.cond127
                                        #   Parent Loop BB64_1 Depth=1
                                        #     Parent Loop BB64_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB64_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB64_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB64_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB64_42
.LBB64_41:                              # %if.else146
                                        #   in Loop: Header=BB64_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB64_42:                              # %if.end161
                                        #   in Loop: Header=BB64_38 Depth=3
	jmp	.LBB64_43
.LBB64_43:                              # %for.inc162
                                        #   in Loop: Header=BB64_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_38
.LBB64_44:                              # %for.end164
                                        #   in Loop: Header=BB64_36 Depth=2
	jmp	.LBB64_45
.LBB64_45:                              # %for.inc165
                                        #   in Loop: Header=BB64_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_36
.LBB64_46:                              # %for.end167
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	$0, -4(%rbp)
.LBB64_47:                              # %for.cond168
                                        #   Parent Loop BB64_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB64_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB64_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB64_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB64_51
.LBB64_50:                              # %if.else184
                                        #   in Loop: Header=BB64_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB64_51:                              # %if.end196
                                        #   in Loop: Header=BB64_47 Depth=2
	jmp	.LBB64_52
.LBB64_52:                              # %for.inc197
                                        #   in Loop: Header=BB64_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_47
.LBB64_53:                              # %for.end199
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	$0, -4(%rbp)
.LBB64_54:                              # %for.cond200
                                        #   Parent Loop BB64_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB64_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB64_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB64_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB64_58
.LBB64_57:                              # %if.else216
                                        #   in Loop: Header=BB64_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB64_58:                              # %if.end228
                                        #   in Loop: Header=BB64_54 Depth=2
	jmp	.LBB64_59
.LBB64_59:                              # %for.inc229
                                        #   in Loop: Header=BB64_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_54
.LBB64_60:                              # %for.end231
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	$0, -4(%rbp)
.LBB64_61:                              # %for.cond232
                                        #   Parent Loop BB64_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB64_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB64_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB64_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB64_65
.LBB64_64:                              # %if.else248
                                        #   in Loop: Header=BB64_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB64_65:                              # %if.end260
                                        #   in Loop: Header=BB64_61 Depth=2
	jmp	.LBB64_66
.LBB64_66:                              # %for.inc261
                                        #   in Loop: Header=BB64_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_61
.LBB64_67:                              # %for.end263
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	$0, -4(%rbp)
.LBB64_68:                              # %for.cond264
                                        #   Parent Loop BB64_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB64_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB64_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB64_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB64_72
.LBB64_71:                              # %if.else280
                                        #   in Loop: Header=BB64_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB64_72:                              # %if.end292
                                        #   in Loop: Header=BB64_68 Depth=2
	jmp	.LBB64_73
.LBB64_73:                              # %for.inc293
                                        #   in Loop: Header=BB64_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_68
.LBB64_74:                              # %for.end295
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	$0, -4(%rbp)
.LBB64_75:                              # %for.cond296
                                        #   Parent Loop BB64_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB64_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB64_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB64_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB64_79
.LBB64_78:                              # %if.else312
                                        #   in Loop: Header=BB64_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB64_79:                              # %if.end324
                                        #   in Loop: Header=BB64_75 Depth=2
	jmp	.LBB64_80
.LBB64_80:                              # %for.inc325
                                        #   in Loop: Header=BB64_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_75
.LBB64_81:                              # %for.end327
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	$0, -8(%rbp)
.LBB64_82:                              # %for.cond328
                                        #   Parent Loop BB64_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB64_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB64_82 Depth=2
	movl	$0, -4(%rbp)
.LBB64_84:                              # %for.cond331
                                        #   Parent Loop BB64_1 Depth=1
                                        #     Parent Loop BB64_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB64_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB64_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB64_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB64_88
.LBB64_87:                              # %if.else350
                                        #   in Loop: Header=BB64_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB64_88:                              # %if.end365
                                        #   in Loop: Header=BB64_84 Depth=3
	jmp	.LBB64_89
.LBB64_89:                              # %for.inc366
                                        #   in Loop: Header=BB64_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_84
.LBB64_90:                              # %for.end368
                                        #   in Loop: Header=BB64_82 Depth=2
	jmp	.LBB64_91
.LBB64_91:                              # %for.inc369
                                        #   in Loop: Header=BB64_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_82
.LBB64_92:                              # %for.end371
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	$0, -8(%rbp)
.LBB64_93:                              # %for.cond372
                                        #   Parent Loop BB64_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB64_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB64_93 Depth=2
	movl	$0, -4(%rbp)
.LBB64_95:                              # %for.cond375
                                        #   Parent Loop BB64_1 Depth=1
                                        #     Parent Loop BB64_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB64_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB64_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB64_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB64_99
.LBB64_98:                              # %if.else394
                                        #   in Loop: Header=BB64_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB64_99:                              # %if.end409
                                        #   in Loop: Header=BB64_95 Depth=3
	jmp	.LBB64_100
.LBB64_100:                             # %for.inc410
                                        #   in Loop: Header=BB64_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_95
.LBB64_101:                             # %for.end412
                                        #   in Loop: Header=BB64_93 Depth=2
	jmp	.LBB64_102
.LBB64_102:                             # %for.inc413
                                        #   in Loop: Header=BB64_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_93
.LBB64_103:                             # %for.end415
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	$0, -8(%rbp)
.LBB64_104:                             # %for.cond416
                                        #   Parent Loop BB64_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB64_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB64_104 Depth=2
	movl	$0, -4(%rbp)
.LBB64_106:                             # %for.cond419
                                        #   Parent Loop BB64_1 Depth=1
                                        #     Parent Loop BB64_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB64_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB64_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB64_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB64_110
.LBB64_109:                             # %if.else438
                                        #   in Loop: Header=BB64_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB64_110:                             # %if.end453
                                        #   in Loop: Header=BB64_106 Depth=3
	jmp	.LBB64_111
.LBB64_111:                             # %for.inc454
                                        #   in Loop: Header=BB64_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_106
.LBB64_112:                             # %for.end456
                                        #   in Loop: Header=BB64_104 Depth=2
	jmp	.LBB64_113
.LBB64_113:                             # %for.inc457
                                        #   in Loop: Header=BB64_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_104
.LBB64_114:                             # %for.end459
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	$0, -8(%rbp)
.LBB64_115:                             # %for.cond460
                                        #   Parent Loop BB64_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB64_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB64_115 Depth=2
	movl	$0, -4(%rbp)
.LBB64_117:                             # %for.cond463
                                        #   Parent Loop BB64_1 Depth=1
                                        #     Parent Loop BB64_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB64_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB64_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB64_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB64_121
.LBB64_120:                             # %if.else482
                                        #   in Loop: Header=BB64_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB64_121:                             # %if.end497
                                        #   in Loop: Header=BB64_117 Depth=3
	jmp	.LBB64_122
.LBB64_122:                             # %for.inc498
                                        #   in Loop: Header=BB64_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_117
.LBB64_123:                             # %for.end500
                                        #   in Loop: Header=BB64_115 Depth=2
	jmp	.LBB64_124
.LBB64_124:                             # %for.inc501
                                        #   in Loop: Header=BB64_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_115
.LBB64_125:                             # %for.end503
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	$0, -8(%rbp)
.LBB64_126:                             # %for.cond504
                                        #   Parent Loop BB64_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB64_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB64_126 Depth=2
	movl	$0, -4(%rbp)
.LBB64_128:                             # %for.cond507
                                        #   Parent Loop BB64_1 Depth=1
                                        #     Parent Loop BB64_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB64_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB64_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB64_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB64_132
.LBB64_131:                             # %if.else526
                                        #   in Loop: Header=BB64_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB64_132:                             # %if.end541
                                        #   in Loop: Header=BB64_128 Depth=3
	jmp	.LBB64_133
.LBB64_133:                             # %for.inc542
                                        #   in Loop: Header=BB64_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_128
.LBB64_134:                             # %for.end544
                                        #   in Loop: Header=BB64_126 Depth=2
	jmp	.LBB64_135
.LBB64_135:                             # %for.inc545
                                        #   in Loop: Header=BB64_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_126
.LBB64_136:                             # %for.end547
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	$0, -8(%rbp)
.LBB64_137:                             # %for.cond548
                                        #   Parent Loop BB64_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB64_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB64_137 Depth=2
	movl	$0, -4(%rbp)
.LBB64_139:                             # %for.cond551
                                        #   Parent Loop BB64_1 Depth=1
                                        #     Parent Loop BB64_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB64_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB64_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB64_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB64_143
.LBB64_142:                             # %if.else570
                                        #   in Loop: Header=BB64_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB64_143:                             # %if.end585
                                        #   in Loop: Header=BB64_139 Depth=3
	jmp	.LBB64_144
.LBB64_144:                             # %for.inc586
                                        #   in Loop: Header=BB64_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_139
.LBB64_145:                             # %for.end588
                                        #   in Loop: Header=BB64_137 Depth=2
	jmp	.LBB64_146
.LBB64_146:                             # %for.inc589
                                        #   in Loop: Header=BB64_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_137
.LBB64_147:                             # %for.end591
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	$0, -8(%rbp)
.LBB64_148:                             # %for.cond592
                                        #   Parent Loop BB64_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB64_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB64_148 Depth=2
	movl	$0, -4(%rbp)
.LBB64_150:                             # %for.cond595
                                        #   Parent Loop BB64_1 Depth=1
                                        #     Parent Loop BB64_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB64_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB64_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB64_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB64_154
.LBB64_153:                             # %if.else614
                                        #   in Loop: Header=BB64_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB64_154:                             # %if.end629
                                        #   in Loop: Header=BB64_150 Depth=3
	jmp	.LBB64_155
.LBB64_155:                             # %for.inc630
                                        #   in Loop: Header=BB64_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_150
.LBB64_156:                             # %for.end632
                                        #   in Loop: Header=BB64_148 Depth=2
	jmp	.LBB64_157
.LBB64_157:                             # %for.inc633
                                        #   in Loop: Header=BB64_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_148
.LBB64_158:                             # %for.end635
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	$0, -8(%rbp)
.LBB64_159:                             # %for.cond636
                                        #   Parent Loop BB64_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB64_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB64_159 Depth=2
	movl	$0, -4(%rbp)
.LBB64_161:                             # %for.cond639
                                        #   Parent Loop BB64_1 Depth=1
                                        #     Parent Loop BB64_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB64_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB64_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB64_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB64_165
.LBB64_164:                             # %if.else658
                                        #   in Loop: Header=BB64_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB64_165:                             # %if.end673
                                        #   in Loop: Header=BB64_161 Depth=3
	jmp	.LBB64_166
.LBB64_166:                             # %for.inc674
                                        #   in Loop: Header=BB64_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_161
.LBB64_167:                             # %for.end676
                                        #   in Loop: Header=BB64_159 Depth=2
	jmp	.LBB64_168
.LBB64_168:                             # %for.inc677
                                        #   in Loop: Header=BB64_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_159
.LBB64_169:                             # %for.end679
                                        #   in Loop: Header=BB64_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB64_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB64_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB64_171:                             # %if.end682
                                        #   in Loop: Header=BB64_1 Depth=1
	jmp	.LBB64_172
.LBB64_172:                             # %for.inc683
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_1
.LBB64_173:                             # %for.end685
	cmpl	$1451339734, -48(%rbp)  # imm = 0x5681AFD6
	jne	.LBB64_175
.LBB64_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_174
.Lfunc_end64:
	.size	GetCtxModelNumber.57, .Lfunc_end64-GetCtxModelNumber.57
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.58
.LCPI65_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.58
	.p2align	4, 0x90
	.type	GetCtxModelNumber.58,@function
GetCtxModelNumber.58:                   # @GetCtxModelNumber.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI65_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$891866309, -48(%rbp)   # imm = 0x3528CCC5
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB65_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_3 Depth 2
                                        #       Child Loop BB65_5 Depth 3
                                        #     Child Loop BB65_14 Depth 2
                                        #       Child Loop BB65_16 Depth 3
                                        #     Child Loop BB65_25 Depth 2
                                        #       Child Loop BB65_27 Depth 3
                                        #     Child Loop BB65_36 Depth 2
                                        #       Child Loop BB65_38 Depth 3
                                        #     Child Loop BB65_47 Depth 2
                                        #     Child Loop BB65_54 Depth 2
                                        #     Child Loop BB65_61 Depth 2
                                        #     Child Loop BB65_68 Depth 2
                                        #     Child Loop BB65_75 Depth 2
                                        #     Child Loop BB65_82 Depth 2
                                        #       Child Loop BB65_84 Depth 3
                                        #     Child Loop BB65_93 Depth 2
                                        #       Child Loop BB65_95 Depth 3
                                        #     Child Loop BB65_104 Depth 2
                                        #       Child Loop BB65_106 Depth 3
                                        #     Child Loop BB65_115 Depth 2
                                        #       Child Loop BB65_117 Depth 3
                                        #     Child Loop BB65_126 Depth 2
                                        #       Child Loop BB65_128 Depth 3
                                        #     Child Loop BB65_137 Depth 2
                                        #       Child Loop BB65_139 Depth 3
                                        #     Child Loop BB65_148 Depth 2
                                        #       Child Loop BB65_150 Depth 3
                                        #     Child Loop BB65_159 Depth 2
                                        #       Child Loop BB65_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB65_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB65_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB65_3:                               # %for.cond2
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB65_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB65_3 Depth=2
	movl	$0, -4(%rbp)
.LBB65_5:                               # %for.cond5
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB65_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB65_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB65_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_9
.LBB65_8:                               # %if.else
                                        #   in Loop: Header=BB65_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_9:                               # %if.end
                                        #   in Loop: Header=BB65_5 Depth=3
	jmp	.LBB65_10
.LBB65_10:                              # %for.inc
                                        #   in Loop: Header=BB65_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_5
.LBB65_11:                              # %for.end
                                        #   in Loop: Header=BB65_3 Depth=2
	jmp	.LBB65_12
.LBB65_12:                              # %for.inc33
                                        #   in Loop: Header=BB65_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_3
.LBB65_13:                              # %for.end35
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_14:                              # %for.cond36
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB65_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	$0, -4(%rbp)
.LBB65_16:                              # %for.cond39
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB65_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB65_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB65_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_20
.LBB65_19:                              # %if.else58
                                        #   in Loop: Header=BB65_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_20:                              # %if.end73
                                        #   in Loop: Header=BB65_16 Depth=3
	jmp	.LBB65_21
.LBB65_21:                              # %for.inc74
                                        #   in Loop: Header=BB65_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_16
.LBB65_22:                              # %for.end76
                                        #   in Loop: Header=BB65_14 Depth=2
	jmp	.LBB65_23
.LBB65_23:                              # %for.inc77
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_14
.LBB65_24:                              # %for.end79
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_25:                              # %for.cond80
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB65_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB65_25 Depth=2
	movl	$0, -4(%rbp)
.LBB65_27:                              # %for.cond83
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB65_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB65_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB65_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_31
.LBB65_30:                              # %if.else102
                                        #   in Loop: Header=BB65_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_31:                              # %if.end117
                                        #   in Loop: Header=BB65_27 Depth=3
	jmp	.LBB65_32
.LBB65_32:                              # %for.inc118
                                        #   in Loop: Header=BB65_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_27
.LBB65_33:                              # %for.end120
                                        #   in Loop: Header=BB65_25 Depth=2
	jmp	.LBB65_34
.LBB65_34:                              # %for.inc121
                                        #   in Loop: Header=BB65_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_25
.LBB65_35:                              # %for.end123
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_36:                              # %for.cond124
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB65_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB65_36 Depth=2
	movl	$0, -4(%rbp)
.LBB65_38:                              # %for.cond127
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB65_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB65_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB65_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_42
.LBB65_41:                              # %if.else146
                                        #   in Loop: Header=BB65_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_42:                              # %if.end161
                                        #   in Loop: Header=BB65_38 Depth=3
	jmp	.LBB65_43
.LBB65_43:                              # %for.inc162
                                        #   in Loop: Header=BB65_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_38
.LBB65_44:                              # %for.end164
                                        #   in Loop: Header=BB65_36 Depth=2
	jmp	.LBB65_45
.LBB65_45:                              # %for.inc165
                                        #   in Loop: Header=BB65_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_36
.LBB65_46:                              # %for.end167
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_47:                              # %for.cond168
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB65_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB65_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_51
.LBB65_50:                              # %if.else184
                                        #   in Loop: Header=BB65_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_51:                              # %if.end196
                                        #   in Loop: Header=BB65_47 Depth=2
	jmp	.LBB65_52
.LBB65_52:                              # %for.inc197
                                        #   in Loop: Header=BB65_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_47
.LBB65_53:                              # %for.end199
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_54:                              # %for.cond200
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB65_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB65_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_58
.LBB65_57:                              # %if.else216
                                        #   in Loop: Header=BB65_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_58:                              # %if.end228
                                        #   in Loop: Header=BB65_54 Depth=2
	jmp	.LBB65_59
.LBB65_59:                              # %for.inc229
                                        #   in Loop: Header=BB65_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_54
.LBB65_60:                              # %for.end231
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_61:                              # %for.cond232
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB65_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB65_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB65_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_65
.LBB65_64:                              # %if.else248
                                        #   in Loop: Header=BB65_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_65:                              # %if.end260
                                        #   in Loop: Header=BB65_61 Depth=2
	jmp	.LBB65_66
.LBB65_66:                              # %for.inc261
                                        #   in Loop: Header=BB65_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_61
.LBB65_67:                              # %for.end263
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_68:                              # %for.cond264
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB65_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB65_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB65_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_72
.LBB65_71:                              # %if.else280
                                        #   in Loop: Header=BB65_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_72:                              # %if.end292
                                        #   in Loop: Header=BB65_68 Depth=2
	jmp	.LBB65_73
.LBB65_73:                              # %for.inc293
                                        #   in Loop: Header=BB65_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_68
.LBB65_74:                              # %for.end295
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_75:                              # %for.cond296
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB65_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB65_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_79
.LBB65_78:                              # %if.else312
                                        #   in Loop: Header=BB65_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_79:                              # %if.end324
                                        #   in Loop: Header=BB65_75 Depth=2
	jmp	.LBB65_80
.LBB65_80:                              # %for.inc325
                                        #   in Loop: Header=BB65_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_75
.LBB65_81:                              # %for.end327
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_82:                              # %for.cond328
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB65_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB65_82 Depth=2
	movl	$0, -4(%rbp)
.LBB65_84:                              # %for.cond331
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB65_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB65_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB65_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_88
.LBB65_87:                              # %if.else350
                                        #   in Loop: Header=BB65_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_88:                              # %if.end365
                                        #   in Loop: Header=BB65_84 Depth=3
	jmp	.LBB65_89
.LBB65_89:                              # %for.inc366
                                        #   in Loop: Header=BB65_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_84
.LBB65_90:                              # %for.end368
                                        #   in Loop: Header=BB65_82 Depth=2
	jmp	.LBB65_91
.LBB65_91:                              # %for.inc369
                                        #   in Loop: Header=BB65_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_82
.LBB65_92:                              # %for.end371
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_93:                              # %for.cond372
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB65_93 Depth=2
	movl	$0, -4(%rbp)
.LBB65_95:                              # %for.cond375
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB65_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB65_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB65_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_99
.LBB65_98:                              # %if.else394
                                        #   in Loop: Header=BB65_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_99:                              # %if.end409
                                        #   in Loop: Header=BB65_95 Depth=3
	jmp	.LBB65_100
.LBB65_100:                             # %for.inc410
                                        #   in Loop: Header=BB65_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_95
.LBB65_101:                             # %for.end412
                                        #   in Loop: Header=BB65_93 Depth=2
	jmp	.LBB65_102
.LBB65_102:                             # %for.inc413
                                        #   in Loop: Header=BB65_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_93
.LBB65_103:                             # %for.end415
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_104:                             # %for.cond416
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB65_104 Depth=2
	movl	$0, -4(%rbp)
.LBB65_106:                             # %for.cond419
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB65_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB65_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB65_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_110
.LBB65_109:                             # %if.else438
                                        #   in Loop: Header=BB65_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_110:                             # %if.end453
                                        #   in Loop: Header=BB65_106 Depth=3
	jmp	.LBB65_111
.LBB65_111:                             # %for.inc454
                                        #   in Loop: Header=BB65_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_106
.LBB65_112:                             # %for.end456
                                        #   in Loop: Header=BB65_104 Depth=2
	jmp	.LBB65_113
.LBB65_113:                             # %for.inc457
                                        #   in Loop: Header=BB65_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_104
.LBB65_114:                             # %for.end459
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_115:                             # %for.cond460
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB65_115 Depth=2
	movl	$0, -4(%rbp)
.LBB65_117:                             # %for.cond463
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB65_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB65_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB65_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_121
.LBB65_120:                             # %if.else482
                                        #   in Loop: Header=BB65_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_121:                             # %if.end497
                                        #   in Loop: Header=BB65_117 Depth=3
	jmp	.LBB65_122
.LBB65_122:                             # %for.inc498
                                        #   in Loop: Header=BB65_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_117
.LBB65_123:                             # %for.end500
                                        #   in Loop: Header=BB65_115 Depth=2
	jmp	.LBB65_124
.LBB65_124:                             # %for.inc501
                                        #   in Loop: Header=BB65_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_115
.LBB65_125:                             # %for.end503
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_126:                             # %for.cond504
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB65_126 Depth=2
	movl	$0, -4(%rbp)
.LBB65_128:                             # %for.cond507
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB65_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB65_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB65_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_132
.LBB65_131:                             # %if.else526
                                        #   in Loop: Header=BB65_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_132:                             # %if.end541
                                        #   in Loop: Header=BB65_128 Depth=3
	jmp	.LBB65_133
.LBB65_133:                             # %for.inc542
                                        #   in Loop: Header=BB65_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_128
.LBB65_134:                             # %for.end544
                                        #   in Loop: Header=BB65_126 Depth=2
	jmp	.LBB65_135
.LBB65_135:                             # %for.inc545
                                        #   in Loop: Header=BB65_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_126
.LBB65_136:                             # %for.end547
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_137:                             # %for.cond548
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB65_137 Depth=2
	movl	$0, -4(%rbp)
.LBB65_139:                             # %for.cond551
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB65_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB65_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB65_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_143
.LBB65_142:                             # %if.else570
                                        #   in Loop: Header=BB65_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_143:                             # %if.end585
                                        #   in Loop: Header=BB65_139 Depth=3
	jmp	.LBB65_144
.LBB65_144:                             # %for.inc586
                                        #   in Loop: Header=BB65_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_139
.LBB65_145:                             # %for.end588
                                        #   in Loop: Header=BB65_137 Depth=2
	jmp	.LBB65_146
.LBB65_146:                             # %for.inc589
                                        #   in Loop: Header=BB65_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_137
.LBB65_147:                             # %for.end591
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_148:                             # %for.cond592
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB65_148 Depth=2
	movl	$0, -4(%rbp)
.LBB65_150:                             # %for.cond595
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB65_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB65_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB65_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_154
.LBB65_153:                             # %if.else614
                                        #   in Loop: Header=BB65_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_154:                             # %if.end629
                                        #   in Loop: Header=BB65_150 Depth=3
	jmp	.LBB65_155
.LBB65_155:                             # %for.inc630
                                        #   in Loop: Header=BB65_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_150
.LBB65_156:                             # %for.end632
                                        #   in Loop: Header=BB65_148 Depth=2
	jmp	.LBB65_157
.LBB65_157:                             # %for.inc633
                                        #   in Loop: Header=BB65_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_148
.LBB65_158:                             # %for.end635
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_159:                             # %for.cond636
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB65_159 Depth=2
	movl	$0, -4(%rbp)
.LBB65_161:                             # %for.cond639
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB65_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB65_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB65_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_165
.LBB65_164:                             # %if.else658
                                        #   in Loop: Header=BB65_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_165:                             # %if.end673
                                        #   in Loop: Header=BB65_161 Depth=3
	jmp	.LBB65_166
.LBB65_166:                             # %for.inc674
                                        #   in Loop: Header=BB65_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_161
.LBB65_167:                             # %for.end676
                                        #   in Loop: Header=BB65_159 Depth=2
	jmp	.LBB65_168
.LBB65_168:                             # %for.inc677
                                        #   in Loop: Header=BB65_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_159
.LBB65_169:                             # %for.end679
                                        #   in Loop: Header=BB65_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB65_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB65_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB65_171:                             # %if.end682
                                        #   in Loop: Header=BB65_1 Depth=1
	jmp	.LBB65_172
.LBB65_172:                             # %for.inc683
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_1
.LBB65_173:                             # %for.end685
	cmpl	$891866309, -48(%rbp)   # imm = 0x3528CCC5
	jne	.LBB65_175
.LBB65_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_174
.Lfunc_end65:
	.size	GetCtxModelNumber.58, .Lfunc_end65-GetCtxModelNumber.58
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.59
.LCPI66_0:
	.quad	4607182418800017408     # double 1
.LCPI66_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI66_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI66_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.59
	.p2align	4, 0x90
	.type	XRate.59,@function
XRate.59:                               # @XRate.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1941219477, -32(%rbp)  # imm = 0x73B4A895
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB66_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB66_3
.LBB66_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB66_3:                               # %cond.end
	vmovsd	.LCPI66_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI66_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI66_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI66_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB66_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI66_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB66_6
.LBB66_5:                               # %cond.false6
	vmovsd	.LCPI66_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI66_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI66_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB66_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB66_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB66_9
.LBB66_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB66_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB66_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB66_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB66_13
.LBB66_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB66_13:                              # %cond.end26
	jmp	.LBB66_15
.LBB66_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB66_15
.LBB66_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB66_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB66_18
.LBB66_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB66_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1941219477, -32(%rbp)  # imm = 0x73B4A895
	jne	.LBB66_20
.LBB66_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB66_19
.Lfunc_end66:
	.size	XRate.59, .Lfunc_end66-XRate.59
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.60        # -- Begin function init_contexts.60
	.p2align	4, 0x90
	.type	init_contexts.60,@function
init_contexts.60:                       # @init_contexts.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$57348327, -28(%rbp)    # imm = 0x36B10E7
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB67_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB67_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -4(%rbp)
.LBB67_3:                               # %for.cond2
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB67_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_7
.LBB67_6:                               # %if.else
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_7:                               # %if.end
                                        #   in Loop: Header=BB67_3 Depth=2
	jmp	.LBB67_8
.LBB67_8:                               # %for.inc
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_3
.LBB67_9:                               # %for.end
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_10
.LBB67_10:                              # %for.inc28
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_1
.LBB67_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB67_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB67_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB67_12 Depth=1
	movl	$0, -4(%rbp)
.LBB67_14:                              # %for.cond34
                                        #   Parent Loop BB67_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB67_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB67_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB67_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_18
.LBB67_17:                              # %if.else52
                                        #   in Loop: Header=BB67_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_18:                              # %if.end66
                                        #   in Loop: Header=BB67_14 Depth=2
	jmp	.LBB67_19
.LBB67_19:                              # %for.inc67
                                        #   in Loop: Header=BB67_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_14
.LBB67_20:                              # %for.end69
                                        #   in Loop: Header=BB67_12 Depth=1
	jmp	.LBB67_21
.LBB67_21:                              # %for.inc70
                                        #   in Loop: Header=BB67_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_12
.LBB67_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB67_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB67_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB67_23 Depth=1
	movl	$0, -4(%rbp)
.LBB67_25:                              # %for.cond76
                                        #   Parent Loop BB67_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB67_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB67_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB67_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_29
.LBB67_28:                              # %if.else94
                                        #   in Loop: Header=BB67_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_29:                              # %if.end108
                                        #   in Loop: Header=BB67_25 Depth=2
	jmp	.LBB67_30
.LBB67_30:                              # %for.inc109
                                        #   in Loop: Header=BB67_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_25
.LBB67_31:                              # %for.end111
                                        #   in Loop: Header=BB67_23 Depth=1
	jmp	.LBB67_32
.LBB67_32:                              # %for.inc112
                                        #   in Loop: Header=BB67_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_23
.LBB67_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB67_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB67_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB67_34 Depth=1
	movl	$0, -4(%rbp)
.LBB67_36:                              # %for.cond118
                                        #   Parent Loop BB67_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB67_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB67_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB67_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_40
.LBB67_39:                              # %if.else136
                                        #   in Loop: Header=BB67_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_40:                              # %if.end150
                                        #   in Loop: Header=BB67_36 Depth=2
	jmp	.LBB67_41
.LBB67_41:                              # %for.inc151
                                        #   in Loop: Header=BB67_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_36
.LBB67_42:                              # %for.end153
                                        #   in Loop: Header=BB67_34 Depth=1
	jmp	.LBB67_43
.LBB67_43:                              # %for.inc154
                                        #   in Loop: Header=BB67_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_34
.LBB67_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB67_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB67_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB67_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB67_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_49
.LBB67_48:                              # %if.else172
                                        #   in Loop: Header=BB67_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_49:                              # %if.end183
                                        #   in Loop: Header=BB67_45 Depth=1
	jmp	.LBB67_50
.LBB67_50:                              # %for.inc184
                                        #   in Loop: Header=BB67_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_45
.LBB67_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB67_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB67_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB67_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB67_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_56
.LBB67_55:                              # %if.else202
                                        #   in Loop: Header=BB67_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_56:                              # %if.end213
                                        #   in Loop: Header=BB67_52 Depth=1
	jmp	.LBB67_57
.LBB67_57:                              # %for.inc214
                                        #   in Loop: Header=BB67_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_52
.LBB67_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB67_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB67_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB67_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB67_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_63
.LBB67_62:                              # %if.else232
                                        #   in Loop: Header=BB67_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_63:                              # %if.end243
                                        #   in Loop: Header=BB67_59 Depth=1
	jmp	.LBB67_64
.LBB67_64:                              # %for.inc244
                                        #   in Loop: Header=BB67_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_59
.LBB67_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB67_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB67_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB67_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB67_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_70
.LBB67_69:                              # %if.else262
                                        #   in Loop: Header=BB67_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_70:                              # %if.end273
                                        #   in Loop: Header=BB67_66 Depth=1
	jmp	.LBB67_71
.LBB67_71:                              # %for.inc274
                                        #   in Loop: Header=BB67_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_66
.LBB67_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB67_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB67_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB67_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB67_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_77
.LBB67_76:                              # %if.else292
                                        #   in Loop: Header=BB67_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_77:                              # %if.end303
                                        #   in Loop: Header=BB67_73 Depth=1
	jmp	.LBB67_78
.LBB67_78:                              # %for.inc304
                                        #   in Loop: Header=BB67_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_73
.LBB67_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB67_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB67_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB67_80 Depth=1
	movl	$0, -4(%rbp)
.LBB67_82:                              # %for.cond310
                                        #   Parent Loop BB67_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB67_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB67_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB67_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_86
.LBB67_85:                              # %if.else328
                                        #   in Loop: Header=BB67_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_86:                              # %if.end342
                                        #   in Loop: Header=BB67_82 Depth=2
	jmp	.LBB67_87
.LBB67_87:                              # %for.inc343
                                        #   in Loop: Header=BB67_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_82
.LBB67_88:                              # %for.end345
                                        #   in Loop: Header=BB67_80 Depth=1
	jmp	.LBB67_89
.LBB67_89:                              # %for.inc346
                                        #   in Loop: Header=BB67_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_80
.LBB67_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB67_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB67_91 Depth=1
	movl	$0, -4(%rbp)
.LBB67_93:                              # %for.cond352
                                        #   Parent Loop BB67_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB67_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB67_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB67_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_97
.LBB67_96:                              # %if.else370
                                        #   in Loop: Header=BB67_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_97:                              # %if.end384
                                        #   in Loop: Header=BB67_93 Depth=2
	jmp	.LBB67_98
.LBB67_98:                              # %for.inc385
                                        #   in Loop: Header=BB67_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_93
.LBB67_99:                              # %for.end387
                                        #   in Loop: Header=BB67_91 Depth=1
	jmp	.LBB67_100
.LBB67_100:                             # %for.inc388
                                        #   in Loop: Header=BB67_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_91
.LBB67_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB67_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB67_102 Depth=1
	movl	$0, -4(%rbp)
.LBB67_104:                             # %for.cond394
                                        #   Parent Loop BB67_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB67_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB67_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB67_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_108
.LBB67_107:                             # %if.else412
                                        #   in Loop: Header=BB67_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_108:                             # %if.end426
                                        #   in Loop: Header=BB67_104 Depth=2
	jmp	.LBB67_109
.LBB67_109:                             # %for.inc427
                                        #   in Loop: Header=BB67_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_104
.LBB67_110:                             # %for.end429
                                        #   in Loop: Header=BB67_102 Depth=1
	jmp	.LBB67_111
.LBB67_111:                             # %for.inc430
                                        #   in Loop: Header=BB67_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_102
.LBB67_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB67_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB67_113 Depth=1
	movl	$0, -4(%rbp)
.LBB67_115:                             # %for.cond436
                                        #   Parent Loop BB67_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB67_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB67_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB67_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_119
.LBB67_118:                             # %if.else454
                                        #   in Loop: Header=BB67_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_119:                             # %if.end468
                                        #   in Loop: Header=BB67_115 Depth=2
	jmp	.LBB67_120
.LBB67_120:                             # %for.inc469
                                        #   in Loop: Header=BB67_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_115
.LBB67_121:                             # %for.end471
                                        #   in Loop: Header=BB67_113 Depth=1
	jmp	.LBB67_122
.LBB67_122:                             # %for.inc472
                                        #   in Loop: Header=BB67_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_113
.LBB67_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB67_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB67_124 Depth=1
	movl	$0, -4(%rbp)
.LBB67_126:                             # %for.cond478
                                        #   Parent Loop BB67_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB67_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB67_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB67_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_130
.LBB67_129:                             # %if.else496
                                        #   in Loop: Header=BB67_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_130:                             # %if.end510
                                        #   in Loop: Header=BB67_126 Depth=2
	jmp	.LBB67_131
.LBB67_131:                             # %for.inc511
                                        #   in Loop: Header=BB67_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_126
.LBB67_132:                             # %for.end513
                                        #   in Loop: Header=BB67_124 Depth=1
	jmp	.LBB67_133
.LBB67_133:                             # %for.inc514
                                        #   in Loop: Header=BB67_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_124
.LBB67_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB67_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	$0, -4(%rbp)
.LBB67_137:                             # %for.cond520
                                        #   Parent Loop BB67_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB67_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB67_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB67_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_141
.LBB67_140:                             # %if.else538
                                        #   in Loop: Header=BB67_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_141:                             # %if.end552
                                        #   in Loop: Header=BB67_137 Depth=2
	jmp	.LBB67_142
.LBB67_142:                             # %for.inc553
                                        #   in Loop: Header=BB67_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_137
.LBB67_143:                             # %for.end555
                                        #   in Loop: Header=BB67_135 Depth=1
	jmp	.LBB67_144
.LBB67_144:                             # %for.inc556
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_135
.LBB67_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB67_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB67_146 Depth=1
	movl	$0, -4(%rbp)
.LBB67_148:                             # %for.cond562
                                        #   Parent Loop BB67_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB67_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB67_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB67_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_152
.LBB67_151:                             # %if.else580
                                        #   in Loop: Header=BB67_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_152:                             # %if.end594
                                        #   in Loop: Header=BB67_148 Depth=2
	jmp	.LBB67_153
.LBB67_153:                             # %for.inc595
                                        #   in Loop: Header=BB67_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_148
.LBB67_154:                             # %for.end597
                                        #   in Loop: Header=BB67_146 Depth=1
	jmp	.LBB67_155
.LBB67_155:                             # %for.inc598
                                        #   in Loop: Header=BB67_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_146
.LBB67_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB67_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB67_157 Depth=1
	movl	$0, -4(%rbp)
.LBB67_159:                             # %for.cond604
                                        #   Parent Loop BB67_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB67_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB67_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB67_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_163
.LBB67_162:                             # %if.else622
                                        #   in Loop: Header=BB67_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_163:                             # %if.end636
                                        #   in Loop: Header=BB67_159 Depth=2
	jmp	.LBB67_164
.LBB67_164:                             # %for.inc637
                                        #   in Loop: Header=BB67_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_159
.LBB67_165:                             # %for.end639
                                        #   in Loop: Header=BB67_157 Depth=1
	jmp	.LBB67_166
.LBB67_166:                             # %for.inc640
                                        #   in Loop: Header=BB67_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_157
.LBB67_167:                             # %for.end642
	cmpl	$57348327, -28(%rbp)    # imm = 0x36B10E7
	jne	.LBB67_169
.LBB67_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_168
.Lfunc_end67:
	.size	init_contexts.60, .Lfunc_end67-init_contexts.60
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.61        # -- Begin function init_contexts.61
	.p2align	4, 0x90
	.type	init_contexts.61,@function
init_contexts.61:                       # @init_contexts.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$221260458, -28(%rbp)   # imm = 0xD302AAA
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB68_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB68_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -4(%rbp)
.LBB68_3:                               # %for.cond2
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB68_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB68_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB68_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_7
.LBB68_6:                               # %if.else
                                        #   in Loop: Header=BB68_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_7:                               # %if.end
                                        #   in Loop: Header=BB68_3 Depth=2
	jmp	.LBB68_8
.LBB68_8:                               # %for.inc
                                        #   in Loop: Header=BB68_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_3
.LBB68_9:                               # %for.end
                                        #   in Loop: Header=BB68_1 Depth=1
	jmp	.LBB68_10
.LBB68_10:                              # %for.inc28
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_1
.LBB68_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB68_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB68_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB68_12 Depth=1
	movl	$0, -4(%rbp)
.LBB68_14:                              # %for.cond34
                                        #   Parent Loop BB68_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB68_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB68_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB68_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_18
.LBB68_17:                              # %if.else52
                                        #   in Loop: Header=BB68_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_18:                              # %if.end66
                                        #   in Loop: Header=BB68_14 Depth=2
	jmp	.LBB68_19
.LBB68_19:                              # %for.inc67
                                        #   in Loop: Header=BB68_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_14
.LBB68_20:                              # %for.end69
                                        #   in Loop: Header=BB68_12 Depth=1
	jmp	.LBB68_21
.LBB68_21:                              # %for.inc70
                                        #   in Loop: Header=BB68_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_12
.LBB68_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB68_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB68_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB68_23 Depth=1
	movl	$0, -4(%rbp)
.LBB68_25:                              # %for.cond76
                                        #   Parent Loop BB68_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB68_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB68_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB68_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_29
.LBB68_28:                              # %if.else94
                                        #   in Loop: Header=BB68_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_29:                              # %if.end108
                                        #   in Loop: Header=BB68_25 Depth=2
	jmp	.LBB68_30
.LBB68_30:                              # %for.inc109
                                        #   in Loop: Header=BB68_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_25
.LBB68_31:                              # %for.end111
                                        #   in Loop: Header=BB68_23 Depth=1
	jmp	.LBB68_32
.LBB68_32:                              # %for.inc112
                                        #   in Loop: Header=BB68_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_23
.LBB68_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB68_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB68_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB68_34 Depth=1
	movl	$0, -4(%rbp)
.LBB68_36:                              # %for.cond118
                                        #   Parent Loop BB68_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB68_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB68_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB68_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_40
.LBB68_39:                              # %if.else136
                                        #   in Loop: Header=BB68_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_40:                              # %if.end150
                                        #   in Loop: Header=BB68_36 Depth=2
	jmp	.LBB68_41
.LBB68_41:                              # %for.inc151
                                        #   in Loop: Header=BB68_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_36
.LBB68_42:                              # %for.end153
                                        #   in Loop: Header=BB68_34 Depth=1
	jmp	.LBB68_43
.LBB68_43:                              # %for.inc154
                                        #   in Loop: Header=BB68_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_34
.LBB68_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB68_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB68_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB68_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB68_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_49
.LBB68_48:                              # %if.else172
                                        #   in Loop: Header=BB68_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_49:                              # %if.end183
                                        #   in Loop: Header=BB68_45 Depth=1
	jmp	.LBB68_50
.LBB68_50:                              # %for.inc184
                                        #   in Loop: Header=BB68_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_45
.LBB68_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB68_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB68_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB68_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB68_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_56
.LBB68_55:                              # %if.else202
                                        #   in Loop: Header=BB68_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_56:                              # %if.end213
                                        #   in Loop: Header=BB68_52 Depth=1
	jmp	.LBB68_57
.LBB68_57:                              # %for.inc214
                                        #   in Loop: Header=BB68_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_52
.LBB68_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB68_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB68_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB68_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB68_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_63
.LBB68_62:                              # %if.else232
                                        #   in Loop: Header=BB68_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_63:                              # %if.end243
                                        #   in Loop: Header=BB68_59 Depth=1
	jmp	.LBB68_64
.LBB68_64:                              # %for.inc244
                                        #   in Loop: Header=BB68_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_59
.LBB68_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB68_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB68_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB68_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB68_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_70
.LBB68_69:                              # %if.else262
                                        #   in Loop: Header=BB68_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_70:                              # %if.end273
                                        #   in Loop: Header=BB68_66 Depth=1
	jmp	.LBB68_71
.LBB68_71:                              # %for.inc274
                                        #   in Loop: Header=BB68_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_66
.LBB68_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB68_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB68_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB68_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB68_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_77
.LBB68_76:                              # %if.else292
                                        #   in Loop: Header=BB68_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_77:                              # %if.end303
                                        #   in Loop: Header=BB68_73 Depth=1
	jmp	.LBB68_78
.LBB68_78:                              # %for.inc304
                                        #   in Loop: Header=BB68_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_73
.LBB68_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB68_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB68_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB68_80 Depth=1
	movl	$0, -4(%rbp)
.LBB68_82:                              # %for.cond310
                                        #   Parent Loop BB68_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB68_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB68_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB68_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_86
.LBB68_85:                              # %if.else328
                                        #   in Loop: Header=BB68_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_86:                              # %if.end342
                                        #   in Loop: Header=BB68_82 Depth=2
	jmp	.LBB68_87
.LBB68_87:                              # %for.inc343
                                        #   in Loop: Header=BB68_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_82
.LBB68_88:                              # %for.end345
                                        #   in Loop: Header=BB68_80 Depth=1
	jmp	.LBB68_89
.LBB68_89:                              # %for.inc346
                                        #   in Loop: Header=BB68_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_80
.LBB68_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB68_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB68_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB68_91 Depth=1
	movl	$0, -4(%rbp)
.LBB68_93:                              # %for.cond352
                                        #   Parent Loop BB68_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB68_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB68_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB68_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_97
.LBB68_96:                              # %if.else370
                                        #   in Loop: Header=BB68_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_97:                              # %if.end384
                                        #   in Loop: Header=BB68_93 Depth=2
	jmp	.LBB68_98
.LBB68_98:                              # %for.inc385
                                        #   in Loop: Header=BB68_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_93
.LBB68_99:                              # %for.end387
                                        #   in Loop: Header=BB68_91 Depth=1
	jmp	.LBB68_100
.LBB68_100:                             # %for.inc388
                                        #   in Loop: Header=BB68_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_91
.LBB68_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB68_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB68_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB68_102 Depth=1
	movl	$0, -4(%rbp)
.LBB68_104:                             # %for.cond394
                                        #   Parent Loop BB68_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB68_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB68_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB68_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_108
.LBB68_107:                             # %if.else412
                                        #   in Loop: Header=BB68_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_108:                             # %if.end426
                                        #   in Loop: Header=BB68_104 Depth=2
	jmp	.LBB68_109
.LBB68_109:                             # %for.inc427
                                        #   in Loop: Header=BB68_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_104
.LBB68_110:                             # %for.end429
                                        #   in Loop: Header=BB68_102 Depth=1
	jmp	.LBB68_111
.LBB68_111:                             # %for.inc430
                                        #   in Loop: Header=BB68_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_102
.LBB68_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB68_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB68_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB68_113 Depth=1
	movl	$0, -4(%rbp)
.LBB68_115:                             # %for.cond436
                                        #   Parent Loop BB68_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB68_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB68_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB68_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_119
.LBB68_118:                             # %if.else454
                                        #   in Loop: Header=BB68_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_119:                             # %if.end468
                                        #   in Loop: Header=BB68_115 Depth=2
	jmp	.LBB68_120
.LBB68_120:                             # %for.inc469
                                        #   in Loop: Header=BB68_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_115
.LBB68_121:                             # %for.end471
                                        #   in Loop: Header=BB68_113 Depth=1
	jmp	.LBB68_122
.LBB68_122:                             # %for.inc472
                                        #   in Loop: Header=BB68_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_113
.LBB68_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB68_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB68_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB68_124 Depth=1
	movl	$0, -4(%rbp)
.LBB68_126:                             # %for.cond478
                                        #   Parent Loop BB68_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB68_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB68_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB68_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_130
.LBB68_129:                             # %if.else496
                                        #   in Loop: Header=BB68_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_130:                             # %if.end510
                                        #   in Loop: Header=BB68_126 Depth=2
	jmp	.LBB68_131
.LBB68_131:                             # %for.inc511
                                        #   in Loop: Header=BB68_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_126
.LBB68_132:                             # %for.end513
                                        #   in Loop: Header=BB68_124 Depth=1
	jmp	.LBB68_133
.LBB68_133:                             # %for.inc514
                                        #   in Loop: Header=BB68_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_124
.LBB68_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB68_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB68_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB68_135 Depth=1
	movl	$0, -4(%rbp)
.LBB68_137:                             # %for.cond520
                                        #   Parent Loop BB68_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB68_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB68_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB68_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_141
.LBB68_140:                             # %if.else538
                                        #   in Loop: Header=BB68_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_141:                             # %if.end552
                                        #   in Loop: Header=BB68_137 Depth=2
	jmp	.LBB68_142
.LBB68_142:                             # %for.inc553
                                        #   in Loop: Header=BB68_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_137
.LBB68_143:                             # %for.end555
                                        #   in Loop: Header=BB68_135 Depth=1
	jmp	.LBB68_144
.LBB68_144:                             # %for.inc556
                                        #   in Loop: Header=BB68_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_135
.LBB68_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB68_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB68_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB68_146 Depth=1
	movl	$0, -4(%rbp)
.LBB68_148:                             # %for.cond562
                                        #   Parent Loop BB68_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB68_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB68_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB68_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_152
.LBB68_151:                             # %if.else580
                                        #   in Loop: Header=BB68_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_152:                             # %if.end594
                                        #   in Loop: Header=BB68_148 Depth=2
	jmp	.LBB68_153
.LBB68_153:                             # %for.inc595
                                        #   in Loop: Header=BB68_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_148
.LBB68_154:                             # %for.end597
                                        #   in Loop: Header=BB68_146 Depth=1
	jmp	.LBB68_155
.LBB68_155:                             # %for.inc598
                                        #   in Loop: Header=BB68_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_146
.LBB68_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB68_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB68_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB68_157 Depth=1
	movl	$0, -4(%rbp)
.LBB68_159:                             # %for.cond604
                                        #   Parent Loop BB68_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB68_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB68_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB68_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_163
.LBB68_162:                             # %if.else622
                                        #   in Loop: Header=BB68_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_163:                             # %if.end636
                                        #   in Loop: Header=BB68_159 Depth=2
	jmp	.LBB68_164
.LBB68_164:                             # %for.inc637
                                        #   in Loop: Header=BB68_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_159
.LBB68_165:                             # %for.end639
                                        #   in Loop: Header=BB68_157 Depth=1
	jmp	.LBB68_166
.LBB68_166:                             # %for.inc640
                                        #   in Loop: Header=BB68_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_157
.LBB68_167:                             # %for.end642
	cmpl	$221260458, -28(%rbp)   # imm = 0xD302AAA
	jne	.LBB68_169
.LBB68_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_168
.Lfunc_end68:
	.size	init_contexts.61, .Lfunc_end68-init_contexts.61
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.62
.LCPI69_0:
	.quad	4611686018427387904     # double 2
.LCPI69_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.62
	.p2align	4, 0x90
	.type	create_context_memory.62,@function
create_context_memory.62:               # @create_context_memory.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$210852007, -20(%rbp)   # imm = 0xC9158A7
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB69_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB69_3
.LBB69_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB69_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB69_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB69_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB69_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB69_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB69_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB69_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB69_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB69_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB69_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB69_11:                              # %if.end10
                                        #   in Loop: Header=BB69_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB69_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB69_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB69_13:                              # %if.end16
                                        #   in Loop: Header=BB69_8 Depth=1
	movl	$0, -8(%rbp)
.LBB69_14:                              # %for.cond17
                                        #   Parent Loop BB69_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB69_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB69_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB69_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB69_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB69_17:                              # %if.end28
                                        #   in Loop: Header=BB69_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB69_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB69_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB69_19:                              # %if.end39
                                        #   in Loop: Header=BB69_14 Depth=2
	jmp	.LBB69_20
.LBB69_20:                              # %for.inc
                                        #   in Loop: Header=BB69_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_14
.LBB69_21:                              # %for.end
                                        #   in Loop: Header=BB69_8 Depth=1
	jmp	.LBB69_22
.LBB69_22:                              # %for.inc40
                                        #   in Loop: Header=BB69_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_8
.LBB69_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB69_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_26 Depth 2
                                        #       Child Loop BB69_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB69_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB69_24 Depth=1
	movl	$0, -8(%rbp)
.LBB69_26:                              # %for.cond47
                                        #   Parent Loop BB69_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB69_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB69_26 Depth=2
	movl	$0, -12(%rbp)
.LBB69_28:                              # %for.cond51
                                        #   Parent Loop BB69_24 Depth=1
                                        #     Parent Loop BB69_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB69_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB69_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB69_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_28
.LBB69_31:                              # %for.end63
                                        #   in Loop: Header=BB69_26 Depth=2
	jmp	.LBB69_32
.LBB69_32:                              # %for.inc64
                                        #   in Loop: Header=BB69_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_26
.LBB69_33:                              # %for.end66
                                        #   in Loop: Header=BB69_24 Depth=1
	jmp	.LBB69_34
.LBB69_34:                              # %for.inc67
                                        #   in Loop: Header=BB69_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_24
.LBB69_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB69_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB69_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB69_36 Depth=1
	vmovsd	.LCPI69_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI69_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI69_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB69_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_36
.LBB69_39:                              # %for.end98
	cmpl	$210852007, -20(%rbp)   # imm = 0xC9158A7
	jne	.LBB69_41
.LBB69_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_40
.Lfunc_end69:
	.size	create_context_memory.62, .Lfunc_end69-create_context_memory.62
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.63
.LCPI70_0:
	.quad	4611686018427387904     # double 2
.LCPI70_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.63
	.p2align	4, 0x90
	.type	create_context_memory.63,@function
create_context_memory.63:               # @create_context_memory.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1196001347, -20(%rbp)  # imm = 0x47498843
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB70_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB70_3
.LBB70_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB70_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB70_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB70_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB70_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB70_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB70_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB70_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB70_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB70_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB70_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB70_11:                              # %if.end10
                                        #   in Loop: Header=BB70_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB70_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB70_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB70_13:                              # %if.end16
                                        #   in Loop: Header=BB70_8 Depth=1
	movl	$0, -8(%rbp)
.LBB70_14:                              # %for.cond17
                                        #   Parent Loop BB70_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB70_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB70_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB70_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB70_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB70_17:                              # %if.end28
                                        #   in Loop: Header=BB70_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB70_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB70_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB70_19:                              # %if.end39
                                        #   in Loop: Header=BB70_14 Depth=2
	jmp	.LBB70_20
.LBB70_20:                              # %for.inc
                                        #   in Loop: Header=BB70_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_14
.LBB70_21:                              # %for.end
                                        #   in Loop: Header=BB70_8 Depth=1
	jmp	.LBB70_22
.LBB70_22:                              # %for.inc40
                                        #   in Loop: Header=BB70_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_8
.LBB70_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB70_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_26 Depth 2
                                        #       Child Loop BB70_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB70_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB70_24 Depth=1
	movl	$0, -8(%rbp)
.LBB70_26:                              # %for.cond47
                                        #   Parent Loop BB70_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB70_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB70_26 Depth=2
	movl	$0, -12(%rbp)
.LBB70_28:                              # %for.cond51
                                        #   Parent Loop BB70_24 Depth=1
                                        #     Parent Loop BB70_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB70_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB70_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB70_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_28
.LBB70_31:                              # %for.end63
                                        #   in Loop: Header=BB70_26 Depth=2
	jmp	.LBB70_32
.LBB70_32:                              # %for.inc64
                                        #   in Loop: Header=BB70_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_26
.LBB70_33:                              # %for.end66
                                        #   in Loop: Header=BB70_24 Depth=1
	jmp	.LBB70_34
.LBB70_34:                              # %for.inc67
                                        #   in Loop: Header=BB70_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_24
.LBB70_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB70_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB70_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB70_36 Depth=1
	vmovsd	.LCPI70_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI70_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI70_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB70_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_36
.LBB70_39:                              # %for.end98
	cmpl	$1196001347, -20(%rbp)  # imm = 0x47498843
	jne	.LBB70_41
.LBB70_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_40
.Lfunc_end70:
	.size	create_context_memory.63, .Lfunc_end70-create_context_memory.63
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.64
.LCPI71_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.64
	.p2align	4, 0x90
	.type	GetCtxModelNumber.64,@function
GetCtxModelNumber.64:                   # @GetCtxModelNumber.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI71_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1985286900, -44(%rbp)  # imm = 0x765512F4
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB71_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_3 Depth 2
                                        #       Child Loop BB71_5 Depth 3
                                        #     Child Loop BB71_14 Depth 2
                                        #       Child Loop BB71_16 Depth 3
                                        #     Child Loop BB71_25 Depth 2
                                        #       Child Loop BB71_27 Depth 3
                                        #     Child Loop BB71_36 Depth 2
                                        #       Child Loop BB71_38 Depth 3
                                        #     Child Loop BB71_47 Depth 2
                                        #     Child Loop BB71_54 Depth 2
                                        #     Child Loop BB71_61 Depth 2
                                        #     Child Loop BB71_68 Depth 2
                                        #     Child Loop BB71_75 Depth 2
                                        #     Child Loop BB71_82 Depth 2
                                        #       Child Loop BB71_84 Depth 3
                                        #     Child Loop BB71_93 Depth 2
                                        #       Child Loop BB71_95 Depth 3
                                        #     Child Loop BB71_104 Depth 2
                                        #       Child Loop BB71_106 Depth 3
                                        #     Child Loop BB71_115 Depth 2
                                        #       Child Loop BB71_117 Depth 3
                                        #     Child Loop BB71_126 Depth 2
                                        #       Child Loop BB71_128 Depth 3
                                        #     Child Loop BB71_137 Depth 2
                                        #       Child Loop BB71_139 Depth 3
                                        #     Child Loop BB71_148 Depth 2
                                        #       Child Loop BB71_150 Depth 3
                                        #     Child Loop BB71_159 Depth 2
                                        #       Child Loop BB71_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB71_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB71_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB71_3:                               # %for.cond2
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB71_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	$0, -4(%rbp)
.LBB71_5:                               # %for.cond5
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB71_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB71_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB71_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_9
.LBB71_8:                               # %if.else
                                        #   in Loop: Header=BB71_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_9:                               # %if.end
                                        #   in Loop: Header=BB71_5 Depth=3
	jmp	.LBB71_10
.LBB71_10:                              # %for.inc
                                        #   in Loop: Header=BB71_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_5
.LBB71_11:                              # %for.end
                                        #   in Loop: Header=BB71_3 Depth=2
	jmp	.LBB71_12
.LBB71_12:                              # %for.inc33
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_3
.LBB71_13:                              # %for.end35
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_14:                              # %for.cond36
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB71_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB71_14 Depth=2
	movl	$0, -4(%rbp)
.LBB71_16:                              # %for.cond39
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB71_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB71_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB71_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_20
.LBB71_19:                              # %if.else58
                                        #   in Loop: Header=BB71_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_20:                              # %if.end73
                                        #   in Loop: Header=BB71_16 Depth=3
	jmp	.LBB71_21
.LBB71_21:                              # %for.inc74
                                        #   in Loop: Header=BB71_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_16
.LBB71_22:                              # %for.end76
                                        #   in Loop: Header=BB71_14 Depth=2
	jmp	.LBB71_23
.LBB71_23:                              # %for.inc77
                                        #   in Loop: Header=BB71_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_14
.LBB71_24:                              # %for.end79
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_25:                              # %for.cond80
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB71_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB71_25 Depth=2
	movl	$0, -4(%rbp)
.LBB71_27:                              # %for.cond83
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB71_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB71_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB71_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_31
.LBB71_30:                              # %if.else102
                                        #   in Loop: Header=BB71_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_31:                              # %if.end117
                                        #   in Loop: Header=BB71_27 Depth=3
	jmp	.LBB71_32
.LBB71_32:                              # %for.inc118
                                        #   in Loop: Header=BB71_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_27
.LBB71_33:                              # %for.end120
                                        #   in Loop: Header=BB71_25 Depth=2
	jmp	.LBB71_34
.LBB71_34:                              # %for.inc121
                                        #   in Loop: Header=BB71_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_25
.LBB71_35:                              # %for.end123
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_36:                              # %for.cond124
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB71_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB71_36 Depth=2
	movl	$0, -4(%rbp)
.LBB71_38:                              # %for.cond127
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB71_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB71_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB71_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_42
.LBB71_41:                              # %if.else146
                                        #   in Loop: Header=BB71_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_42:                              # %if.end161
                                        #   in Loop: Header=BB71_38 Depth=3
	jmp	.LBB71_43
.LBB71_43:                              # %for.inc162
                                        #   in Loop: Header=BB71_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_38
.LBB71_44:                              # %for.end164
                                        #   in Loop: Header=BB71_36 Depth=2
	jmp	.LBB71_45
.LBB71_45:                              # %for.inc165
                                        #   in Loop: Header=BB71_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_36
.LBB71_46:                              # %for.end167
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -4(%rbp)
.LBB71_47:                              # %for.cond168
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB71_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB71_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB71_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_51
.LBB71_50:                              # %if.else184
                                        #   in Loop: Header=BB71_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_51:                              # %if.end196
                                        #   in Loop: Header=BB71_47 Depth=2
	jmp	.LBB71_52
.LBB71_52:                              # %for.inc197
                                        #   in Loop: Header=BB71_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_47
.LBB71_53:                              # %for.end199
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -4(%rbp)
.LBB71_54:                              # %for.cond200
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB71_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB71_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB71_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_58
.LBB71_57:                              # %if.else216
                                        #   in Loop: Header=BB71_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_58:                              # %if.end228
                                        #   in Loop: Header=BB71_54 Depth=2
	jmp	.LBB71_59
.LBB71_59:                              # %for.inc229
                                        #   in Loop: Header=BB71_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_54
.LBB71_60:                              # %for.end231
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -4(%rbp)
.LBB71_61:                              # %for.cond232
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB71_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB71_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB71_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_65
.LBB71_64:                              # %if.else248
                                        #   in Loop: Header=BB71_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_65:                              # %if.end260
                                        #   in Loop: Header=BB71_61 Depth=2
	jmp	.LBB71_66
.LBB71_66:                              # %for.inc261
                                        #   in Loop: Header=BB71_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_61
.LBB71_67:                              # %for.end263
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -4(%rbp)
.LBB71_68:                              # %for.cond264
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB71_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB71_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB71_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_72
.LBB71_71:                              # %if.else280
                                        #   in Loop: Header=BB71_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_72:                              # %if.end292
                                        #   in Loop: Header=BB71_68 Depth=2
	jmp	.LBB71_73
.LBB71_73:                              # %for.inc293
                                        #   in Loop: Header=BB71_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_68
.LBB71_74:                              # %for.end295
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -4(%rbp)
.LBB71_75:                              # %for.cond296
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB71_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB71_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB71_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_79
.LBB71_78:                              # %if.else312
                                        #   in Loop: Header=BB71_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_79:                              # %if.end324
                                        #   in Loop: Header=BB71_75 Depth=2
	jmp	.LBB71_80
.LBB71_80:                              # %for.inc325
                                        #   in Loop: Header=BB71_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_75
.LBB71_81:                              # %for.end327
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_82:                              # %for.cond328
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB71_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB71_82 Depth=2
	movl	$0, -4(%rbp)
.LBB71_84:                              # %for.cond331
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB71_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB71_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB71_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_88
.LBB71_87:                              # %if.else350
                                        #   in Loop: Header=BB71_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_88:                              # %if.end365
                                        #   in Loop: Header=BB71_84 Depth=3
	jmp	.LBB71_89
.LBB71_89:                              # %for.inc366
                                        #   in Loop: Header=BB71_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_84
.LBB71_90:                              # %for.end368
                                        #   in Loop: Header=BB71_82 Depth=2
	jmp	.LBB71_91
.LBB71_91:                              # %for.inc369
                                        #   in Loop: Header=BB71_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_82
.LBB71_92:                              # %for.end371
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_93:                              # %for.cond372
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB71_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB71_93 Depth=2
	movl	$0, -4(%rbp)
.LBB71_95:                              # %for.cond375
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB71_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB71_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB71_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_99
.LBB71_98:                              # %if.else394
                                        #   in Loop: Header=BB71_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_99:                              # %if.end409
                                        #   in Loop: Header=BB71_95 Depth=3
	jmp	.LBB71_100
.LBB71_100:                             # %for.inc410
                                        #   in Loop: Header=BB71_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_95
.LBB71_101:                             # %for.end412
                                        #   in Loop: Header=BB71_93 Depth=2
	jmp	.LBB71_102
.LBB71_102:                             # %for.inc413
                                        #   in Loop: Header=BB71_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_93
.LBB71_103:                             # %for.end415
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_104:                             # %for.cond416
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB71_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB71_104 Depth=2
	movl	$0, -4(%rbp)
.LBB71_106:                             # %for.cond419
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB71_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB71_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB71_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_110
.LBB71_109:                             # %if.else438
                                        #   in Loop: Header=BB71_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_110:                             # %if.end453
                                        #   in Loop: Header=BB71_106 Depth=3
	jmp	.LBB71_111
.LBB71_111:                             # %for.inc454
                                        #   in Loop: Header=BB71_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_106
.LBB71_112:                             # %for.end456
                                        #   in Loop: Header=BB71_104 Depth=2
	jmp	.LBB71_113
.LBB71_113:                             # %for.inc457
                                        #   in Loop: Header=BB71_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_104
.LBB71_114:                             # %for.end459
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_115:                             # %for.cond460
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB71_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB71_115 Depth=2
	movl	$0, -4(%rbp)
.LBB71_117:                             # %for.cond463
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB71_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB71_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB71_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_121
.LBB71_120:                             # %if.else482
                                        #   in Loop: Header=BB71_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_121:                             # %if.end497
                                        #   in Loop: Header=BB71_117 Depth=3
	jmp	.LBB71_122
.LBB71_122:                             # %for.inc498
                                        #   in Loop: Header=BB71_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_117
.LBB71_123:                             # %for.end500
                                        #   in Loop: Header=BB71_115 Depth=2
	jmp	.LBB71_124
.LBB71_124:                             # %for.inc501
                                        #   in Loop: Header=BB71_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_115
.LBB71_125:                             # %for.end503
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_126:                             # %for.cond504
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB71_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB71_126 Depth=2
	movl	$0, -4(%rbp)
.LBB71_128:                             # %for.cond507
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB71_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB71_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB71_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_132
.LBB71_131:                             # %if.else526
                                        #   in Loop: Header=BB71_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_132:                             # %if.end541
                                        #   in Loop: Header=BB71_128 Depth=3
	jmp	.LBB71_133
.LBB71_133:                             # %for.inc542
                                        #   in Loop: Header=BB71_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_128
.LBB71_134:                             # %for.end544
                                        #   in Loop: Header=BB71_126 Depth=2
	jmp	.LBB71_135
.LBB71_135:                             # %for.inc545
                                        #   in Loop: Header=BB71_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_126
.LBB71_136:                             # %for.end547
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_137:                             # %for.cond548
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB71_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB71_137 Depth=2
	movl	$0, -4(%rbp)
.LBB71_139:                             # %for.cond551
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB71_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB71_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB71_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_143
.LBB71_142:                             # %if.else570
                                        #   in Loop: Header=BB71_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_143:                             # %if.end585
                                        #   in Loop: Header=BB71_139 Depth=3
	jmp	.LBB71_144
.LBB71_144:                             # %for.inc586
                                        #   in Loop: Header=BB71_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_139
.LBB71_145:                             # %for.end588
                                        #   in Loop: Header=BB71_137 Depth=2
	jmp	.LBB71_146
.LBB71_146:                             # %for.inc589
                                        #   in Loop: Header=BB71_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_137
.LBB71_147:                             # %for.end591
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_148:                             # %for.cond592
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB71_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB71_148 Depth=2
	movl	$0, -4(%rbp)
.LBB71_150:                             # %for.cond595
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB71_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB71_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB71_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_154
.LBB71_153:                             # %if.else614
                                        #   in Loop: Header=BB71_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_154:                             # %if.end629
                                        #   in Loop: Header=BB71_150 Depth=3
	jmp	.LBB71_155
.LBB71_155:                             # %for.inc630
                                        #   in Loop: Header=BB71_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_150
.LBB71_156:                             # %for.end632
                                        #   in Loop: Header=BB71_148 Depth=2
	jmp	.LBB71_157
.LBB71_157:                             # %for.inc633
                                        #   in Loop: Header=BB71_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_148
.LBB71_158:                             # %for.end635
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_159:                             # %for.cond636
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB71_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB71_159 Depth=2
	movl	$0, -4(%rbp)
.LBB71_161:                             # %for.cond639
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB71_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB71_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB71_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_165
.LBB71_164:                             # %if.else658
                                        #   in Loop: Header=BB71_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_165:                             # %if.end673
                                        #   in Loop: Header=BB71_161 Depth=3
	jmp	.LBB71_166
.LBB71_166:                             # %for.inc674
                                        #   in Loop: Header=BB71_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_161
.LBB71_167:                             # %for.end676
                                        #   in Loop: Header=BB71_159 Depth=2
	jmp	.LBB71_168
.LBB71_168:                             # %for.inc677
                                        #   in Loop: Header=BB71_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_159
.LBB71_169:                             # %for.end679
                                        #   in Loop: Header=BB71_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB71_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB71_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB71_171:                             # %if.end682
                                        #   in Loop: Header=BB71_1 Depth=1
	jmp	.LBB71_172
.LBB71_172:                             # %for.inc683
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_1
.LBB71_173:                             # %for.end685
	cmpl	$1985286900, -44(%rbp)  # imm = 0x765512F4
	jne	.LBB71_175
.LBB71_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_174
.Lfunc_end71:
	.size	GetCtxModelNumber.64, .Lfunc_end71-GetCtxModelNumber.64
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.65
.LCPI72_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.65
	.p2align	4, 0x90
	.type	GetCtxModelNumber.65,@function
GetCtxModelNumber.65:                   # @GetCtxModelNumber.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI72_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$639414841, -48(%rbp)   # imm = 0x261CB239
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB72_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_3 Depth 2
                                        #       Child Loop BB72_5 Depth 3
                                        #     Child Loop BB72_14 Depth 2
                                        #       Child Loop BB72_16 Depth 3
                                        #     Child Loop BB72_25 Depth 2
                                        #       Child Loop BB72_27 Depth 3
                                        #     Child Loop BB72_36 Depth 2
                                        #       Child Loop BB72_38 Depth 3
                                        #     Child Loop BB72_47 Depth 2
                                        #     Child Loop BB72_54 Depth 2
                                        #     Child Loop BB72_61 Depth 2
                                        #     Child Loop BB72_68 Depth 2
                                        #     Child Loop BB72_75 Depth 2
                                        #     Child Loop BB72_82 Depth 2
                                        #       Child Loop BB72_84 Depth 3
                                        #     Child Loop BB72_93 Depth 2
                                        #       Child Loop BB72_95 Depth 3
                                        #     Child Loop BB72_104 Depth 2
                                        #       Child Loop BB72_106 Depth 3
                                        #     Child Loop BB72_115 Depth 2
                                        #       Child Loop BB72_117 Depth 3
                                        #     Child Loop BB72_126 Depth 2
                                        #       Child Loop BB72_128 Depth 3
                                        #     Child Loop BB72_137 Depth 2
                                        #       Child Loop BB72_139 Depth 3
                                        #     Child Loop BB72_148 Depth 2
                                        #       Child Loop BB72_150 Depth 3
                                        #     Child Loop BB72_159 Depth 2
                                        #       Child Loop BB72_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB72_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB72_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB72_3:                               # %for.cond2
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB72_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB72_3 Depth=2
	movl	$0, -4(%rbp)
.LBB72_5:                               # %for.cond5
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB72_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB72_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB72_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_9
.LBB72_8:                               # %if.else
                                        #   in Loop: Header=BB72_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_9:                               # %if.end
                                        #   in Loop: Header=BB72_5 Depth=3
	jmp	.LBB72_10
.LBB72_10:                              # %for.inc
                                        #   in Loop: Header=BB72_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_5
.LBB72_11:                              # %for.end
                                        #   in Loop: Header=BB72_3 Depth=2
	jmp	.LBB72_12
.LBB72_12:                              # %for.inc33
                                        #   in Loop: Header=BB72_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_3
.LBB72_13:                              # %for.end35
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -8(%rbp)
.LBB72_14:                              # %for.cond36
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB72_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB72_14 Depth=2
	movl	$0, -4(%rbp)
.LBB72_16:                              # %for.cond39
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB72_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB72_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB72_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_20
.LBB72_19:                              # %if.else58
                                        #   in Loop: Header=BB72_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_20:                              # %if.end73
                                        #   in Loop: Header=BB72_16 Depth=3
	jmp	.LBB72_21
.LBB72_21:                              # %for.inc74
                                        #   in Loop: Header=BB72_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_16
.LBB72_22:                              # %for.end76
                                        #   in Loop: Header=BB72_14 Depth=2
	jmp	.LBB72_23
.LBB72_23:                              # %for.inc77
                                        #   in Loop: Header=BB72_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_14
.LBB72_24:                              # %for.end79
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -8(%rbp)
.LBB72_25:                              # %for.cond80
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB72_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB72_25 Depth=2
	movl	$0, -4(%rbp)
.LBB72_27:                              # %for.cond83
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB72_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB72_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB72_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_31
.LBB72_30:                              # %if.else102
                                        #   in Loop: Header=BB72_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_31:                              # %if.end117
                                        #   in Loop: Header=BB72_27 Depth=3
	jmp	.LBB72_32
.LBB72_32:                              # %for.inc118
                                        #   in Loop: Header=BB72_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_27
.LBB72_33:                              # %for.end120
                                        #   in Loop: Header=BB72_25 Depth=2
	jmp	.LBB72_34
.LBB72_34:                              # %for.inc121
                                        #   in Loop: Header=BB72_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_25
.LBB72_35:                              # %for.end123
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -8(%rbp)
.LBB72_36:                              # %for.cond124
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB72_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB72_36 Depth=2
	movl	$0, -4(%rbp)
.LBB72_38:                              # %for.cond127
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB72_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB72_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB72_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_42
.LBB72_41:                              # %if.else146
                                        #   in Loop: Header=BB72_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_42:                              # %if.end161
                                        #   in Loop: Header=BB72_38 Depth=3
	jmp	.LBB72_43
.LBB72_43:                              # %for.inc162
                                        #   in Loop: Header=BB72_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_38
.LBB72_44:                              # %for.end164
                                        #   in Loop: Header=BB72_36 Depth=2
	jmp	.LBB72_45
.LBB72_45:                              # %for.inc165
                                        #   in Loop: Header=BB72_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_36
.LBB72_46:                              # %for.end167
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -4(%rbp)
.LBB72_47:                              # %for.cond168
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB72_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB72_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB72_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_51
.LBB72_50:                              # %if.else184
                                        #   in Loop: Header=BB72_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_51:                              # %if.end196
                                        #   in Loop: Header=BB72_47 Depth=2
	jmp	.LBB72_52
.LBB72_52:                              # %for.inc197
                                        #   in Loop: Header=BB72_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_47
.LBB72_53:                              # %for.end199
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -4(%rbp)
.LBB72_54:                              # %for.cond200
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB72_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB72_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB72_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_58
.LBB72_57:                              # %if.else216
                                        #   in Loop: Header=BB72_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_58:                              # %if.end228
                                        #   in Loop: Header=BB72_54 Depth=2
	jmp	.LBB72_59
.LBB72_59:                              # %for.inc229
                                        #   in Loop: Header=BB72_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_54
.LBB72_60:                              # %for.end231
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -4(%rbp)
.LBB72_61:                              # %for.cond232
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB72_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB72_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB72_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_65
.LBB72_64:                              # %if.else248
                                        #   in Loop: Header=BB72_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_65:                              # %if.end260
                                        #   in Loop: Header=BB72_61 Depth=2
	jmp	.LBB72_66
.LBB72_66:                              # %for.inc261
                                        #   in Loop: Header=BB72_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_61
.LBB72_67:                              # %for.end263
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -4(%rbp)
.LBB72_68:                              # %for.cond264
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB72_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB72_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB72_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_72
.LBB72_71:                              # %if.else280
                                        #   in Loop: Header=BB72_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_72:                              # %if.end292
                                        #   in Loop: Header=BB72_68 Depth=2
	jmp	.LBB72_73
.LBB72_73:                              # %for.inc293
                                        #   in Loop: Header=BB72_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_68
.LBB72_74:                              # %for.end295
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -4(%rbp)
.LBB72_75:                              # %for.cond296
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB72_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB72_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB72_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_79
.LBB72_78:                              # %if.else312
                                        #   in Loop: Header=BB72_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_79:                              # %if.end324
                                        #   in Loop: Header=BB72_75 Depth=2
	jmp	.LBB72_80
.LBB72_80:                              # %for.inc325
                                        #   in Loop: Header=BB72_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_75
.LBB72_81:                              # %for.end327
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -8(%rbp)
.LBB72_82:                              # %for.cond328
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB72_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB72_82 Depth=2
	movl	$0, -4(%rbp)
.LBB72_84:                              # %for.cond331
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB72_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB72_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB72_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_88
.LBB72_87:                              # %if.else350
                                        #   in Loop: Header=BB72_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_88:                              # %if.end365
                                        #   in Loop: Header=BB72_84 Depth=3
	jmp	.LBB72_89
.LBB72_89:                              # %for.inc366
                                        #   in Loop: Header=BB72_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_84
.LBB72_90:                              # %for.end368
                                        #   in Loop: Header=BB72_82 Depth=2
	jmp	.LBB72_91
.LBB72_91:                              # %for.inc369
                                        #   in Loop: Header=BB72_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_82
.LBB72_92:                              # %for.end371
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -8(%rbp)
.LBB72_93:                              # %for.cond372
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB72_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB72_93 Depth=2
	movl	$0, -4(%rbp)
.LBB72_95:                              # %for.cond375
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB72_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB72_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB72_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_99
.LBB72_98:                              # %if.else394
                                        #   in Loop: Header=BB72_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_99:                              # %if.end409
                                        #   in Loop: Header=BB72_95 Depth=3
	jmp	.LBB72_100
.LBB72_100:                             # %for.inc410
                                        #   in Loop: Header=BB72_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_95
.LBB72_101:                             # %for.end412
                                        #   in Loop: Header=BB72_93 Depth=2
	jmp	.LBB72_102
.LBB72_102:                             # %for.inc413
                                        #   in Loop: Header=BB72_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_93
.LBB72_103:                             # %for.end415
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -8(%rbp)
.LBB72_104:                             # %for.cond416
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB72_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB72_104 Depth=2
	movl	$0, -4(%rbp)
.LBB72_106:                             # %for.cond419
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB72_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB72_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB72_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_110
.LBB72_109:                             # %if.else438
                                        #   in Loop: Header=BB72_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_110:                             # %if.end453
                                        #   in Loop: Header=BB72_106 Depth=3
	jmp	.LBB72_111
.LBB72_111:                             # %for.inc454
                                        #   in Loop: Header=BB72_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_106
.LBB72_112:                             # %for.end456
                                        #   in Loop: Header=BB72_104 Depth=2
	jmp	.LBB72_113
.LBB72_113:                             # %for.inc457
                                        #   in Loop: Header=BB72_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_104
.LBB72_114:                             # %for.end459
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -8(%rbp)
.LBB72_115:                             # %for.cond460
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB72_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB72_115 Depth=2
	movl	$0, -4(%rbp)
.LBB72_117:                             # %for.cond463
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB72_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB72_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB72_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_121
.LBB72_120:                             # %if.else482
                                        #   in Loop: Header=BB72_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_121:                             # %if.end497
                                        #   in Loop: Header=BB72_117 Depth=3
	jmp	.LBB72_122
.LBB72_122:                             # %for.inc498
                                        #   in Loop: Header=BB72_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_117
.LBB72_123:                             # %for.end500
                                        #   in Loop: Header=BB72_115 Depth=2
	jmp	.LBB72_124
.LBB72_124:                             # %for.inc501
                                        #   in Loop: Header=BB72_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_115
.LBB72_125:                             # %for.end503
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -8(%rbp)
.LBB72_126:                             # %for.cond504
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB72_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB72_126 Depth=2
	movl	$0, -4(%rbp)
.LBB72_128:                             # %for.cond507
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB72_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB72_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB72_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_132
.LBB72_131:                             # %if.else526
                                        #   in Loop: Header=BB72_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_132:                             # %if.end541
                                        #   in Loop: Header=BB72_128 Depth=3
	jmp	.LBB72_133
.LBB72_133:                             # %for.inc542
                                        #   in Loop: Header=BB72_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_128
.LBB72_134:                             # %for.end544
                                        #   in Loop: Header=BB72_126 Depth=2
	jmp	.LBB72_135
.LBB72_135:                             # %for.inc545
                                        #   in Loop: Header=BB72_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_126
.LBB72_136:                             # %for.end547
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -8(%rbp)
.LBB72_137:                             # %for.cond548
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB72_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB72_137 Depth=2
	movl	$0, -4(%rbp)
.LBB72_139:                             # %for.cond551
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB72_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB72_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB72_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_143
.LBB72_142:                             # %if.else570
                                        #   in Loop: Header=BB72_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_143:                             # %if.end585
                                        #   in Loop: Header=BB72_139 Depth=3
	jmp	.LBB72_144
.LBB72_144:                             # %for.inc586
                                        #   in Loop: Header=BB72_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_139
.LBB72_145:                             # %for.end588
                                        #   in Loop: Header=BB72_137 Depth=2
	jmp	.LBB72_146
.LBB72_146:                             # %for.inc589
                                        #   in Loop: Header=BB72_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_137
.LBB72_147:                             # %for.end591
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -8(%rbp)
.LBB72_148:                             # %for.cond592
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB72_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB72_148 Depth=2
	movl	$0, -4(%rbp)
.LBB72_150:                             # %for.cond595
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB72_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB72_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB72_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_154
.LBB72_153:                             # %if.else614
                                        #   in Loop: Header=BB72_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_154:                             # %if.end629
                                        #   in Loop: Header=BB72_150 Depth=3
	jmp	.LBB72_155
.LBB72_155:                             # %for.inc630
                                        #   in Loop: Header=BB72_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_150
.LBB72_156:                             # %for.end632
                                        #   in Loop: Header=BB72_148 Depth=2
	jmp	.LBB72_157
.LBB72_157:                             # %for.inc633
                                        #   in Loop: Header=BB72_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_148
.LBB72_158:                             # %for.end635
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -8(%rbp)
.LBB72_159:                             # %for.cond636
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB72_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB72_159 Depth=2
	movl	$0, -4(%rbp)
.LBB72_161:                             # %for.cond639
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB72_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB72_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB72_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_165
.LBB72_164:                             # %if.else658
                                        #   in Loop: Header=BB72_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_165:                             # %if.end673
                                        #   in Loop: Header=BB72_161 Depth=3
	jmp	.LBB72_166
.LBB72_166:                             # %for.inc674
                                        #   in Loop: Header=BB72_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_161
.LBB72_167:                             # %for.end676
                                        #   in Loop: Header=BB72_159 Depth=2
	jmp	.LBB72_168
.LBB72_168:                             # %for.inc677
                                        #   in Loop: Header=BB72_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_159
.LBB72_169:                             # %for.end679
                                        #   in Loop: Header=BB72_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB72_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB72_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB72_171:                             # %if.end682
                                        #   in Loop: Header=BB72_1 Depth=1
	jmp	.LBB72_172
.LBB72_172:                             # %for.inc683
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_1
.LBB72_173:                             # %for.end685
	cmpl	$639414841, -48(%rbp)   # imm = 0x261CB239
	jne	.LBB72_175
.LBB72_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_174
.Lfunc_end72:
	.size	GetCtxModelNumber.65, .Lfunc_end72-GetCtxModelNumber.65
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.66        # -- Begin function init_contexts.66
	.p2align	4, 0x90
	.type	init_contexts.66,@function
init_contexts.66:                       # @init_contexts.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$480952751, -28(%rbp)   # imm = 0x1CAAC1AF
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB73_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB73_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -4(%rbp)
.LBB73_3:                               # %for.cond2
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB73_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_7
.LBB73_6:                               # %if.else
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_7:                               # %if.end
                                        #   in Loop: Header=BB73_3 Depth=2
	jmp	.LBB73_8
.LBB73_8:                               # %for.inc
                                        #   in Loop: Header=BB73_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_3
.LBB73_9:                               # %for.end
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_10
.LBB73_10:                              # %for.inc28
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_1
.LBB73_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB73_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB73_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB73_12 Depth=1
	movl	$0, -4(%rbp)
.LBB73_14:                              # %for.cond34
                                        #   Parent Loop BB73_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB73_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB73_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB73_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_18
.LBB73_17:                              # %if.else52
                                        #   in Loop: Header=BB73_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_18:                              # %if.end66
                                        #   in Loop: Header=BB73_14 Depth=2
	jmp	.LBB73_19
.LBB73_19:                              # %for.inc67
                                        #   in Loop: Header=BB73_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_14
.LBB73_20:                              # %for.end69
                                        #   in Loop: Header=BB73_12 Depth=1
	jmp	.LBB73_21
.LBB73_21:                              # %for.inc70
                                        #   in Loop: Header=BB73_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_12
.LBB73_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB73_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB73_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB73_23 Depth=1
	movl	$0, -4(%rbp)
.LBB73_25:                              # %for.cond76
                                        #   Parent Loop BB73_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB73_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB73_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB73_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_29
.LBB73_28:                              # %if.else94
                                        #   in Loop: Header=BB73_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_29:                              # %if.end108
                                        #   in Loop: Header=BB73_25 Depth=2
	jmp	.LBB73_30
.LBB73_30:                              # %for.inc109
                                        #   in Loop: Header=BB73_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_25
.LBB73_31:                              # %for.end111
                                        #   in Loop: Header=BB73_23 Depth=1
	jmp	.LBB73_32
.LBB73_32:                              # %for.inc112
                                        #   in Loop: Header=BB73_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_23
.LBB73_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB73_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB73_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB73_34 Depth=1
	movl	$0, -4(%rbp)
.LBB73_36:                              # %for.cond118
                                        #   Parent Loop BB73_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB73_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB73_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB73_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_40
.LBB73_39:                              # %if.else136
                                        #   in Loop: Header=BB73_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_40:                              # %if.end150
                                        #   in Loop: Header=BB73_36 Depth=2
	jmp	.LBB73_41
.LBB73_41:                              # %for.inc151
                                        #   in Loop: Header=BB73_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_36
.LBB73_42:                              # %for.end153
                                        #   in Loop: Header=BB73_34 Depth=1
	jmp	.LBB73_43
.LBB73_43:                              # %for.inc154
                                        #   in Loop: Header=BB73_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_34
.LBB73_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB73_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB73_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB73_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB73_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_49
.LBB73_48:                              # %if.else172
                                        #   in Loop: Header=BB73_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_49:                              # %if.end183
                                        #   in Loop: Header=BB73_45 Depth=1
	jmp	.LBB73_50
.LBB73_50:                              # %for.inc184
                                        #   in Loop: Header=BB73_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_45
.LBB73_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB73_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB73_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB73_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB73_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_56
.LBB73_55:                              # %if.else202
                                        #   in Loop: Header=BB73_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_56:                              # %if.end213
                                        #   in Loop: Header=BB73_52 Depth=1
	jmp	.LBB73_57
.LBB73_57:                              # %for.inc214
                                        #   in Loop: Header=BB73_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_52
.LBB73_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB73_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB73_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB73_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB73_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_63
.LBB73_62:                              # %if.else232
                                        #   in Loop: Header=BB73_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_63:                              # %if.end243
                                        #   in Loop: Header=BB73_59 Depth=1
	jmp	.LBB73_64
.LBB73_64:                              # %for.inc244
                                        #   in Loop: Header=BB73_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_59
.LBB73_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB73_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB73_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB73_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB73_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_70
.LBB73_69:                              # %if.else262
                                        #   in Loop: Header=BB73_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_70:                              # %if.end273
                                        #   in Loop: Header=BB73_66 Depth=1
	jmp	.LBB73_71
.LBB73_71:                              # %for.inc274
                                        #   in Loop: Header=BB73_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_66
.LBB73_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB73_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB73_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB73_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB73_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_77
.LBB73_76:                              # %if.else292
                                        #   in Loop: Header=BB73_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_77:                              # %if.end303
                                        #   in Loop: Header=BB73_73 Depth=1
	jmp	.LBB73_78
.LBB73_78:                              # %for.inc304
                                        #   in Loop: Header=BB73_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_73
.LBB73_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB73_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB73_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB73_80 Depth=1
	movl	$0, -4(%rbp)
.LBB73_82:                              # %for.cond310
                                        #   Parent Loop BB73_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB73_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB73_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB73_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_86
.LBB73_85:                              # %if.else328
                                        #   in Loop: Header=BB73_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_86:                              # %if.end342
                                        #   in Loop: Header=BB73_82 Depth=2
	jmp	.LBB73_87
.LBB73_87:                              # %for.inc343
                                        #   in Loop: Header=BB73_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_82
.LBB73_88:                              # %for.end345
                                        #   in Loop: Header=BB73_80 Depth=1
	jmp	.LBB73_89
.LBB73_89:                              # %for.inc346
                                        #   in Loop: Header=BB73_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_80
.LBB73_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB73_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB73_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB73_91 Depth=1
	movl	$0, -4(%rbp)
.LBB73_93:                              # %for.cond352
                                        #   Parent Loop BB73_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB73_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB73_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB73_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_97
.LBB73_96:                              # %if.else370
                                        #   in Loop: Header=BB73_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_97:                              # %if.end384
                                        #   in Loop: Header=BB73_93 Depth=2
	jmp	.LBB73_98
.LBB73_98:                              # %for.inc385
                                        #   in Loop: Header=BB73_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_93
.LBB73_99:                              # %for.end387
                                        #   in Loop: Header=BB73_91 Depth=1
	jmp	.LBB73_100
.LBB73_100:                             # %for.inc388
                                        #   in Loop: Header=BB73_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_91
.LBB73_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB73_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB73_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB73_102 Depth=1
	movl	$0, -4(%rbp)
.LBB73_104:                             # %for.cond394
                                        #   Parent Loop BB73_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB73_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB73_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB73_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_108
.LBB73_107:                             # %if.else412
                                        #   in Loop: Header=BB73_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_108:                             # %if.end426
                                        #   in Loop: Header=BB73_104 Depth=2
	jmp	.LBB73_109
.LBB73_109:                             # %for.inc427
                                        #   in Loop: Header=BB73_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_104
.LBB73_110:                             # %for.end429
                                        #   in Loop: Header=BB73_102 Depth=1
	jmp	.LBB73_111
.LBB73_111:                             # %for.inc430
                                        #   in Loop: Header=BB73_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_102
.LBB73_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB73_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB73_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB73_113 Depth=1
	movl	$0, -4(%rbp)
.LBB73_115:                             # %for.cond436
                                        #   Parent Loop BB73_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB73_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB73_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB73_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_119
.LBB73_118:                             # %if.else454
                                        #   in Loop: Header=BB73_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_119:                             # %if.end468
                                        #   in Loop: Header=BB73_115 Depth=2
	jmp	.LBB73_120
.LBB73_120:                             # %for.inc469
                                        #   in Loop: Header=BB73_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_115
.LBB73_121:                             # %for.end471
                                        #   in Loop: Header=BB73_113 Depth=1
	jmp	.LBB73_122
.LBB73_122:                             # %for.inc472
                                        #   in Loop: Header=BB73_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_113
.LBB73_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB73_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB73_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB73_124 Depth=1
	movl	$0, -4(%rbp)
.LBB73_126:                             # %for.cond478
                                        #   Parent Loop BB73_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB73_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB73_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB73_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_130
.LBB73_129:                             # %if.else496
                                        #   in Loop: Header=BB73_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_130:                             # %if.end510
                                        #   in Loop: Header=BB73_126 Depth=2
	jmp	.LBB73_131
.LBB73_131:                             # %for.inc511
                                        #   in Loop: Header=BB73_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_126
.LBB73_132:                             # %for.end513
                                        #   in Loop: Header=BB73_124 Depth=1
	jmp	.LBB73_133
.LBB73_133:                             # %for.inc514
                                        #   in Loop: Header=BB73_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_124
.LBB73_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB73_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB73_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB73_135 Depth=1
	movl	$0, -4(%rbp)
.LBB73_137:                             # %for.cond520
                                        #   Parent Loop BB73_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB73_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB73_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB73_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_141
.LBB73_140:                             # %if.else538
                                        #   in Loop: Header=BB73_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_141:                             # %if.end552
                                        #   in Loop: Header=BB73_137 Depth=2
	jmp	.LBB73_142
.LBB73_142:                             # %for.inc553
                                        #   in Loop: Header=BB73_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_137
.LBB73_143:                             # %for.end555
                                        #   in Loop: Header=BB73_135 Depth=1
	jmp	.LBB73_144
.LBB73_144:                             # %for.inc556
                                        #   in Loop: Header=BB73_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_135
.LBB73_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB73_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB73_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB73_146 Depth=1
	movl	$0, -4(%rbp)
.LBB73_148:                             # %for.cond562
                                        #   Parent Loop BB73_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB73_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB73_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB73_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_152
.LBB73_151:                             # %if.else580
                                        #   in Loop: Header=BB73_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_152:                             # %if.end594
                                        #   in Loop: Header=BB73_148 Depth=2
	jmp	.LBB73_153
.LBB73_153:                             # %for.inc595
                                        #   in Loop: Header=BB73_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_148
.LBB73_154:                             # %for.end597
                                        #   in Loop: Header=BB73_146 Depth=1
	jmp	.LBB73_155
.LBB73_155:                             # %for.inc598
                                        #   in Loop: Header=BB73_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_146
.LBB73_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB73_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB73_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB73_157 Depth=1
	movl	$0, -4(%rbp)
.LBB73_159:                             # %for.cond604
                                        #   Parent Loop BB73_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB73_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB73_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB73_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_163
.LBB73_162:                             # %if.else622
                                        #   in Loop: Header=BB73_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_163:                             # %if.end636
                                        #   in Loop: Header=BB73_159 Depth=2
	jmp	.LBB73_164
.LBB73_164:                             # %for.inc637
                                        #   in Loop: Header=BB73_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_159
.LBB73_165:                             # %for.end639
                                        #   in Loop: Header=BB73_157 Depth=1
	jmp	.LBB73_166
.LBB73_166:                             # %for.inc640
                                        #   in Loop: Header=BB73_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_157
.LBB73_167:                             # %for.end642
	cmpl	$480952751, -28(%rbp)   # imm = 0x1CAAC1AF
	jne	.LBB73_169
.LBB73_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_168
.Lfunc_end73:
	.size	init_contexts.66, .Lfunc_end73-init_contexts.66
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.67
.LCPI74_0:
	.quad	4607182418800017408     # double 1
.LCPI74_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI74_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI74_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.67
	.p2align	4, 0x90
	.type	XRate.67,@function
XRate.67:                               # @XRate.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1586365593, -32(%rbp)  # imm = 0x5E8E0499
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB74_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB74_3
.LBB74_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB74_3:                               # %cond.end
	vmovsd	.LCPI74_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI74_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI74_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI74_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB74_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI74_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB74_6
.LBB74_5:                               # %cond.false6
	vmovsd	.LCPI74_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI74_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI74_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB74_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB74_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB74_9
.LBB74_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB74_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB74_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB74_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB74_13
.LBB74_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB74_13:                              # %cond.end26
	jmp	.LBB74_15
.LBB74_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB74_15
.LBB74_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB74_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB74_18
.LBB74_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB74_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1586365593, -32(%rbp)  # imm = 0x5E8E0499
	jne	.LBB74_20
.LBB74_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB74_19
.Lfunc_end74:
	.size	XRate.67, .Lfunc_end74-XRate.67
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.68
.LCPI75_0:
	.quad	4607182418800017408     # double 1
.LCPI75_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI75_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI75_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.68
	.p2align	4, 0x90
	.type	XRate.68,@function
XRate.68:                               # @XRate.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$109701594, -36(%rbp)   # imm = 0x689E9DA
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB75_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB75_3
.LBB75_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB75_3:                               # %cond.end
	vmovsd	.LCPI75_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI75_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI75_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI75_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB75_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI75_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB75_6
.LBB75_5:                               # %cond.false6
	vmovsd	.LCPI75_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI75_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI75_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB75_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB75_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB75_9
.LBB75_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB75_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB75_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB75_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB75_13
.LBB75_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB75_13:                              # %cond.end26
	jmp	.LBB75_15
.LBB75_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB75_15
.LBB75_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB75_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB75_18
.LBB75_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB75_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$109701594, -36(%rbp)   # imm = 0x689E9DA
	jne	.LBB75_20
.LBB75_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB75_19
.Lfunc_end75:
	.size	XRate.68, .Lfunc_end75-XRate.68
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.69
.LCPI76_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.69
	.p2align	4, 0x90
	.type	GetCtxModelNumber.69,@function
GetCtxModelNumber.69:                   # @GetCtxModelNumber.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI76_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$809721406, -48(%rbp)   # imm = 0x30435E3E
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB76_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_3 Depth 2
                                        #       Child Loop BB76_5 Depth 3
                                        #     Child Loop BB76_14 Depth 2
                                        #       Child Loop BB76_16 Depth 3
                                        #     Child Loop BB76_25 Depth 2
                                        #       Child Loop BB76_27 Depth 3
                                        #     Child Loop BB76_36 Depth 2
                                        #       Child Loop BB76_38 Depth 3
                                        #     Child Loop BB76_47 Depth 2
                                        #     Child Loop BB76_54 Depth 2
                                        #     Child Loop BB76_61 Depth 2
                                        #     Child Loop BB76_68 Depth 2
                                        #     Child Loop BB76_75 Depth 2
                                        #     Child Loop BB76_82 Depth 2
                                        #       Child Loop BB76_84 Depth 3
                                        #     Child Loop BB76_93 Depth 2
                                        #       Child Loop BB76_95 Depth 3
                                        #     Child Loop BB76_104 Depth 2
                                        #       Child Loop BB76_106 Depth 3
                                        #     Child Loop BB76_115 Depth 2
                                        #       Child Loop BB76_117 Depth 3
                                        #     Child Loop BB76_126 Depth 2
                                        #       Child Loop BB76_128 Depth 3
                                        #     Child Loop BB76_137 Depth 2
                                        #       Child Loop BB76_139 Depth 3
                                        #     Child Loop BB76_148 Depth 2
                                        #       Child Loop BB76_150 Depth 3
                                        #     Child Loop BB76_159 Depth 2
                                        #       Child Loop BB76_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB76_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB76_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB76_3:                               # %for.cond2
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB76_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	$0, -4(%rbp)
.LBB76_5:                               # %for.cond5
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB76_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB76_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB76_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_9
.LBB76_8:                               # %if.else
                                        #   in Loop: Header=BB76_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_9:                               # %if.end
                                        #   in Loop: Header=BB76_5 Depth=3
	jmp	.LBB76_10
.LBB76_10:                              # %for.inc
                                        #   in Loop: Header=BB76_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_5
.LBB76_11:                              # %for.end
                                        #   in Loop: Header=BB76_3 Depth=2
	jmp	.LBB76_12
.LBB76_12:                              # %for.inc33
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_3
.LBB76_13:                              # %for.end35
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_14:                              # %for.cond36
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB76_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB76_14 Depth=2
	movl	$0, -4(%rbp)
.LBB76_16:                              # %for.cond39
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB76_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB76_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB76_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_20
.LBB76_19:                              # %if.else58
                                        #   in Loop: Header=BB76_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_20:                              # %if.end73
                                        #   in Loop: Header=BB76_16 Depth=3
	jmp	.LBB76_21
.LBB76_21:                              # %for.inc74
                                        #   in Loop: Header=BB76_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_16
.LBB76_22:                              # %for.end76
                                        #   in Loop: Header=BB76_14 Depth=2
	jmp	.LBB76_23
.LBB76_23:                              # %for.inc77
                                        #   in Loop: Header=BB76_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_14
.LBB76_24:                              # %for.end79
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_25:                              # %for.cond80
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB76_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB76_25 Depth=2
	movl	$0, -4(%rbp)
.LBB76_27:                              # %for.cond83
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB76_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB76_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB76_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_31
.LBB76_30:                              # %if.else102
                                        #   in Loop: Header=BB76_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_31:                              # %if.end117
                                        #   in Loop: Header=BB76_27 Depth=3
	jmp	.LBB76_32
.LBB76_32:                              # %for.inc118
                                        #   in Loop: Header=BB76_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_27
.LBB76_33:                              # %for.end120
                                        #   in Loop: Header=BB76_25 Depth=2
	jmp	.LBB76_34
.LBB76_34:                              # %for.inc121
                                        #   in Loop: Header=BB76_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_25
.LBB76_35:                              # %for.end123
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_36:                              # %for.cond124
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB76_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB76_36 Depth=2
	movl	$0, -4(%rbp)
.LBB76_38:                              # %for.cond127
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB76_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB76_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB76_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_42
.LBB76_41:                              # %if.else146
                                        #   in Loop: Header=BB76_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_42:                              # %if.end161
                                        #   in Loop: Header=BB76_38 Depth=3
	jmp	.LBB76_43
.LBB76_43:                              # %for.inc162
                                        #   in Loop: Header=BB76_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_38
.LBB76_44:                              # %for.end164
                                        #   in Loop: Header=BB76_36 Depth=2
	jmp	.LBB76_45
.LBB76_45:                              # %for.inc165
                                        #   in Loop: Header=BB76_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_36
.LBB76_46:                              # %for.end167
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -4(%rbp)
.LBB76_47:                              # %for.cond168
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB76_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB76_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB76_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_51
.LBB76_50:                              # %if.else184
                                        #   in Loop: Header=BB76_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_51:                              # %if.end196
                                        #   in Loop: Header=BB76_47 Depth=2
	jmp	.LBB76_52
.LBB76_52:                              # %for.inc197
                                        #   in Loop: Header=BB76_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_47
.LBB76_53:                              # %for.end199
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -4(%rbp)
.LBB76_54:                              # %for.cond200
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB76_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB76_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB76_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_58
.LBB76_57:                              # %if.else216
                                        #   in Loop: Header=BB76_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_58:                              # %if.end228
                                        #   in Loop: Header=BB76_54 Depth=2
	jmp	.LBB76_59
.LBB76_59:                              # %for.inc229
                                        #   in Loop: Header=BB76_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_54
.LBB76_60:                              # %for.end231
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -4(%rbp)
.LBB76_61:                              # %for.cond232
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB76_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB76_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB76_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_65
.LBB76_64:                              # %if.else248
                                        #   in Loop: Header=BB76_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_65:                              # %if.end260
                                        #   in Loop: Header=BB76_61 Depth=2
	jmp	.LBB76_66
.LBB76_66:                              # %for.inc261
                                        #   in Loop: Header=BB76_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_61
.LBB76_67:                              # %for.end263
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -4(%rbp)
.LBB76_68:                              # %for.cond264
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB76_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB76_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB76_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_72
.LBB76_71:                              # %if.else280
                                        #   in Loop: Header=BB76_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_72:                              # %if.end292
                                        #   in Loop: Header=BB76_68 Depth=2
	jmp	.LBB76_73
.LBB76_73:                              # %for.inc293
                                        #   in Loop: Header=BB76_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_68
.LBB76_74:                              # %for.end295
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -4(%rbp)
.LBB76_75:                              # %for.cond296
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB76_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB76_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB76_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_79
.LBB76_78:                              # %if.else312
                                        #   in Loop: Header=BB76_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_79:                              # %if.end324
                                        #   in Loop: Header=BB76_75 Depth=2
	jmp	.LBB76_80
.LBB76_80:                              # %for.inc325
                                        #   in Loop: Header=BB76_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_75
.LBB76_81:                              # %for.end327
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_82:                              # %for.cond328
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB76_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB76_82 Depth=2
	movl	$0, -4(%rbp)
.LBB76_84:                              # %for.cond331
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB76_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB76_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB76_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_88
.LBB76_87:                              # %if.else350
                                        #   in Loop: Header=BB76_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_88:                              # %if.end365
                                        #   in Loop: Header=BB76_84 Depth=3
	jmp	.LBB76_89
.LBB76_89:                              # %for.inc366
                                        #   in Loop: Header=BB76_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_84
.LBB76_90:                              # %for.end368
                                        #   in Loop: Header=BB76_82 Depth=2
	jmp	.LBB76_91
.LBB76_91:                              # %for.inc369
                                        #   in Loop: Header=BB76_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_82
.LBB76_92:                              # %for.end371
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_93:                              # %for.cond372
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB76_93 Depth=2
	movl	$0, -4(%rbp)
.LBB76_95:                              # %for.cond375
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB76_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB76_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB76_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_99
.LBB76_98:                              # %if.else394
                                        #   in Loop: Header=BB76_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_99:                              # %if.end409
                                        #   in Loop: Header=BB76_95 Depth=3
	jmp	.LBB76_100
.LBB76_100:                             # %for.inc410
                                        #   in Loop: Header=BB76_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_95
.LBB76_101:                             # %for.end412
                                        #   in Loop: Header=BB76_93 Depth=2
	jmp	.LBB76_102
.LBB76_102:                             # %for.inc413
                                        #   in Loop: Header=BB76_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_93
.LBB76_103:                             # %for.end415
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_104:                             # %for.cond416
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB76_104 Depth=2
	movl	$0, -4(%rbp)
.LBB76_106:                             # %for.cond419
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB76_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB76_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB76_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_110
.LBB76_109:                             # %if.else438
                                        #   in Loop: Header=BB76_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_110:                             # %if.end453
                                        #   in Loop: Header=BB76_106 Depth=3
	jmp	.LBB76_111
.LBB76_111:                             # %for.inc454
                                        #   in Loop: Header=BB76_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_106
.LBB76_112:                             # %for.end456
                                        #   in Loop: Header=BB76_104 Depth=2
	jmp	.LBB76_113
.LBB76_113:                             # %for.inc457
                                        #   in Loop: Header=BB76_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_104
.LBB76_114:                             # %for.end459
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_115:                             # %for.cond460
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB76_115 Depth=2
	movl	$0, -4(%rbp)
.LBB76_117:                             # %for.cond463
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB76_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB76_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB76_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_121
.LBB76_120:                             # %if.else482
                                        #   in Loop: Header=BB76_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_121:                             # %if.end497
                                        #   in Loop: Header=BB76_117 Depth=3
	jmp	.LBB76_122
.LBB76_122:                             # %for.inc498
                                        #   in Loop: Header=BB76_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_117
.LBB76_123:                             # %for.end500
                                        #   in Loop: Header=BB76_115 Depth=2
	jmp	.LBB76_124
.LBB76_124:                             # %for.inc501
                                        #   in Loop: Header=BB76_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_115
.LBB76_125:                             # %for.end503
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_126:                             # %for.cond504
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB76_126 Depth=2
	movl	$0, -4(%rbp)
.LBB76_128:                             # %for.cond507
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB76_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB76_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB76_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_132
.LBB76_131:                             # %if.else526
                                        #   in Loop: Header=BB76_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_132:                             # %if.end541
                                        #   in Loop: Header=BB76_128 Depth=3
	jmp	.LBB76_133
.LBB76_133:                             # %for.inc542
                                        #   in Loop: Header=BB76_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_128
.LBB76_134:                             # %for.end544
                                        #   in Loop: Header=BB76_126 Depth=2
	jmp	.LBB76_135
.LBB76_135:                             # %for.inc545
                                        #   in Loop: Header=BB76_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_126
.LBB76_136:                             # %for.end547
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_137:                             # %for.cond548
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB76_137 Depth=2
	movl	$0, -4(%rbp)
.LBB76_139:                             # %for.cond551
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB76_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB76_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB76_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_143
.LBB76_142:                             # %if.else570
                                        #   in Loop: Header=BB76_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_143:                             # %if.end585
                                        #   in Loop: Header=BB76_139 Depth=3
	jmp	.LBB76_144
.LBB76_144:                             # %for.inc586
                                        #   in Loop: Header=BB76_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_139
.LBB76_145:                             # %for.end588
                                        #   in Loop: Header=BB76_137 Depth=2
	jmp	.LBB76_146
.LBB76_146:                             # %for.inc589
                                        #   in Loop: Header=BB76_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_137
.LBB76_147:                             # %for.end591
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_148:                             # %for.cond592
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB76_148 Depth=2
	movl	$0, -4(%rbp)
.LBB76_150:                             # %for.cond595
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB76_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB76_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB76_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_154
.LBB76_153:                             # %if.else614
                                        #   in Loop: Header=BB76_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_154:                             # %if.end629
                                        #   in Loop: Header=BB76_150 Depth=3
	jmp	.LBB76_155
.LBB76_155:                             # %for.inc630
                                        #   in Loop: Header=BB76_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_150
.LBB76_156:                             # %for.end632
                                        #   in Loop: Header=BB76_148 Depth=2
	jmp	.LBB76_157
.LBB76_157:                             # %for.inc633
                                        #   in Loop: Header=BB76_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_148
.LBB76_158:                             # %for.end635
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_159:                             # %for.cond636
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB76_159 Depth=2
	movl	$0, -4(%rbp)
.LBB76_161:                             # %for.cond639
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB76_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB76_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB76_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_165
.LBB76_164:                             # %if.else658
                                        #   in Loop: Header=BB76_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_165:                             # %if.end673
                                        #   in Loop: Header=BB76_161 Depth=3
	jmp	.LBB76_166
.LBB76_166:                             # %for.inc674
                                        #   in Loop: Header=BB76_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_161
.LBB76_167:                             # %for.end676
                                        #   in Loop: Header=BB76_159 Depth=2
	jmp	.LBB76_168
.LBB76_168:                             # %for.inc677
                                        #   in Loop: Header=BB76_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_159
.LBB76_169:                             # %for.end679
                                        #   in Loop: Header=BB76_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB76_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB76_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB76_171:                             # %if.end682
                                        #   in Loop: Header=BB76_1 Depth=1
	jmp	.LBB76_172
.LBB76_172:                             # %for.inc683
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_1
.LBB76_173:                             # %for.end685
	cmpl	$809721406, -48(%rbp)   # imm = 0x30435E3E
	jne	.LBB76_175
.LBB76_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_174
.Lfunc_end76:
	.size	GetCtxModelNumber.69, .Lfunc_end76-GetCtxModelNumber.69
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.70        # -- Begin function init_contexts.70
	.p2align	4, 0x90
	.type	init_contexts.70,@function
init_contexts.70:                       # @init_contexts.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1612553830, -28(%rbp)  # imm = 0x601D9E66
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB77_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB77_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -4(%rbp)
.LBB77_3:                               # %for.cond2
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB77_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB77_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB77_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB77_7
.LBB77_6:                               # %if.else
                                        #   in Loop: Header=BB77_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB77_7:                               # %if.end
                                        #   in Loop: Header=BB77_3 Depth=2
	jmp	.LBB77_8
.LBB77_8:                               # %for.inc
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_3
.LBB77_9:                               # %for.end
                                        #   in Loop: Header=BB77_1 Depth=1
	jmp	.LBB77_10
.LBB77_10:                              # %for.inc28
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_1
.LBB77_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB77_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB77_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB77_12 Depth=1
	movl	$0, -4(%rbp)
.LBB77_14:                              # %for.cond34
                                        #   Parent Loop BB77_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB77_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB77_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB77_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB77_18
.LBB77_17:                              # %if.else52
                                        #   in Loop: Header=BB77_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB77_18:                              # %if.end66
                                        #   in Loop: Header=BB77_14 Depth=2
	jmp	.LBB77_19
.LBB77_19:                              # %for.inc67
                                        #   in Loop: Header=BB77_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_14
.LBB77_20:                              # %for.end69
                                        #   in Loop: Header=BB77_12 Depth=1
	jmp	.LBB77_21
.LBB77_21:                              # %for.inc70
                                        #   in Loop: Header=BB77_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_12
.LBB77_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB77_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB77_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB77_23 Depth=1
	movl	$0, -4(%rbp)
.LBB77_25:                              # %for.cond76
                                        #   Parent Loop BB77_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB77_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB77_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB77_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB77_29
.LBB77_28:                              # %if.else94
                                        #   in Loop: Header=BB77_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB77_29:                              # %if.end108
                                        #   in Loop: Header=BB77_25 Depth=2
	jmp	.LBB77_30
.LBB77_30:                              # %for.inc109
                                        #   in Loop: Header=BB77_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_25
.LBB77_31:                              # %for.end111
                                        #   in Loop: Header=BB77_23 Depth=1
	jmp	.LBB77_32
.LBB77_32:                              # %for.inc112
                                        #   in Loop: Header=BB77_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_23
.LBB77_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB77_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB77_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB77_34 Depth=1
	movl	$0, -4(%rbp)
.LBB77_36:                              # %for.cond118
                                        #   Parent Loop BB77_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB77_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB77_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB77_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB77_40
.LBB77_39:                              # %if.else136
                                        #   in Loop: Header=BB77_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB77_40:                              # %if.end150
                                        #   in Loop: Header=BB77_36 Depth=2
	jmp	.LBB77_41
.LBB77_41:                              # %for.inc151
                                        #   in Loop: Header=BB77_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_36
.LBB77_42:                              # %for.end153
                                        #   in Loop: Header=BB77_34 Depth=1
	jmp	.LBB77_43
.LBB77_43:                              # %for.inc154
                                        #   in Loop: Header=BB77_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_34
.LBB77_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB77_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB77_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB77_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB77_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB77_49
.LBB77_48:                              # %if.else172
                                        #   in Loop: Header=BB77_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB77_49:                              # %if.end183
                                        #   in Loop: Header=BB77_45 Depth=1
	jmp	.LBB77_50
.LBB77_50:                              # %for.inc184
                                        #   in Loop: Header=BB77_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_45
.LBB77_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB77_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB77_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB77_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB77_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB77_56
.LBB77_55:                              # %if.else202
                                        #   in Loop: Header=BB77_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB77_56:                              # %if.end213
                                        #   in Loop: Header=BB77_52 Depth=1
	jmp	.LBB77_57
.LBB77_57:                              # %for.inc214
                                        #   in Loop: Header=BB77_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_52
.LBB77_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB77_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB77_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB77_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB77_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB77_63
.LBB77_62:                              # %if.else232
                                        #   in Loop: Header=BB77_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB77_63:                              # %if.end243
                                        #   in Loop: Header=BB77_59 Depth=1
	jmp	.LBB77_64
.LBB77_64:                              # %for.inc244
                                        #   in Loop: Header=BB77_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_59
.LBB77_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB77_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB77_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB77_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB77_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB77_70
.LBB77_69:                              # %if.else262
                                        #   in Loop: Header=BB77_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB77_70:                              # %if.end273
                                        #   in Loop: Header=BB77_66 Depth=1
	jmp	.LBB77_71
.LBB77_71:                              # %for.inc274
                                        #   in Loop: Header=BB77_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_66
.LBB77_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB77_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB77_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB77_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB77_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB77_77
.LBB77_76:                              # %if.else292
                                        #   in Loop: Header=BB77_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB77_77:                              # %if.end303
                                        #   in Loop: Header=BB77_73 Depth=1
	jmp	.LBB77_78
.LBB77_78:                              # %for.inc304
                                        #   in Loop: Header=BB77_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_73
.LBB77_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB77_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB77_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB77_80 Depth=1
	movl	$0, -4(%rbp)
.LBB77_82:                              # %for.cond310
                                        #   Parent Loop BB77_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB77_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB77_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB77_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB77_86
.LBB77_85:                              # %if.else328
                                        #   in Loop: Header=BB77_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB77_86:                              # %if.end342
                                        #   in Loop: Header=BB77_82 Depth=2
	jmp	.LBB77_87
.LBB77_87:                              # %for.inc343
                                        #   in Loop: Header=BB77_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_82
.LBB77_88:                              # %for.end345
                                        #   in Loop: Header=BB77_80 Depth=1
	jmp	.LBB77_89
.LBB77_89:                              # %for.inc346
                                        #   in Loop: Header=BB77_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_80
.LBB77_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB77_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB77_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB77_91 Depth=1
	movl	$0, -4(%rbp)
.LBB77_93:                              # %for.cond352
                                        #   Parent Loop BB77_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB77_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB77_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB77_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB77_97
.LBB77_96:                              # %if.else370
                                        #   in Loop: Header=BB77_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB77_97:                              # %if.end384
                                        #   in Loop: Header=BB77_93 Depth=2
	jmp	.LBB77_98
.LBB77_98:                              # %for.inc385
                                        #   in Loop: Header=BB77_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_93
.LBB77_99:                              # %for.end387
                                        #   in Loop: Header=BB77_91 Depth=1
	jmp	.LBB77_100
.LBB77_100:                             # %for.inc388
                                        #   in Loop: Header=BB77_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_91
.LBB77_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB77_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB77_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB77_102 Depth=1
	movl	$0, -4(%rbp)
.LBB77_104:                             # %for.cond394
                                        #   Parent Loop BB77_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB77_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB77_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB77_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB77_108
.LBB77_107:                             # %if.else412
                                        #   in Loop: Header=BB77_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB77_108:                             # %if.end426
                                        #   in Loop: Header=BB77_104 Depth=2
	jmp	.LBB77_109
.LBB77_109:                             # %for.inc427
                                        #   in Loop: Header=BB77_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_104
.LBB77_110:                             # %for.end429
                                        #   in Loop: Header=BB77_102 Depth=1
	jmp	.LBB77_111
.LBB77_111:                             # %for.inc430
                                        #   in Loop: Header=BB77_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_102
.LBB77_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB77_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB77_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB77_113 Depth=1
	movl	$0, -4(%rbp)
.LBB77_115:                             # %for.cond436
                                        #   Parent Loop BB77_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB77_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB77_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB77_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB77_119
.LBB77_118:                             # %if.else454
                                        #   in Loop: Header=BB77_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB77_119:                             # %if.end468
                                        #   in Loop: Header=BB77_115 Depth=2
	jmp	.LBB77_120
.LBB77_120:                             # %for.inc469
                                        #   in Loop: Header=BB77_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_115
.LBB77_121:                             # %for.end471
                                        #   in Loop: Header=BB77_113 Depth=1
	jmp	.LBB77_122
.LBB77_122:                             # %for.inc472
                                        #   in Loop: Header=BB77_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_113
.LBB77_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB77_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB77_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB77_124 Depth=1
	movl	$0, -4(%rbp)
.LBB77_126:                             # %for.cond478
                                        #   Parent Loop BB77_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB77_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB77_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB77_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB77_130
.LBB77_129:                             # %if.else496
                                        #   in Loop: Header=BB77_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB77_130:                             # %if.end510
                                        #   in Loop: Header=BB77_126 Depth=2
	jmp	.LBB77_131
.LBB77_131:                             # %for.inc511
                                        #   in Loop: Header=BB77_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_126
.LBB77_132:                             # %for.end513
                                        #   in Loop: Header=BB77_124 Depth=1
	jmp	.LBB77_133
.LBB77_133:                             # %for.inc514
                                        #   in Loop: Header=BB77_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_124
.LBB77_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB77_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB77_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB77_135 Depth=1
	movl	$0, -4(%rbp)
.LBB77_137:                             # %for.cond520
                                        #   Parent Loop BB77_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB77_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB77_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB77_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB77_141
.LBB77_140:                             # %if.else538
                                        #   in Loop: Header=BB77_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB77_141:                             # %if.end552
                                        #   in Loop: Header=BB77_137 Depth=2
	jmp	.LBB77_142
.LBB77_142:                             # %for.inc553
                                        #   in Loop: Header=BB77_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_137
.LBB77_143:                             # %for.end555
                                        #   in Loop: Header=BB77_135 Depth=1
	jmp	.LBB77_144
.LBB77_144:                             # %for.inc556
                                        #   in Loop: Header=BB77_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_135
.LBB77_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB77_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB77_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB77_146 Depth=1
	movl	$0, -4(%rbp)
.LBB77_148:                             # %for.cond562
                                        #   Parent Loop BB77_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB77_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB77_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB77_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB77_152
.LBB77_151:                             # %if.else580
                                        #   in Loop: Header=BB77_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB77_152:                             # %if.end594
                                        #   in Loop: Header=BB77_148 Depth=2
	jmp	.LBB77_153
.LBB77_153:                             # %for.inc595
                                        #   in Loop: Header=BB77_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_148
.LBB77_154:                             # %for.end597
                                        #   in Loop: Header=BB77_146 Depth=1
	jmp	.LBB77_155
.LBB77_155:                             # %for.inc598
                                        #   in Loop: Header=BB77_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_146
.LBB77_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB77_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB77_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB77_157 Depth=1
	movl	$0, -4(%rbp)
.LBB77_159:                             # %for.cond604
                                        #   Parent Loop BB77_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB77_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB77_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB77_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB77_163
.LBB77_162:                             # %if.else622
                                        #   in Loop: Header=BB77_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB77_163:                             # %if.end636
                                        #   in Loop: Header=BB77_159 Depth=2
	jmp	.LBB77_164
.LBB77_164:                             # %for.inc637
                                        #   in Loop: Header=BB77_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_159
.LBB77_165:                             # %for.end639
                                        #   in Loop: Header=BB77_157 Depth=1
	jmp	.LBB77_166
.LBB77_166:                             # %for.inc640
                                        #   in Loop: Header=BB77_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_157
.LBB77_167:                             # %for.end642
	cmpl	$1612553830, -28(%rbp)  # imm = 0x601D9E66
	jne	.LBB77_169
.LBB77_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_168
.Lfunc_end77:
	.size	init_contexts.70, .Lfunc_end77-init_contexts.70
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.71
.LCPI78_0:
	.quad	4607182418800017408     # double 1
.LCPI78_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI78_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI78_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.71
	.p2align	4, 0x90
	.type	XRate.71,@function
XRate.71:                               # @XRate.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$972181299, -36(%rbp)   # imm = 0x39F24F33
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB78_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB78_3
.LBB78_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB78_3:                               # %cond.end
	vmovsd	.LCPI78_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI78_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI78_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI78_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB78_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI78_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB78_6
.LBB78_5:                               # %cond.false6
	vmovsd	.LCPI78_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI78_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI78_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB78_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB78_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB78_9
.LBB78_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB78_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB78_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB78_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB78_13
.LBB78_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB78_13:                              # %cond.end26
	jmp	.LBB78_15
.LBB78_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB78_15
.LBB78_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB78_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB78_18
.LBB78_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB78_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$972181299, -36(%rbp)   # imm = 0x39F24F33
	jne	.LBB78_20
.LBB78_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB78_19
.Lfunc_end78:
	.size	XRate.71, .Lfunc_end78-XRate.71
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.72
.LCPI79_0:
	.quad	4607182418800017408     # double 1
.LCPI79_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI79_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI79_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.72
	.p2align	4, 0x90
	.type	XRate.72,@function
XRate.72:                               # @XRate.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$210144582, -32(%rbp)   # imm = 0xC868D46
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB79_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB79_3
.LBB79_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB79_3:                               # %cond.end
	vmovsd	.LCPI79_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI79_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI79_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI79_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB79_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI79_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB79_6
.LBB79_5:                               # %cond.false6
	vmovsd	.LCPI79_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI79_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI79_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB79_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB79_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB79_9
.LBB79_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB79_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB79_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB79_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB79_13
.LBB79_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB79_13:                              # %cond.end26
	jmp	.LBB79_15
.LBB79_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB79_15
.LBB79_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB79_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB79_18
.LBB79_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB79_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$210144582, -32(%rbp)   # imm = 0xC868D46
	jne	.LBB79_20
.LBB79_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB79_19
.Lfunc_end79:
	.size	XRate.72, .Lfunc_end79-XRate.72
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.73
.LCPI80_0:
	.quad	4611686018427387904     # double 2
.LCPI80_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.73
	.p2align	4, 0x90
	.type	create_context_memory.73,@function
create_context_memory.73:               # @create_context_memory.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1535316577, -20(%rbp)  # imm = 0x5B831261
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB80_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB80_3
.LBB80_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB80_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB80_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB80_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB80_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB80_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB80_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB80_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB80_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB80_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB80_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB80_11:                              # %if.end10
                                        #   in Loop: Header=BB80_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB80_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB80_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB80_13:                              # %if.end16
                                        #   in Loop: Header=BB80_8 Depth=1
	movl	$0, -8(%rbp)
.LBB80_14:                              # %for.cond17
                                        #   Parent Loop BB80_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB80_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB80_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB80_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB80_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB80_17:                              # %if.end28
                                        #   in Loop: Header=BB80_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB80_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB80_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB80_19:                              # %if.end39
                                        #   in Loop: Header=BB80_14 Depth=2
	jmp	.LBB80_20
.LBB80_20:                              # %for.inc
                                        #   in Loop: Header=BB80_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_14
.LBB80_21:                              # %for.end
                                        #   in Loop: Header=BB80_8 Depth=1
	jmp	.LBB80_22
.LBB80_22:                              # %for.inc40
                                        #   in Loop: Header=BB80_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_8
.LBB80_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB80_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_26 Depth 2
                                        #       Child Loop BB80_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB80_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB80_24 Depth=1
	movl	$0, -8(%rbp)
.LBB80_26:                              # %for.cond47
                                        #   Parent Loop BB80_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB80_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB80_26 Depth=2
	movl	$0, -12(%rbp)
.LBB80_28:                              # %for.cond51
                                        #   Parent Loop BB80_24 Depth=1
                                        #     Parent Loop BB80_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB80_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB80_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB80_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_28
.LBB80_31:                              # %for.end63
                                        #   in Loop: Header=BB80_26 Depth=2
	jmp	.LBB80_32
.LBB80_32:                              # %for.inc64
                                        #   in Loop: Header=BB80_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_26
.LBB80_33:                              # %for.end66
                                        #   in Loop: Header=BB80_24 Depth=1
	jmp	.LBB80_34
.LBB80_34:                              # %for.inc67
                                        #   in Loop: Header=BB80_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_24
.LBB80_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB80_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB80_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB80_36 Depth=1
	vmovsd	.LCPI80_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI80_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI80_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB80_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_36
.LBB80_39:                              # %for.end98
	cmpl	$1535316577, -20(%rbp)  # imm = 0x5B831261
	jne	.LBB80_41
.LBB80_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_40
.Lfunc_end80:
	.size	create_context_memory.73, .Lfunc_end80-create_context_memory.73
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.74
.LCPI81_0:
	.quad	4611686018427387904     # double 2
.LCPI81_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.74
	.p2align	4, 0x90
	.type	create_context_memory.74,@function
create_context_memory.74:               # @create_context_memory.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1228273061, -20(%rbp)  # imm = 0x4935F5A5
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB81_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB81_3
.LBB81_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB81_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB81_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB81_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB81_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB81_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB81_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB81_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB81_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB81_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB81_11:                              # %if.end10
                                        #   in Loop: Header=BB81_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB81_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB81_13:                              # %if.end16
                                        #   in Loop: Header=BB81_8 Depth=1
	movl	$0, -8(%rbp)
.LBB81_14:                              # %for.cond17
                                        #   Parent Loop BB81_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB81_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB81_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB81_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB81_17:                              # %if.end28
                                        #   in Loop: Header=BB81_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB81_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB81_19:                              # %if.end39
                                        #   in Loop: Header=BB81_14 Depth=2
	jmp	.LBB81_20
.LBB81_20:                              # %for.inc
                                        #   in Loop: Header=BB81_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_14
.LBB81_21:                              # %for.end
                                        #   in Loop: Header=BB81_8 Depth=1
	jmp	.LBB81_22
.LBB81_22:                              # %for.inc40
                                        #   in Loop: Header=BB81_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_8
.LBB81_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB81_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_26 Depth 2
                                        #       Child Loop BB81_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB81_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB81_24 Depth=1
	movl	$0, -8(%rbp)
.LBB81_26:                              # %for.cond47
                                        #   Parent Loop BB81_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB81_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB81_26 Depth=2
	movl	$0, -12(%rbp)
.LBB81_28:                              # %for.cond51
                                        #   Parent Loop BB81_24 Depth=1
                                        #     Parent Loop BB81_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB81_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB81_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB81_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_28
.LBB81_31:                              # %for.end63
                                        #   in Loop: Header=BB81_26 Depth=2
	jmp	.LBB81_32
.LBB81_32:                              # %for.inc64
                                        #   in Loop: Header=BB81_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_26
.LBB81_33:                              # %for.end66
                                        #   in Loop: Header=BB81_24 Depth=1
	jmp	.LBB81_34
.LBB81_34:                              # %for.inc67
                                        #   in Loop: Header=BB81_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_24
.LBB81_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB81_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB81_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB81_36 Depth=1
	vmovsd	.LCPI81_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI81_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI81_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB81_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_36
.LBB81_39:                              # %for.end98
	cmpl	$1228273061, -20(%rbp)  # imm = 0x4935F5A5
	jne	.LBB81_41
.LBB81_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_40
.Lfunc_end81:
	.size	create_context_memory.74, .Lfunc_end81-create_context_memory.74
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.75        # -- Begin function init_contexts.75
	.p2align	4, 0x90
	.type	init_contexts.75,@function
init_contexts.75:                       # @init_contexts.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$980725074, -28(%rbp)   # imm = 0x3A74AD52
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB82_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB82_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB82_1 Depth=1
	movl	$0, -4(%rbp)
.LBB82_3:                               # %for.cond2
                                        #   Parent Loop BB82_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB82_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB82_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB82_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB82_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB82_7
.LBB82_6:                               # %if.else
                                        #   in Loop: Header=BB82_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB82_7:                               # %if.end
                                        #   in Loop: Header=BB82_3 Depth=2
	jmp	.LBB82_8
.LBB82_8:                               # %for.inc
                                        #   in Loop: Header=BB82_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_3
.LBB82_9:                               # %for.end
                                        #   in Loop: Header=BB82_1 Depth=1
	jmp	.LBB82_10
.LBB82_10:                              # %for.inc28
                                        #   in Loop: Header=BB82_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_1
.LBB82_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB82_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB82_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB82_12 Depth=1
	movl	$0, -4(%rbp)
.LBB82_14:                              # %for.cond34
                                        #   Parent Loop BB82_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB82_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB82_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB82_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB82_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB82_18
.LBB82_17:                              # %if.else52
                                        #   in Loop: Header=BB82_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB82_18:                              # %if.end66
                                        #   in Loop: Header=BB82_14 Depth=2
	jmp	.LBB82_19
.LBB82_19:                              # %for.inc67
                                        #   in Loop: Header=BB82_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_14
.LBB82_20:                              # %for.end69
                                        #   in Loop: Header=BB82_12 Depth=1
	jmp	.LBB82_21
.LBB82_21:                              # %for.inc70
                                        #   in Loop: Header=BB82_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_12
.LBB82_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB82_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB82_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB82_23 Depth=1
	movl	$0, -4(%rbp)
.LBB82_25:                              # %for.cond76
                                        #   Parent Loop BB82_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB82_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB82_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB82_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB82_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB82_29
.LBB82_28:                              # %if.else94
                                        #   in Loop: Header=BB82_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB82_29:                              # %if.end108
                                        #   in Loop: Header=BB82_25 Depth=2
	jmp	.LBB82_30
.LBB82_30:                              # %for.inc109
                                        #   in Loop: Header=BB82_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_25
.LBB82_31:                              # %for.end111
                                        #   in Loop: Header=BB82_23 Depth=1
	jmp	.LBB82_32
.LBB82_32:                              # %for.inc112
                                        #   in Loop: Header=BB82_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_23
.LBB82_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB82_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB82_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB82_34 Depth=1
	movl	$0, -4(%rbp)
.LBB82_36:                              # %for.cond118
                                        #   Parent Loop BB82_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB82_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB82_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB82_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB82_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB82_40
.LBB82_39:                              # %if.else136
                                        #   in Loop: Header=BB82_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB82_40:                              # %if.end150
                                        #   in Loop: Header=BB82_36 Depth=2
	jmp	.LBB82_41
.LBB82_41:                              # %for.inc151
                                        #   in Loop: Header=BB82_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_36
.LBB82_42:                              # %for.end153
                                        #   in Loop: Header=BB82_34 Depth=1
	jmp	.LBB82_43
.LBB82_43:                              # %for.inc154
                                        #   in Loop: Header=BB82_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_34
.LBB82_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB82_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB82_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB82_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB82_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB82_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB82_49
.LBB82_48:                              # %if.else172
                                        #   in Loop: Header=BB82_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB82_49:                              # %if.end183
                                        #   in Loop: Header=BB82_45 Depth=1
	jmp	.LBB82_50
.LBB82_50:                              # %for.inc184
                                        #   in Loop: Header=BB82_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_45
.LBB82_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB82_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB82_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB82_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB82_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB82_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB82_56
.LBB82_55:                              # %if.else202
                                        #   in Loop: Header=BB82_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB82_56:                              # %if.end213
                                        #   in Loop: Header=BB82_52 Depth=1
	jmp	.LBB82_57
.LBB82_57:                              # %for.inc214
                                        #   in Loop: Header=BB82_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_52
.LBB82_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB82_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB82_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB82_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB82_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB82_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB82_63
.LBB82_62:                              # %if.else232
                                        #   in Loop: Header=BB82_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB82_63:                              # %if.end243
                                        #   in Loop: Header=BB82_59 Depth=1
	jmp	.LBB82_64
.LBB82_64:                              # %for.inc244
                                        #   in Loop: Header=BB82_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_59
.LBB82_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB82_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB82_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB82_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB82_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB82_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB82_70
.LBB82_69:                              # %if.else262
                                        #   in Loop: Header=BB82_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB82_70:                              # %if.end273
                                        #   in Loop: Header=BB82_66 Depth=1
	jmp	.LBB82_71
.LBB82_71:                              # %for.inc274
                                        #   in Loop: Header=BB82_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_66
.LBB82_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB82_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB82_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB82_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB82_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB82_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB82_77
.LBB82_76:                              # %if.else292
                                        #   in Loop: Header=BB82_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB82_77:                              # %if.end303
                                        #   in Loop: Header=BB82_73 Depth=1
	jmp	.LBB82_78
.LBB82_78:                              # %for.inc304
                                        #   in Loop: Header=BB82_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_73
.LBB82_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB82_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB82_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB82_80 Depth=1
	movl	$0, -4(%rbp)
.LBB82_82:                              # %for.cond310
                                        #   Parent Loop BB82_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB82_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB82_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB82_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB82_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB82_86
.LBB82_85:                              # %if.else328
                                        #   in Loop: Header=BB82_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB82_86:                              # %if.end342
                                        #   in Loop: Header=BB82_82 Depth=2
	jmp	.LBB82_87
.LBB82_87:                              # %for.inc343
                                        #   in Loop: Header=BB82_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_82
.LBB82_88:                              # %for.end345
                                        #   in Loop: Header=BB82_80 Depth=1
	jmp	.LBB82_89
.LBB82_89:                              # %for.inc346
                                        #   in Loop: Header=BB82_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_80
.LBB82_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB82_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB82_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB82_91 Depth=1
	movl	$0, -4(%rbp)
.LBB82_93:                              # %for.cond352
                                        #   Parent Loop BB82_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB82_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB82_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB82_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB82_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB82_97
.LBB82_96:                              # %if.else370
                                        #   in Loop: Header=BB82_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB82_97:                              # %if.end384
                                        #   in Loop: Header=BB82_93 Depth=2
	jmp	.LBB82_98
.LBB82_98:                              # %for.inc385
                                        #   in Loop: Header=BB82_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_93
.LBB82_99:                              # %for.end387
                                        #   in Loop: Header=BB82_91 Depth=1
	jmp	.LBB82_100
.LBB82_100:                             # %for.inc388
                                        #   in Loop: Header=BB82_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_91
.LBB82_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB82_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB82_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB82_102 Depth=1
	movl	$0, -4(%rbp)
.LBB82_104:                             # %for.cond394
                                        #   Parent Loop BB82_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB82_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB82_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB82_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB82_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB82_108
.LBB82_107:                             # %if.else412
                                        #   in Loop: Header=BB82_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB82_108:                             # %if.end426
                                        #   in Loop: Header=BB82_104 Depth=2
	jmp	.LBB82_109
.LBB82_109:                             # %for.inc427
                                        #   in Loop: Header=BB82_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_104
.LBB82_110:                             # %for.end429
                                        #   in Loop: Header=BB82_102 Depth=1
	jmp	.LBB82_111
.LBB82_111:                             # %for.inc430
                                        #   in Loop: Header=BB82_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_102
.LBB82_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB82_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB82_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB82_113 Depth=1
	movl	$0, -4(%rbp)
.LBB82_115:                             # %for.cond436
                                        #   Parent Loop BB82_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB82_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB82_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB82_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB82_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB82_119
.LBB82_118:                             # %if.else454
                                        #   in Loop: Header=BB82_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB82_119:                             # %if.end468
                                        #   in Loop: Header=BB82_115 Depth=2
	jmp	.LBB82_120
.LBB82_120:                             # %for.inc469
                                        #   in Loop: Header=BB82_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_115
.LBB82_121:                             # %for.end471
                                        #   in Loop: Header=BB82_113 Depth=1
	jmp	.LBB82_122
.LBB82_122:                             # %for.inc472
                                        #   in Loop: Header=BB82_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_113
.LBB82_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB82_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB82_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB82_124 Depth=1
	movl	$0, -4(%rbp)
.LBB82_126:                             # %for.cond478
                                        #   Parent Loop BB82_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB82_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB82_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB82_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB82_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB82_130
.LBB82_129:                             # %if.else496
                                        #   in Loop: Header=BB82_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB82_130:                             # %if.end510
                                        #   in Loop: Header=BB82_126 Depth=2
	jmp	.LBB82_131
.LBB82_131:                             # %for.inc511
                                        #   in Loop: Header=BB82_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_126
.LBB82_132:                             # %for.end513
                                        #   in Loop: Header=BB82_124 Depth=1
	jmp	.LBB82_133
.LBB82_133:                             # %for.inc514
                                        #   in Loop: Header=BB82_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_124
.LBB82_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB82_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB82_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB82_135 Depth=1
	movl	$0, -4(%rbp)
.LBB82_137:                             # %for.cond520
                                        #   Parent Loop BB82_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB82_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB82_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB82_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB82_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB82_141
.LBB82_140:                             # %if.else538
                                        #   in Loop: Header=BB82_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB82_141:                             # %if.end552
                                        #   in Loop: Header=BB82_137 Depth=2
	jmp	.LBB82_142
.LBB82_142:                             # %for.inc553
                                        #   in Loop: Header=BB82_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_137
.LBB82_143:                             # %for.end555
                                        #   in Loop: Header=BB82_135 Depth=1
	jmp	.LBB82_144
.LBB82_144:                             # %for.inc556
                                        #   in Loop: Header=BB82_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_135
.LBB82_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB82_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB82_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB82_146 Depth=1
	movl	$0, -4(%rbp)
.LBB82_148:                             # %for.cond562
                                        #   Parent Loop BB82_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB82_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB82_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB82_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB82_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB82_152
.LBB82_151:                             # %if.else580
                                        #   in Loop: Header=BB82_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB82_152:                             # %if.end594
                                        #   in Loop: Header=BB82_148 Depth=2
	jmp	.LBB82_153
.LBB82_153:                             # %for.inc595
                                        #   in Loop: Header=BB82_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_148
.LBB82_154:                             # %for.end597
                                        #   in Loop: Header=BB82_146 Depth=1
	jmp	.LBB82_155
.LBB82_155:                             # %for.inc598
                                        #   in Loop: Header=BB82_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_146
.LBB82_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB82_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB82_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB82_157 Depth=1
	movl	$0, -4(%rbp)
.LBB82_159:                             # %for.cond604
                                        #   Parent Loop BB82_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB82_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB82_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB82_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB82_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB82_163
.LBB82_162:                             # %if.else622
                                        #   in Loop: Header=BB82_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB82_163:                             # %if.end636
                                        #   in Loop: Header=BB82_159 Depth=2
	jmp	.LBB82_164
.LBB82_164:                             # %for.inc637
                                        #   in Loop: Header=BB82_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_159
.LBB82_165:                             # %for.end639
                                        #   in Loop: Header=BB82_157 Depth=1
	jmp	.LBB82_166
.LBB82_166:                             # %for.inc640
                                        #   in Loop: Header=BB82_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_157
.LBB82_167:                             # %for.end642
	cmpl	$980725074, -28(%rbp)   # imm = 0x3A74AD52
	jne	.LBB82_169
.LBB82_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_168
.Lfunc_end82:
	.size	init_contexts.75, .Lfunc_end82-init_contexts.75
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.76
.LCPI83_0:
	.quad	4607182418800017408     # double 1
.LCPI83_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI83_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI83_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.76
	.p2align	4, 0x90
	.type	XRate.76,@function
XRate.76:                               # @XRate.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1912372702, -36(%rbp)  # imm = 0x71FC7DDE
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB83_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB83_3
.LBB83_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB83_3:                               # %cond.end
	vmovsd	.LCPI83_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI83_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI83_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI83_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB83_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI83_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB83_6
.LBB83_5:                               # %cond.false6
	vmovsd	.LCPI83_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI83_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI83_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB83_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB83_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB83_9
.LBB83_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB83_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB83_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB83_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB83_13
.LBB83_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB83_13:                              # %cond.end26
	jmp	.LBB83_15
.LBB83_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB83_15
.LBB83_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB83_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB83_18
.LBB83_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB83_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1912372702, -36(%rbp)  # imm = 0x71FC7DDE
	jne	.LBB83_20
.LBB83_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB83_19
.Lfunc_end83:
	.size	XRate.76, .Lfunc_end83-XRate.76
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.77
.LCPI84_0:
	.quad	4607182418800017408     # double 1
.LCPI84_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI84_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI84_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.77
	.p2align	4, 0x90
	.type	XRate.77,@function
XRate.77:                               # @XRate.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1584384750, -32(%rbp)  # imm = 0x5E6FCAEE
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB84_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB84_3
.LBB84_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB84_3:                               # %cond.end
	vmovsd	.LCPI84_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI84_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI84_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI84_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB84_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI84_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB84_6
.LBB84_5:                               # %cond.false6
	vmovsd	.LCPI84_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI84_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI84_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB84_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB84_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB84_9
.LBB84_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB84_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB84_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB84_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB84_13
.LBB84_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB84_13:                              # %cond.end26
	jmp	.LBB84_15
.LBB84_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB84_15
.LBB84_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB84_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB84_18
.LBB84_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB84_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1584384750, -32(%rbp)  # imm = 0x5E6FCAEE
	jne	.LBB84_20
.LBB84_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB84_19
.Lfunc_end84:
	.size	XRate.77, .Lfunc_end84-XRate.77
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.78        # -- Begin function init_contexts.78
	.p2align	4, 0x90
	.type	init_contexts.78,@function
init_contexts.78:                       # @init_contexts.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1540620016, -28(%rbp)  # imm = 0x5BD3FEF0
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB85_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB85_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -4(%rbp)
.LBB85_3:                               # %for.cond2
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB85_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB85_7
.LBB85_6:                               # %if.else
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB85_7:                               # %if.end
                                        #   in Loop: Header=BB85_3 Depth=2
	jmp	.LBB85_8
.LBB85_8:                               # %for.inc
                                        #   in Loop: Header=BB85_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_3
.LBB85_9:                               # %for.end
                                        #   in Loop: Header=BB85_1 Depth=1
	jmp	.LBB85_10
.LBB85_10:                              # %for.inc28
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_1
.LBB85_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB85_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB85_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB85_12 Depth=1
	movl	$0, -4(%rbp)
.LBB85_14:                              # %for.cond34
                                        #   Parent Loop BB85_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB85_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB85_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB85_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB85_18
.LBB85_17:                              # %if.else52
                                        #   in Loop: Header=BB85_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB85_18:                              # %if.end66
                                        #   in Loop: Header=BB85_14 Depth=2
	jmp	.LBB85_19
.LBB85_19:                              # %for.inc67
                                        #   in Loop: Header=BB85_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_14
.LBB85_20:                              # %for.end69
                                        #   in Loop: Header=BB85_12 Depth=1
	jmp	.LBB85_21
.LBB85_21:                              # %for.inc70
                                        #   in Loop: Header=BB85_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_12
.LBB85_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB85_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB85_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB85_23 Depth=1
	movl	$0, -4(%rbp)
.LBB85_25:                              # %for.cond76
                                        #   Parent Loop BB85_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB85_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB85_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB85_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB85_29
.LBB85_28:                              # %if.else94
                                        #   in Loop: Header=BB85_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB85_29:                              # %if.end108
                                        #   in Loop: Header=BB85_25 Depth=2
	jmp	.LBB85_30
.LBB85_30:                              # %for.inc109
                                        #   in Loop: Header=BB85_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_25
.LBB85_31:                              # %for.end111
                                        #   in Loop: Header=BB85_23 Depth=1
	jmp	.LBB85_32
.LBB85_32:                              # %for.inc112
                                        #   in Loop: Header=BB85_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_23
.LBB85_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB85_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB85_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB85_34 Depth=1
	movl	$0, -4(%rbp)
.LBB85_36:                              # %for.cond118
                                        #   Parent Loop BB85_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB85_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB85_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB85_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB85_40
.LBB85_39:                              # %if.else136
                                        #   in Loop: Header=BB85_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB85_40:                              # %if.end150
                                        #   in Loop: Header=BB85_36 Depth=2
	jmp	.LBB85_41
.LBB85_41:                              # %for.inc151
                                        #   in Loop: Header=BB85_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_36
.LBB85_42:                              # %for.end153
                                        #   in Loop: Header=BB85_34 Depth=1
	jmp	.LBB85_43
.LBB85_43:                              # %for.inc154
                                        #   in Loop: Header=BB85_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_34
.LBB85_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB85_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB85_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB85_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB85_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB85_49
.LBB85_48:                              # %if.else172
                                        #   in Loop: Header=BB85_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB85_49:                              # %if.end183
                                        #   in Loop: Header=BB85_45 Depth=1
	jmp	.LBB85_50
.LBB85_50:                              # %for.inc184
                                        #   in Loop: Header=BB85_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_45
.LBB85_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB85_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB85_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB85_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB85_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB85_56
.LBB85_55:                              # %if.else202
                                        #   in Loop: Header=BB85_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB85_56:                              # %if.end213
                                        #   in Loop: Header=BB85_52 Depth=1
	jmp	.LBB85_57
.LBB85_57:                              # %for.inc214
                                        #   in Loop: Header=BB85_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_52
.LBB85_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB85_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB85_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB85_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB85_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB85_63
.LBB85_62:                              # %if.else232
                                        #   in Loop: Header=BB85_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB85_63:                              # %if.end243
                                        #   in Loop: Header=BB85_59 Depth=1
	jmp	.LBB85_64
.LBB85_64:                              # %for.inc244
                                        #   in Loop: Header=BB85_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_59
.LBB85_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB85_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB85_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB85_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB85_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB85_70
.LBB85_69:                              # %if.else262
                                        #   in Loop: Header=BB85_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB85_70:                              # %if.end273
                                        #   in Loop: Header=BB85_66 Depth=1
	jmp	.LBB85_71
.LBB85_71:                              # %for.inc274
                                        #   in Loop: Header=BB85_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_66
.LBB85_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB85_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB85_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB85_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB85_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB85_77
.LBB85_76:                              # %if.else292
                                        #   in Loop: Header=BB85_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB85_77:                              # %if.end303
                                        #   in Loop: Header=BB85_73 Depth=1
	jmp	.LBB85_78
.LBB85_78:                              # %for.inc304
                                        #   in Loop: Header=BB85_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_73
.LBB85_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB85_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB85_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB85_80 Depth=1
	movl	$0, -4(%rbp)
.LBB85_82:                              # %for.cond310
                                        #   Parent Loop BB85_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB85_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB85_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB85_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB85_86
.LBB85_85:                              # %if.else328
                                        #   in Loop: Header=BB85_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB85_86:                              # %if.end342
                                        #   in Loop: Header=BB85_82 Depth=2
	jmp	.LBB85_87
.LBB85_87:                              # %for.inc343
                                        #   in Loop: Header=BB85_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_82
.LBB85_88:                              # %for.end345
                                        #   in Loop: Header=BB85_80 Depth=1
	jmp	.LBB85_89
.LBB85_89:                              # %for.inc346
                                        #   in Loop: Header=BB85_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_80
.LBB85_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB85_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB85_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB85_91 Depth=1
	movl	$0, -4(%rbp)
.LBB85_93:                              # %for.cond352
                                        #   Parent Loop BB85_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB85_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB85_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB85_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB85_97
.LBB85_96:                              # %if.else370
                                        #   in Loop: Header=BB85_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB85_97:                              # %if.end384
                                        #   in Loop: Header=BB85_93 Depth=2
	jmp	.LBB85_98
.LBB85_98:                              # %for.inc385
                                        #   in Loop: Header=BB85_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_93
.LBB85_99:                              # %for.end387
                                        #   in Loop: Header=BB85_91 Depth=1
	jmp	.LBB85_100
.LBB85_100:                             # %for.inc388
                                        #   in Loop: Header=BB85_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_91
.LBB85_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB85_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB85_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB85_102 Depth=1
	movl	$0, -4(%rbp)
.LBB85_104:                             # %for.cond394
                                        #   Parent Loop BB85_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB85_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB85_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB85_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB85_108
.LBB85_107:                             # %if.else412
                                        #   in Loop: Header=BB85_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB85_108:                             # %if.end426
                                        #   in Loop: Header=BB85_104 Depth=2
	jmp	.LBB85_109
.LBB85_109:                             # %for.inc427
                                        #   in Loop: Header=BB85_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_104
.LBB85_110:                             # %for.end429
                                        #   in Loop: Header=BB85_102 Depth=1
	jmp	.LBB85_111
.LBB85_111:                             # %for.inc430
                                        #   in Loop: Header=BB85_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_102
.LBB85_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB85_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB85_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB85_113 Depth=1
	movl	$0, -4(%rbp)
.LBB85_115:                             # %for.cond436
                                        #   Parent Loop BB85_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB85_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB85_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB85_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB85_119
.LBB85_118:                             # %if.else454
                                        #   in Loop: Header=BB85_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB85_119:                             # %if.end468
                                        #   in Loop: Header=BB85_115 Depth=2
	jmp	.LBB85_120
.LBB85_120:                             # %for.inc469
                                        #   in Loop: Header=BB85_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_115
.LBB85_121:                             # %for.end471
                                        #   in Loop: Header=BB85_113 Depth=1
	jmp	.LBB85_122
.LBB85_122:                             # %for.inc472
                                        #   in Loop: Header=BB85_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_113
.LBB85_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB85_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB85_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB85_124 Depth=1
	movl	$0, -4(%rbp)
.LBB85_126:                             # %for.cond478
                                        #   Parent Loop BB85_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB85_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB85_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB85_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB85_130
.LBB85_129:                             # %if.else496
                                        #   in Loop: Header=BB85_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB85_130:                             # %if.end510
                                        #   in Loop: Header=BB85_126 Depth=2
	jmp	.LBB85_131
.LBB85_131:                             # %for.inc511
                                        #   in Loop: Header=BB85_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_126
.LBB85_132:                             # %for.end513
                                        #   in Loop: Header=BB85_124 Depth=1
	jmp	.LBB85_133
.LBB85_133:                             # %for.inc514
                                        #   in Loop: Header=BB85_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_124
.LBB85_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB85_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB85_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB85_135 Depth=1
	movl	$0, -4(%rbp)
.LBB85_137:                             # %for.cond520
                                        #   Parent Loop BB85_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB85_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB85_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB85_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB85_141
.LBB85_140:                             # %if.else538
                                        #   in Loop: Header=BB85_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB85_141:                             # %if.end552
                                        #   in Loop: Header=BB85_137 Depth=2
	jmp	.LBB85_142
.LBB85_142:                             # %for.inc553
                                        #   in Loop: Header=BB85_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_137
.LBB85_143:                             # %for.end555
                                        #   in Loop: Header=BB85_135 Depth=1
	jmp	.LBB85_144
.LBB85_144:                             # %for.inc556
                                        #   in Loop: Header=BB85_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_135
.LBB85_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB85_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB85_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB85_146 Depth=1
	movl	$0, -4(%rbp)
.LBB85_148:                             # %for.cond562
                                        #   Parent Loop BB85_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB85_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB85_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB85_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB85_152
.LBB85_151:                             # %if.else580
                                        #   in Loop: Header=BB85_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB85_152:                             # %if.end594
                                        #   in Loop: Header=BB85_148 Depth=2
	jmp	.LBB85_153
.LBB85_153:                             # %for.inc595
                                        #   in Loop: Header=BB85_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_148
.LBB85_154:                             # %for.end597
                                        #   in Loop: Header=BB85_146 Depth=1
	jmp	.LBB85_155
.LBB85_155:                             # %for.inc598
                                        #   in Loop: Header=BB85_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_146
.LBB85_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB85_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB85_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB85_157 Depth=1
	movl	$0, -4(%rbp)
.LBB85_159:                             # %for.cond604
                                        #   Parent Loop BB85_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB85_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB85_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB85_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB85_163
.LBB85_162:                             # %if.else622
                                        #   in Loop: Header=BB85_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB85_163:                             # %if.end636
                                        #   in Loop: Header=BB85_159 Depth=2
	jmp	.LBB85_164
.LBB85_164:                             # %for.inc637
                                        #   in Loop: Header=BB85_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_159
.LBB85_165:                             # %for.end639
                                        #   in Loop: Header=BB85_157 Depth=1
	jmp	.LBB85_166
.LBB85_166:                             # %for.inc640
                                        #   in Loop: Header=BB85_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_157
.LBB85_167:                             # %for.end642
	cmpl	$1540620016, -28(%rbp)  # imm = 0x5BD3FEF0
	jne	.LBB85_169
.LBB85_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_168
.Lfunc_end85:
	.size	init_contexts.78, .Lfunc_end85-init_contexts.78
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.79
.LCPI86_0:
	.quad	4607182418800017408     # double 1
.LCPI86_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI86_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI86_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.79
	.p2align	4, 0x90
	.type	XRate.79,@function
XRate.79:                               # @XRate.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1821990633, -32(%rbp)  # imm = 0x6C995EE9
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB86_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB86_3
.LBB86_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB86_3:                               # %cond.end
	vmovsd	.LCPI86_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI86_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI86_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI86_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB86_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI86_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB86_6
.LBB86_5:                               # %cond.false6
	vmovsd	.LCPI86_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI86_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI86_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB86_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB86_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB86_9
.LBB86_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB86_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB86_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB86_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB86_13
.LBB86_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB86_13:                              # %cond.end26
	jmp	.LBB86_15
.LBB86_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB86_15
.LBB86_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB86_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB86_18
.LBB86_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB86_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1821990633, -32(%rbp)  # imm = 0x6C995EE9
	jne	.LBB86_20
.LBB86_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB86_19
.Lfunc_end86:
	.size	XRate.79, .Lfunc_end86-XRate.79
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.80
.LCPI87_0:
	.quad	4607182418800017408     # double 1
.LCPI87_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI87_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI87_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.80
	.p2align	4, 0x90
	.type	XRate.80,@function
XRate.80:                               # @XRate.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$2008854419, -36(%rbp)  # imm = 0x77BCAF93
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB87_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB87_3
.LBB87_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB87_3:                               # %cond.end
	vmovsd	.LCPI87_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI87_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI87_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI87_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB87_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI87_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB87_6
.LBB87_5:                               # %cond.false6
	vmovsd	.LCPI87_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI87_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI87_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB87_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB87_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB87_9
.LBB87_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB87_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB87_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB87_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB87_13
.LBB87_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB87_13:                              # %cond.end26
	jmp	.LBB87_15
.LBB87_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB87_15
.LBB87_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB87_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB87_18
.LBB87_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB87_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$2008854419, -36(%rbp)  # imm = 0x77BCAF93
	jne	.LBB87_20
.LBB87_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB87_19
.Lfunc_end87:
	.size	XRate.80, .Lfunc_end87-XRate.80
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.81        # -- Begin function init_contexts.81
	.p2align	4, 0x90
	.type	init_contexts.81,@function
init_contexts.81:                       # @init_contexts.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1386940139, -28(%rbp)  # imm = 0x52AB06EB
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB88_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB88_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	$0, -4(%rbp)
.LBB88_3:                               # %for.cond2
                                        #   Parent Loop BB88_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB88_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB88_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB88_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_7
.LBB88_6:                               # %if.else
                                        #   in Loop: Header=BB88_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_7:                               # %if.end
                                        #   in Loop: Header=BB88_3 Depth=2
	jmp	.LBB88_8
.LBB88_8:                               # %for.inc
                                        #   in Loop: Header=BB88_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_3
.LBB88_9:                               # %for.end
                                        #   in Loop: Header=BB88_1 Depth=1
	jmp	.LBB88_10
.LBB88_10:                              # %for.inc28
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_1
.LBB88_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB88_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB88_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB88_12 Depth=1
	movl	$0, -4(%rbp)
.LBB88_14:                              # %for.cond34
                                        #   Parent Loop BB88_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB88_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_18
.LBB88_17:                              # %if.else52
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_18:                              # %if.end66
                                        #   in Loop: Header=BB88_14 Depth=2
	jmp	.LBB88_19
.LBB88_19:                              # %for.inc67
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_14
.LBB88_20:                              # %for.end69
                                        #   in Loop: Header=BB88_12 Depth=1
	jmp	.LBB88_21
.LBB88_21:                              # %for.inc70
                                        #   in Loop: Header=BB88_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_12
.LBB88_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB88_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB88_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB88_23 Depth=1
	movl	$0, -4(%rbp)
.LBB88_25:                              # %for.cond76
                                        #   Parent Loop BB88_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB88_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB88_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB88_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_29
.LBB88_28:                              # %if.else94
                                        #   in Loop: Header=BB88_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_29:                              # %if.end108
                                        #   in Loop: Header=BB88_25 Depth=2
	jmp	.LBB88_30
.LBB88_30:                              # %for.inc109
                                        #   in Loop: Header=BB88_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_25
.LBB88_31:                              # %for.end111
                                        #   in Loop: Header=BB88_23 Depth=1
	jmp	.LBB88_32
.LBB88_32:                              # %for.inc112
                                        #   in Loop: Header=BB88_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_23
.LBB88_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB88_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB88_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB88_34 Depth=1
	movl	$0, -4(%rbp)
.LBB88_36:                              # %for.cond118
                                        #   Parent Loop BB88_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB88_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB88_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB88_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_40
.LBB88_39:                              # %if.else136
                                        #   in Loop: Header=BB88_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_40:                              # %if.end150
                                        #   in Loop: Header=BB88_36 Depth=2
	jmp	.LBB88_41
.LBB88_41:                              # %for.inc151
                                        #   in Loop: Header=BB88_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_36
.LBB88_42:                              # %for.end153
                                        #   in Loop: Header=BB88_34 Depth=1
	jmp	.LBB88_43
.LBB88_43:                              # %for.inc154
                                        #   in Loop: Header=BB88_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_34
.LBB88_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB88_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB88_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB88_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB88_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_49
.LBB88_48:                              # %if.else172
                                        #   in Loop: Header=BB88_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_49:                              # %if.end183
                                        #   in Loop: Header=BB88_45 Depth=1
	jmp	.LBB88_50
.LBB88_50:                              # %for.inc184
                                        #   in Loop: Header=BB88_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_45
.LBB88_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB88_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB88_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB88_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB88_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_56
.LBB88_55:                              # %if.else202
                                        #   in Loop: Header=BB88_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_56:                              # %if.end213
                                        #   in Loop: Header=BB88_52 Depth=1
	jmp	.LBB88_57
.LBB88_57:                              # %for.inc214
                                        #   in Loop: Header=BB88_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_52
.LBB88_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB88_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB88_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB88_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB88_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_63
.LBB88_62:                              # %if.else232
                                        #   in Loop: Header=BB88_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_63:                              # %if.end243
                                        #   in Loop: Header=BB88_59 Depth=1
	jmp	.LBB88_64
.LBB88_64:                              # %for.inc244
                                        #   in Loop: Header=BB88_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_59
.LBB88_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB88_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB88_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB88_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB88_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_70
.LBB88_69:                              # %if.else262
                                        #   in Loop: Header=BB88_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_70:                              # %if.end273
                                        #   in Loop: Header=BB88_66 Depth=1
	jmp	.LBB88_71
.LBB88_71:                              # %for.inc274
                                        #   in Loop: Header=BB88_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_66
.LBB88_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB88_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB88_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB88_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB88_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_77
.LBB88_76:                              # %if.else292
                                        #   in Loop: Header=BB88_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_77:                              # %if.end303
                                        #   in Loop: Header=BB88_73 Depth=1
	jmp	.LBB88_78
.LBB88_78:                              # %for.inc304
                                        #   in Loop: Header=BB88_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_73
.LBB88_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB88_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB88_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB88_80 Depth=1
	movl	$0, -4(%rbp)
.LBB88_82:                              # %for.cond310
                                        #   Parent Loop BB88_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB88_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB88_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB88_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_86
.LBB88_85:                              # %if.else328
                                        #   in Loop: Header=BB88_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_86:                              # %if.end342
                                        #   in Loop: Header=BB88_82 Depth=2
	jmp	.LBB88_87
.LBB88_87:                              # %for.inc343
                                        #   in Loop: Header=BB88_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_82
.LBB88_88:                              # %for.end345
                                        #   in Loop: Header=BB88_80 Depth=1
	jmp	.LBB88_89
.LBB88_89:                              # %for.inc346
                                        #   in Loop: Header=BB88_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_80
.LBB88_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB88_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB88_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB88_91 Depth=1
	movl	$0, -4(%rbp)
.LBB88_93:                              # %for.cond352
                                        #   Parent Loop BB88_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB88_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB88_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB88_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_97
.LBB88_96:                              # %if.else370
                                        #   in Loop: Header=BB88_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_97:                              # %if.end384
                                        #   in Loop: Header=BB88_93 Depth=2
	jmp	.LBB88_98
.LBB88_98:                              # %for.inc385
                                        #   in Loop: Header=BB88_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_93
.LBB88_99:                              # %for.end387
                                        #   in Loop: Header=BB88_91 Depth=1
	jmp	.LBB88_100
.LBB88_100:                             # %for.inc388
                                        #   in Loop: Header=BB88_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_91
.LBB88_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB88_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB88_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB88_102 Depth=1
	movl	$0, -4(%rbp)
.LBB88_104:                             # %for.cond394
                                        #   Parent Loop BB88_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB88_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB88_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB88_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_108
.LBB88_107:                             # %if.else412
                                        #   in Loop: Header=BB88_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_108:                             # %if.end426
                                        #   in Loop: Header=BB88_104 Depth=2
	jmp	.LBB88_109
.LBB88_109:                             # %for.inc427
                                        #   in Loop: Header=BB88_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_104
.LBB88_110:                             # %for.end429
                                        #   in Loop: Header=BB88_102 Depth=1
	jmp	.LBB88_111
.LBB88_111:                             # %for.inc430
                                        #   in Loop: Header=BB88_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_102
.LBB88_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB88_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB88_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB88_113 Depth=1
	movl	$0, -4(%rbp)
.LBB88_115:                             # %for.cond436
                                        #   Parent Loop BB88_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB88_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB88_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB88_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_119
.LBB88_118:                             # %if.else454
                                        #   in Loop: Header=BB88_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_119:                             # %if.end468
                                        #   in Loop: Header=BB88_115 Depth=2
	jmp	.LBB88_120
.LBB88_120:                             # %for.inc469
                                        #   in Loop: Header=BB88_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_115
.LBB88_121:                             # %for.end471
                                        #   in Loop: Header=BB88_113 Depth=1
	jmp	.LBB88_122
.LBB88_122:                             # %for.inc472
                                        #   in Loop: Header=BB88_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_113
.LBB88_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB88_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB88_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB88_124 Depth=1
	movl	$0, -4(%rbp)
.LBB88_126:                             # %for.cond478
                                        #   Parent Loop BB88_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB88_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB88_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB88_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_130
.LBB88_129:                             # %if.else496
                                        #   in Loop: Header=BB88_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_130:                             # %if.end510
                                        #   in Loop: Header=BB88_126 Depth=2
	jmp	.LBB88_131
.LBB88_131:                             # %for.inc511
                                        #   in Loop: Header=BB88_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_126
.LBB88_132:                             # %for.end513
                                        #   in Loop: Header=BB88_124 Depth=1
	jmp	.LBB88_133
.LBB88_133:                             # %for.inc514
                                        #   in Loop: Header=BB88_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_124
.LBB88_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB88_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB88_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB88_135 Depth=1
	movl	$0, -4(%rbp)
.LBB88_137:                             # %for.cond520
                                        #   Parent Loop BB88_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB88_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB88_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB88_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_141
.LBB88_140:                             # %if.else538
                                        #   in Loop: Header=BB88_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_141:                             # %if.end552
                                        #   in Loop: Header=BB88_137 Depth=2
	jmp	.LBB88_142
.LBB88_142:                             # %for.inc553
                                        #   in Loop: Header=BB88_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_137
.LBB88_143:                             # %for.end555
                                        #   in Loop: Header=BB88_135 Depth=1
	jmp	.LBB88_144
.LBB88_144:                             # %for.inc556
                                        #   in Loop: Header=BB88_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_135
.LBB88_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB88_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB88_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB88_146 Depth=1
	movl	$0, -4(%rbp)
.LBB88_148:                             # %for.cond562
                                        #   Parent Loop BB88_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB88_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB88_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB88_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_152
.LBB88_151:                             # %if.else580
                                        #   in Loop: Header=BB88_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_152:                             # %if.end594
                                        #   in Loop: Header=BB88_148 Depth=2
	jmp	.LBB88_153
.LBB88_153:                             # %for.inc595
                                        #   in Loop: Header=BB88_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_148
.LBB88_154:                             # %for.end597
                                        #   in Loop: Header=BB88_146 Depth=1
	jmp	.LBB88_155
.LBB88_155:                             # %for.inc598
                                        #   in Loop: Header=BB88_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_146
.LBB88_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB88_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB88_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB88_157 Depth=1
	movl	$0, -4(%rbp)
.LBB88_159:                             # %for.cond604
                                        #   Parent Loop BB88_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB88_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB88_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB88_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_163
.LBB88_162:                             # %if.else622
                                        #   in Loop: Header=BB88_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_163:                             # %if.end636
                                        #   in Loop: Header=BB88_159 Depth=2
	jmp	.LBB88_164
.LBB88_164:                             # %for.inc637
                                        #   in Loop: Header=BB88_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_159
.LBB88_165:                             # %for.end639
                                        #   in Loop: Header=BB88_157 Depth=1
	jmp	.LBB88_166
.LBB88_166:                             # %for.inc640
                                        #   in Loop: Header=BB88_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_157
.LBB88_167:                             # %for.end642
	cmpl	$1386940139, -28(%rbp)  # imm = 0x52AB06EB
	jne	.LBB88_169
.LBB88_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_168
.Lfunc_end88:
	.size	init_contexts.81, .Lfunc_end88-init_contexts.81
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.82
.LCPI89_0:
	.quad	4611686018427387904     # double 2
.LCPI89_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.82
	.p2align	4, 0x90
	.type	create_context_memory.82,@function
create_context_memory.82:               # @create_context_memory.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$353477251, -20(%rbp)   # imm = 0x1511A283
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB89_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB89_3
.LBB89_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB89_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB89_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB89_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB89_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB89_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB89_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB89_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB89_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB89_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB89_11:                              # %if.end10
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB89_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB89_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB89_13:                              # %if.end16
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	$0, -8(%rbp)
.LBB89_14:                              # %for.cond17
                                        #   Parent Loop BB89_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB89_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB89_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB89_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB89_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB89_17:                              # %if.end28
                                        #   in Loop: Header=BB89_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB89_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB89_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB89_19:                              # %if.end39
                                        #   in Loop: Header=BB89_14 Depth=2
	jmp	.LBB89_20
.LBB89_20:                              # %for.inc
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_14
.LBB89_21:                              # %for.end
                                        #   in Loop: Header=BB89_8 Depth=1
	jmp	.LBB89_22
.LBB89_22:                              # %for.inc40
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_8
.LBB89_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB89_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_26 Depth 2
                                        #       Child Loop BB89_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB89_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB89_24 Depth=1
	movl	$0, -8(%rbp)
.LBB89_26:                              # %for.cond47
                                        #   Parent Loop BB89_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB89_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB89_26 Depth=2
	movl	$0, -12(%rbp)
.LBB89_28:                              # %for.cond51
                                        #   Parent Loop BB89_24 Depth=1
                                        #     Parent Loop BB89_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB89_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB89_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB89_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_28
.LBB89_31:                              # %for.end63
                                        #   in Loop: Header=BB89_26 Depth=2
	jmp	.LBB89_32
.LBB89_32:                              # %for.inc64
                                        #   in Loop: Header=BB89_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_26
.LBB89_33:                              # %for.end66
                                        #   in Loop: Header=BB89_24 Depth=1
	jmp	.LBB89_34
.LBB89_34:                              # %for.inc67
                                        #   in Loop: Header=BB89_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_24
.LBB89_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB89_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB89_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB89_36 Depth=1
	vmovsd	.LCPI89_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI89_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI89_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB89_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_36
.LBB89_39:                              # %for.end98
	cmpl	$353477251, -20(%rbp)   # imm = 0x1511A283
	jne	.LBB89_41
.LBB89_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_40
.Lfunc_end89:
	.size	create_context_memory.82, .Lfunc_end89-create_context_memory.82
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.83        # -- Begin function init_contexts.83
	.p2align	4, 0x90
	.type	init_contexts.83,@function
init_contexts.83:                       # @init_contexts.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$535810495, -28(%rbp)   # imm = 0x1FEFD1BF
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB90_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB90_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB90_1 Depth=1
	movl	$0, -4(%rbp)
.LBB90_3:                               # %for.cond2
                                        #   Parent Loop BB90_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB90_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB90_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB90_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_7
.LBB90_6:                               # %if.else
                                        #   in Loop: Header=BB90_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_7:                               # %if.end
                                        #   in Loop: Header=BB90_3 Depth=2
	jmp	.LBB90_8
.LBB90_8:                               # %for.inc
                                        #   in Loop: Header=BB90_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_3
.LBB90_9:                               # %for.end
                                        #   in Loop: Header=BB90_1 Depth=1
	jmp	.LBB90_10
.LBB90_10:                              # %for.inc28
                                        #   in Loop: Header=BB90_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_1
.LBB90_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB90_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB90_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB90_12 Depth=1
	movl	$0, -4(%rbp)
.LBB90_14:                              # %for.cond34
                                        #   Parent Loop BB90_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB90_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB90_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB90_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_18
.LBB90_17:                              # %if.else52
                                        #   in Loop: Header=BB90_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_18:                              # %if.end66
                                        #   in Loop: Header=BB90_14 Depth=2
	jmp	.LBB90_19
.LBB90_19:                              # %for.inc67
                                        #   in Loop: Header=BB90_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_14
.LBB90_20:                              # %for.end69
                                        #   in Loop: Header=BB90_12 Depth=1
	jmp	.LBB90_21
.LBB90_21:                              # %for.inc70
                                        #   in Loop: Header=BB90_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_12
.LBB90_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB90_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB90_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB90_23 Depth=1
	movl	$0, -4(%rbp)
.LBB90_25:                              # %for.cond76
                                        #   Parent Loop BB90_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB90_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB90_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB90_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_29
.LBB90_28:                              # %if.else94
                                        #   in Loop: Header=BB90_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_29:                              # %if.end108
                                        #   in Loop: Header=BB90_25 Depth=2
	jmp	.LBB90_30
.LBB90_30:                              # %for.inc109
                                        #   in Loop: Header=BB90_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_25
.LBB90_31:                              # %for.end111
                                        #   in Loop: Header=BB90_23 Depth=1
	jmp	.LBB90_32
.LBB90_32:                              # %for.inc112
                                        #   in Loop: Header=BB90_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_23
.LBB90_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB90_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB90_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB90_34 Depth=1
	movl	$0, -4(%rbp)
.LBB90_36:                              # %for.cond118
                                        #   Parent Loop BB90_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB90_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB90_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB90_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_40
.LBB90_39:                              # %if.else136
                                        #   in Loop: Header=BB90_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_40:                              # %if.end150
                                        #   in Loop: Header=BB90_36 Depth=2
	jmp	.LBB90_41
.LBB90_41:                              # %for.inc151
                                        #   in Loop: Header=BB90_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_36
.LBB90_42:                              # %for.end153
                                        #   in Loop: Header=BB90_34 Depth=1
	jmp	.LBB90_43
.LBB90_43:                              # %for.inc154
                                        #   in Loop: Header=BB90_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_34
.LBB90_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB90_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB90_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB90_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB90_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_49
.LBB90_48:                              # %if.else172
                                        #   in Loop: Header=BB90_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_49:                              # %if.end183
                                        #   in Loop: Header=BB90_45 Depth=1
	jmp	.LBB90_50
.LBB90_50:                              # %for.inc184
                                        #   in Loop: Header=BB90_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_45
.LBB90_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB90_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB90_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB90_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB90_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_56
.LBB90_55:                              # %if.else202
                                        #   in Loop: Header=BB90_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_56:                              # %if.end213
                                        #   in Loop: Header=BB90_52 Depth=1
	jmp	.LBB90_57
.LBB90_57:                              # %for.inc214
                                        #   in Loop: Header=BB90_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_52
.LBB90_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB90_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB90_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB90_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB90_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_63
.LBB90_62:                              # %if.else232
                                        #   in Loop: Header=BB90_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_63:                              # %if.end243
                                        #   in Loop: Header=BB90_59 Depth=1
	jmp	.LBB90_64
.LBB90_64:                              # %for.inc244
                                        #   in Loop: Header=BB90_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_59
.LBB90_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB90_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB90_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB90_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB90_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_70
.LBB90_69:                              # %if.else262
                                        #   in Loop: Header=BB90_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_70:                              # %if.end273
                                        #   in Loop: Header=BB90_66 Depth=1
	jmp	.LBB90_71
.LBB90_71:                              # %for.inc274
                                        #   in Loop: Header=BB90_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_66
.LBB90_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB90_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB90_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB90_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB90_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_77
.LBB90_76:                              # %if.else292
                                        #   in Loop: Header=BB90_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_77:                              # %if.end303
                                        #   in Loop: Header=BB90_73 Depth=1
	jmp	.LBB90_78
.LBB90_78:                              # %for.inc304
                                        #   in Loop: Header=BB90_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_73
.LBB90_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB90_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB90_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB90_80 Depth=1
	movl	$0, -4(%rbp)
.LBB90_82:                              # %for.cond310
                                        #   Parent Loop BB90_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB90_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB90_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB90_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_86
.LBB90_85:                              # %if.else328
                                        #   in Loop: Header=BB90_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_86:                              # %if.end342
                                        #   in Loop: Header=BB90_82 Depth=2
	jmp	.LBB90_87
.LBB90_87:                              # %for.inc343
                                        #   in Loop: Header=BB90_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_82
.LBB90_88:                              # %for.end345
                                        #   in Loop: Header=BB90_80 Depth=1
	jmp	.LBB90_89
.LBB90_89:                              # %for.inc346
                                        #   in Loop: Header=BB90_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_80
.LBB90_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB90_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB90_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB90_91 Depth=1
	movl	$0, -4(%rbp)
.LBB90_93:                              # %for.cond352
                                        #   Parent Loop BB90_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB90_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB90_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB90_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_97
.LBB90_96:                              # %if.else370
                                        #   in Loop: Header=BB90_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_97:                              # %if.end384
                                        #   in Loop: Header=BB90_93 Depth=2
	jmp	.LBB90_98
.LBB90_98:                              # %for.inc385
                                        #   in Loop: Header=BB90_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_93
.LBB90_99:                              # %for.end387
                                        #   in Loop: Header=BB90_91 Depth=1
	jmp	.LBB90_100
.LBB90_100:                             # %for.inc388
                                        #   in Loop: Header=BB90_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_91
.LBB90_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB90_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB90_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB90_102 Depth=1
	movl	$0, -4(%rbp)
.LBB90_104:                             # %for.cond394
                                        #   Parent Loop BB90_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB90_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB90_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB90_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_108
.LBB90_107:                             # %if.else412
                                        #   in Loop: Header=BB90_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_108:                             # %if.end426
                                        #   in Loop: Header=BB90_104 Depth=2
	jmp	.LBB90_109
.LBB90_109:                             # %for.inc427
                                        #   in Loop: Header=BB90_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_104
.LBB90_110:                             # %for.end429
                                        #   in Loop: Header=BB90_102 Depth=1
	jmp	.LBB90_111
.LBB90_111:                             # %for.inc430
                                        #   in Loop: Header=BB90_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_102
.LBB90_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB90_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB90_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB90_113 Depth=1
	movl	$0, -4(%rbp)
.LBB90_115:                             # %for.cond436
                                        #   Parent Loop BB90_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB90_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB90_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB90_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_119
.LBB90_118:                             # %if.else454
                                        #   in Loop: Header=BB90_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_119:                             # %if.end468
                                        #   in Loop: Header=BB90_115 Depth=2
	jmp	.LBB90_120
.LBB90_120:                             # %for.inc469
                                        #   in Loop: Header=BB90_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_115
.LBB90_121:                             # %for.end471
                                        #   in Loop: Header=BB90_113 Depth=1
	jmp	.LBB90_122
.LBB90_122:                             # %for.inc472
                                        #   in Loop: Header=BB90_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_113
.LBB90_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB90_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB90_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB90_124 Depth=1
	movl	$0, -4(%rbp)
.LBB90_126:                             # %for.cond478
                                        #   Parent Loop BB90_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB90_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB90_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB90_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_130
.LBB90_129:                             # %if.else496
                                        #   in Loop: Header=BB90_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_130:                             # %if.end510
                                        #   in Loop: Header=BB90_126 Depth=2
	jmp	.LBB90_131
.LBB90_131:                             # %for.inc511
                                        #   in Loop: Header=BB90_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_126
.LBB90_132:                             # %for.end513
                                        #   in Loop: Header=BB90_124 Depth=1
	jmp	.LBB90_133
.LBB90_133:                             # %for.inc514
                                        #   in Loop: Header=BB90_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_124
.LBB90_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB90_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB90_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB90_135 Depth=1
	movl	$0, -4(%rbp)
.LBB90_137:                             # %for.cond520
                                        #   Parent Loop BB90_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB90_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB90_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB90_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_141
.LBB90_140:                             # %if.else538
                                        #   in Loop: Header=BB90_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_141:                             # %if.end552
                                        #   in Loop: Header=BB90_137 Depth=2
	jmp	.LBB90_142
.LBB90_142:                             # %for.inc553
                                        #   in Loop: Header=BB90_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_137
.LBB90_143:                             # %for.end555
                                        #   in Loop: Header=BB90_135 Depth=1
	jmp	.LBB90_144
.LBB90_144:                             # %for.inc556
                                        #   in Loop: Header=BB90_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_135
.LBB90_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB90_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB90_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB90_146 Depth=1
	movl	$0, -4(%rbp)
.LBB90_148:                             # %for.cond562
                                        #   Parent Loop BB90_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB90_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB90_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB90_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_152
.LBB90_151:                             # %if.else580
                                        #   in Loop: Header=BB90_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_152:                             # %if.end594
                                        #   in Loop: Header=BB90_148 Depth=2
	jmp	.LBB90_153
.LBB90_153:                             # %for.inc595
                                        #   in Loop: Header=BB90_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_148
.LBB90_154:                             # %for.end597
                                        #   in Loop: Header=BB90_146 Depth=1
	jmp	.LBB90_155
.LBB90_155:                             # %for.inc598
                                        #   in Loop: Header=BB90_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_146
.LBB90_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB90_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB90_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB90_157 Depth=1
	movl	$0, -4(%rbp)
.LBB90_159:                             # %for.cond604
                                        #   Parent Loop BB90_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB90_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB90_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB90_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_163
.LBB90_162:                             # %if.else622
                                        #   in Loop: Header=BB90_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_163:                             # %if.end636
                                        #   in Loop: Header=BB90_159 Depth=2
	jmp	.LBB90_164
.LBB90_164:                             # %for.inc637
                                        #   in Loop: Header=BB90_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_159
.LBB90_165:                             # %for.end639
                                        #   in Loop: Header=BB90_157 Depth=1
	jmp	.LBB90_166
.LBB90_166:                             # %for.inc640
                                        #   in Loop: Header=BB90_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_157
.LBB90_167:                             # %for.end642
	cmpl	$535810495, -28(%rbp)   # imm = 0x1FEFD1BF
	jne	.LBB90_169
.LBB90_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_168
.Lfunc_end90:
	.size	init_contexts.83, .Lfunc_end90-init_contexts.83
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.84
.LCPI91_0:
	.quad	4607182418800017408     # double 1
.LCPI91_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI91_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI91_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.84
	.p2align	4, 0x90
	.type	XRate.84,@function
XRate.84:                               # @XRate.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$642868060, -32(%rbp)   # imm = 0x2651635C
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB91_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB91_3
.LBB91_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB91_3:                               # %cond.end
	vmovsd	.LCPI91_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI91_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI91_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI91_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB91_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI91_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB91_6
.LBB91_5:                               # %cond.false6
	vmovsd	.LCPI91_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI91_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI91_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB91_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB91_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB91_9
.LBB91_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB91_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB91_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB91_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB91_13
.LBB91_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB91_13:                              # %cond.end26
	jmp	.LBB91_15
.LBB91_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB91_15
.LBB91_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB91_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB91_18
.LBB91_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB91_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$642868060, -32(%rbp)   # imm = 0x2651635C
	jne	.LBB91_20
.LBB91_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB91_19
.Lfunc_end91:
	.size	XRate.84, .Lfunc_end91-XRate.84
	.cfi_endproc
                                        # -- End function
	.type	num_mb_per_slice,@object # @num_mb_per_slice
	.comm	num_mb_per_slice,4,4
	.type	number_of_slices,@object # @number_of_slices
	.comm	number_of_slices,4,4
	.type	initialized,@object     # @initialized
	.comm	initialized,8,8
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"create_context_memory: initialized"
	.size	.L.str, 35

	.type	model_number,@object    # @model_number
	.comm	model_number,8,8
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"create_context_memory: model_number"
	.size	.L.str.1, 36

	.type	probability,@object     # @probability
	.data
	.globl	probability
	.p2align	4
probability:
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	4602678819172646912     # double 0.5
	.quad	4602221415580092655     # double 0.474609
	.quad	4601787232547217120     # double 0.45050699999999999
	.quad	4601375099138117191     # double 0.42762899999999998
	.quad	4600983880445686771     # double 0.405912
	.quad	4600612549649210819     # double 0.385299
	.quad	4600260061913575785     # double 0.365732
	.quad	4599925480490059176     # double 0.347159
	.quad	4599607904658735518     # double 0.32952999999999999
	.quad	4599306433699679337     # double 0.31279499999999999
	.quad	4599020292993754725     # double 0.29691099999999998
	.quad	4598748671893028756     # double 0.281833
	.quad	4598490831807162540     # double 0.26751999999999998
	.quad	4598246106203411228     # double 0.25393500000000002
	.quad	4597852365495189480     # double 0.241039
	.quad	4597411373019677361     # double 0.228799
	.quad	4596992754427114019     # double 0.21718000000000001
	.quad	4596595392824791865     # double 0.206151
	.quad	4596218207348800331     # double 0.19568199999999999
	.quad	4595860153164025867     # double 0.18574399999999999
	.quad	4595520329550542999     # double 0.176312
	.quad	4595197727702035196     # double 0.16735800000000001
	.quad	4594891518956171021     # double 0.158859
	.quad	4594600874650619039     # double 0.15079200000000001
	.quad	4594324966123047813     # double 0.14313400000000001
	.quad	4594063108826313982     # double 0.13586599999999999
	.quad	4593814510126883131     # double 0.128966
	.quad	4593485495152505952     # double 0.122417
	.quad	4593037513090372154     # double 0.1162
	.quad	4592612301227954341     # double 0.11029899999999999
	.quad	4592208706643747907     # double 0.104698
	.quad	4591825576416248244     # double 0.099380999999999997
	.quad	4591461901739138822     # double 0.094334000000000001
	.quad	4591116673806103109     # double 0.089542999999999998
	.quad	4590789027926012651     # double 0.084996000000000002
	.quad	4590478027350144954     # double 0.080680000000000001
	.quad	4590182807387371563     # double 0.076582999999999998
	.quad	4589902575404158061     # double 0.072693999999999995
	.quad	4589636538766970031     # double 0.069001999999999994
	.quad	4589384048957461132     # double 0.065498000000000001
	.quad	4589120750508846543     # double 0.062171999999999998
	.quad	4588665634744902990     # double 0.059013999999999997
	.quad	4588233865641427726     # double 0.056017999999999998
	.quad	4587823857931351916     # double 0.053172999999999998
	.quad	4587434746923547105     # double 0.050472999999999997
	.quad	4587065235581320611     # double 0.047909
	.quad	4586714603328732054     # double 0.045476000000000003
	.quad	4586381841359464902     # double 0.043166999999999997
	.quad	4586065940867202626     # double 0.040974999999999998
	.quad	4585766037160816770     # double 0.038893999999999998
	.quad	4585481409664366955     # double 0.036919
	.quad	4585211193686724725     # double 0.035043999999999999
	.quad	4584954668651949702     # double 0.033264000000000002
	.quad	4584711258099289581     # double 0.031574999999999999
	.quad	4584296062242443040     # double 0.029971999999999999
	.quad	4583857375609940135     # double 0.02845
	.quad	4583440882716400912     # double 0.027005000000000001
	.quad	4583045430640320763     # double 0.025633
	.quad	4582670442920947386     # double 0.024331999999999999
	.quad	4582314190176023870     # double 0.023095999999999998
	.quad	4581976095944797913     # double 0.021923000000000002
	.quad	4581655295536141057     # double 0.020809999999999999
	.quad	4581350636028548698     # double 0.019753
	.quad	4581061540961268531     # double 0.018749999999999999
	.size	probability, 1024

	.type	entropy,@object         # @entropy
	.comm	entropy,1024,16
	.type	INIT_MB_TYPE_I,@object  # @INIT_MB_TYPE_I
	.section	.rodata,"a",@progbits
	.p2align	4
INIT_MB_TYPE_I:
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967268              # 0xffffffe4
	.long	127                     # 0x7f
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	4294967268              # 0xffffffe4
	.long	127                     # 0x7f
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_TYPE_I, 264

	.type	INIT_MB_TYPE_P,@object  # @INIT_MB_TYPE_P
	.p2align	4
INIT_MB_TYPE_P:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	23                      # 0x17
	.long	33                      # 0x21
	.long	23                      # 0x17
	.long	2                       # 0x2
	.long	21                      # 0x15
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	9                       # 0x9
	.long	0                       # 0x0
	.long	49                      # 0x31
	.long	4294967259              # 0xffffffdb
	.long	118                     # 0x76
	.long	5                       # 0x5
	.long	57                      # 0x39
	.long	4294967283              # 0xfffffff3
	.long	78                      # 0x4e
	.long	4294967285              # 0xfffffff5
	.long	65                      # 0x41
	.long	1                       # 0x1
	.long	62                      # 0x3e
	.long	26                      # 0x1a
	.long	67                      # 0x43
	.long	16                      # 0x10
	.long	90                      # 0x5a
	.long	9                       # 0x9
	.long	104                     # 0x68
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967250              # 0xffffffd2
	.long	127                     # 0x7f
	.long	4294967276              # 0xffffffec
	.long	104                     # 0x68
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	18                      # 0x12
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	43                      # 0x2b
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	22                      # 0x16
	.long	25                      # 0x19
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	16                      # 0x10
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	9                       # 0x9
	.long	4                       # 0x4
	.long	41                      # 0x29
	.long	4294967267              # 0xffffffe3
	.long	118                     # 0x76
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	4294967290              # 0xfffffffa
	.long	71                      # 0x47
	.long	4294967283              # 0xfffffff3
	.long	79                      # 0x4f
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	57                      # 0x39
	.long	2                       # 0x2
	.long	41                      # 0x29
	.long	36                      # 0x24
	.long	26                      # 0x1a
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967251              # 0xffffffd3
	.long	127                     # 0x7f
	.long	4294967281              # 0xfffffff1
	.long	101                     # 0x65
	.long	4294967292              # 0xfffffffc
	.long	76                      # 0x4c
	.long	26                      # 0x1a
	.long	34                      # 0x22
	.long	19                      # 0x13
	.long	22                      # 0x16
	.long	40                      # 0x28
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	29                      # 0x1d
	.long	16                      # 0x10
	.long	25                      # 0x19
	.long	0                       # 0x0
	.long	14                      # 0xe
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	51                      # 0x33
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	4294967269              # 0xffffffe5
	.long	99                      # 0x63
	.long	26                      # 0x1a
	.long	16                      # 0x10
	.long	4294967292              # 0xfffffffc
	.long	85                      # 0x55
	.long	4294967272              # 0xffffffe8
	.long	102                     # 0x66
	.long	5                       # 0x5
	.long	57                      # 0x39
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	37                      # 0x25
	.long	42                      # 0x2a
	.long	12                      # 0xc
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967264              # 0xffffffe0
	.long	127                     # 0x7f
	.long	4294967274              # 0xffffffea
	.long	117                     # 0x75
	.long	4294967294              # 0xfffffffe
	.long	74                      # 0x4a
	.long	20                      # 0x14
	.long	40                      # 0x28
	.long	20                      # 0x14
	.long	10                      # 0xa
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_TYPE_P, 792

	.type	INIT_B8_TYPE_I,@object  # @INIT_B8_TYPE_I
	.p2align	4
INIT_B8_TYPE_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_B8_TYPE_I, 144

	.type	INIT_B8_TYPE_P,@object  # @INIT_B8_TYPE_P
	.p2align	4
INIT_B8_TYPE_P:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	49                      # 0x31
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	73                      # 0x49
	.long	17                      # 0x11
	.long	50                      # 0x32
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	86                      # 0x56
	.long	4294967279              # 0xffffffef
	.long	95                      # 0x5f
	.long	4294967290              # 0xfffffffa
	.long	61                      # 0x3d
	.long	9                       # 0x9
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	50                      # 0x32
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	10                      # 0xa
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	69                      # 0x45
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	0                       # 0x0
	.long	52                      # 0x34
	.long	8                       # 0x8
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967279              # 0xffffffef
	.long	73                      # 0x49
	.long	14                      # 0xe
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	93                      # 0x5d
	.long	4294967282              # 0xfffffff2
	.long	88                      # 0x58
	.long	4294967290              # 0xfffffffa
	.long	44                      # 0x2c
	.long	4                       # 0x4
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_B8_TYPE_P, 432

	.type	INIT_MV_RES_I,@object   # @INIT_MV_RES_I
	.p2align	4
INIT_MV_RES_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MV_RES_I, 160

	.type	INIT_MV_RES_P,@object   # @INIT_MV_RES_P
	.p2align	4
INIT_MV_RES_P:
	.long	4294967293              # 0xfffffffd
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967285              # 0xfffffff5
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967286              # 0xfffffff6
	.long	94                      # 0x5e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	55                      # 0x37
	.long	7                       # 0x7
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	2                       # 0x2
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	4                       # 0x4
	.long	69                      # 0x45
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	0                       # 0x0
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967286              # 0xfffffff6
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967290              # 0xfffffffa
	.long	85                      # 0x55
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	87                      # 0x57
	.long	4294967293              # 0xfffffffd
	.long	100                     # 0x64
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967289              # 0xfffffff9
	.long	86                      # 0x56
	.long	4294967291              # 0xfffffffb
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	89                      # 0x59
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967281              # 0xfffffff1
	.long	103                     # 0x67
	.long	4294967275              # 0xffffffeb
	.long	116                     # 0x74
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	19                      # 0x13
	.long	57                      # 0x39
	.long	20                      # 0x14
	.long	58                      # 0x3a
	.long	4                       # 0x4
	.long	84                      # 0x54
	.long	6                       # 0x6
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	63                      # 0x3f
	.long	6                       # 0x6
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	90                      # 0x5a
	.long	4294967295              # 0xffffffff
	.long	101                     # 0x65
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MV_RES_P, 480

	.type	INIT_REF_NO_I,@object   # @INIT_REF_NO_I
	.p2align	4
INIT_REF_NO_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_REF_NO_I, 96

	.type	INIT_REF_NO_P,@object   # @INIT_REF_NO_P
	.p2align	4
INIT_REF_NO_P:
	.long	4294967289              # 0xfffffff9
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	80                      # 0x50
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967295              # 0xffffffff
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	77                      # 0x4d
	.long	1                       # 0x1
	.long	70                      # 0x46
	.long	4294967294              # 0xfffffffe
	.long	86                      # 0x56
	.long	4294967291              # 0xfffffffb
	.long	72                      # 0x48
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967294              # 0xfffffffe
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	50                      # 0x32
	.long	1                       # 0x1
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_REF_NO_P, 288

	.type	INIT_DELTA_QP_I,@object # @INIT_DELTA_QP_I
	.p2align	4
INIT_DELTA_QP_I:
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.size	INIT_DELTA_QP_I, 32

	.type	INIT_DELTA_QP_P,@object # @INIT_DELTA_QP_P
	.p2align	4
INIT_DELTA_QP_P:
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.size	INIT_DELTA_QP_P, 96

	.type	INIT_MB_AFF_I,@object   # @INIT_MB_AFF_I
	.p2align	4
INIT_MB_AFF_I:
	.long	0                       # 0x0
	.long	11                      # 0xb
	.long	1                       # 0x1
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_AFF_I, 32

	.type	INIT_MB_AFF_P,@object   # @INIT_MB_AFF_P
	.p2align	4
INIT_MB_AFF_P:
	.long	0                       # 0x0
	.long	45                      # 0x2d
	.long	4294967292              # 0xfffffffc
	.long	78                      # 0x4e
	.long	4294967293              # 0xfffffffd
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	13                      # 0xd
	.long	15                      # 0xf
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	80                      # 0x50
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	7                       # 0x7
	.long	34                      # 0x22
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	4294967276              # 0xffffffec
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_AFF_P, 96

	.type	INIT_TRANSFORM_SIZE_I,@object # @INIT_TRANSFORM_SIZE_I
	.p2align	4
INIT_TRANSFORM_SIZE_I:
	.long	31                      # 0x1f
	.long	21                      # 0x15
	.long	31                      # 0x1f
	.long	31                      # 0x1f
	.long	25                      # 0x19
	.long	50                      # 0x32
	.size	INIT_TRANSFORM_SIZE_I, 24

	.type	INIT_TRANSFORM_SIZE_P,@object # @INIT_TRANSFORM_SIZE_P
	.p2align	4
INIT_TRANSFORM_SIZE_P:
	.long	12                      # 0xc
	.long	40                      # 0x28
	.long	11                      # 0xb
	.long	51                      # 0x33
	.long	14                      # 0xe
	.long	59                      # 0x3b
	.long	25                      # 0x19
	.long	32                      # 0x20
	.long	21                      # 0x15
	.long	49                      # 0x31
	.long	21                      # 0x15
	.long	54                      # 0x36
	.long	21                      # 0x15
	.long	33                      # 0x21
	.long	19                      # 0x13
	.long	50                      # 0x32
	.long	17                      # 0x11
	.long	61                      # 0x3d
	.size	INIT_TRANSFORM_SIZE_P, 72

	.type	INIT_IPR_I,@object      # @INIT_IPR_I
	.p2align	4
INIT_IPR_I:
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.size	INIT_IPR_I, 16

	.type	INIT_IPR_P,@object      # @INIT_IPR_P
	.p2align	4
INIT_IPR_P:
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.size	INIT_IPR_P, 48

	.type	INIT_CIPR_I,@object     # @INIT_CIPR_I
	.p2align	4
INIT_CIPR_I:
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.size	INIT_CIPR_I, 32

	.type	INIT_CIPR_P,@object     # @INIT_CIPR_P
	.p2align	4
INIT_CIPR_P:
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.size	INIT_CIPR_P, 96

	.type	INIT_CBP_I,@object      # @INIT_CBP_I
	.p2align	4
INIT_CBP_I:
	.long	4294967279              # 0xffffffef
	.long	127                     # 0x7f
	.long	4294967283              # 0xfffffff3
	.long	102                     # 0x66
	.long	0                       # 0x0
	.long	82                      # 0x52
	.long	4294967289              # 0xfffffff9
	.long	74                      # 0x4a
	.long	4294967275              # 0xffffffeb
	.long	107                     # 0x6b
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	4294967272              # 0xffffffe8
	.long	127                     # 0x7f
	.long	4294967278              # 0xffffffee
	.long	95                      # 0x5f
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967275              # 0xffffffeb
	.long	114                     # 0x72
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.size	INIT_CBP_I, 96

	.type	INIT_CBP_P,@object      # @INIT_CBP_P
	.p2align	4
INIT_CBP_P:
	.long	4294967269              # 0xffffffe5
	.long	126                     # 0x7e
	.long	4294967268              # 0xffffffe4
	.long	98                      # 0x62
	.long	4294967271              # 0xffffffe7
	.long	101                     # 0x65
	.long	4294967273              # 0xffffffe9
	.long	67                      # 0x43
	.long	4294967268              # 0xffffffe4
	.long	82                      # 0x52
	.long	4294967276              # 0xffffffec
	.long	94                      # 0x5e
	.long	4294967280              # 0xfffffff0
	.long	83                      # 0x53
	.long	4294967274              # 0xffffffea
	.long	110                     # 0x6e
	.long	4294967275              # 0xffffffeb
	.long	91                      # 0x5b
	.long	4294967278              # 0xffffffee
	.long	102                     # 0x66
	.long	4294967283              # 0xfffffff3
	.long	93                      # 0x5d
	.long	4294967267              # 0xffffffe3
	.long	127                     # 0x7f
	.long	4294967257              # 0xffffffd9
	.long	127                     # 0x7f
	.long	4294967278              # 0xffffffee
	.long	91                      # 0x5b
	.long	4294967279              # 0xffffffef
	.long	96                      # 0x60
	.long	4294967270              # 0xffffffe6
	.long	81                      # 0x51
	.long	4294967261              # 0xffffffdd
	.long	98                      # 0x62
	.long	4294967272              # 0xffffffe8
	.long	102                     # 0x66
	.long	4294967273              # 0xffffffe9
	.long	97                      # 0x61
	.long	4294967269              # 0xffffffe5
	.long	119                     # 0x77
	.long	4294967272              # 0xffffffe8
	.long	99                      # 0x63
	.long	4294967275              # 0xffffffeb
	.long	110                     # 0x6e
	.long	4294967278              # 0xffffffee
	.long	102                     # 0x66
	.long	4294967260              # 0xffffffdc
	.long	127                     # 0x7f
	.long	4294967260              # 0xffffffdc
	.long	127                     # 0x7f
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967282              # 0xfffffff2
	.long	95                      # 0x5f
	.long	4294967271              # 0xffffffe7
	.long	84                      # 0x54
	.long	4294967271              # 0xffffffe7
	.long	86                      # 0x56
	.long	4294967284              # 0xfffffff4
	.long	89                      # 0x59
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	4294967282              # 0xfffffff2
	.long	76                      # 0x4c
	.long	4294967278              # 0xffffffee
	.long	103                     # 0x67
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.size	INIT_CBP_P, 288

	.type	INIT_BCBP_I,@object     # @INIT_BCBP_I
	.p2align	4
INIT_BCBP_I:
	.long	4294967279              # 0xffffffef
	.long	123                     # 0x7b
	.long	4294967284              # 0xfffffff4
	.long	115                     # 0x73
	.long	4294967280              # 0xfffffff0
	.long	122                     # 0x7a
	.long	4294967285              # 0xfffffff5
	.long	115                     # 0x73
	.long	4294967284              # 0xfffffff4
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	68                      # 0x44
	.long	4294967281              # 0xfffffff1
	.long	84                      # 0x54
	.long	4294967283              # 0xfffffff3
	.long	104                     # 0x68
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967288              # 0xfffffff8
	.long	93                      # 0x5d
	.long	4294967286              # 0xfffffff6
	.long	90                      # 0x5a
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	4294967290              # 0xfffffffa
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	91                      # 0x5b
	.long	4294967276              # 0xffffffec
	.long	127                     # 0x7f
	.long	4294967292              # 0xfffffffc
	.long	56                      # 0x38
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967289              # 0xfffffff9
	.long	76                      # 0x4c
	.long	4294967274              # 0xffffffea
	.long	125                     # 0x7d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_BCBP_I, 256

	.type	INIT_BCBP_P,@object     # @INIT_BCBP_P
	.p2align	4
INIT_BCBP_P:
	.long	4294967289              # 0xfffffff9
	.long	92                      # 0x5c
	.long	4294967291              # 0xfffffffb
	.long	89                      # 0x59
	.long	4294967289              # 0xfffffff9
	.long	96                      # 0x60
	.long	4294967283              # 0xfffffff3
	.long	108                     # 0x6c
	.long	4294967293              # 0xfffffffd
	.long	46                      # 0x2e
	.long	4294967295              # 0xffffffff
	.long	65                      # 0x41
	.long	4294967295              # 0xffffffff
	.long	57                      # 0x39
	.long	4294967287              # 0xfffffff7
	.long	93                      # 0x5d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	92                      # 0x5c
	.long	4294967288              # 0xfffffff8
	.long	87                      # 0x57
	.long	4294967273              # 0xffffffe9
	.long	126                     # 0x7e
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	6                       # 0x6
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	59                      # 0x3b
	.long	6                       # 0x6
	.long	69                      # 0x45
	.long	4294967295              # 0xffffffff
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967292              # 0xfffffffc
	.long	69                      # 0x45
	.long	4294967288              # 0xfffffff8
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	80                      # 0x50
	.long	4294967291              # 0xfffffffb
	.long	89                      # 0x59
	.long	4294967289              # 0xfffffff9
	.long	94                      # 0x5e
	.long	4294967292              # 0xfffffffc
	.long	92                      # 0x5c
	.long	0                       # 0x0
	.long	39                      # 0x27
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967281              # 0xfffffff1
	.long	84                      # 0x54
	.long	4294967261              # 0xffffffdd
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	73                      # 0x49
	.long	4294967284              # 0xfffffff4
	.long	104                     # 0x68
	.long	4294967287              # 0xfffffff7
	.long	91                      # 0x5b
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	7                       # 0x7
	.long	56                      # 0x38
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	8                       # 0x8
	.long	61                      # 0x3d
	.long	4294967293              # 0xfffffffd
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967289              # 0xfffffff9
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	11                      # 0xb
	.long	80                      # 0x50
	.long	5                       # 0x5
	.long	76                      # 0x4c
	.long	2                       # 0x2
	.long	84                      # 0x54
	.long	5                       # 0x5
	.long	78                      # 0x4e
	.long	4294967290              # 0xfffffffa
	.long	55                      # 0x37
	.long	4                       # 0x4
	.long	61                      # 0x3d
	.long	4294967282              # 0xfffffff2
	.long	83                      # 0x53
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	79                      # 0x4f
	.long	4294967285              # 0xfffffff5
	.long	104                     # 0x68
	.long	4294967285              # 0xfffffff5
	.long	91                      # 0x5b
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967294              # 0xfffffffe
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	4294967292              # 0xfffffffc
	.long	92                      # 0x5c
	.long	4294967290              # 0xfffffffa
	.long	56                      # 0x38
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	4294967288              # 0xfffffff8
	.long	71                      # 0x47
	.long	4294967283              # 0xfffffff3
	.long	98                      # 0x62
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_BCBP_P, 768

	.type	INIT_MAP_I,@object      # @INIT_MAP_I
	.p2align	4
INIT_MAP_I:
	.long	4294967289              # 0xfffffff9
	.long	93                      # 0x5d
	.long	4294967285              # 0xfffffff5
	.long	87                      # 0x57
	.long	4294967293              # 0xfffffffd
	.long	77                      # 0x4d
	.long	4294967291              # 0xfffffffb
	.long	71                      # 0x47
	.long	4294967292              # 0xfffffffc
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	68                      # 0x44
	.long	4294967284              # 0xfffffff4
	.long	84                      # 0x54
	.long	4294967289              # 0xfffffff9
	.long	62                      # 0x3e
	.long	4294967289              # 0xfffffff9
	.long	65                      # 0x41
	.long	8                       # 0x8
	.long	61                      # 0x3d
	.long	5                       # 0x5
	.long	56                      # 0x38
	.long	4294967294              # 0xfffffffe
	.long	66                      # 0x42
	.long	1                       # 0x1
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	4294967294              # 0xfffffffe
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	50                      # 0x32
	.long	7                       # 0x7
	.long	52                      # 0x34
	.long	10                      # 0xa
	.long	35                      # 0x23
	.long	0                       # 0x0
	.long	44                      # 0x2c
	.long	11                      # 0xb
	.long	38                      # 0x26
	.long	1                       # 0x1
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	31                      # 0x1f
	.long	17                      # 0x11
	.long	1                       # 0x1
	.long	51                      # 0x33
	.long	7                       # 0x7
	.long	50                      # 0x32
	.long	28                      # 0x1c
	.long	19                      # 0x13
	.long	16                      # 0x10
	.long	33                      # 0x21
	.long	14                      # 0xe
	.long	62                      # 0x3e
	.long	4294967279              # 0xffffffef
	.long	120                     # 0x78
	.long	4294967276              # 0xffffffec
	.long	112                     # 0x70
	.long	4294967278              # 0xffffffee
	.long	114                     # 0x72
	.long	4294967285              # 0xfffffff5
	.long	85                      # 0x55
	.long	4294967281              # 0xfffffff1
	.long	92                      # 0x5c
	.long	4294967282              # 0xfffffff2
	.long	89                      # 0x59
	.long	4294967270              # 0xffffffe6
	.long	71                      # 0x47
	.long	4294967281              # 0xfffffff1
	.long	81                      # 0x51
	.long	4294967282              # 0xfffffff2
	.long	80                      # 0x50
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967282              # 0xfffffff2
	.long	70                      # 0x46
	.long	4294967272              # 0xffffffe8
	.long	56                      # 0x38
	.long	4294967273              # 0xffffffe9
	.long	68                      # 0x44
	.long	4294967272              # 0xffffffe8
	.long	50                      # 0x32
	.long	4294967285              # 0xfffffff5
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	108                     # 0x6c
	.long	4294967281              # 0xfffffff1
	.long	100                     # 0x64
	.long	4294967283              # 0xfffffff3
	.long	101                     # 0x65
	.long	4294967283              # 0xfffffff3
	.long	91                      # 0x5b
	.long	4294967284              # 0xfffffff4
	.long	94                      # 0x5e
	.long	4294967286              # 0xfffffff6
	.long	88                      # 0x58
	.long	4294967280              # 0xfffffff0
	.long	84                      # 0x54
	.long	4294967286              # 0xfffffff6
	.long	86                      # 0x56
	.long	4294967289              # 0xfffffff9
	.long	83                      # 0x53
	.long	4294967283              # 0xfffffff3
	.long	87                      # 0x57
	.long	4294967277              # 0xffffffed
	.long	94                      # 0x5e
	.long	1                       # 0x1
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	18                      # 0x12
	.long	59                      # 0x3b
	.long	4294967288              # 0xfffffff8
	.long	102                     # 0x66
	.long	4294967281              # 0xfffffff1
	.long	100                     # 0x64
	.long	0                       # 0x0
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	75                      # 0x4b
	.long	2                       # 0x2
	.long	72                      # 0x48
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	71                      # 0x47
	.long	15                      # 0xf
	.long	46                      # 0x2e
	.long	4294967283              # 0xfffffff3
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	21                      # 0x15
	.long	37                      # 0x25
	.long	4294967281              # 0xfffffff1
	.long	72                      # 0x48
	.long	9                       # 0x9
	.long	57                      # 0x39
	.long	16                      # 0x10
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	12                      # 0xc
	.long	72                      # 0x48
	.size	INIT_MAP_I, 960

	.type	INIT_MAP_P,@object      # @INIT_MAP_P
	.p2align	4
INIT_MAP_P:
	.long	4294967294              # 0xfffffffe
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	78                      # 0x4e
	.long	4294967295              # 0xffffffff
	.long	75                      # 0x4b
	.long	4294967289              # 0xfffffff9
	.long	77                      # 0x4d
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	5                       # 0x5
	.long	50                      # 0x32
	.long	4294967293              # 0xfffffffd
	.long	68                      # 0x44
	.long	1                       # 0x1
	.long	50                      # 0x32
	.long	6                       # 0x6
	.long	42                      # 0x2a
	.long	4294967292              # 0xfffffffc
	.long	81                      # 0x51
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	67                      # 0x43
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	4294967294              # 0xfffffffe
	.long	76                      # 0x4c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	4                       # 0x4
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	61                      # 0x3d
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	25                      # 0x19
	.long	12                      # 0xc
	.long	24                      # 0x18
	.long	13                      # 0xd
	.long	29                      # 0x1d
	.long	13                      # 0xd
	.long	36                      # 0x24
	.long	4294967286              # 0xfffffff6
	.long	93                      # 0x5d
	.long	4294967289              # 0xfffffff9
	.long	73                      # 0x49
	.long	4294967294              # 0xfffffffe
	.long	73                      # 0x49
	.long	13                      # 0xd
	.long	46                      # 0x2e
	.long	9                       # 0x9
	.long	49                      # 0x31
	.long	4294967289              # 0xfffffff9
	.long	100                     # 0x64
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967289              # 0xfffffff9
	.long	71                      # 0x47
	.long	4294967291              # 0xfffffffb
	.long	69                      # 0x45
	.long	4294967287              # 0xfffffff7
	.long	70                      # 0x46
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967286              # 0xfffffff6
	.long	68                      # 0x44
	.long	4294967277              # 0xffffffed
	.long	73                      # 0x49
	.long	4294967284              # 0xfffffff4
	.long	69                      # 0x45
	.long	4294967280              # 0xfffffff0
	.long	70                      # 0x46
	.long	4294967281              # 0xfffffff1
	.long	67                      # 0x43
	.long	4294967276              # 0xffffffec
	.long	62                      # 0x3e
	.long	4294967277              # 0xffffffed
	.long	70                      # 0x46
	.long	4294967280              # 0xfffffff0
	.long	66                      # 0x42
	.long	4294967274              # 0xffffffea
	.long	65                      # 0x41
	.long	4294967276              # 0xffffffec
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	53                      # 0x35
	.long	2                       # 0x2
	.long	53                      # 0x35
	.long	5                       # 0x5
	.long	53                      # 0x35
	.long	4294967294              # 0xfffffffe
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	56                      # 0x38
	.long	4294967283              # 0xfffffff3
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	60                      # 0x3c
	.long	4294967295              # 0xffffffff
	.long	62                      # 0x3e
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	4294967290              # 0xfffffffa
	.long	69                      # 0x45
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	14                      # 0xe
	.long	39                      # 0x27
	.long	4                       # 0x4
	.long	51                      # 0x33
	.long	13                      # 0xd
	.long	68                      # 0x44
	.long	3                       # 0x3
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	61                      # 0x3d
	.long	9                       # 0x9
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	7                       # 0x7
	.long	50                      # 0x32
	.long	16                      # 0x10
	.long	39                      # 0x27
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	4                       # 0x4
	.long	52                      # 0x34
	.long	11                      # 0xb
	.long	48                      # 0x30
	.long	4294967291              # 0xfffffffb
	.long	60                      # 0x3c
	.long	4294967295              # 0xffffffff
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	22                      # 0x16
	.long	33                      # 0x21
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	14                      # 0xe
	.long	43                      # 0x2b
	.long	4294967295              # 0xffffffff
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	60                      # 0x3c
	.long	9                       # 0x9
	.long	69                      # 0x45
	.long	4294967283              # 0xfffffff3
	.long	103                     # 0x67
	.long	4294967283              # 0xfffffff3
	.long	91                      # 0x5b
	.long	4294967287              # 0xfffffff7
	.long	89                      # 0x59
	.long	4294967282              # 0xfffffff2
	.long	92                      # 0x5c
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	4294967284              # 0xfffffff4
	.long	87                      # 0x57
	.long	4294967273              # 0xffffffe9
	.long	110                     # 0x6e
	.long	4294967272              # 0xffffffe8
	.long	105                     # 0x69
	.long	4294967286              # 0xfffffff6
	.long	78                      # 0x4e
	.long	4294967276              # 0xffffffec
	.long	112                     # 0x70
	.long	4294967279              # 0xffffffef
	.long	99                      # 0x63
	.long	4294967218              # 0xffffffb2
	.long	127                     # 0x7f
	.long	4294967226              # 0xffffffba
	.long	127                     # 0x7f
	.long	4294967246              # 0xffffffce
	.long	127                     # 0x7f
	.long	4294967250              # 0xffffffd2
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	66                      # 0x42
	.long	4294967291              # 0xfffffffb
	.long	78                      # 0x4e
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	4294967288              # 0xfffffff8
	.long	72                      # 0x48
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	4294967295              # 0xffffffff
	.long	55                      # 0x37
	.long	4294967289              # 0xfffffff9
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	89                      # 0x59
	.long	4294967262              # 0xffffffde
	.long	119                     # 0x77
	.long	4294967293              # 0xfffffffd
	.long	75                      # 0x4b
	.long	32                      # 0x20
	.long	20                      # 0x14
	.long	30                      # 0x1e
	.long	22                      # 0x16
	.long	4294967252              # 0xffffffd4
	.long	127                     # 0x7f
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	4294967279              # 0xffffffef
	.long	80                      # 0x50
	.long	4294967278              # 0xffffffee
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	83                      # 0x53
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967282              # 0xfffffff2
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	4294967291              # 0xfffffffb
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	60                      # 0x3c
	.long	4294967293              # 0xfffffffd
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	67                      # 0x43
	.long	4294967271              # 0xffffffe7
	.long	84                      # 0x54
	.long	4294967282              # 0xfffffff2
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	65                      # 0x41
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	4294967287              # 0xfffffff7
	.long	69                      # 0x45
	.long	4294967285              # 0xfffffff5
	.long	70                      # 0x46
	.long	18                      # 0x12
	.long	55                      # 0x37
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	7                       # 0x7
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	41                      # 0x29
	.long	18                      # 0x12
	.long	25                      # 0x19
	.long	9                       # 0x9
	.long	32                      # 0x20
	.long	5                       # 0x5
	.long	43                      # 0x2b
	.long	9                       # 0x9
	.long	47                      # 0x2f
	.long	0                       # 0x0
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	46                      # 0x2e
	.long	19                      # 0x13
	.long	38                      # 0x26
	.long	4294967292              # 0xfffffffc
	.long	66                      # 0x42
	.long	15                      # 0xf
	.long	38                      # 0x26
	.long	12                      # 0xc
	.long	42                      # 0x2a
	.long	9                       # 0x9
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	89                      # 0x59
	.long	4294967292              # 0xfffffffc
	.long	86                      # 0x56
	.long	4294967284              # 0xfffffff4
	.long	88                      # 0x58
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967293              # 0xfffffffd
	.long	72                      # 0x48
	.long	4294967292              # 0xfffffffc
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	89                      # 0x59
	.long	4294967287              # 0xfffffff7
	.long	69                      # 0x45
	.long	4294967295              # 0xffffffff
	.long	59                      # 0x3b
	.long	5                       # 0x5
	.long	66                      # 0x42
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	4294967294              # 0xfffffffe
	.long	71                      # 0x47
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	44                      # 0x2c
	.long	4294967295              # 0xffffffff
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	4294967289              # 0xfffffff9
	.long	51                      # 0x33
	.long	4294967292              # 0xfffffffc
	.long	47                      # 0x2f
	.long	4294967290              # 0xfffffffa
	.long	42                      # 0x2a
	.long	4294967293              # 0xfffffffd
	.long	41                      # 0x29
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	8                       # 0x8
	.long	76                      # 0x4c
	.long	4294967287              # 0xfffffff7
	.long	78                      # 0x4e
	.long	4294967285              # 0xfffffff5
	.long	83                      # 0x53
	.long	9                       # 0x9
	.long	52                      # 0x34
	.long	0                       # 0x0
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	90                      # 0x5a
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	4294967286              # 0xfffffff6
	.long	72                      # 0x48
	.long	4294967278              # 0xffffffee
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	71                      # 0x47
	.long	4294967285              # 0xfffffff5
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	70                      # 0x46
	.long	4294967279              # 0xffffffef
	.long	75                      # 0x4b
	.long	4294967282              # 0xfffffff2
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	53                      # 0x35
	.long	4294967282              # 0xfffffff2
	.long	59                      # 0x3b
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967285              # 0xfffffff5
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	4294967281              # 0xfffffff1
	.long	72                      # 0x48
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	80                      # 0x50
	.long	4294967275              # 0xffffffeb
	.long	83                      # 0x53
	.long	4294967275              # 0xffffffeb
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	31                      # 0x1f
	.long	4294967271              # 0xffffffe7
	.long	64                      # 0x40
	.long	4294967267              # 0xffffffe3
	.long	94                      # 0x5e
	.long	9                       # 0x9
	.long	75                      # 0x4b
	.long	17                      # 0x11
	.long	63                      # 0x3f
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	35                      # 0x23
	.long	4294967294              # 0xfffffffe
	.long	27                      # 0x1b
	.long	13                      # 0xd
	.long	91                      # 0x5b
	.long	3                       # 0x3
	.long	65                      # 0x41
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	8                       # 0x8
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	66                      # 0x42
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	4294967293              # 0xfffffffd
	.long	68                      # 0x44
	.long	4294967276              # 0xffffffec
	.long	81                      # 0x51
	.long	0                       # 0x0
	.long	30                      # 0x1e
	.long	1                       # 0x1
	.long	7                       # 0x7
	.long	4294967293              # 0xfffffffd
	.long	23                      # 0x17
	.long	4294967275              # 0xffffffeb
	.long	74                      # 0x4a
	.long	16                      # 0x10
	.long	66                      # 0x42
	.long	4294967273              # 0xffffffe9
	.long	124                     # 0x7c
	.long	17                      # 0x11
	.long	37                      # 0x25
	.long	44                      # 0x2c
	.long	4294967278              # 0xffffffee
	.long	50                      # 0x32
	.long	4294967262              # 0xffffffde
	.long	4294967274              # 0xffffffea
	.long	127                     # 0x7f
	.size	INIT_MAP_P, 2880

	.type	INIT_LAST_I,@object     # @INIT_LAST_I
	.p2align	4
INIT_LAST_I:
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	15                      # 0xf
	.long	9                       # 0x9
	.long	8                       # 0x8
	.long	25                      # 0x19
	.long	13                      # 0xd
	.long	18                      # 0x12
	.long	15                      # 0xf
	.long	9                       # 0x9
	.long	13                      # 0xd
	.long	19                      # 0x13
	.long	10                      # 0xa
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	18                      # 0x12
	.long	6                       # 0x6
	.long	29                      # 0x1d
	.long	20                      # 0x14
	.long	33                      # 0x21
	.long	15                      # 0xf
	.long	30                      # 0x1e
	.long	4                       # 0x4
	.long	45                      # 0x2d
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	7                       # 0x7
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	38                      # 0x26
	.long	11                      # 0xb
	.long	45                      # 0x2d
	.long	15                      # 0xf
	.long	39                      # 0x27
	.long	11                      # 0xb
	.long	42                      # 0x2a
	.long	13                      # 0xd
	.long	44                      # 0x2c
	.long	16                      # 0x10
	.long	45                      # 0x2d
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	49                      # 0x31
	.long	30                      # 0x1e
	.long	34                      # 0x22
	.long	18                      # 0x12
	.long	42                      # 0x2a
	.long	10                      # 0xa
	.long	55                      # 0x37
	.long	17                      # 0x11
	.long	51                      # 0x33
	.long	17                      # 0x11
	.long	46                      # 0x2e
	.long	0                       # 0x0
	.long	89                      # 0x59
	.long	23                      # 0x17
	.long	4294967283              # 0xfffffff3
	.long	26                      # 0x1a
	.long	4294967283              # 0xfffffff3
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	49                      # 0x31
	.long	4294967282              # 0xfffffff2
	.long	44                      # 0x2c
	.long	3                       # 0x3
	.long	45                      # 0x2d
	.long	6                       # 0x6
	.long	44                      # 0x2c
	.long	34                      # 0x22
	.long	33                      # 0x21
	.long	54                      # 0x36
	.long	19                      # 0x13
	.long	82                      # 0x52
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	26                      # 0x1a
	.long	4294967277              # 0xffffffed
	.long	22                      # 0x16
	.long	4294967279              # 0xffffffef
	.long	26                      # 0x1a
	.long	4294967279              # 0xffffffef
	.long	30                      # 0x1e
	.long	4294967271              # 0xffffffe7
	.long	28                      # 0x1c
	.long	4294967276              # 0xffffffec
	.long	33                      # 0x21
	.long	4294967273              # 0xffffffe9
	.long	37                      # 0x25
	.long	4294967269              # 0xffffffe5
	.long	33                      # 0x21
	.long	4294967273              # 0xffffffe9
	.long	40                      # 0x28
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967279              # 0xffffffef
	.long	33                      # 0x21
	.long	4294967285              # 0xfffffff5
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	41                      # 0x29
	.long	4294967290              # 0xfffffffa
	.long	38                      # 0x26
	.long	1                       # 0x1
	.long	41                      # 0x29
	.long	17                      # 0x11
	.long	30                      # 0x1e
	.long	4294967290              # 0xfffffffa
	.long	27                      # 0x1b
	.long	3                       # 0x3
	.long	26                      # 0x1a
	.long	22                      # 0x16
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	37                      # 0x25
	.long	4294967280              # 0xfffffff0
	.long	35                      # 0x23
	.long	4294967292              # 0xfffffffc
	.long	38                      # 0x26
	.long	4294967288              # 0xfffffff8
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	37                      # 0x25
	.long	3                       # 0x3
	.long	38                      # 0x26
	.long	5                       # 0x5
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	35                      # 0x23
	.long	16                      # 0x10
	.long	39                      # 0x27
	.long	22                      # 0x16
	.long	14                      # 0xe
	.long	48                      # 0x30
	.long	27                      # 0x1b
	.long	37                      # 0x25
	.long	21                      # 0x15
	.long	60                      # 0x3c
	.long	12                      # 0xc
	.long	68                      # 0x44
	.long	2                       # 0x2
	.long	97                      # 0x61
	.size	INIT_LAST_I, 960

	.type	INIT_LAST_P,@object     # @INIT_LAST_P
	.p2align	4
INIT_LAST_P:
	.long	11                      # 0xb
	.long	28                      # 0x1c
	.long	2                       # 0x2
	.long	40                      # 0x28
	.long	3                       # 0x3
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	49                      # 0x31
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	2                       # 0x2
	.long	44                      # 0x2c
	.long	2                       # 0x2
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	47                      # 0x2f
	.long	4                       # 0x4
	.long	39                      # 0x27
	.long	2                       # 0x2
	.long	62                      # 0x3e
	.long	6                       # 0x6
	.long	46                      # 0x2e
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	54                      # 0x36
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	4                       # 0x4
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	51                      # 0x33
	.long	6                       # 0x6
	.long	57                      # 0x39
	.long	7                       # 0x7
	.long	53                      # 0x35
	.long	6                       # 0x6
	.long	52                      # 0x34
	.long	6                       # 0x6
	.long	55                      # 0x37
	.long	11                      # 0xb
	.long	45                      # 0x2d
	.long	14                      # 0xe
	.long	36                      # 0x24
	.long	8                       # 0x8
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	82                      # 0x52
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	15                      # 0xf
	.long	46                      # 0x2e
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	4294967295              # 0xffffffff
	.long	84                      # 0x54
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	26                      # 0x1a
	.long	4294967287              # 0xfffffff7
	.long	33                      # 0x21
	.long	4294967287              # 0xfffffff7
	.long	39                      # 0x27
	.long	4294967289              # 0xfffffff9
	.long	41                      # 0x29
	.long	4294967294              # 0xfffffffe
	.long	45                      # 0x2d
	.long	3                       # 0x3
	.long	49                      # 0x31
	.long	9                       # 0x9
	.long	45                      # 0x2d
	.long	27                      # 0x1b
	.long	36                      # 0x24
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	25                      # 0x19
	.long	7                       # 0x7
	.long	30                      # 0x1e
	.long	4294967289              # 0xfffffff9
	.long	28                      # 0x1c
	.long	3                       # 0x3
	.long	28                      # 0x1c
	.long	4                       # 0x4
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	34                      # 0x22
	.long	4294967295              # 0xffffffff
	.long	30                      # 0x1e
	.long	6                       # 0x6
	.long	30                      # 0x1e
	.long	6                       # 0x6
	.long	32                      # 0x20
	.long	9                       # 0x9
	.long	31                      # 0x1f
	.long	19                      # 0x13
	.long	26                      # 0x1a
	.long	27                      # 0x1b
	.long	26                      # 0x1a
	.long	30                      # 0x1e
	.long	37                      # 0x25
	.long	20                      # 0x14
	.long	28                      # 0x1c
	.long	34                      # 0x22
	.long	17                      # 0x11
	.long	70                      # 0x46
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	5                       # 0x5
	.long	59                      # 0x3b
	.long	9                       # 0x9
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	16                      # 0x10
	.long	30                      # 0x1e
	.long	18                      # 0x12
	.long	32                      # 0x20
	.long	18                      # 0x12
	.long	35                      # 0x23
	.long	22                      # 0x16
	.long	29                      # 0x1d
	.long	24                      # 0x18
	.long	31                      # 0x1f
	.long	23                      # 0x17
	.long	38                      # 0x26
	.long	18                      # 0x12
	.long	43                      # 0x2b
	.long	20                      # 0x14
	.long	41                      # 0x29
	.long	11                      # 0xb
	.long	63                      # 0x3f
	.long	9                       # 0x9
	.long	59                      # 0x3b
	.long	9                       # 0x9
	.long	64                      # 0x40
	.long	4294967295              # 0xffffffff
	.long	94                      # 0x5e
	.long	4294967294              # 0xfffffffe
	.long	89                      # 0x59
	.long	4294967287              # 0xfffffff7
	.long	108                     # 0x6c
	.long	4                       # 0x4
	.long	45                      # 0x2d
	.long	10                      # 0xa
	.long	28                      # 0x1c
	.long	10                      # 0xa
	.long	31                      # 0x1f
	.long	33                      # 0x21
	.long	4294967285              # 0xfffffff5
	.long	52                      # 0x34
	.long	4294967253              # 0xffffffd5
	.long	18                      # 0x12
	.long	15                      # 0xf
	.long	28                      # 0x1c
	.long	0                       # 0x0
	.long	35                      # 0x23
	.long	4294967274              # 0xffffffea
	.long	38                      # 0x26
	.long	4294967271              # 0xffffffe7
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	39                      # 0x27
	.long	4294967278              # 0xffffffee
	.long	32                      # 0x20
	.long	4294967284              # 0xfffffff4
	.long	102                     # 0x66
	.long	4294967202              # 0xffffffa2
	.zero	8
	.long	56                      # 0x38
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	33                      # 0x21
	.long	4294967292              # 0xfffffffc
	.long	29                      # 0x1d
	.long	10                      # 0xa
	.long	37                      # 0x25
	.long	4294967291              # 0xfffffffb
	.long	51                      # 0x33
	.long	4294967267              # 0xffffffe3
	.long	39                      # 0x27
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967262              # 0xffffffde
	.long	69                      # 0x45
	.long	4294967238              # 0xffffffc6
	.long	67                      # 0x43
	.long	4294967233              # 0xffffffc1
	.long	44                      # 0x2c
	.long	4294967291              # 0xfffffffb
	.long	32                      # 0x20
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	4294967267              # 0xffffffe3
	.long	32                      # 0x20
	.long	1                       # 0x1
	.zero	8
	.long	27                      # 0x1b
	.long	36                      # 0x24
	.long	17                      # 0x11
	.long	4294967286              # 0xfffffff6
	.long	32                      # 0x20
	.long	4294967283              # 0xfffffff3
	.long	42                      # 0x2a
	.long	4294967287              # 0xfffffff7
	.long	49                      # 0x31
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	10                      # 0xa
	.long	66                      # 0x42
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	34                      # 0x22
	.long	4294967266              # 0xffffffe2
	.long	36                      # 0x24
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967269              # 0xffffffe5
	.long	34                      # 0x22
	.long	4294967278              # 0xffffffee
	.long	35                      # 0x23
	.long	4294967280              # 0xfffffff0
	.long	34                      # 0x22
	.long	4294967282              # 0xfffffff2
	.long	32                      # 0x20
	.long	4294967288              # 0xfffffff8
	.long	37                      # 0x25
	.long	4294967290              # 0xfffffffa
	.long	35                      # 0x23
	.long	0                       # 0x0
	.long	30                      # 0x1e
	.long	10                      # 0xa
	.long	28                      # 0x1c
	.long	18                      # 0x12
	.long	26                      # 0x1a
	.long	25                      # 0x19
	.long	29                      # 0x1d
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	75                      # 0x4b
	.long	2                       # 0x2
	.long	72                      # 0x48
	.long	8                       # 0x8
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	14                      # 0xe
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	17                      # 0x11
	.long	35                      # 0x23
	.long	21                      # 0x15
	.long	30                      # 0x1e
	.long	17                      # 0x11
	.long	45                      # 0x2d
	.long	20                      # 0x14
	.long	42                      # 0x2a
	.long	18                      # 0x12
	.long	45                      # 0x2d
	.long	27                      # 0x1b
	.long	26                      # 0x1a
	.long	16                      # 0x10
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	66                      # 0x42
	.long	16                      # 0x10
	.long	56                      # 0x38
	.long	11                      # 0xb
	.long	73                      # 0x49
	.long	10                      # 0xa
	.long	67                      # 0x43
	.long	4294967286              # 0xfffffff6
	.long	116                     # 0x74
	.long	4                       # 0x4
	.long	39                      # 0x27
	.long	0                       # 0x0
	.long	42                      # 0x2a
	.long	7                       # 0x7
	.long	34                      # 0x22
	.long	11                      # 0xb
	.long	29                      # 0x1d
	.long	8                       # 0x8
	.long	31                      # 0x1f
	.long	6                       # 0x6
	.long	37                      # 0x25
	.long	7                       # 0x7
	.long	42                      # 0x2a
	.long	3                       # 0x3
	.long	40                      # 0x28
	.long	8                       # 0x8
	.long	33                      # 0x21
	.long	13                      # 0xd
	.long	43                      # 0x2b
	.long	13                      # 0xd
	.long	36                      # 0x24
	.long	4                       # 0x4
	.long	47                      # 0x2f
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	6                       # 0x6
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	8                       # 0x8
	.long	44                      # 0x2c
	.long	11                      # 0xb
	.long	44                      # 0x2c
	.long	14                      # 0xe
	.long	42                      # 0x2a
	.long	7                       # 0x7
	.long	48                      # 0x30
	.long	4                       # 0x4
	.long	56                      # 0x38
	.long	4                       # 0x4
	.long	52                      # 0x34
	.long	13                      # 0xd
	.long	37                      # 0x25
	.long	9                       # 0x9
	.long	49                      # 0x31
	.long	19                      # 0x13
	.long	58                      # 0x3a
	.long	10                      # 0xa
	.long	48                      # 0x30
	.long	12                      # 0xc
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	20                      # 0x14
	.long	33                      # 0x21
	.long	8                       # 0x8
	.long	63                      # 0x3f
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	30                      # 0x1e
	.long	4294967286              # 0xfffffff6
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	33                      # 0x21
	.long	4294967295              # 0xffffffff
	.long	33                      # 0x21
	.long	7                       # 0x7
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	37                      # 0x25
	.long	23                      # 0x17
	.long	31                      # 0x1f
	.long	38                      # 0x26
	.long	20                      # 0x14
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	35                      # 0x23
	.long	4294967278              # 0xffffffee
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	28                      # 0x1c
	.long	4294967293              # 0xfffffffd
	.long	24                      # 0x18
	.long	10                      # 0xa
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	34                      # 0x22
	.long	4294967282              # 0xfffffff2
	.long	52                      # 0x34
	.long	4294967252              # 0xffffffd4
	.long	39                      # 0x27
	.long	4294967272              # 0xffffffe8
	.long	19                      # 0x13
	.long	17                      # 0x11
	.long	31                      # 0x1f
	.long	25                      # 0x19
	.long	36                      # 0x24
	.long	29                      # 0x1d
	.long	24                      # 0x18
	.long	33                      # 0x21
	.long	34                      # 0x22
	.long	15                      # 0xf
	.long	30                      # 0x1e
	.long	20                      # 0x14
	.long	22                      # 0x16
	.long	73                      # 0x49
	.long	20                      # 0x14
	.long	34                      # 0x22
	.long	19                      # 0x13
	.long	31                      # 0x1f
	.long	27                      # 0x1b
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	19                      # 0x13
	.long	16                      # 0x10
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	21                      # 0x15
	.long	28                      # 0x1c
	.long	25                      # 0x19
	.long	21                      # 0x15
	.long	30                      # 0x1e
	.long	20                      # 0x14
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	27                      # 0x1b
	.long	16                      # 0x10
	.long	24                      # 0x18
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	93                      # 0x5d
	.long	14                      # 0xe
	.long	56                      # 0x38
	.long	15                      # 0xf
	.long	57                      # 0x39
	.long	26                      # 0x1a
	.long	38                      # 0x26
	.long	4294967272              # 0xffffffe8
	.long	127                     # 0x7f
	.size	INIT_LAST_P, 2880

	.type	INIT_ONE_I,@object      # @INIT_ONE_I
	.p2align	4
INIT_ONE_I:
	.long	4294967293              # 0xfffffffd
	.long	71                      # 0x47
	.long	4294967290              # 0xfffffffa
	.long	42                      # 0x2a
	.long	4294967291              # 0xfffffffb
	.long	50                      # 0x32
	.long	4294967293              # 0xfffffffd
	.long	54                      # 0x36
	.long	4294967294              # 0xfffffffe
	.long	62                      # 0x3e
	.long	4294967291              # 0xfffffffb
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	27                      # 0x1b
	.long	4294967293              # 0xfffffffd
	.long	39                      # 0x27
	.long	4294967294              # 0xfffffffe
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	4294967293              # 0xfffffffd
	.long	75                      # 0x4b
	.long	4294967295              # 0xffffffff
	.long	23                      # 0x17
	.long	1                       # 0x1
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	92                      # 0x5c
	.long	4294967281              # 0xfffffff1
	.long	55                      # 0x37
	.long	4294967286              # 0xfffffff6
	.long	60                      # 0x3c
	.long	4294967290              # 0xfffffffa
	.long	62                      # 0x3e
	.long	4294967292              # 0xfffffffc
	.long	65                      # 0x41
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967276              # 0xffffffec
	.long	84                      # 0x54
	.long	4294967285              # 0xfffffff5
	.long	79                      # 0x4f
	.long	4294967290              # 0xfffffffa
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967288              # 0xfffffff8
	.long	78                      # 0x4e
	.long	4294967291              # 0xfffffffb
	.long	33                      # 0x21
	.long	4294967292              # 0xfffffffc
	.long	48                      # 0x30
	.long	4294967294              # 0xfffffffe
	.long	53                      # 0x35
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ONE_I, 320

	.type	INIT_ONE_P,@object      # @INIT_ONE_P
	.p2align	4
INIT_ONE_P:
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967294              # 0xfffffffe
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	52                      # 0x34
	.long	4294967293              # 0xfffffffd
	.long	64                      # 0x40
	.long	4294967287              # 0xfffffff7
	.long	77                      # 0x4d
	.long	3                       # 0x3
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	55                      # 0x37
	.long	4294967290              # 0xfffffffa
	.long	66                      # 0x42
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967289              # 0xfffffff9
	.long	42                      # 0x2a
	.long	4294967288              # 0xfffffff8
	.long	45                      # 0x2d
	.long	4294967291              # 0xfffffffb
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	29                      # 0x1d
	.long	4294967295              # 0xffffffff
	.long	36                      # 0x24
	.long	1                       # 0x1
	.long	38                      # 0x26
	.long	2                       # 0x2
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	29                      # 0x1d
	.long	5                       # 0x5
	.long	31                      # 0x1f
	.long	7                       # 0x7
	.long	42                      # 0x2a
	.long	1                       # 0x1
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	8                       # 0x8
	.long	5                       # 0x5
	.long	10                      # 0xa
	.long	14                      # 0xe
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	13                      # 0xd
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967273              # 0xffffffe9
	.long	112                     # 0x70
	.long	4294967281              # 0xfffffff1
	.long	71                      # 0x47
	.long	4294967289              # 0xfffffff9
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	53                      # 0x35
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967275              # 0xffffffeb
	.long	101                     # 0x65
	.long	4294967293              # 0xfffffffd
	.long	39                      # 0x27
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	4294967289              # 0xfffffff9
	.long	61                      # 0x3d
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	4294967291              # 0xfffffffb
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	4294967295              # 0xffffffff
	.long	36                      # 0x24
	.long	4294967294              # 0xfffffffe
	.long	42                      # 0x2a
	.long	4294967294              # 0xfffffffe
	.long	52                      # 0x34
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	76                      # 0x4c
	.long	4294967286              # 0xfffffff6
	.long	44                      # 0x2c
	.long	4294967286              # 0xfffffff6
	.long	52                      # 0x34
	.long	4294967286              # 0xfffffff6
	.long	57                      # 0x39
	.long	4294967287              # 0xfffffff7
	.long	58                      # 0x3a
	.long	2                       # 0x2
	.long	66                      # 0x42
	.long	4294967287              # 0xfffffff7
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	31                      # 0x1f
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	3                       # 0x3
	.long	52                      # 0x34
	.long	7                       # 0x7
	.long	4                       # 0x4
	.long	10                      # 0xa
	.long	8                       # 0x8
	.long	17                      # 0x11
	.long	8                       # 0x8
	.long	16                      # 0x10
	.long	19                      # 0x13
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967272              # 0xffffffe8
	.long	115                     # 0x73
	.long	4294967274              # 0xffffffea
	.long	82                      # 0x52
	.long	4294967287              # 0xfffffff7
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	4294967275              # 0xffffffeb
	.long	100                     # 0x64
	.long	4294967282              # 0xfffffff2
	.long	57                      # 0x39
	.long	4294967284              # 0xfffffff4
	.long	67                      # 0x43
	.long	4294967285              # 0xfffffff5
	.long	71                      # 0x47
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967289              # 0xfffffff9
	.long	37                      # 0x25
	.long	4294967288              # 0xfffffff8
	.long	44                      # 0x2c
	.long	4294967285              # 0xfffffff5
	.long	49                      # 0x31
	.long	4294967286              # 0xfffffff6
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	82                      # 0x52
	.long	4294967288              # 0xfffffff8
	.long	48                      # 0x30
	.long	4294967288              # 0xfffffff8
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967289              # 0xfffffff9
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967274              # 0xffffffea
	.long	69                      # 0x45
	.long	4294967280              # 0xfffffff0
	.long	75                      # 0x4b
	.long	4294967294              # 0xfffffffe
	.long	58                      # 0x3a
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	4294967283              # 0xfffffff3
	.long	81                      # 0x51
	.long	4294967290              # 0xfffffffa
	.long	38                      # 0x26
	.long	4294967283              # 0xfffffff3
	.long	62                      # 0x3e
	.long	4294967290              # 0xfffffffa
	.long	58                      # 0x3a
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ONE_P, 960

	.type	INIT_ABS_I,@object      # @INIT_ABS_I
	.p2align	4
INIT_ABS_I:
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	72                      # 0x48
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	91                      # 0x5b
	.long	4294967280              # 0xfffffff0
	.long	64                      # 0x40
	.long	4294967288              # 0xfffffff8
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	78                      # 0x4e
	.long	4294967290              # 0xfffffffa
	.long	77                      # 0x4d
	.long	4294967286              # 0xfffffff6
	.long	86                      # 0x56
	.long	4294967294              # 0xfffffffe
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	1                       # 0x1
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967287              # 0xfffffff7
	.long	92                      # 0x5c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	73                      # 0x49
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	4294967289              # 0xfffffff9
	.long	80                      # 0x50
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	4294967279              # 0xffffffef
	.long	110                     # 0x6e
	.long	4294967283              # 0xfffffff3
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	96                      # 0x60
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967277              # 0xffffffed
	.long	117                     # 0x75
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	71                      # 0x47
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	4294967284              # 0xfffffff4
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	4294967282              # 0xfffffff2
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ABS_I, 320

	.type	INIT_ABS_P,@object      # @INIT_ABS_P
	.p2align	4
INIT_ABS_P:
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	4294967292              # 0xfffffffc
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	82                      # 0x52
	.long	4294967279              # 0xffffffef
	.long	102                     # 0x66
	.long	4294967290              # 0xfffffffa
	.long	59                      # 0x3b
	.long	4294967289              # 0xfffffff9
	.long	71                      # 0x47
	.long	4294967284              # 0xfffffff4
	.long	83                      # 0x53
	.long	4294967285              # 0xfffffff5
	.long	87                      # 0x57
	.long	4294967266              # 0xffffffe2
	.long	119                     # 0x77
	.long	4294967284              # 0xfffffff4
	.long	56                      # 0x38
	.long	4294967290              # 0xfffffffa
	.long	60                      # 0x3c
	.long	4294967291              # 0xfffffffb
	.long	62                      # 0x3e
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	90                      # 0x5a
	.long	4294967294              # 0xfffffffe
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	72                      # 0x48
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	40                      # 0x28
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	79                      # 0x4f
	.long	4294967288              # 0xfffffff8
	.long	85                      # 0x55
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	77                      # 0x4d
	.long	4294967287              # 0xfffffff7
	.long	80                      # 0x50
	.long	4294967287              # 0xfffffff7
	.long	84                      # 0x54
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	4294967262              # 0xffffffde
	.long	127                     # 0x7f
	.long	4294967281              # 0xfffffff1
	.long	77                      # 0x4d
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967271              # 0xffffffe7
	.long	107                     # 0x6b
	.long	4294967271              # 0xffffffe7
	.long	111                     # 0x6f
	.long	4294967268              # 0xffffffe4
	.long	122                     # 0x7a
	.long	4294967287              # 0xfffffff7
	.long	57                      # 0x39
	.long	4294967290              # 0xfffffffa
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	65                      # 0x41
	.long	4294967292              # 0xfffffffc
	.long	67                      # 0x43
	.long	4294967289              # 0xfffffff9
	.long	82                      # 0x52
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967280              # 0xfffffff0
	.long	72                      # 0x48
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	4294967292              # 0xfffffffc
	.long	69                      # 0x45
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	86                      # 0x56
	.long	4294967294              # 0xfffffffe
	.long	55                      # 0x37
	.long	4294967294              # 0xfffffffe
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	73                      # 0x49
	.long	4294967288              # 0xfffffff8
	.long	89                      # 0x59
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	37                      # 0x25
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967291              # 0xfffffffb
	.long	73                      # 0x49
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	89                      # 0x59
	.long	4294967283              # 0xfffffff3
	.long	94                      # 0x5e
	.long	4294967285              # 0xfffffff5
	.long	92                      # 0x5c
	.long	4294967267              # 0xffffffe3
	.long	127                     # 0x7f
	.long	4294967275              # 0xffffffeb
	.long	85                      # 0x55
	.long	4294967280              # 0xfffffff0
	.long	88                      # 0x58
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967281              # 0xfffffff1
	.long	98                      # 0x62
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.long	4294967284              # 0xfffffff4
	.long	59                      # 0x3b
	.long	4294967288              # 0xfffffff8
	.long	63                      # 0x3f
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967290              # 0xfffffffa
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	75                      # 0x4b
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967284              # 0xfffffff4
	.long	92                      # 0x5c
	.long	4294967278              # 0xffffffee
	.long	108                     # 0x6c
	.long	4294967283              # 0xfffffff3
	.long	78                      # 0x4e
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967292              # 0xfffffffc
	.long	81                      # 0x51
	.long	4294967283              # 0xfffffff3
	.long	99                      # 0x63
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967280              # 0xfffffff0
	.long	73                      # 0x49
	.long	4294967286              # 0xfffffff6
	.long	76                      # 0x4c
	.long	4294967283              # 0xfffffff3
	.long	86                      # 0x56
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ABS_P, 960

	.type	INIT_FLD_MAP_I,@object  # @INIT_FLD_MAP_I
	.p2align	4
INIT_FLD_MAP_I:
	.long	4294967290              # 0xfffffffa
	.long	93                      # 0x5d
	.long	4294967290              # 0xfffffffa
	.long	84                      # 0x54
	.long	4294967288              # 0xfffffff8
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	4294967294              # 0xfffffffe
	.long	60                      # 0x3c
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	4294967292              # 0xfffffffc
	.long	58                      # 0x3a
	.long	4294967287              # 0xfffffff7
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	71                      # 0x47
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	4294967289              # 0xfffffff9
	.long	62                      # 0x3e
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	14                      # 0xe
	.long	40                      # 0x28
	.long	16                      # 0x10
	.long	27                      # 0x1b
	.long	12                      # 0xc
	.long	29                      # 0x1d
	.long	1                       # 0x1
	.long	44                      # 0x2c
	.long	20                      # 0x14
	.long	36                      # 0x24
	.long	18                      # 0x12
	.long	32                      # 0x20
	.long	5                       # 0x5
	.long	42                      # 0x2a
	.long	1                       # 0x1
	.long	48                      # 0x30
	.long	10                      # 0xa
	.long	62                      # 0x3e
	.long	17                      # 0x11
	.long	46                      # 0x2e
	.long	9                       # 0x9
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	106                     # 0x6a
	.long	4294967283              # 0xfffffff3
	.long	97                      # 0x61
	.long	4294967281              # 0xfffffff1
	.long	90                      # 0x5a
	.long	4294967284              # 0xfffffff4
	.long	90                      # 0x5a
	.long	4294967278              # 0xffffffee
	.long	88                      # 0x58
	.long	4294967286              # 0xfffffff6
	.long	73                      # 0x49
	.long	4294967287              # 0xfffffff7
	.long	79                      # 0x4f
	.long	4294967282              # 0xfffffff2
	.long	86                      # 0x56
	.long	4294967286              # 0xfffffff6
	.long	73                      # 0x49
	.long	4294967286              # 0xfffffff6
	.long	70                      # 0x46
	.long	4294967286              # 0xfffffff6
	.long	69                      # 0x45
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967287              # 0xfffffff7
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	58                      # 0x3a
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	104                     # 0x68
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967280              # 0xfffffff0
	.long	96                      # 0x60
	.long	4294967289              # 0xfffffff9
	.long	88                      # 0x58
	.long	4294967288              # 0xfffffff8
	.long	85                      # 0x55
	.long	4294967289              # 0xfffffff9
	.long	85                      # 0x55
	.long	4294967287              # 0xfffffff7
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	88                      # 0x58
	.long	4                       # 0x4
	.long	66                      # 0x42
	.long	4294967293              # 0xfffffffd
	.long	77                      # 0x4d
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	10                      # 0xa
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	76                      # 0x4c
	.long	4294967295              # 0xffffffff
	.long	83                      # 0x53
	.long	4294967289              # 0xfffffff9
	.long	99                      # 0x63
	.long	4294967282              # 0xfffffff2
	.long	95                      # 0x5f
	.long	2                       # 0x2
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	76                      # 0x4c
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	70                      # 0x46
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	1                       # 0x1
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967282              # 0xfffffff2
	.long	73                      # 0x49
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	4                       # 0x4
	.long	62                      # 0x3e
	.long	4294967295              # 0xffffffff
	.long	68                      # 0x44
	.long	4294967283              # 0xfffffff3
	.long	75                      # 0x4b
	.long	11                      # 0xb
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	70                      # 0x46
	.size	INIT_FLD_MAP_I, 960

	.type	INIT_FLD_MAP_P,@object  # @INIT_FLD_MAP_P
	.p2align	4
INIT_FLD_MAP_P:
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	4294967280              # 0xfffffff0
	.long	106                     # 0x6a
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	4294967275              # 0xffffffeb
	.long	114                     # 0x72
	.long	4294967278              # 0xffffffee
	.long	110                     # 0x6e
	.long	4294967282              # 0xfffffff2
	.long	98                      # 0x62
	.long	4294967274              # 0xffffffea
	.long	110                     # 0x6e
	.long	4294967275              # 0xffffffeb
	.long	106                     # 0x6a
	.long	4294967278              # 0xffffffee
	.long	103                     # 0x67
	.long	4294967275              # 0xffffffeb
	.long	107                     # 0x6b
	.long	4294967273              # 0xffffffe9
	.long	108                     # 0x6c
	.long	4294967270              # 0xffffffe6
	.long	112                     # 0x70
	.long	4294967286              # 0xfffffff6
	.long	96                      # 0x60
	.long	4294967284              # 0xfffffff4
	.long	95                      # 0x5f
	.long	4294967291              # 0xfffffffb
	.long	91                      # 0x5b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967287              # 0xfffffff7
	.long	93                      # 0x5d
	.long	4294967274              # 0xffffffea
	.long	94                      # 0x5e
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	9                       # 0x9
	.long	67                      # 0x43
	.long	4294967292              # 0xfffffffc
	.long	80                      # 0x50
	.long	4294967286              # 0xfffffff6
	.long	85                      # 0x55
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	7                       # 0x7
	.long	60                      # 0x3c
	.long	9                       # 0x9
	.long	58                      # 0x3a
	.long	5                       # 0x5
	.long	61                      # 0x3d
	.long	12                      # 0xc
	.long	50                      # 0x32
	.long	15                      # 0xf
	.long	50                      # 0x32
	.long	18                      # 0x12
	.long	49                      # 0x31
	.long	17                      # 0x11
	.long	54                      # 0x36
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	4294967279              # 0xffffffef
	.long	80                      # 0x50
	.long	4294967278              # 0xffffffee
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	83                      # 0x53
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967282              # 0xfffffff2
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	41                      # 0x29
	.long	7                       # 0x7
	.long	46                      # 0x2e
	.long	4294967295              # 0xffffffff
	.long	51                      # 0x33
	.long	7                       # 0x7
	.long	49                      # 0x31
	.long	8                       # 0x8
	.long	52                      # 0x34
	.long	9                       # 0x9
	.long	41                      # 0x29
	.long	6                       # 0x6
	.long	47                      # 0x2f
	.long	2                       # 0x2
	.long	55                      # 0x37
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	6                       # 0x6
	.long	50                      # 0x32
	.long	5                       # 0x5
	.long	53                      # 0x35
	.long	13                      # 0xd
	.long	49                      # 0x31
	.long	4                       # 0x4
	.long	63                      # 0x3f
	.long	6                       # 0x6
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	69                      # 0x45
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	6                       # 0x6
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	9                       # 0x9
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	43                      # 0x2b
	.long	3                       # 0x3
	.long	53                      # 0x35
	.long	14                      # 0xe
	.long	34                      # 0x22
	.long	10                      # 0xa
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	52                      # 0x34
	.long	13                      # 0xd
	.long	40                      # 0x28
	.long	17                      # 0x11
	.long	32                      # 0x20
	.long	7                       # 0x7
	.long	44                      # 0x2c
	.long	7                       # 0x7
	.long	38                      # 0x26
	.long	13                      # 0xd
	.long	50                      # 0x32
	.long	10                      # 0xa
	.long	57                      # 0x39
	.long	26                      # 0x1a
	.long	43                      # 0x2b
	.long	4294967275              # 0xffffffeb
	.long	126                     # 0x7e
	.long	4294967273              # 0xffffffe9
	.long	124                     # 0x7c
	.long	4294967276              # 0xffffffec
	.long	110                     # 0x6e
	.long	4294967270              # 0xffffffe6
	.long	126                     # 0x7e
	.long	4294967271              # 0xffffffe7
	.long	124                     # 0x7c
	.long	4294967279              # 0xffffffef
	.long	105                     # 0x69
	.long	4294967269              # 0xffffffe5
	.long	121                     # 0x79
	.long	4294967269              # 0xffffffe5
	.long	117                     # 0x75
	.long	4294967279              # 0xffffffef
	.long	102                     # 0x66
	.long	4294967270              # 0xffffffe6
	.long	117                     # 0x75
	.long	4294967269              # 0xffffffe5
	.long	116                     # 0x74
	.long	4294967263              # 0xffffffdf
	.long	122                     # 0x7a
	.long	4294967286              # 0xfffffff6
	.long	95                      # 0x5f
	.long	4294967282              # 0xfffffff2
	.long	100                     # 0x64
	.long	4294967288              # 0xfffffff8
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967279              # 0xffffffef
	.long	111                     # 0x6f
	.long	4294967268              # 0xffffffe4
	.long	114                     # 0x72
	.long	4294967290              # 0xfffffffa
	.long	89                      # 0x59
	.long	4294967294              # 0xfffffffe
	.long	80                      # 0x50
	.long	4294967292              # 0xfffffffc
	.long	82                      # 0x52
	.long	4294967287              # 0xfffffff7
	.long	85                      # 0x55
	.long	4294967288              # 0xfffffff8
	.long	81                      # 0x51
	.long	4294967295              # 0xffffffff
	.long	72                      # 0x48
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	9                       # 0x9
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	1                       # 0x1
	.long	69                      # 0x45
	.long	7                       # 0x7
	.long	69                      # 0x45
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967290              # 0xfffffffa
	.long	78                      # 0x4e
	.long	4294967284              # 0xfffffff4
	.long	72                      # 0x48
	.long	4294967282              # 0xfffffff2
	.long	68                      # 0x44
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967291              # 0xfffffffb
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	57                      # 0x39
	.long	4294967292              # 0xfffffffc
	.long	61                      # 0x3d
	.long	4294967287              # 0xfffffff7
	.long	60                      # 0x3c
	.long	1                       # 0x1
	.long	54                      # 0x36
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	4294967290              # 0xfffffffa
	.long	67                      # 0x43
	.long	4294967280              # 0xfffffff0
	.long	77                      # 0x4d
	.long	4294967294              # 0xfffffffe
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	61                      # 0x3d
	.long	4294967290              # 0xfffffffa
	.long	67                      # 0x43
	.long	4294967293              # 0xfffffffd
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	4294967293              # 0xfffffffd
	.long	65                      # 0x41
	.long	4294967293              # 0xfffffffd
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	9                       # 0x9
	.long	51                      # 0x33
	.long	4294967295              # 0xffffffff
	.long	66                      # 0x42
	.long	4294967294              # 0xfffffffe
	.long	71                      # 0x47
	.long	4294967294              # 0xfffffffe
	.long	75                      # 0x4b
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	14                      # 0xe
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	16                      # 0x10
	.long	37                      # 0x25
	.long	0                       # 0x0
	.long	47                      # 0x2f
	.long	18                      # 0x12
	.long	35                      # 0x23
	.long	11                      # 0xb
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	41                      # 0x29
	.long	2                       # 0x2
	.long	48                      # 0x30
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	3                       # 0x3
	.long	50                      # 0x32
	.long	19                      # 0x13
	.long	40                      # 0x28
	.long	3                       # 0x3
	.long	66                      # 0x42
	.long	18                      # 0x12
	.long	50                      # 0x32
	.long	4294967274              # 0xffffffea
	.long	127                     # 0x7f
	.long	4294967271              # 0xffffffe7
	.long	127                     # 0x7f
	.long	4294967271              # 0xffffffe7
	.long	120                     # 0x78
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967277              # 0xffffffed
	.long	114                     # 0x72
	.long	4294967273              # 0xffffffe9
	.long	117                     # 0x75
	.long	4294967271              # 0xffffffe7
	.long	118                     # 0x76
	.long	4294967270              # 0xffffffe6
	.long	117                     # 0x75
	.long	4294967272              # 0xffffffe8
	.long	113                     # 0x71
	.long	4294967268              # 0xffffffe4
	.long	118                     # 0x76
	.long	4294967265              # 0xffffffe1
	.long	120                     # 0x78
	.long	4294967259              # 0xffffffdb
	.long	124                     # 0x7c
	.long	4294967286              # 0xfffffff6
	.long	94                      # 0x5e
	.long	4294967281              # 0xfffffff1
	.long	102                     # 0x66
	.long	4294967286              # 0xfffffff6
	.long	99                      # 0x63
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	4294967246              # 0xffffffce
	.long	127                     # 0x7f
	.long	4294967291              # 0xfffffffb
	.long	92                      # 0x5c
	.long	17                      # 0x11
	.long	57                      # 0x39
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	94                      # 0x5e
	.long	4294967284              # 0xfffffff4
	.long	91                      # 0x5b
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	71                      # 0x47
	.long	4294967295              # 0xffffffff
	.long	73                      # 0x49
	.long	4                       # 0x4
	.long	64                      # 0x40
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	15                      # 0xf
	.long	57                      # 0x39
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	4294967286              # 0xfffffff6
	.long	72                      # 0x48
	.long	4294967278              # 0xffffffee
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	71                      # 0x47
	.long	4294967285              # 0xfffffff5
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	70                      # 0x46
	.long	4294967279              # 0xffffffef
	.long	75                      # 0x4b
	.long	4294967282              # 0xfffffff2
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	53                      # 0x35
	.long	4294967282              # 0xfffffff2
	.long	59                      # 0x3b
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967285              # 0xfffffff5
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	67                      # 0x43
	.long	1                       # 0x1
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	77                      # 0x4d
	.long	2                       # 0x2
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967291              # 0xfffffffb
	.long	78                      # 0x4e
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	14                      # 0xe
	.long	54                      # 0x36
	.long	15                      # 0xf
	.long	44                      # 0x2c
	.long	5                       # 0x5
	.long	60                      # 0x3c
	.long	2                       # 0x2
	.long	70                      # 0x46
	.long	4294967294              # 0xfffffffe
	.long	76                      # 0x4c
	.long	4294967278              # 0xffffffee
	.long	86                      # 0x56
	.long	12                      # 0xc
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	70                      # 0x46
	.long	11                      # 0xb
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	4294967290              # 0xfffffffa
	.long	74                      # 0x4a
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	54                      # 0x36
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967285              # 0xfffffff5
	.long	82                      # 0x52
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	25                      # 0x19
	.long	42                      # 0x2a
	.size	INIT_FLD_MAP_P, 2880

	.type	INIT_FLD_LAST_I,@object # @INIT_FLD_LAST_I
	.p2align	4
INIT_FLD_LAST_I:
	.long	15                      # 0xf
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	19                      # 0x13
	.long	7                       # 0x7
	.long	16                      # 0x10
	.long	12                      # 0xc
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	11                      # 0xb
	.long	13                      # 0xd
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	16                      # 0x10
	.long	12                      # 0xc
	.long	23                      # 0x17
	.long	13                      # 0xd
	.long	23                      # 0x17
	.long	15                      # 0xf
	.long	20                      # 0x14
	.long	14                      # 0xe
	.long	26                      # 0x1a
	.long	14                      # 0xe
	.long	44                      # 0x2c
	.long	17                      # 0x11
	.long	40                      # 0x28
	.long	17                      # 0x11
	.long	47                      # 0x2f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	24                      # 0x18
	.long	17                      # 0x11
	.long	21                      # 0x15
	.long	21                      # 0x15
	.long	25                      # 0x19
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	27                      # 0x1b
	.long	22                      # 0x16
	.long	29                      # 0x1d
	.long	19                      # 0x13
	.long	35                      # 0x23
	.long	14                      # 0xe
	.long	50                      # 0x32
	.long	10                      # 0xa
	.long	57                      # 0x39
	.long	7                       # 0x7
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	4294967292              # 0xfffffffc
	.long	82                      # 0x52
	.long	4294967293              # 0xfffffffd
	.long	94                      # 0x5e
	.long	9                       # 0x9
	.long	69                      # 0x45
	.long	4294967284              # 0xfffffff4
	.long	109                     # 0x6d
	.long	21                      # 0x15
	.long	4294967286              # 0xfffffff6
	.long	24                      # 0x18
	.long	4294967285              # 0xfffffff5
	.long	28                      # 0x1c
	.long	4294967288              # 0xfffffff8
	.long	28                      # 0x1c
	.long	4294967295              # 0xffffffff
	.long	29                      # 0x1d
	.long	3                       # 0x3
	.long	29                      # 0x1d
	.long	9                       # 0x9
	.long	35                      # 0x23
	.long	20                      # 0x14
	.long	29                      # 0x1d
	.long	36                      # 0x24
	.long	14                      # 0xe
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	36                      # 0x24
	.long	4294967261              # 0xffffffdd
	.long	36                      # 0x24
	.long	4294967262              # 0xffffffde
	.long	32                      # 0x20
	.long	4294967270              # 0xffffffe6
	.long	37                      # 0x25
	.long	4294967266              # 0xffffffe2
	.long	44                      # 0x2c
	.long	4294967264              # 0xffffffe0
	.long	34                      # 0x22
	.long	4294967278              # 0xffffffee
	.long	34                      # 0x22
	.long	4294967281              # 0xfffffff1
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	33                      # 0x21
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967291              # 0xfffffffb
	.long	33                      # 0x21
	.long	0                       # 0x0
	.long	38                      # 0x26
	.long	2                       # 0x2
	.long	33                      # 0x21
	.long	13                      # 0xd
	.long	23                      # 0x17
	.long	35                      # 0x23
	.long	13                      # 0xd
	.long	58                      # 0x3a
	.long	29                      # 0x1d
	.long	4294967293              # 0xfffffffd
	.long	26                      # 0x1a
	.long	0                       # 0x0
	.long	22                      # 0x16
	.long	30                      # 0x1e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	31                      # 0x1f
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967281              # 0xfffffff1
	.long	34                      # 0x22
	.long	4294967293              # 0xfffffffd
	.long	34                      # 0x22
	.long	3                       # 0x3
	.long	36                      # 0x24
	.long	4294967295              # 0xffffffff
	.long	34                      # 0x22
	.long	5                       # 0x5
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	5                       # 0x5
	.long	34                      # 0x22
	.long	12                      # 0xc
	.long	39                      # 0x27
	.long	11                      # 0xb
	.long	30                      # 0x1e
	.long	29                      # 0x1d
	.long	34                      # 0x22
	.long	26                      # 0x1a
	.long	29                      # 0x1d
	.long	39                      # 0x27
	.long	19                      # 0x13
	.long	66                      # 0x42
	.size	INIT_FLD_LAST_I, 960

	.type	INIT_FLD_LAST_P,@object # @INIT_FLD_LAST_P
	.p2align	4
INIT_FLD_LAST_P:
	.long	14                      # 0xe
	.long	11                      # 0xb
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	9                       # 0x9
	.long	11                      # 0xb
	.long	18                      # 0x12
	.long	11                      # 0xb
	.long	21                      # 0x15
	.long	9                       # 0x9
	.long	23                      # 0x17
	.long	4294967294              # 0xfffffffe
	.long	32                      # 0x20
	.long	4294967281              # 0xfffffff1
	.long	32                      # 0x20
	.long	4294967281              # 0xfffffff1
	.long	34                      # 0x22
	.long	4294967275              # 0xffffffeb
	.long	39                      # 0x27
	.long	4294967273              # 0xffffffe9
	.long	42                      # 0x2a
	.long	4294967263              # 0xffffffdf
	.long	41                      # 0x29
	.long	4294967265              # 0xffffffe1
	.long	46                      # 0x2e
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967284              # 0xfffffff4
	.long	21                      # 0x15
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	45                      # 0x2d
	.long	4294967272              # 0xffffffe8
	.long	53                      # 0x35
	.long	4294967251              # 0xffffffd3
	.long	48                      # 0x30
	.long	4294967270              # 0xffffffe6
	.long	65                      # 0x41
	.long	4294967253              # 0xffffffd5
	.long	43                      # 0x2b
	.long	4294967277              # 0xffffffed
	.long	39                      # 0x27
	.long	4294967286              # 0xfffffff6
	.long	30                      # 0x1e
	.long	9                       # 0x9
	.long	18                      # 0x12
	.long	26                      # 0x1a
	.long	20                      # 0x14
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	57                      # 0x39
	.long	4294967282              # 0xfffffff2
	.long	82                      # 0x52
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967277              # 0xffffffed
	.long	97                      # 0x61
	.long	4294967261              # 0xffffffdd
	.long	125                     # 0x7d
	.long	21                      # 0x15
	.long	4294967283              # 0xfffffff3
	.long	33                      # 0x21
	.long	4294967282              # 0xfffffff2
	.long	39                      # 0x27
	.long	4294967289              # 0xfffffff9
	.long	46                      # 0x2e
	.long	4294967294              # 0xfffffffe
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	61                      # 0x3d
	.long	17                      # 0x11
	.long	55                      # 0x37
	.long	34                      # 0x22
	.long	42                      # 0x2a
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	28                      # 0x1c
	.long	0                       # 0x0
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	27                      # 0x1b
	.long	6                       # 0x6
	.long	34                      # 0x22
	.long	8                       # 0x8
	.long	30                      # 0x1e
	.long	10                      # 0xa
	.long	24                      # 0x18
	.long	22                      # 0x16
	.long	33                      # 0x21
	.long	19                      # 0x13
	.long	22                      # 0x16
	.long	32                      # 0x20
	.long	26                      # 0x1a
	.long	31                      # 0x1f
	.long	21                      # 0x15
	.long	41                      # 0x29
	.long	26                      # 0x1a
	.long	44                      # 0x2c
	.long	23                      # 0x17
	.long	47                      # 0x2f
	.long	16                      # 0x10
	.long	65                      # 0x41
	.long	14                      # 0xe
	.long	71                      # 0x47
	.long	8                       # 0x8
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	63                      # 0x3f
	.long	17                      # 0x11
	.long	65                      # 0x41
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	21                      # 0x15
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	20                      # 0x14
	.long	26                      # 0x1a
	.long	23                      # 0x17
	.long	27                      # 0x1b
	.long	32                      # 0x20
	.long	28                      # 0x1c
	.long	23                      # 0x17
	.long	28                      # 0x1c
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	40                      # 0x28
	.long	24                      # 0x18
	.long	32                      # 0x20
	.long	28                      # 0x1c
	.long	29                      # 0x1d
	.long	23                      # 0x17
	.long	42                      # 0x2a
	.long	19                      # 0x13
	.long	57                      # 0x39
	.long	22                      # 0x16
	.long	53                      # 0x35
	.long	22                      # 0x16
	.long	61                      # 0x3d
	.long	11                      # 0xb
	.long	86                      # 0x56
	.long	19                      # 0x13
	.long	4294967290              # 0xfffffffa
	.long	18                      # 0x12
	.long	4294967290              # 0xfffffffa
	.long	14                      # 0xe
	.long	0                       # 0x0
	.long	26                      # 0x1a
	.long	4294967284              # 0xfffffff4
	.long	31                      # 0x1f
	.long	4294967280              # 0xfffffff0
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	33                      # 0x21
	.long	4294967274              # 0xffffffea
	.long	37                      # 0x25
	.long	4294967268              # 0xffffffe4
	.long	39                      # 0x27
	.long	4294967266              # 0xffffffe2
	.long	42                      # 0x2a
	.long	4294967266              # 0xffffffe2
	.long	47                      # 0x2f
	.long	4294967254              # 0xffffffd6
	.long	45                      # 0x2d
	.long	4294967260              # 0xffffffdc
	.long	49                      # 0x31
	.long	4294967262              # 0xffffffde
	.long	41                      # 0x29
	.long	4294967279              # 0xffffffef
	.long	32                      # 0x20
	.long	9                       # 0x9
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	69                      # 0x45
	.long	4294967225              # 0xffffffb9
	.long	63                      # 0x3f
	.long	4294967233              # 0xffffffc1
	.long	66                      # 0x42
	.long	4294967232              # 0xffffffc0
	.long	77                      # 0x4d
	.long	4294967222              # 0xffffffb6
	.long	54                      # 0x36
	.long	4294967257              # 0xffffffd9
	.long	52                      # 0x34
	.long	4294967261              # 0xffffffdd
	.long	41                      # 0x29
	.long	4294967286              # 0xfffffff6
	.long	36                      # 0x24
	.long	0                       # 0x0
	.long	40                      # 0x28
	.long	4294967295              # 0xffffffff
	.long	30                      # 0x1e
	.long	14                      # 0xe
	.long	28                      # 0x1c
	.long	26                      # 0x1a
	.long	23                      # 0x17
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	55                      # 0x37
	.long	11                      # 0xb
	.long	65                      # 0x41
	.long	17                      # 0x11
	.long	4294967286              # 0xfffffff6
	.long	32                      # 0x20
	.long	4294967283              # 0xfffffff3
	.long	42                      # 0x2a
	.long	4294967287              # 0xfffffff7
	.long	49                      # 0x31
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	10                      # 0xa
	.long	66                      # 0x42
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	37                      # 0x25
	.long	4294967263              # 0xffffffdf
	.long	39                      # 0x27
	.long	4294967260              # 0xffffffdc
	.long	40                      # 0x28
	.long	4294967259              # 0xffffffdb
	.long	38                      # 0x26
	.long	4294967266              # 0xffffffe2
	.long	46                      # 0x2e
	.long	4294967263              # 0xffffffdf
	.long	42                      # 0x2a
	.long	4294967266              # 0xffffffe2
	.long	40                      # 0x28
	.long	4294967272              # 0xffffffe8
	.long	49                      # 0x31
	.long	4294967267              # 0xffffffe3
	.long	38                      # 0x26
	.long	4294967284              # 0xfffffff4
	.long	40                      # 0x28
	.long	4294967286              # 0xfffffff6
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	46                      # 0x2e
	.long	4294967291              # 0xfffffffb
	.long	31                      # 0x1f
	.long	20                      # 0x14
	.long	29                      # 0x1d
	.long	30                      # 0x1e
	.long	25                      # 0x19
	.long	44                      # 0x2c
	.long	12                      # 0xc
	.long	48                      # 0x30
	.long	11                      # 0xb
	.long	49                      # 0x31
	.long	26                      # 0x1a
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	22                      # 0x16
	.long	22                      # 0x16
	.long	23                      # 0x17
	.long	22                      # 0x16
	.long	27                      # 0x1b
	.long	21                      # 0x15
	.long	33                      # 0x21
	.long	20                      # 0x14
	.long	26                      # 0x1a
	.long	28                      # 0x1c
	.long	30                      # 0x1e
	.long	24                      # 0x18
	.long	27                      # 0x1b
	.long	34                      # 0x22
	.long	18                      # 0x12
	.long	42                      # 0x2a
	.long	25                      # 0x19
	.long	39                      # 0x27
	.long	18                      # 0x12
	.long	50                      # 0x32
	.long	12                      # 0xc
	.long	70                      # 0x46
	.long	21                      # 0x15
	.long	54                      # 0x36
	.long	14                      # 0xe
	.long	71                      # 0x47
	.long	11                      # 0xb
	.long	83                      # 0x53
	.long	17                      # 0x11
	.long	4294967283              # 0xfffffff3
	.long	16                      # 0x10
	.long	4294967287              # 0xfffffff7
	.long	17                      # 0x11
	.long	4294967284              # 0xfffffff4
	.long	27                      # 0x1b
	.long	4294967275              # 0xffffffeb
	.long	37                      # 0x25
	.long	4294967266              # 0xffffffe2
	.long	41                      # 0x29
	.long	4294967256              # 0xffffffd8
	.long	42                      # 0x2a
	.long	4294967255              # 0xffffffd7
	.long	48                      # 0x30
	.long	4294967249              # 0xffffffd1
	.long	39                      # 0x27
	.long	4294967264              # 0xffffffe0
	.long	46                      # 0x2e
	.long	4294967256              # 0xffffffd8
	.long	52                      # 0x34
	.long	4294967245              # 0xffffffcd
	.long	46                      # 0x2e
	.long	4294967255              # 0xffffffd7
	.long	52                      # 0x34
	.long	4294967257              # 0xffffffd9
	.long	43                      # 0x2b
	.long	4294967277              # 0xffffffed
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	61                      # 0x3d
	.long	4294967241              # 0xffffffc9
	.long	56                      # 0x38
	.long	4294967250              # 0xffffffd2
	.long	62                      # 0x3e
	.long	4294967246              # 0xffffffce
	.long	81                      # 0x51
	.long	4294967229              # 0xffffffbd
	.long	45                      # 0x2d
	.long	4294967276              # 0xffffffec
	.long	35                      # 0x23
	.long	4294967294              # 0xfffffffe
	.long	28                      # 0x1c
	.long	15                      # 0xf
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	39                      # 0x27
	.long	1                       # 0x1
	.long	30                      # 0x1e
	.long	17                      # 0x11
	.long	20                      # 0x14
	.long	38                      # 0x26
	.long	18                      # 0x12
	.long	45                      # 0x2d
	.long	15                      # 0xf
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	79                      # 0x4f
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	30                      # 0x1e
	.long	4294967286              # 0xfffffff6
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	33                      # 0x21
	.long	4294967295              # 0xffffffff
	.long	33                      # 0x21
	.long	7                       # 0x7
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	37                      # 0x25
	.long	23                      # 0x17
	.long	31                      # 0x1f
	.long	38                      # 0x26
	.long	20                      # 0x14
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	36                      # 0x24
	.long	4294967280              # 0xfffffff0
	.long	37                      # 0x25
	.long	4294967282              # 0xfffffff2
	.long	37                      # 0x25
	.long	4294967279              # 0xffffffef
	.long	32                      # 0x20
	.long	1                       # 0x1
	.long	34                      # 0x22
	.long	15                      # 0xf
	.long	29                      # 0x1d
	.long	15                      # 0xf
	.long	24                      # 0x18
	.long	25                      # 0x19
	.long	34                      # 0x22
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	16                      # 0x10
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	28                      # 0x1c
	.long	33                      # 0x21
	.long	41                      # 0x29
	.long	36                      # 0x24
	.long	28                      # 0x1c
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	21                      # 0x15
	.long	62                      # 0x3e
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	19                      # 0x13
	.long	26                      # 0x1a
	.long	36                      # 0x24
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	27                      # 0x1b
	.long	16                      # 0x10
	.long	24                      # 0x18
	.long	30                      # 0x1e
	.long	31                      # 0x1f
	.long	29                      # 0x1d
	.long	22                      # 0x16
	.long	41                      # 0x29
	.long	22                      # 0x16
	.long	42                      # 0x2a
	.long	16                      # 0x10
	.long	60                      # 0x3c
	.long	15                      # 0xf
	.long	52                      # 0x34
	.long	14                      # 0xe
	.long	60                      # 0x3c
	.long	3                       # 0x3
	.long	78                      # 0x4e
	.long	4294967280              # 0xfffffff0
	.long	123                     # 0x7b
	.long	21                      # 0x15
	.long	53                      # 0x35
	.long	22                      # 0x16
	.long	56                      # 0x38
	.long	25                      # 0x19
	.long	61                      # 0x3d
	.size	INIT_FLD_LAST_P, 2880

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
