	.text
	.file	"context_ini.c"
	.globl	create_context_memory   # -- Begin function create_context_memory
	.p2align	4, 0x90
	.type	create_context_memory,@function
create_context_memory:                  # @create_context_memory
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB0_17
# %bb.1:                                # %func_create_context_memory.7
	callq	create_context_memory.7
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_create_context_memory.26
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.26
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_create_context_memory.49
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.49
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_create_context_memory.54
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.54
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_create_context_memory.55
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.55
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_create_context_memory.56
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.56
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_create_context_memory.61
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.61
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_create_context_memory.63
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.63
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %func_create_context_memory.69
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.69
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %func_create_context_memory.71
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.71
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_11:                               # %func_create_context_memory.78
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.78
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_12:                               # %func_create_context_memory.79
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.79
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_13:                               # %func_create_context_memory.81
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.81
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_14:                               # %func_create_context_memory.82
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.82
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_15:                               # %func_create_context_memory.83
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.83
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_16:                               # %func_create_context_memory.84
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.84
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB0_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB0_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB0_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB0_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB0_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB0_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB0_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB0_15
	jmp	.LBB0_16
.Lfunc_end0:
	.size	create_context_memory, .Lfunc_end0-create_context_memory
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory     # -- Begin function free_context_memory
	.p2align	4, 0x90
	.type	free_context_memory,@function
free_context_memory:                    # @free_context_memory
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB1_2
# %bb.1:                                # %func_free_context_memory.1
	callq	free_context_memory.1
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_free_context_memory.34
	.cfi_def_cfa %rbp, 16
	callq	free_context_memory.34
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	free_context_memory, .Lfunc_end1-free_context_memory
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber       # -- Begin function SetCtxModelNumber
	.p2align	4, 0x90
	.type	SetCtxModelNumber,@function
SetCtxModelNumber:                      # @SetCtxModelNumber
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_7
# %bb.1:                                # %func_SetCtxModelNumber.6
	callq	SetCtxModelNumber.6
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_SetCtxModelNumber.9
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.9
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_SetCtxModelNumber.10
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.10
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_SetCtxModelNumber.11
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.11
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %func_SetCtxModelNumber.21
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.21
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_6:                                # %func_SetCtxModelNumber.25
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.25
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB2_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB2_5
	jmp	.LBB2_6
.Lfunc_end2:
	.size	SetCtxModelNumber, .Lfunc_end2-SetCtxModelNumber
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts           # -- Begin function init_contexts
	.p2align	4, 0x90
	.type	init_contexts,@function
init_contexts:                          # @init_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_17
# %bb.1:                                # %func_init_contexts.13
	callq	init_contexts.13
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_init_contexts.14
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_init_contexts.16
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.16
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_init_contexts.18
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.18
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_init_contexts.20
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.20
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_init_contexts.22
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.22
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_init_contexts.36
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.36
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_init_contexts.46
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.46
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %func_init_contexts.47
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.47
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_10:                               # %func_init_contexts.48
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.48
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_11:                               # %func_init_contexts.53
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.53
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_12:                               # %func_init_contexts.58
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.58
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_13:                               # %func_init_contexts.59
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.59
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_14:                               # %func_init_contexts.60
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_15:                               # %func_init_contexts.67
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.67
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_16:                               # %func_init_contexts.74
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.74
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB3_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB3_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB3_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB3_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB3_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB3_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB3_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB3_15
	jmp	.LBB3_16
.Lfunc_end3:
	.size	init_contexts, .Lfunc_end3-init_contexts
	.cfi_endproc
                                        # -- End function
	.globl	XRate                   # -- Begin function XRate
	.p2align	4, 0x90
	.type	XRate,@function
XRate:                                  # @XRate
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB4_17
# %bb.1:                                # %func_XRate.3
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.3
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_XRate.5
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.5
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_XRate.17
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.17
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_XRate.19
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.19
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %func_XRate.24
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.24
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_6:                                # %func_XRate.41
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.41
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_7:                                # %func_XRate.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.44
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_8:                                # %func_XRate.50
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.50
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_9:                                # %func_XRate.57
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.57
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_10:                               # %func_XRate.64
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.64
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_11:                               # %func_XRate.65
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.65
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_12:                               # %func_XRate.66
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.66
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_13:                               # %func_XRate.70
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.70
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_14:                               # %func_XRate.72
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.72
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_15:                               # %func_XRate.75
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.75
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_16:                               # %func_XRate.77
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.77
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB4_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB4_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB4_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB4_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB4_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB4_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB4_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB4_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB4_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB4_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB4_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB4_15
	jmp	.LBB4_16
.Lfunc_end4:
	.size	XRate, .Lfunc_end4-XRate
	.cfi_endproc
                                        # -- End function
	.globl	GetCtxModelNumber       # -- Begin function GetCtxModelNumber
	.p2align	4, 0x90
	.type	GetCtxModelNumber,@function
GetCtxModelNumber:                      # @GetCtxModelNumber
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_17
# %bb.1:                                # %func_GetCtxModelNumber.15
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.15
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_GetCtxModelNumber.29
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.29
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_GetCtxModelNumber.31
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.31
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_GetCtxModelNumber.33
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.33
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_GetCtxModelNumber.35
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.35
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_GetCtxModelNumber.37
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.37
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_GetCtxModelNumber.40
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.40
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_GetCtxModelNumber.42
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.42
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %func_GetCtxModelNumber.43
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.43
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_10:                               # %func_GetCtxModelNumber.45
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.45
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_11:                               # %func_GetCtxModelNumber.52
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.52
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_12:                               # %func_GetCtxModelNumber.62
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.62
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_13:                               # %func_GetCtxModelNumber.68
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.68
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_14:                               # %func_GetCtxModelNumber.73
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.73
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_15:                               # %func_GetCtxModelNumber.76
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.76
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_16:                               # %func_GetCtxModelNumber.80
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.80
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB5_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB5_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB5_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB5_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB5_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB5_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB5_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB5_15
	jmp	.LBB5_16
.Lfunc_end5:
	.size	GetCtxModelNumber, .Lfunc_end5-GetCtxModelNumber
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts          # -- Begin function store_contexts
	.p2align	4, 0x90
	.type	store_contexts,@function
store_contexts:                         # @store_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_7
# %bb.1:                                # %func_store_contexts.2
	callq	store_contexts.2
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_store_contexts.8
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.8
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_store_contexts.27
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.27
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_store_contexts.32
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.32
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_store_contexts.39
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.39
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_store_contexts.51
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.51
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
	jmp	.LBB6_6
.Lfunc_end6:
	.size	store_contexts, .Lfunc_end6-store_contexts
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts # -- Begin function update_field_frame_contexts
	.p2align	4, 0x90
	.type	update_field_frame_contexts,@function
update_field_frame_contexts:            # @update_field_frame_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB7_7
# %bb.1:                                # %func_update_field_frame_contexts.4
	movl	%ebx, %edi
	callq	update_field_frame_contexts.4
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_update_field_frame_contexts.12
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.12
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_update_field_frame_contexts.23
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.23
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_update_field_frame_contexts.28
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.28
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_update_field_frame_contexts.30
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.30
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_update_field_frame_contexts.38
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.38
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
	jmp	.LBB7_6
.Lfunc_end7:
	.size	update_field_frame_contexts, .Lfunc_end7-update_field_frame_contexts
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory.1   # -- Begin function free_context_memory.1
	.p2align	4, 0x90
	.type	free_context_memory.1,@function
free_context_memory.1:                  # @free_context_memory.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$368066380, -12(%rbp)   # imm = 0x15F03F4C
	movl	$0, -4(%rbp)
.LBB8_1:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_3 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB8_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB8_1 Depth=1
	movl	$0, -8(%rbp)
.LBB8_3:                                # %for.cond1
                                        #   Parent Loop BB8_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB8_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB8_3 Depth=2
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB8_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_3
.LBB8_6:                                # %for.end
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.7:                                # %for.inc14
                                        #   in Loop: Header=BB8_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_1
.LBB8_8:                                # %for.end16
	movq	initialized, %rdi
	callq	free
	movq	model_number, %rdi
	callq	free
	cmpl	$368066380, -12(%rbp)   # imm = 0x15F03F4C
	jne	.LBB8_10
.LBB8_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_10:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB8_9
.Lfunc_end8:
	.size	free_context_memory.1, .Lfunc_end8-free_context_memory.1
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.2        # -- Begin function store_contexts.2
	.p2align	4, 0x90
	.type	store_contexts.2,@function
store_contexts.2:                       # @store_contexts.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$652802620, -16(%rbp)   # imm = 0x26E8FA3C
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -12(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB9_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-12(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB9_3
.LBB9_2:                                # %if.else
	jmp	.LBB9_3
.LBB9_3:                                # %if.end
	cmpl	$652802620, -16(%rbp)   # imm = 0x26E8FA3C
	jne	.LBB9_5
.LBB9_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB9_4
.Lfunc_end9:
	.size	store_contexts.2, .Lfunc_end9-store_contexts.2
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.3
.LCPI10_0:
	.quad	4607182418800017408     # double 1
.LCPI10_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI10_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI10_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.3
	.p2align	4, 0x90
	.type	XRate.3,@function
XRate.3:                                # @XRate.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$389850008, -36(%rbp)   # imm = 0x173CA398
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB10_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB10_3
.LBB10_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB10_3:                               # %cond.end
	vmovsd	.LCPI10_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI10_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI10_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI10_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB10_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI10_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB10_6
.LBB10_5:                               # %cond.false6
	vmovsd	.LCPI10_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI10_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI10_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB10_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB10_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB10_9
.LBB10_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB10_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB10_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB10_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB10_13
.LBB10_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB10_13:                              # %cond.end26
	jmp	.LBB10_15
.LBB10_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB10_15
.LBB10_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB10_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB10_18
.LBB10_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB10_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$389850008, -36(%rbp)   # imm = 0x173CA398
	jne	.LBB10_20
.LBB10_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB10_19
.Lfunc_end10:
	.size	XRate.3, .Lfunc_end10-XRate.3
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.4 # -- Begin function update_field_frame_contexts.4
	.p2align	4, 0x90
	.type	update_field_frame_contexts.4,@function
update_field_frame_contexts.4:          # @update_field_frame_contexts.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2086502002, -16(%rbp)  # imm = 0x7C5D7E72
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB11_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB11_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB11_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB11_2 Depth=1
	movl	$0, -4(%rbp)
.LBB11_4:                               # %for.cond1
                                        #   Parent Loop BB11_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB11_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB11_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB11_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_4
.LBB11_7:                               # %for.end
                                        #   in Loop: Header=BB11_2 Depth=1
	jmp	.LBB11_8
.LBB11_8:                               # %for.inc23
                                        #   in Loop: Header=BB11_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_2
.LBB11_9:                               # %for.end25
	jmp	.LBB11_19
.LBB11_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB11_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB11_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB11_11 Depth=1
	movl	$0, -4(%rbp)
.LBB11_13:                              # %for.cond29
                                        #   Parent Loop BB11_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB11_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB11_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_13
.LBB11_16:                              # %for.end56
                                        #   in Loop: Header=BB11_11 Depth=1
	jmp	.LBB11_17
.LBB11_17:                              # %for.inc57
                                        #   in Loop: Header=BB11_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_11
.LBB11_18:                              # %for.end59
	jmp	.LBB11_19
.LBB11_19:                              # %if.end
	cmpl	$2086502002, -16(%rbp)  # imm = 0x7C5D7E72
	jne	.LBB11_21
.LBB11_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_20
.Lfunc_end11:
	.size	update_field_frame_contexts.4, .Lfunc_end11-update_field_frame_contexts.4
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.5
.LCPI12_0:
	.quad	4607182418800017408     # double 1
.LCPI12_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI12_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI12_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.5
	.p2align	4, 0x90
	.type	XRate.5,@function
XRate.5:                                # @XRate.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1237879172, -36(%rbp)  # imm = 0x49C88984
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB12_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB12_3
.LBB12_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB12_3:                               # %cond.end
	vmovsd	.LCPI12_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI12_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI12_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI12_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB12_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI12_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB12_6
.LBB12_5:                               # %cond.false6
	vmovsd	.LCPI12_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI12_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI12_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB12_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB12_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB12_9
.LBB12_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB12_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB12_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB12_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB12_13
.LBB12_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB12_13:                              # %cond.end26
	jmp	.LBB12_15
.LBB12_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB12_15
.LBB12_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB12_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB12_18
.LBB12_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB12_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1237879172, -36(%rbp)  # imm = 0x49C88984
	jne	.LBB12_20
.LBB12_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB12_19
.Lfunc_end12:
	.size	XRate.5, .Lfunc_end12-XRate.5
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.6     # -- Begin function SetCtxModelNumber.6
	.p2align	4, 0x90
	.type	SetCtxModelNumber.6,@function
SetCtxModelNumber.6:                    # @SetCtxModelNumber.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1631723496, -16(%rbp)  # imm = 0x61421FE8
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB13_11
.LBB13_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB13_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB13_11
.LBB13_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB13_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB13_11
.LBB13_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB13_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB13_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB13_10
.LBB13_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB13_10:                              # %if.end38
	jmp	.LBB13_11
.LBB13_11:                              # %if.end39
	cmpl	$1631723496, -16(%rbp)  # imm = 0x61421FE8
	jne	.LBB13_13
.LBB13_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_12
.Lfunc_end13:
	.size	SetCtxModelNumber.6, .Lfunc_end13-SetCtxModelNumber.6
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.7
.LCPI14_0:
	.quad	4611686018427387904     # double 2
.LCPI14_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.7
	.p2align	4, 0x90
	.type	create_context_memory.7,@function
create_context_memory.7:                # @create_context_memory.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1714591424, -20(%rbp)  # imm = 0x663296C0
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB14_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB14_3
.LBB14_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB14_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB14_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB14_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB14_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB14_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB14_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB14_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB14_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB14_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB14_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB14_11:                              # %if.end10
                                        #   in Loop: Header=BB14_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB14_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB14_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB14_13:                              # %if.end16
                                        #   in Loop: Header=BB14_8 Depth=1
	movl	$0, -8(%rbp)
.LBB14_14:                              # %for.cond17
                                        #   Parent Loop BB14_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB14_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB14_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB14_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB14_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB14_17:                              # %if.end28
                                        #   in Loop: Header=BB14_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB14_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB14_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB14_19:                              # %if.end39
                                        #   in Loop: Header=BB14_14 Depth=2
	jmp	.LBB14_20
.LBB14_20:                              # %for.inc
                                        #   in Loop: Header=BB14_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_14
.LBB14_21:                              # %for.end
                                        #   in Loop: Header=BB14_8 Depth=1
	jmp	.LBB14_22
.LBB14_22:                              # %for.inc40
                                        #   in Loop: Header=BB14_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_8
.LBB14_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB14_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_26 Depth 2
                                        #       Child Loop BB14_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB14_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB14_24 Depth=1
	movl	$0, -8(%rbp)
.LBB14_26:                              # %for.cond47
                                        #   Parent Loop BB14_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB14_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB14_26 Depth=2
	movl	$0, -12(%rbp)
.LBB14_28:                              # %for.cond51
                                        #   Parent Loop BB14_24 Depth=1
                                        #     Parent Loop BB14_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB14_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB14_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB14_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_28
.LBB14_31:                              # %for.end63
                                        #   in Loop: Header=BB14_26 Depth=2
	jmp	.LBB14_32
.LBB14_32:                              # %for.inc64
                                        #   in Loop: Header=BB14_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_26
.LBB14_33:                              # %for.end66
                                        #   in Loop: Header=BB14_24 Depth=1
	jmp	.LBB14_34
.LBB14_34:                              # %for.inc67
                                        #   in Loop: Header=BB14_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_24
.LBB14_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB14_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB14_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB14_36 Depth=1
	vmovsd	.LCPI14_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI14_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI14_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB14_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_36
.LBB14_39:                              # %for.end98
	cmpl	$1714591424, -20(%rbp)  # imm = 0x663296C0
	jne	.LBB14_41
.LBB14_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_40
.Lfunc_end14:
	.size	create_context_memory.7, .Lfunc_end14-create_context_memory.7
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.8        # -- Begin function store_contexts.8
	.p2align	4, 0x90
	.type	store_contexts.8,@function
store_contexts.8:                       # @store_contexts.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$987092995, -16(%rbp)   # imm = 0x3AD5D803
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -8(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB15_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB15_3
.LBB15_2:                               # %if.else
	jmp	.LBB15_3
.LBB15_3:                               # %if.end
	cmpl	$987092995, -16(%rbp)   # imm = 0x3AD5D803
	jne	.LBB15_5
.LBB15_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_4
.Lfunc_end15:
	.size	store_contexts.8, .Lfunc_end15-store_contexts.8
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.9     # -- Begin function SetCtxModelNumber.9
	.p2align	4, 0x90
	.type	SetCtxModelNumber.9,@function
SetCtxModelNumber.9:                    # @SetCtxModelNumber.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$899053522, -16(%rbp)   # imm = 0x359677D2
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB16_11
.LBB16_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB16_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB16_11
.LBB16_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB16_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB16_11
.LBB16_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB16_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB16_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB16_10
.LBB16_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB16_10:                              # %if.end38
	jmp	.LBB16_11
.LBB16_11:                              # %if.end39
	cmpl	$899053522, -16(%rbp)   # imm = 0x359677D2
	jne	.LBB16_13
.LBB16_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_12
.Lfunc_end16:
	.size	SetCtxModelNumber.9, .Lfunc_end16-SetCtxModelNumber.9
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.10    # -- Begin function SetCtxModelNumber.10
	.p2align	4, 0x90
	.type	SetCtxModelNumber.10,@function
SetCtxModelNumber.10:                   # @SetCtxModelNumber.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1658467915, -16(%rbp)  # imm = 0x62DA364B
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB17_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB17_11
.LBB17_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB17_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB17_11
.LBB17_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB17_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB17_11
.LBB17_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB17_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB17_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB17_10
.LBB17_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB17_10:                              # %if.end38
	jmp	.LBB17_11
.LBB17_11:                              # %if.end39
	cmpl	$1658467915, -16(%rbp)  # imm = 0x62DA364B
	jne	.LBB17_13
.LBB17_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_12
.Lfunc_end17:
	.size	SetCtxModelNumber.10, .Lfunc_end17-SetCtxModelNumber.10
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.11    # -- Begin function SetCtxModelNumber.11
	.p2align	4, 0x90
	.type	SetCtxModelNumber.11,@function
SetCtxModelNumber.11:                   # @SetCtxModelNumber.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$391018365, -16(%rbp)   # imm = 0x174E777D
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB18_11
.LBB18_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB18_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB18_11
.LBB18_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB18_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB18_11
.LBB18_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB18_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB18_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB18_10
.LBB18_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB18_10:                              # %if.end38
	jmp	.LBB18_11
.LBB18_11:                              # %if.end39
	cmpl	$391018365, -16(%rbp)   # imm = 0x174E777D
	jne	.LBB18_13
.LBB18_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_12
.Lfunc_end18:
	.size	SetCtxModelNumber.11, .Lfunc_end18-SetCtxModelNumber.11
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.12 # -- Begin function update_field_frame_contexts.12
	.p2align	4, 0x90
	.type	update_field_frame_contexts.12,@function
update_field_frame_contexts.12:         # @update_field_frame_contexts.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1784031465, -16(%rbp)  # imm = 0x6A5628E9
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB19_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB19_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB19_2 Depth=1
	movl	$0, -8(%rbp)
.LBB19_4:                               # %for.cond1
                                        #   Parent Loop BB19_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB19_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB19_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB19_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_4
.LBB19_7:                               # %for.end
                                        #   in Loop: Header=BB19_2 Depth=1
	jmp	.LBB19_8
.LBB19_8:                               # %for.inc23
                                        #   in Loop: Header=BB19_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_2
.LBB19_9:                               # %for.end25
	jmp	.LBB19_19
.LBB19_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB19_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB19_11 Depth=1
	movl	$0, -8(%rbp)
.LBB19_13:                              # %for.cond29
                                        #   Parent Loop BB19_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB19_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB19_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_13
.LBB19_16:                              # %for.end56
                                        #   in Loop: Header=BB19_11 Depth=1
	jmp	.LBB19_17
.LBB19_17:                              # %for.inc57
                                        #   in Loop: Header=BB19_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_11
.LBB19_18:                              # %for.end59
	jmp	.LBB19_19
.LBB19_19:                              # %if.end
	cmpl	$1784031465, -16(%rbp)  # imm = 0x6A5628E9
	jne	.LBB19_21
.LBB19_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_20
.Lfunc_end19:
	.size	update_field_frame_contexts.12, .Lfunc_end19-update_field_frame_contexts.12
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.13        # -- Begin function init_contexts.13
	.p2align	4, 0x90
	.type	init_contexts.13,@function
init_contexts.13:                       # @init_contexts.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2035969686, -28(%rbp)  # imm = 0x795A6E96
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB20_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB20_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	$0, -4(%rbp)
.LBB20_3:                               # %for.cond2
                                        #   Parent Loop BB20_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB20_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB20_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB20_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_7
.LBB20_6:                               # %if.else
                                        #   in Loop: Header=BB20_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_7:                               # %if.end
                                        #   in Loop: Header=BB20_3 Depth=2
	jmp	.LBB20_8
.LBB20_8:                               # %for.inc
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_3
.LBB20_9:                               # %for.end
                                        #   in Loop: Header=BB20_1 Depth=1
	jmp	.LBB20_10
.LBB20_10:                              # %for.inc28
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_1
.LBB20_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB20_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB20_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB20_12 Depth=1
	movl	$0, -4(%rbp)
.LBB20_14:                              # %for.cond34
                                        #   Parent Loop BB20_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB20_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB20_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB20_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_18
.LBB20_17:                              # %if.else52
                                        #   in Loop: Header=BB20_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_18:                              # %if.end66
                                        #   in Loop: Header=BB20_14 Depth=2
	jmp	.LBB20_19
.LBB20_19:                              # %for.inc67
                                        #   in Loop: Header=BB20_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_14
.LBB20_20:                              # %for.end69
                                        #   in Loop: Header=BB20_12 Depth=1
	jmp	.LBB20_21
.LBB20_21:                              # %for.inc70
                                        #   in Loop: Header=BB20_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_12
.LBB20_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB20_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB20_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB20_23 Depth=1
	movl	$0, -4(%rbp)
.LBB20_25:                              # %for.cond76
                                        #   Parent Loop BB20_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB20_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB20_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB20_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_29
.LBB20_28:                              # %if.else94
                                        #   in Loop: Header=BB20_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_29:                              # %if.end108
                                        #   in Loop: Header=BB20_25 Depth=2
	jmp	.LBB20_30
.LBB20_30:                              # %for.inc109
                                        #   in Loop: Header=BB20_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_25
.LBB20_31:                              # %for.end111
                                        #   in Loop: Header=BB20_23 Depth=1
	jmp	.LBB20_32
.LBB20_32:                              # %for.inc112
                                        #   in Loop: Header=BB20_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_23
.LBB20_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB20_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB20_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB20_34 Depth=1
	movl	$0, -4(%rbp)
.LBB20_36:                              # %for.cond118
                                        #   Parent Loop BB20_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB20_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB20_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB20_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_40
.LBB20_39:                              # %if.else136
                                        #   in Loop: Header=BB20_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_40:                              # %if.end150
                                        #   in Loop: Header=BB20_36 Depth=2
	jmp	.LBB20_41
.LBB20_41:                              # %for.inc151
                                        #   in Loop: Header=BB20_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_36
.LBB20_42:                              # %for.end153
                                        #   in Loop: Header=BB20_34 Depth=1
	jmp	.LBB20_43
.LBB20_43:                              # %for.inc154
                                        #   in Loop: Header=BB20_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_34
.LBB20_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB20_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB20_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB20_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB20_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_49
.LBB20_48:                              # %if.else172
                                        #   in Loop: Header=BB20_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_49:                              # %if.end183
                                        #   in Loop: Header=BB20_45 Depth=1
	jmp	.LBB20_50
.LBB20_50:                              # %for.inc184
                                        #   in Loop: Header=BB20_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_45
.LBB20_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB20_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB20_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB20_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB20_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_56
.LBB20_55:                              # %if.else202
                                        #   in Loop: Header=BB20_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_56:                              # %if.end213
                                        #   in Loop: Header=BB20_52 Depth=1
	jmp	.LBB20_57
.LBB20_57:                              # %for.inc214
                                        #   in Loop: Header=BB20_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_52
.LBB20_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB20_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB20_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB20_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB20_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_63
.LBB20_62:                              # %if.else232
                                        #   in Loop: Header=BB20_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_63:                              # %if.end243
                                        #   in Loop: Header=BB20_59 Depth=1
	jmp	.LBB20_64
.LBB20_64:                              # %for.inc244
                                        #   in Loop: Header=BB20_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_59
.LBB20_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB20_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB20_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB20_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB20_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_70
.LBB20_69:                              # %if.else262
                                        #   in Loop: Header=BB20_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_70:                              # %if.end273
                                        #   in Loop: Header=BB20_66 Depth=1
	jmp	.LBB20_71
.LBB20_71:                              # %for.inc274
                                        #   in Loop: Header=BB20_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_66
.LBB20_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB20_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB20_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB20_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB20_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_77
.LBB20_76:                              # %if.else292
                                        #   in Loop: Header=BB20_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_77:                              # %if.end303
                                        #   in Loop: Header=BB20_73 Depth=1
	jmp	.LBB20_78
.LBB20_78:                              # %for.inc304
                                        #   in Loop: Header=BB20_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_73
.LBB20_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB20_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB20_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB20_80 Depth=1
	movl	$0, -4(%rbp)
.LBB20_82:                              # %for.cond310
                                        #   Parent Loop BB20_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB20_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB20_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB20_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_86
.LBB20_85:                              # %if.else328
                                        #   in Loop: Header=BB20_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_86:                              # %if.end342
                                        #   in Loop: Header=BB20_82 Depth=2
	jmp	.LBB20_87
.LBB20_87:                              # %for.inc343
                                        #   in Loop: Header=BB20_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_82
.LBB20_88:                              # %for.end345
                                        #   in Loop: Header=BB20_80 Depth=1
	jmp	.LBB20_89
.LBB20_89:                              # %for.inc346
                                        #   in Loop: Header=BB20_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_80
.LBB20_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB20_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB20_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB20_91 Depth=1
	movl	$0, -4(%rbp)
.LBB20_93:                              # %for.cond352
                                        #   Parent Loop BB20_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB20_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB20_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB20_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_97
.LBB20_96:                              # %if.else370
                                        #   in Loop: Header=BB20_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_97:                              # %if.end384
                                        #   in Loop: Header=BB20_93 Depth=2
	jmp	.LBB20_98
.LBB20_98:                              # %for.inc385
                                        #   in Loop: Header=BB20_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_93
.LBB20_99:                              # %for.end387
                                        #   in Loop: Header=BB20_91 Depth=1
	jmp	.LBB20_100
.LBB20_100:                             # %for.inc388
                                        #   in Loop: Header=BB20_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_91
.LBB20_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB20_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB20_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB20_102 Depth=1
	movl	$0, -4(%rbp)
.LBB20_104:                             # %for.cond394
                                        #   Parent Loop BB20_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB20_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB20_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB20_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_108
.LBB20_107:                             # %if.else412
                                        #   in Loop: Header=BB20_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_108:                             # %if.end426
                                        #   in Loop: Header=BB20_104 Depth=2
	jmp	.LBB20_109
.LBB20_109:                             # %for.inc427
                                        #   in Loop: Header=BB20_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_104
.LBB20_110:                             # %for.end429
                                        #   in Loop: Header=BB20_102 Depth=1
	jmp	.LBB20_111
.LBB20_111:                             # %for.inc430
                                        #   in Loop: Header=BB20_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_102
.LBB20_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB20_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB20_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB20_113 Depth=1
	movl	$0, -4(%rbp)
.LBB20_115:                             # %for.cond436
                                        #   Parent Loop BB20_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB20_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB20_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB20_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_119
.LBB20_118:                             # %if.else454
                                        #   in Loop: Header=BB20_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_119:                             # %if.end468
                                        #   in Loop: Header=BB20_115 Depth=2
	jmp	.LBB20_120
.LBB20_120:                             # %for.inc469
                                        #   in Loop: Header=BB20_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_115
.LBB20_121:                             # %for.end471
                                        #   in Loop: Header=BB20_113 Depth=1
	jmp	.LBB20_122
.LBB20_122:                             # %for.inc472
                                        #   in Loop: Header=BB20_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_113
.LBB20_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB20_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB20_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB20_124 Depth=1
	movl	$0, -4(%rbp)
.LBB20_126:                             # %for.cond478
                                        #   Parent Loop BB20_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB20_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB20_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB20_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_130
.LBB20_129:                             # %if.else496
                                        #   in Loop: Header=BB20_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_130:                             # %if.end510
                                        #   in Loop: Header=BB20_126 Depth=2
	jmp	.LBB20_131
.LBB20_131:                             # %for.inc511
                                        #   in Loop: Header=BB20_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_126
.LBB20_132:                             # %for.end513
                                        #   in Loop: Header=BB20_124 Depth=1
	jmp	.LBB20_133
.LBB20_133:                             # %for.inc514
                                        #   in Loop: Header=BB20_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_124
.LBB20_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB20_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB20_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB20_135 Depth=1
	movl	$0, -4(%rbp)
.LBB20_137:                             # %for.cond520
                                        #   Parent Loop BB20_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB20_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB20_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB20_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_141
.LBB20_140:                             # %if.else538
                                        #   in Loop: Header=BB20_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_141:                             # %if.end552
                                        #   in Loop: Header=BB20_137 Depth=2
	jmp	.LBB20_142
.LBB20_142:                             # %for.inc553
                                        #   in Loop: Header=BB20_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_137
.LBB20_143:                             # %for.end555
                                        #   in Loop: Header=BB20_135 Depth=1
	jmp	.LBB20_144
.LBB20_144:                             # %for.inc556
                                        #   in Loop: Header=BB20_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_135
.LBB20_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB20_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB20_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB20_146 Depth=1
	movl	$0, -4(%rbp)
.LBB20_148:                             # %for.cond562
                                        #   Parent Loop BB20_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB20_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB20_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB20_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_152
.LBB20_151:                             # %if.else580
                                        #   in Loop: Header=BB20_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_152:                             # %if.end594
                                        #   in Loop: Header=BB20_148 Depth=2
	jmp	.LBB20_153
.LBB20_153:                             # %for.inc595
                                        #   in Loop: Header=BB20_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_148
.LBB20_154:                             # %for.end597
                                        #   in Loop: Header=BB20_146 Depth=1
	jmp	.LBB20_155
.LBB20_155:                             # %for.inc598
                                        #   in Loop: Header=BB20_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_146
.LBB20_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB20_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB20_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB20_157 Depth=1
	movl	$0, -4(%rbp)
.LBB20_159:                             # %for.cond604
                                        #   Parent Loop BB20_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB20_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB20_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB20_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_163
.LBB20_162:                             # %if.else622
                                        #   in Loop: Header=BB20_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_163:                             # %if.end636
                                        #   in Loop: Header=BB20_159 Depth=2
	jmp	.LBB20_164
.LBB20_164:                             # %for.inc637
                                        #   in Loop: Header=BB20_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_159
.LBB20_165:                             # %for.end639
                                        #   in Loop: Header=BB20_157 Depth=1
	jmp	.LBB20_166
.LBB20_166:                             # %for.inc640
                                        #   in Loop: Header=BB20_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_157
.LBB20_167:                             # %for.end642
	cmpl	$2035969686, -28(%rbp)  # imm = 0x795A6E96
	jne	.LBB20_169
.LBB20_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_168
.Lfunc_end20:
	.size	init_contexts.13, .Lfunc_end20-init_contexts.13
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.14        # -- Begin function init_contexts.14
	.p2align	4, 0x90
	.type	init_contexts.14,@function
init_contexts.14:                       # @init_contexts.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$544184319, -28(%rbp)   # imm = 0x206F97FF
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB21_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB21_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_3:                               # %for.cond2
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB21_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB21_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB21_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB21_7
.LBB21_6:                               # %if.else
                                        #   in Loop: Header=BB21_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB21_7:                               # %if.end
                                        #   in Loop: Header=BB21_3 Depth=2
	jmp	.LBB21_8
.LBB21_8:                               # %for.inc
                                        #   in Loop: Header=BB21_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_3
.LBB21_9:                               # %for.end
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_10
.LBB21_10:                              # %for.inc28
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_1
.LBB21_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB21_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB21_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB21_12 Depth=1
	movl	$0, -4(%rbp)
.LBB21_14:                              # %for.cond34
                                        #   Parent Loop BB21_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB21_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB21_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB21_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB21_18
.LBB21_17:                              # %if.else52
                                        #   in Loop: Header=BB21_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB21_18:                              # %if.end66
                                        #   in Loop: Header=BB21_14 Depth=2
	jmp	.LBB21_19
.LBB21_19:                              # %for.inc67
                                        #   in Loop: Header=BB21_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_14
.LBB21_20:                              # %for.end69
                                        #   in Loop: Header=BB21_12 Depth=1
	jmp	.LBB21_21
.LBB21_21:                              # %for.inc70
                                        #   in Loop: Header=BB21_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_12
.LBB21_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB21_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB21_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB21_23 Depth=1
	movl	$0, -4(%rbp)
.LBB21_25:                              # %for.cond76
                                        #   Parent Loop BB21_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB21_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB21_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB21_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB21_29
.LBB21_28:                              # %if.else94
                                        #   in Loop: Header=BB21_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB21_29:                              # %if.end108
                                        #   in Loop: Header=BB21_25 Depth=2
	jmp	.LBB21_30
.LBB21_30:                              # %for.inc109
                                        #   in Loop: Header=BB21_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_25
.LBB21_31:                              # %for.end111
                                        #   in Loop: Header=BB21_23 Depth=1
	jmp	.LBB21_32
.LBB21_32:                              # %for.inc112
                                        #   in Loop: Header=BB21_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_23
.LBB21_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB21_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB21_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB21_34 Depth=1
	movl	$0, -4(%rbp)
.LBB21_36:                              # %for.cond118
                                        #   Parent Loop BB21_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB21_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB21_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB21_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB21_40
.LBB21_39:                              # %if.else136
                                        #   in Loop: Header=BB21_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB21_40:                              # %if.end150
                                        #   in Loop: Header=BB21_36 Depth=2
	jmp	.LBB21_41
.LBB21_41:                              # %for.inc151
                                        #   in Loop: Header=BB21_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_36
.LBB21_42:                              # %for.end153
                                        #   in Loop: Header=BB21_34 Depth=1
	jmp	.LBB21_43
.LBB21_43:                              # %for.inc154
                                        #   in Loop: Header=BB21_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_34
.LBB21_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB21_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB21_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB21_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB21_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB21_49
.LBB21_48:                              # %if.else172
                                        #   in Loop: Header=BB21_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB21_49:                              # %if.end183
                                        #   in Loop: Header=BB21_45 Depth=1
	jmp	.LBB21_50
.LBB21_50:                              # %for.inc184
                                        #   in Loop: Header=BB21_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_45
.LBB21_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB21_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB21_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB21_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB21_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB21_56
.LBB21_55:                              # %if.else202
                                        #   in Loop: Header=BB21_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB21_56:                              # %if.end213
                                        #   in Loop: Header=BB21_52 Depth=1
	jmp	.LBB21_57
.LBB21_57:                              # %for.inc214
                                        #   in Loop: Header=BB21_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_52
.LBB21_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB21_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB21_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB21_63
.LBB21_62:                              # %if.else232
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB21_63:                              # %if.end243
                                        #   in Loop: Header=BB21_59 Depth=1
	jmp	.LBB21_64
.LBB21_64:                              # %for.inc244
                                        #   in Loop: Header=BB21_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_59
.LBB21_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB21_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB21_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB21_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB21_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB21_70
.LBB21_69:                              # %if.else262
                                        #   in Loop: Header=BB21_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB21_70:                              # %if.end273
                                        #   in Loop: Header=BB21_66 Depth=1
	jmp	.LBB21_71
.LBB21_71:                              # %for.inc274
                                        #   in Loop: Header=BB21_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_66
.LBB21_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB21_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB21_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB21_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB21_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB21_77
.LBB21_76:                              # %if.else292
                                        #   in Loop: Header=BB21_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB21_77:                              # %if.end303
                                        #   in Loop: Header=BB21_73 Depth=1
	jmp	.LBB21_78
.LBB21_78:                              # %for.inc304
                                        #   in Loop: Header=BB21_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_73
.LBB21_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB21_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB21_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB21_80 Depth=1
	movl	$0, -4(%rbp)
.LBB21_82:                              # %for.cond310
                                        #   Parent Loop BB21_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB21_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB21_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB21_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB21_86
.LBB21_85:                              # %if.else328
                                        #   in Loop: Header=BB21_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB21_86:                              # %if.end342
                                        #   in Loop: Header=BB21_82 Depth=2
	jmp	.LBB21_87
.LBB21_87:                              # %for.inc343
                                        #   in Loop: Header=BB21_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_82
.LBB21_88:                              # %for.end345
                                        #   in Loop: Header=BB21_80 Depth=1
	jmp	.LBB21_89
.LBB21_89:                              # %for.inc346
                                        #   in Loop: Header=BB21_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_80
.LBB21_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB21_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB21_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB21_91 Depth=1
	movl	$0, -4(%rbp)
.LBB21_93:                              # %for.cond352
                                        #   Parent Loop BB21_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB21_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB21_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB21_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB21_97
.LBB21_96:                              # %if.else370
                                        #   in Loop: Header=BB21_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB21_97:                              # %if.end384
                                        #   in Loop: Header=BB21_93 Depth=2
	jmp	.LBB21_98
.LBB21_98:                              # %for.inc385
                                        #   in Loop: Header=BB21_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_93
.LBB21_99:                              # %for.end387
                                        #   in Loop: Header=BB21_91 Depth=1
	jmp	.LBB21_100
.LBB21_100:                             # %for.inc388
                                        #   in Loop: Header=BB21_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_91
.LBB21_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB21_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB21_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB21_102 Depth=1
	movl	$0, -4(%rbp)
.LBB21_104:                             # %for.cond394
                                        #   Parent Loop BB21_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB21_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB21_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB21_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB21_108
.LBB21_107:                             # %if.else412
                                        #   in Loop: Header=BB21_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB21_108:                             # %if.end426
                                        #   in Loop: Header=BB21_104 Depth=2
	jmp	.LBB21_109
.LBB21_109:                             # %for.inc427
                                        #   in Loop: Header=BB21_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_104
.LBB21_110:                             # %for.end429
                                        #   in Loop: Header=BB21_102 Depth=1
	jmp	.LBB21_111
.LBB21_111:                             # %for.inc430
                                        #   in Loop: Header=BB21_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_102
.LBB21_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB21_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB21_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB21_113 Depth=1
	movl	$0, -4(%rbp)
.LBB21_115:                             # %for.cond436
                                        #   Parent Loop BB21_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB21_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB21_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB21_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB21_119
.LBB21_118:                             # %if.else454
                                        #   in Loop: Header=BB21_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB21_119:                             # %if.end468
                                        #   in Loop: Header=BB21_115 Depth=2
	jmp	.LBB21_120
.LBB21_120:                             # %for.inc469
                                        #   in Loop: Header=BB21_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_115
.LBB21_121:                             # %for.end471
                                        #   in Loop: Header=BB21_113 Depth=1
	jmp	.LBB21_122
.LBB21_122:                             # %for.inc472
                                        #   in Loop: Header=BB21_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_113
.LBB21_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB21_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB21_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB21_124 Depth=1
	movl	$0, -4(%rbp)
.LBB21_126:                             # %for.cond478
                                        #   Parent Loop BB21_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB21_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB21_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB21_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB21_130
.LBB21_129:                             # %if.else496
                                        #   in Loop: Header=BB21_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB21_130:                             # %if.end510
                                        #   in Loop: Header=BB21_126 Depth=2
	jmp	.LBB21_131
.LBB21_131:                             # %for.inc511
                                        #   in Loop: Header=BB21_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_126
.LBB21_132:                             # %for.end513
                                        #   in Loop: Header=BB21_124 Depth=1
	jmp	.LBB21_133
.LBB21_133:                             # %for.inc514
                                        #   in Loop: Header=BB21_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_124
.LBB21_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB21_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB21_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	$0, -4(%rbp)
.LBB21_137:                             # %for.cond520
                                        #   Parent Loop BB21_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB21_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB21_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB21_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB21_141
.LBB21_140:                             # %if.else538
                                        #   in Loop: Header=BB21_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB21_141:                             # %if.end552
                                        #   in Loop: Header=BB21_137 Depth=2
	jmp	.LBB21_142
.LBB21_142:                             # %for.inc553
                                        #   in Loop: Header=BB21_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_137
.LBB21_143:                             # %for.end555
                                        #   in Loop: Header=BB21_135 Depth=1
	jmp	.LBB21_144
.LBB21_144:                             # %for.inc556
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_135
.LBB21_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB21_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB21_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB21_146 Depth=1
	movl	$0, -4(%rbp)
.LBB21_148:                             # %for.cond562
                                        #   Parent Loop BB21_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB21_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB21_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB21_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB21_152
.LBB21_151:                             # %if.else580
                                        #   in Loop: Header=BB21_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB21_152:                             # %if.end594
                                        #   in Loop: Header=BB21_148 Depth=2
	jmp	.LBB21_153
.LBB21_153:                             # %for.inc595
                                        #   in Loop: Header=BB21_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_148
.LBB21_154:                             # %for.end597
                                        #   in Loop: Header=BB21_146 Depth=1
	jmp	.LBB21_155
.LBB21_155:                             # %for.inc598
                                        #   in Loop: Header=BB21_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_146
.LBB21_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB21_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB21_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB21_157 Depth=1
	movl	$0, -4(%rbp)
.LBB21_159:                             # %for.cond604
                                        #   Parent Loop BB21_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB21_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB21_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB21_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB21_163
.LBB21_162:                             # %if.else622
                                        #   in Loop: Header=BB21_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB21_163:                             # %if.end636
                                        #   in Loop: Header=BB21_159 Depth=2
	jmp	.LBB21_164
.LBB21_164:                             # %for.inc637
                                        #   in Loop: Header=BB21_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_159
.LBB21_165:                             # %for.end639
                                        #   in Loop: Header=BB21_157 Depth=1
	jmp	.LBB21_166
.LBB21_166:                             # %for.inc640
                                        #   in Loop: Header=BB21_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_157
.LBB21_167:                             # %for.end642
	cmpl	$544184319, -28(%rbp)   # imm = 0x206F97FF
	jne	.LBB21_169
.LBB21_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_168
.Lfunc_end21:
	.size	init_contexts.14, .Lfunc_end21-init_contexts.14
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.15
.LCPI22_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.15
	.p2align	4, 0x90
	.type	GetCtxModelNumber.15,@function
GetCtxModelNumber.15:                   # @GetCtxModelNumber.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI22_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1051508216, -48(%rbp)  # imm = 0x3EACBDF8
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB22_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_3 Depth 2
                                        #       Child Loop BB22_5 Depth 3
                                        #     Child Loop BB22_14 Depth 2
                                        #       Child Loop BB22_16 Depth 3
                                        #     Child Loop BB22_25 Depth 2
                                        #       Child Loop BB22_27 Depth 3
                                        #     Child Loop BB22_36 Depth 2
                                        #       Child Loop BB22_38 Depth 3
                                        #     Child Loop BB22_47 Depth 2
                                        #     Child Loop BB22_54 Depth 2
                                        #     Child Loop BB22_61 Depth 2
                                        #     Child Loop BB22_68 Depth 2
                                        #     Child Loop BB22_75 Depth 2
                                        #     Child Loop BB22_82 Depth 2
                                        #       Child Loop BB22_84 Depth 3
                                        #     Child Loop BB22_93 Depth 2
                                        #       Child Loop BB22_95 Depth 3
                                        #     Child Loop BB22_104 Depth 2
                                        #       Child Loop BB22_106 Depth 3
                                        #     Child Loop BB22_115 Depth 2
                                        #       Child Loop BB22_117 Depth 3
                                        #     Child Loop BB22_126 Depth 2
                                        #       Child Loop BB22_128 Depth 3
                                        #     Child Loop BB22_137 Depth 2
                                        #       Child Loop BB22_139 Depth 3
                                        #     Child Loop BB22_148 Depth 2
                                        #       Child Loop BB22_150 Depth 3
                                        #     Child Loop BB22_159 Depth 2
                                        #       Child Loop BB22_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB22_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB22_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB22_3:                               # %for.cond2
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB22_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	$0, -4(%rbp)
.LBB22_5:                               # %for.cond5
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB22_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB22_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB22_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_9
.LBB22_8:                               # %if.else
                                        #   in Loop: Header=BB22_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_9:                               # %if.end
                                        #   in Loop: Header=BB22_5 Depth=3
	jmp	.LBB22_10
.LBB22_10:                              # %for.inc
                                        #   in Loop: Header=BB22_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_5
.LBB22_11:                              # %for.end
                                        #   in Loop: Header=BB22_3 Depth=2
	jmp	.LBB22_12
.LBB22_12:                              # %for.inc33
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_3
.LBB22_13:                              # %for.end35
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_14:                              # %for.cond36
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB22_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB22_14 Depth=2
	movl	$0, -4(%rbp)
.LBB22_16:                              # %for.cond39
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB22_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB22_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB22_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_20
.LBB22_19:                              # %if.else58
                                        #   in Loop: Header=BB22_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_20:                              # %if.end73
                                        #   in Loop: Header=BB22_16 Depth=3
	jmp	.LBB22_21
.LBB22_21:                              # %for.inc74
                                        #   in Loop: Header=BB22_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_16
.LBB22_22:                              # %for.end76
                                        #   in Loop: Header=BB22_14 Depth=2
	jmp	.LBB22_23
.LBB22_23:                              # %for.inc77
                                        #   in Loop: Header=BB22_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_14
.LBB22_24:                              # %for.end79
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_25:                              # %for.cond80
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB22_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB22_25 Depth=2
	movl	$0, -4(%rbp)
.LBB22_27:                              # %for.cond83
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB22_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB22_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB22_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_31
.LBB22_30:                              # %if.else102
                                        #   in Loop: Header=BB22_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_31:                              # %if.end117
                                        #   in Loop: Header=BB22_27 Depth=3
	jmp	.LBB22_32
.LBB22_32:                              # %for.inc118
                                        #   in Loop: Header=BB22_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_27
.LBB22_33:                              # %for.end120
                                        #   in Loop: Header=BB22_25 Depth=2
	jmp	.LBB22_34
.LBB22_34:                              # %for.inc121
                                        #   in Loop: Header=BB22_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_25
.LBB22_35:                              # %for.end123
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_36:                              # %for.cond124
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB22_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB22_36 Depth=2
	movl	$0, -4(%rbp)
.LBB22_38:                              # %for.cond127
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB22_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB22_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB22_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_42
.LBB22_41:                              # %if.else146
                                        #   in Loop: Header=BB22_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_42:                              # %if.end161
                                        #   in Loop: Header=BB22_38 Depth=3
	jmp	.LBB22_43
.LBB22_43:                              # %for.inc162
                                        #   in Loop: Header=BB22_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_38
.LBB22_44:                              # %for.end164
                                        #   in Loop: Header=BB22_36 Depth=2
	jmp	.LBB22_45
.LBB22_45:                              # %for.inc165
                                        #   in Loop: Header=BB22_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_36
.LBB22_46:                              # %for.end167
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -4(%rbp)
.LBB22_47:                              # %for.cond168
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB22_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB22_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB22_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_51
.LBB22_50:                              # %if.else184
                                        #   in Loop: Header=BB22_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_51:                              # %if.end196
                                        #   in Loop: Header=BB22_47 Depth=2
	jmp	.LBB22_52
.LBB22_52:                              # %for.inc197
                                        #   in Loop: Header=BB22_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_47
.LBB22_53:                              # %for.end199
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -4(%rbp)
.LBB22_54:                              # %for.cond200
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB22_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB22_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB22_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_58
.LBB22_57:                              # %if.else216
                                        #   in Loop: Header=BB22_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_58:                              # %if.end228
                                        #   in Loop: Header=BB22_54 Depth=2
	jmp	.LBB22_59
.LBB22_59:                              # %for.inc229
                                        #   in Loop: Header=BB22_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_54
.LBB22_60:                              # %for.end231
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -4(%rbp)
.LBB22_61:                              # %for.cond232
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB22_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB22_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB22_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_65
.LBB22_64:                              # %if.else248
                                        #   in Loop: Header=BB22_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_65:                              # %if.end260
                                        #   in Loop: Header=BB22_61 Depth=2
	jmp	.LBB22_66
.LBB22_66:                              # %for.inc261
                                        #   in Loop: Header=BB22_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_61
.LBB22_67:                              # %for.end263
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -4(%rbp)
.LBB22_68:                              # %for.cond264
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB22_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB22_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB22_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_72
.LBB22_71:                              # %if.else280
                                        #   in Loop: Header=BB22_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_72:                              # %if.end292
                                        #   in Loop: Header=BB22_68 Depth=2
	jmp	.LBB22_73
.LBB22_73:                              # %for.inc293
                                        #   in Loop: Header=BB22_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_68
.LBB22_74:                              # %for.end295
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -4(%rbp)
.LBB22_75:                              # %for.cond296
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB22_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB22_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB22_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_79
.LBB22_78:                              # %if.else312
                                        #   in Loop: Header=BB22_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_79:                              # %if.end324
                                        #   in Loop: Header=BB22_75 Depth=2
	jmp	.LBB22_80
.LBB22_80:                              # %for.inc325
                                        #   in Loop: Header=BB22_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_75
.LBB22_81:                              # %for.end327
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_82:                              # %for.cond328
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB22_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB22_82 Depth=2
	movl	$0, -4(%rbp)
.LBB22_84:                              # %for.cond331
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB22_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB22_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB22_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_88
.LBB22_87:                              # %if.else350
                                        #   in Loop: Header=BB22_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_88:                              # %if.end365
                                        #   in Loop: Header=BB22_84 Depth=3
	jmp	.LBB22_89
.LBB22_89:                              # %for.inc366
                                        #   in Loop: Header=BB22_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_84
.LBB22_90:                              # %for.end368
                                        #   in Loop: Header=BB22_82 Depth=2
	jmp	.LBB22_91
.LBB22_91:                              # %for.inc369
                                        #   in Loop: Header=BB22_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_82
.LBB22_92:                              # %for.end371
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_93:                              # %for.cond372
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB22_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB22_93 Depth=2
	movl	$0, -4(%rbp)
.LBB22_95:                              # %for.cond375
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB22_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB22_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB22_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_99
.LBB22_98:                              # %if.else394
                                        #   in Loop: Header=BB22_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_99:                              # %if.end409
                                        #   in Loop: Header=BB22_95 Depth=3
	jmp	.LBB22_100
.LBB22_100:                             # %for.inc410
                                        #   in Loop: Header=BB22_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_95
.LBB22_101:                             # %for.end412
                                        #   in Loop: Header=BB22_93 Depth=2
	jmp	.LBB22_102
.LBB22_102:                             # %for.inc413
                                        #   in Loop: Header=BB22_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_93
.LBB22_103:                             # %for.end415
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_104:                             # %for.cond416
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB22_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB22_104 Depth=2
	movl	$0, -4(%rbp)
.LBB22_106:                             # %for.cond419
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB22_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB22_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB22_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_110
.LBB22_109:                             # %if.else438
                                        #   in Loop: Header=BB22_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_110:                             # %if.end453
                                        #   in Loop: Header=BB22_106 Depth=3
	jmp	.LBB22_111
.LBB22_111:                             # %for.inc454
                                        #   in Loop: Header=BB22_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_106
.LBB22_112:                             # %for.end456
                                        #   in Loop: Header=BB22_104 Depth=2
	jmp	.LBB22_113
.LBB22_113:                             # %for.inc457
                                        #   in Loop: Header=BB22_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_104
.LBB22_114:                             # %for.end459
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_115:                             # %for.cond460
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB22_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB22_115 Depth=2
	movl	$0, -4(%rbp)
.LBB22_117:                             # %for.cond463
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB22_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB22_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB22_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_121
.LBB22_120:                             # %if.else482
                                        #   in Loop: Header=BB22_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_121:                             # %if.end497
                                        #   in Loop: Header=BB22_117 Depth=3
	jmp	.LBB22_122
.LBB22_122:                             # %for.inc498
                                        #   in Loop: Header=BB22_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_117
.LBB22_123:                             # %for.end500
                                        #   in Loop: Header=BB22_115 Depth=2
	jmp	.LBB22_124
.LBB22_124:                             # %for.inc501
                                        #   in Loop: Header=BB22_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_115
.LBB22_125:                             # %for.end503
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_126:                             # %for.cond504
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB22_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB22_126 Depth=2
	movl	$0, -4(%rbp)
.LBB22_128:                             # %for.cond507
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB22_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB22_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB22_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_132
.LBB22_131:                             # %if.else526
                                        #   in Loop: Header=BB22_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_132:                             # %if.end541
                                        #   in Loop: Header=BB22_128 Depth=3
	jmp	.LBB22_133
.LBB22_133:                             # %for.inc542
                                        #   in Loop: Header=BB22_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_128
.LBB22_134:                             # %for.end544
                                        #   in Loop: Header=BB22_126 Depth=2
	jmp	.LBB22_135
.LBB22_135:                             # %for.inc545
                                        #   in Loop: Header=BB22_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_126
.LBB22_136:                             # %for.end547
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_137:                             # %for.cond548
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB22_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB22_137 Depth=2
	movl	$0, -4(%rbp)
.LBB22_139:                             # %for.cond551
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB22_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB22_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB22_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_143
.LBB22_142:                             # %if.else570
                                        #   in Loop: Header=BB22_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_143:                             # %if.end585
                                        #   in Loop: Header=BB22_139 Depth=3
	jmp	.LBB22_144
.LBB22_144:                             # %for.inc586
                                        #   in Loop: Header=BB22_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_139
.LBB22_145:                             # %for.end588
                                        #   in Loop: Header=BB22_137 Depth=2
	jmp	.LBB22_146
.LBB22_146:                             # %for.inc589
                                        #   in Loop: Header=BB22_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_137
.LBB22_147:                             # %for.end591
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_148:                             # %for.cond592
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB22_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB22_148 Depth=2
	movl	$0, -4(%rbp)
.LBB22_150:                             # %for.cond595
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB22_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB22_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB22_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_154
.LBB22_153:                             # %if.else614
                                        #   in Loop: Header=BB22_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_154:                             # %if.end629
                                        #   in Loop: Header=BB22_150 Depth=3
	jmp	.LBB22_155
.LBB22_155:                             # %for.inc630
                                        #   in Loop: Header=BB22_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_150
.LBB22_156:                             # %for.end632
                                        #   in Loop: Header=BB22_148 Depth=2
	jmp	.LBB22_157
.LBB22_157:                             # %for.inc633
                                        #   in Loop: Header=BB22_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_148
.LBB22_158:                             # %for.end635
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_159:                             # %for.cond636
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB22_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB22_159 Depth=2
	movl	$0, -4(%rbp)
.LBB22_161:                             # %for.cond639
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB22_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB22_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB22_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_165
.LBB22_164:                             # %if.else658
                                        #   in Loop: Header=BB22_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_165:                             # %if.end673
                                        #   in Loop: Header=BB22_161 Depth=3
	jmp	.LBB22_166
.LBB22_166:                             # %for.inc674
                                        #   in Loop: Header=BB22_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_161
.LBB22_167:                             # %for.end676
                                        #   in Loop: Header=BB22_159 Depth=2
	jmp	.LBB22_168
.LBB22_168:                             # %for.inc677
                                        #   in Loop: Header=BB22_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_159
.LBB22_169:                             # %for.end679
                                        #   in Loop: Header=BB22_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB22_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB22_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB22_171:                             # %if.end682
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_172
.LBB22_172:                             # %for.inc683
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_1
.LBB22_173:                             # %for.end685
	cmpl	$1051508216, -48(%rbp)  # imm = 0x3EACBDF8
	jne	.LBB22_175
.LBB22_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_174
.Lfunc_end22:
	.size	GetCtxModelNumber.15, .Lfunc_end22-GetCtxModelNumber.15
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.16        # -- Begin function init_contexts.16
	.p2align	4, 0x90
	.type	init_contexts.16,@function
init_contexts.16:                       # @init_contexts.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1019464784, -28(%rbp)  # imm = 0x3CC3CC50
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB23_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB23_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	$0, -4(%rbp)
.LBB23_3:                               # %for.cond2
                                        #   Parent Loop BB23_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB23_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB23_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB23_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_7
.LBB23_6:                               # %if.else
                                        #   in Loop: Header=BB23_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_7:                               # %if.end
                                        #   in Loop: Header=BB23_3 Depth=2
	jmp	.LBB23_8
.LBB23_8:                               # %for.inc
                                        #   in Loop: Header=BB23_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_3
.LBB23_9:                               # %for.end
                                        #   in Loop: Header=BB23_1 Depth=1
	jmp	.LBB23_10
.LBB23_10:                              # %for.inc28
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_1
.LBB23_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB23_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB23_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB23_12 Depth=1
	movl	$0, -4(%rbp)
.LBB23_14:                              # %for.cond34
                                        #   Parent Loop BB23_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB23_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB23_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB23_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_18
.LBB23_17:                              # %if.else52
                                        #   in Loop: Header=BB23_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_18:                              # %if.end66
                                        #   in Loop: Header=BB23_14 Depth=2
	jmp	.LBB23_19
.LBB23_19:                              # %for.inc67
                                        #   in Loop: Header=BB23_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_14
.LBB23_20:                              # %for.end69
                                        #   in Loop: Header=BB23_12 Depth=1
	jmp	.LBB23_21
.LBB23_21:                              # %for.inc70
                                        #   in Loop: Header=BB23_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_12
.LBB23_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB23_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB23_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB23_23 Depth=1
	movl	$0, -4(%rbp)
.LBB23_25:                              # %for.cond76
                                        #   Parent Loop BB23_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB23_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB23_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB23_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_29
.LBB23_28:                              # %if.else94
                                        #   in Loop: Header=BB23_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_29:                              # %if.end108
                                        #   in Loop: Header=BB23_25 Depth=2
	jmp	.LBB23_30
.LBB23_30:                              # %for.inc109
                                        #   in Loop: Header=BB23_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_25
.LBB23_31:                              # %for.end111
                                        #   in Loop: Header=BB23_23 Depth=1
	jmp	.LBB23_32
.LBB23_32:                              # %for.inc112
                                        #   in Loop: Header=BB23_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_23
.LBB23_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB23_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB23_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB23_34 Depth=1
	movl	$0, -4(%rbp)
.LBB23_36:                              # %for.cond118
                                        #   Parent Loop BB23_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB23_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB23_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB23_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_40
.LBB23_39:                              # %if.else136
                                        #   in Loop: Header=BB23_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_40:                              # %if.end150
                                        #   in Loop: Header=BB23_36 Depth=2
	jmp	.LBB23_41
.LBB23_41:                              # %for.inc151
                                        #   in Loop: Header=BB23_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_36
.LBB23_42:                              # %for.end153
                                        #   in Loop: Header=BB23_34 Depth=1
	jmp	.LBB23_43
.LBB23_43:                              # %for.inc154
                                        #   in Loop: Header=BB23_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_34
.LBB23_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB23_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB23_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB23_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB23_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_49
.LBB23_48:                              # %if.else172
                                        #   in Loop: Header=BB23_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_49:                              # %if.end183
                                        #   in Loop: Header=BB23_45 Depth=1
	jmp	.LBB23_50
.LBB23_50:                              # %for.inc184
                                        #   in Loop: Header=BB23_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_45
.LBB23_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB23_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB23_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB23_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB23_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_56
.LBB23_55:                              # %if.else202
                                        #   in Loop: Header=BB23_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_56:                              # %if.end213
                                        #   in Loop: Header=BB23_52 Depth=1
	jmp	.LBB23_57
.LBB23_57:                              # %for.inc214
                                        #   in Loop: Header=BB23_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_52
.LBB23_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB23_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB23_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB23_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB23_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_63
.LBB23_62:                              # %if.else232
                                        #   in Loop: Header=BB23_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_63:                              # %if.end243
                                        #   in Loop: Header=BB23_59 Depth=1
	jmp	.LBB23_64
.LBB23_64:                              # %for.inc244
                                        #   in Loop: Header=BB23_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_59
.LBB23_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB23_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB23_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB23_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB23_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_70
.LBB23_69:                              # %if.else262
                                        #   in Loop: Header=BB23_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_70:                              # %if.end273
                                        #   in Loop: Header=BB23_66 Depth=1
	jmp	.LBB23_71
.LBB23_71:                              # %for.inc274
                                        #   in Loop: Header=BB23_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_66
.LBB23_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB23_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB23_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB23_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB23_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_77
.LBB23_76:                              # %if.else292
                                        #   in Loop: Header=BB23_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_77:                              # %if.end303
                                        #   in Loop: Header=BB23_73 Depth=1
	jmp	.LBB23_78
.LBB23_78:                              # %for.inc304
                                        #   in Loop: Header=BB23_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_73
.LBB23_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB23_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB23_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB23_80 Depth=1
	movl	$0, -4(%rbp)
.LBB23_82:                              # %for.cond310
                                        #   Parent Loop BB23_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB23_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB23_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB23_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_86
.LBB23_85:                              # %if.else328
                                        #   in Loop: Header=BB23_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_86:                              # %if.end342
                                        #   in Loop: Header=BB23_82 Depth=2
	jmp	.LBB23_87
.LBB23_87:                              # %for.inc343
                                        #   in Loop: Header=BB23_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_82
.LBB23_88:                              # %for.end345
                                        #   in Loop: Header=BB23_80 Depth=1
	jmp	.LBB23_89
.LBB23_89:                              # %for.inc346
                                        #   in Loop: Header=BB23_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_80
.LBB23_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB23_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB23_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB23_91 Depth=1
	movl	$0, -4(%rbp)
.LBB23_93:                              # %for.cond352
                                        #   Parent Loop BB23_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB23_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB23_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB23_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_97
.LBB23_96:                              # %if.else370
                                        #   in Loop: Header=BB23_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_97:                              # %if.end384
                                        #   in Loop: Header=BB23_93 Depth=2
	jmp	.LBB23_98
.LBB23_98:                              # %for.inc385
                                        #   in Loop: Header=BB23_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_93
.LBB23_99:                              # %for.end387
                                        #   in Loop: Header=BB23_91 Depth=1
	jmp	.LBB23_100
.LBB23_100:                             # %for.inc388
                                        #   in Loop: Header=BB23_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_91
.LBB23_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB23_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB23_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB23_102 Depth=1
	movl	$0, -4(%rbp)
.LBB23_104:                             # %for.cond394
                                        #   Parent Loop BB23_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB23_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB23_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB23_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_108
.LBB23_107:                             # %if.else412
                                        #   in Loop: Header=BB23_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_108:                             # %if.end426
                                        #   in Loop: Header=BB23_104 Depth=2
	jmp	.LBB23_109
.LBB23_109:                             # %for.inc427
                                        #   in Loop: Header=BB23_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_104
.LBB23_110:                             # %for.end429
                                        #   in Loop: Header=BB23_102 Depth=1
	jmp	.LBB23_111
.LBB23_111:                             # %for.inc430
                                        #   in Loop: Header=BB23_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_102
.LBB23_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB23_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB23_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB23_113 Depth=1
	movl	$0, -4(%rbp)
.LBB23_115:                             # %for.cond436
                                        #   Parent Loop BB23_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB23_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB23_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB23_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_119
.LBB23_118:                             # %if.else454
                                        #   in Loop: Header=BB23_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_119:                             # %if.end468
                                        #   in Loop: Header=BB23_115 Depth=2
	jmp	.LBB23_120
.LBB23_120:                             # %for.inc469
                                        #   in Loop: Header=BB23_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_115
.LBB23_121:                             # %for.end471
                                        #   in Loop: Header=BB23_113 Depth=1
	jmp	.LBB23_122
.LBB23_122:                             # %for.inc472
                                        #   in Loop: Header=BB23_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_113
.LBB23_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB23_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB23_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB23_124 Depth=1
	movl	$0, -4(%rbp)
.LBB23_126:                             # %for.cond478
                                        #   Parent Loop BB23_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB23_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB23_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB23_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_130
.LBB23_129:                             # %if.else496
                                        #   in Loop: Header=BB23_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_130:                             # %if.end510
                                        #   in Loop: Header=BB23_126 Depth=2
	jmp	.LBB23_131
.LBB23_131:                             # %for.inc511
                                        #   in Loop: Header=BB23_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_126
.LBB23_132:                             # %for.end513
                                        #   in Loop: Header=BB23_124 Depth=1
	jmp	.LBB23_133
.LBB23_133:                             # %for.inc514
                                        #   in Loop: Header=BB23_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_124
.LBB23_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB23_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB23_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB23_135 Depth=1
	movl	$0, -4(%rbp)
.LBB23_137:                             # %for.cond520
                                        #   Parent Loop BB23_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB23_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB23_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB23_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_141
.LBB23_140:                             # %if.else538
                                        #   in Loop: Header=BB23_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_141:                             # %if.end552
                                        #   in Loop: Header=BB23_137 Depth=2
	jmp	.LBB23_142
.LBB23_142:                             # %for.inc553
                                        #   in Loop: Header=BB23_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_137
.LBB23_143:                             # %for.end555
                                        #   in Loop: Header=BB23_135 Depth=1
	jmp	.LBB23_144
.LBB23_144:                             # %for.inc556
                                        #   in Loop: Header=BB23_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_135
.LBB23_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB23_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB23_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB23_146 Depth=1
	movl	$0, -4(%rbp)
.LBB23_148:                             # %for.cond562
                                        #   Parent Loop BB23_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB23_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB23_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB23_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_152
.LBB23_151:                             # %if.else580
                                        #   in Loop: Header=BB23_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_152:                             # %if.end594
                                        #   in Loop: Header=BB23_148 Depth=2
	jmp	.LBB23_153
.LBB23_153:                             # %for.inc595
                                        #   in Loop: Header=BB23_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_148
.LBB23_154:                             # %for.end597
                                        #   in Loop: Header=BB23_146 Depth=1
	jmp	.LBB23_155
.LBB23_155:                             # %for.inc598
                                        #   in Loop: Header=BB23_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_146
.LBB23_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB23_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB23_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB23_157 Depth=1
	movl	$0, -4(%rbp)
.LBB23_159:                             # %for.cond604
                                        #   Parent Loop BB23_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB23_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB23_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB23_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_163
.LBB23_162:                             # %if.else622
                                        #   in Loop: Header=BB23_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_163:                             # %if.end636
                                        #   in Loop: Header=BB23_159 Depth=2
	jmp	.LBB23_164
.LBB23_164:                             # %for.inc637
                                        #   in Loop: Header=BB23_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_159
.LBB23_165:                             # %for.end639
                                        #   in Loop: Header=BB23_157 Depth=1
	jmp	.LBB23_166
.LBB23_166:                             # %for.inc640
                                        #   in Loop: Header=BB23_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_157
.LBB23_167:                             # %for.end642
	cmpl	$1019464784, -28(%rbp)  # imm = 0x3CC3CC50
	jne	.LBB23_169
.LBB23_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_168
.Lfunc_end23:
	.size	init_contexts.16, .Lfunc_end23-init_contexts.16
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.17
.LCPI24_0:
	.quad	4607182418800017408     # double 1
.LCPI24_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI24_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI24_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.17
	.p2align	4, 0x90
	.type	XRate.17,@function
XRate.17:                               # @XRate.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1774764524, -36(%rbp)  # imm = 0x69C8C1EC
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB24_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB24_3
.LBB24_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB24_3:                               # %cond.end
	vmovsd	.LCPI24_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI24_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI24_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI24_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB24_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI24_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB24_6
.LBB24_5:                               # %cond.false6
	vmovsd	.LCPI24_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI24_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI24_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB24_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB24_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB24_9
.LBB24_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB24_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB24_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB24_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB24_13
.LBB24_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB24_13:                              # %cond.end26
	jmp	.LBB24_15
.LBB24_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB24_15
.LBB24_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB24_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB24_18
.LBB24_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB24_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1774764524, -36(%rbp)  # imm = 0x69C8C1EC
	jne	.LBB24_20
.LBB24_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB24_19
.Lfunc_end24:
	.size	XRate.17, .Lfunc_end24-XRate.17
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.18        # -- Begin function init_contexts.18
	.p2align	4, 0x90
	.type	init_contexts.18,@function
init_contexts.18:                       # @init_contexts.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1474159249, -28(%rbp)  # imm = 0x57DDE291
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB25_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB25_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB25_1 Depth=1
	movl	$0, -4(%rbp)
.LBB25_3:                               # %for.cond2
                                        #   Parent Loop BB25_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB25_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB25_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB25_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB25_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB25_7
.LBB25_6:                               # %if.else
                                        #   in Loop: Header=BB25_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB25_7:                               # %if.end
                                        #   in Loop: Header=BB25_3 Depth=2
	jmp	.LBB25_8
.LBB25_8:                               # %for.inc
                                        #   in Loop: Header=BB25_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_3
.LBB25_9:                               # %for.end
                                        #   in Loop: Header=BB25_1 Depth=1
	jmp	.LBB25_10
.LBB25_10:                              # %for.inc28
                                        #   in Loop: Header=BB25_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_1
.LBB25_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB25_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB25_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB25_12 Depth=1
	movl	$0, -4(%rbp)
.LBB25_14:                              # %for.cond34
                                        #   Parent Loop BB25_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB25_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB25_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB25_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB25_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB25_18
.LBB25_17:                              # %if.else52
                                        #   in Loop: Header=BB25_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB25_18:                              # %if.end66
                                        #   in Loop: Header=BB25_14 Depth=2
	jmp	.LBB25_19
.LBB25_19:                              # %for.inc67
                                        #   in Loop: Header=BB25_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_14
.LBB25_20:                              # %for.end69
                                        #   in Loop: Header=BB25_12 Depth=1
	jmp	.LBB25_21
.LBB25_21:                              # %for.inc70
                                        #   in Loop: Header=BB25_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_12
.LBB25_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB25_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB25_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB25_23 Depth=1
	movl	$0, -4(%rbp)
.LBB25_25:                              # %for.cond76
                                        #   Parent Loop BB25_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB25_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB25_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB25_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB25_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB25_29
.LBB25_28:                              # %if.else94
                                        #   in Loop: Header=BB25_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB25_29:                              # %if.end108
                                        #   in Loop: Header=BB25_25 Depth=2
	jmp	.LBB25_30
.LBB25_30:                              # %for.inc109
                                        #   in Loop: Header=BB25_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_25
.LBB25_31:                              # %for.end111
                                        #   in Loop: Header=BB25_23 Depth=1
	jmp	.LBB25_32
.LBB25_32:                              # %for.inc112
                                        #   in Loop: Header=BB25_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_23
.LBB25_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB25_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB25_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB25_34 Depth=1
	movl	$0, -4(%rbp)
.LBB25_36:                              # %for.cond118
                                        #   Parent Loop BB25_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB25_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB25_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB25_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB25_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB25_40
.LBB25_39:                              # %if.else136
                                        #   in Loop: Header=BB25_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB25_40:                              # %if.end150
                                        #   in Loop: Header=BB25_36 Depth=2
	jmp	.LBB25_41
.LBB25_41:                              # %for.inc151
                                        #   in Loop: Header=BB25_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_36
.LBB25_42:                              # %for.end153
                                        #   in Loop: Header=BB25_34 Depth=1
	jmp	.LBB25_43
.LBB25_43:                              # %for.inc154
                                        #   in Loop: Header=BB25_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_34
.LBB25_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB25_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB25_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB25_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB25_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB25_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB25_49
.LBB25_48:                              # %if.else172
                                        #   in Loop: Header=BB25_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB25_49:                              # %if.end183
                                        #   in Loop: Header=BB25_45 Depth=1
	jmp	.LBB25_50
.LBB25_50:                              # %for.inc184
                                        #   in Loop: Header=BB25_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_45
.LBB25_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB25_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB25_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB25_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB25_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB25_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB25_56
.LBB25_55:                              # %if.else202
                                        #   in Loop: Header=BB25_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB25_56:                              # %if.end213
                                        #   in Loop: Header=BB25_52 Depth=1
	jmp	.LBB25_57
.LBB25_57:                              # %for.inc214
                                        #   in Loop: Header=BB25_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_52
.LBB25_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB25_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB25_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB25_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB25_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB25_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB25_63
.LBB25_62:                              # %if.else232
                                        #   in Loop: Header=BB25_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB25_63:                              # %if.end243
                                        #   in Loop: Header=BB25_59 Depth=1
	jmp	.LBB25_64
.LBB25_64:                              # %for.inc244
                                        #   in Loop: Header=BB25_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_59
.LBB25_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB25_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB25_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB25_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB25_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB25_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB25_70
.LBB25_69:                              # %if.else262
                                        #   in Loop: Header=BB25_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB25_70:                              # %if.end273
                                        #   in Loop: Header=BB25_66 Depth=1
	jmp	.LBB25_71
.LBB25_71:                              # %for.inc274
                                        #   in Loop: Header=BB25_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_66
.LBB25_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB25_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB25_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB25_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB25_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB25_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB25_77
.LBB25_76:                              # %if.else292
                                        #   in Loop: Header=BB25_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB25_77:                              # %if.end303
                                        #   in Loop: Header=BB25_73 Depth=1
	jmp	.LBB25_78
.LBB25_78:                              # %for.inc304
                                        #   in Loop: Header=BB25_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_73
.LBB25_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB25_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB25_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB25_80 Depth=1
	movl	$0, -4(%rbp)
.LBB25_82:                              # %for.cond310
                                        #   Parent Loop BB25_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB25_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB25_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB25_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB25_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB25_86
.LBB25_85:                              # %if.else328
                                        #   in Loop: Header=BB25_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB25_86:                              # %if.end342
                                        #   in Loop: Header=BB25_82 Depth=2
	jmp	.LBB25_87
.LBB25_87:                              # %for.inc343
                                        #   in Loop: Header=BB25_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_82
.LBB25_88:                              # %for.end345
                                        #   in Loop: Header=BB25_80 Depth=1
	jmp	.LBB25_89
.LBB25_89:                              # %for.inc346
                                        #   in Loop: Header=BB25_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_80
.LBB25_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB25_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB25_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB25_91 Depth=1
	movl	$0, -4(%rbp)
.LBB25_93:                              # %for.cond352
                                        #   Parent Loop BB25_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB25_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB25_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB25_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB25_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB25_97
.LBB25_96:                              # %if.else370
                                        #   in Loop: Header=BB25_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB25_97:                              # %if.end384
                                        #   in Loop: Header=BB25_93 Depth=2
	jmp	.LBB25_98
.LBB25_98:                              # %for.inc385
                                        #   in Loop: Header=BB25_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_93
.LBB25_99:                              # %for.end387
                                        #   in Loop: Header=BB25_91 Depth=1
	jmp	.LBB25_100
.LBB25_100:                             # %for.inc388
                                        #   in Loop: Header=BB25_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_91
.LBB25_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB25_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB25_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB25_102 Depth=1
	movl	$0, -4(%rbp)
.LBB25_104:                             # %for.cond394
                                        #   Parent Loop BB25_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB25_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB25_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB25_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB25_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB25_108
.LBB25_107:                             # %if.else412
                                        #   in Loop: Header=BB25_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB25_108:                             # %if.end426
                                        #   in Loop: Header=BB25_104 Depth=2
	jmp	.LBB25_109
.LBB25_109:                             # %for.inc427
                                        #   in Loop: Header=BB25_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_104
.LBB25_110:                             # %for.end429
                                        #   in Loop: Header=BB25_102 Depth=1
	jmp	.LBB25_111
.LBB25_111:                             # %for.inc430
                                        #   in Loop: Header=BB25_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_102
.LBB25_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB25_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB25_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB25_113 Depth=1
	movl	$0, -4(%rbp)
.LBB25_115:                             # %for.cond436
                                        #   Parent Loop BB25_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB25_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB25_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB25_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB25_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB25_119
.LBB25_118:                             # %if.else454
                                        #   in Loop: Header=BB25_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB25_119:                             # %if.end468
                                        #   in Loop: Header=BB25_115 Depth=2
	jmp	.LBB25_120
.LBB25_120:                             # %for.inc469
                                        #   in Loop: Header=BB25_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_115
.LBB25_121:                             # %for.end471
                                        #   in Loop: Header=BB25_113 Depth=1
	jmp	.LBB25_122
.LBB25_122:                             # %for.inc472
                                        #   in Loop: Header=BB25_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_113
.LBB25_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB25_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB25_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB25_124 Depth=1
	movl	$0, -4(%rbp)
.LBB25_126:                             # %for.cond478
                                        #   Parent Loop BB25_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB25_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB25_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB25_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB25_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB25_130
.LBB25_129:                             # %if.else496
                                        #   in Loop: Header=BB25_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB25_130:                             # %if.end510
                                        #   in Loop: Header=BB25_126 Depth=2
	jmp	.LBB25_131
.LBB25_131:                             # %for.inc511
                                        #   in Loop: Header=BB25_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_126
.LBB25_132:                             # %for.end513
                                        #   in Loop: Header=BB25_124 Depth=1
	jmp	.LBB25_133
.LBB25_133:                             # %for.inc514
                                        #   in Loop: Header=BB25_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_124
.LBB25_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB25_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB25_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB25_135 Depth=1
	movl	$0, -4(%rbp)
.LBB25_137:                             # %for.cond520
                                        #   Parent Loop BB25_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB25_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB25_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB25_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB25_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB25_141
.LBB25_140:                             # %if.else538
                                        #   in Loop: Header=BB25_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB25_141:                             # %if.end552
                                        #   in Loop: Header=BB25_137 Depth=2
	jmp	.LBB25_142
.LBB25_142:                             # %for.inc553
                                        #   in Loop: Header=BB25_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_137
.LBB25_143:                             # %for.end555
                                        #   in Loop: Header=BB25_135 Depth=1
	jmp	.LBB25_144
.LBB25_144:                             # %for.inc556
                                        #   in Loop: Header=BB25_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_135
.LBB25_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB25_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB25_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB25_146 Depth=1
	movl	$0, -4(%rbp)
.LBB25_148:                             # %for.cond562
                                        #   Parent Loop BB25_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB25_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB25_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB25_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB25_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB25_152
.LBB25_151:                             # %if.else580
                                        #   in Loop: Header=BB25_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB25_152:                             # %if.end594
                                        #   in Loop: Header=BB25_148 Depth=2
	jmp	.LBB25_153
.LBB25_153:                             # %for.inc595
                                        #   in Loop: Header=BB25_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_148
.LBB25_154:                             # %for.end597
                                        #   in Loop: Header=BB25_146 Depth=1
	jmp	.LBB25_155
.LBB25_155:                             # %for.inc598
                                        #   in Loop: Header=BB25_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_146
.LBB25_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB25_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB25_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB25_157 Depth=1
	movl	$0, -4(%rbp)
.LBB25_159:                             # %for.cond604
                                        #   Parent Loop BB25_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB25_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB25_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB25_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB25_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB25_163
.LBB25_162:                             # %if.else622
                                        #   in Loop: Header=BB25_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB25_163:                             # %if.end636
                                        #   in Loop: Header=BB25_159 Depth=2
	jmp	.LBB25_164
.LBB25_164:                             # %for.inc637
                                        #   in Loop: Header=BB25_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_159
.LBB25_165:                             # %for.end639
                                        #   in Loop: Header=BB25_157 Depth=1
	jmp	.LBB25_166
.LBB25_166:                             # %for.inc640
                                        #   in Loop: Header=BB25_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_157
.LBB25_167:                             # %for.end642
	cmpl	$1474159249, -28(%rbp)  # imm = 0x57DDE291
	jne	.LBB25_169
.LBB25_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_168
.Lfunc_end25:
	.size	init_contexts.18, .Lfunc_end25-init_contexts.18
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.19
.LCPI26_0:
	.quad	4607182418800017408     # double 1
.LCPI26_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI26_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI26_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.19
	.p2align	4, 0x90
	.type	XRate.19,@function
XRate.19:                               # @XRate.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1929030677, -36(%rbp)  # imm = 0x72FAAC15
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB26_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB26_3
.LBB26_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB26_3:                               # %cond.end
	vmovsd	.LCPI26_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI26_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI26_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI26_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB26_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI26_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB26_6
.LBB26_5:                               # %cond.false6
	vmovsd	.LCPI26_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI26_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI26_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB26_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB26_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB26_9
.LBB26_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB26_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB26_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB26_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB26_13
.LBB26_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB26_13:                              # %cond.end26
	jmp	.LBB26_15
.LBB26_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB26_15
.LBB26_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB26_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB26_18
.LBB26_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB26_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1929030677, -36(%rbp)  # imm = 0x72FAAC15
	jne	.LBB26_20
.LBB26_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB26_19
.Lfunc_end26:
	.size	XRate.19, .Lfunc_end26-XRate.19
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.20        # -- Begin function init_contexts.20
	.p2align	4, 0x90
	.type	init_contexts.20,@function
init_contexts.20:                       # @init_contexts.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$839960758, -28(%rbp)   # imm = 0x3210C8B6
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB27_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB27_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -4(%rbp)
.LBB27_3:                               # %for.cond2
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB27_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB27_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB27_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_7
.LBB27_6:                               # %if.else
                                        #   in Loop: Header=BB27_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_7:                               # %if.end
                                        #   in Loop: Header=BB27_3 Depth=2
	jmp	.LBB27_8
.LBB27_8:                               # %for.inc
                                        #   in Loop: Header=BB27_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_3
.LBB27_9:                               # %for.end
                                        #   in Loop: Header=BB27_1 Depth=1
	jmp	.LBB27_10
.LBB27_10:                              # %for.inc28
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_1
.LBB27_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB27_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB27_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB27_12 Depth=1
	movl	$0, -4(%rbp)
.LBB27_14:                              # %for.cond34
                                        #   Parent Loop BB27_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB27_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB27_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB27_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_18
.LBB27_17:                              # %if.else52
                                        #   in Loop: Header=BB27_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_18:                              # %if.end66
                                        #   in Loop: Header=BB27_14 Depth=2
	jmp	.LBB27_19
.LBB27_19:                              # %for.inc67
                                        #   in Loop: Header=BB27_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_14
.LBB27_20:                              # %for.end69
                                        #   in Loop: Header=BB27_12 Depth=1
	jmp	.LBB27_21
.LBB27_21:                              # %for.inc70
                                        #   in Loop: Header=BB27_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_12
.LBB27_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB27_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB27_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB27_23 Depth=1
	movl	$0, -4(%rbp)
.LBB27_25:                              # %for.cond76
                                        #   Parent Loop BB27_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB27_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB27_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB27_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_29
.LBB27_28:                              # %if.else94
                                        #   in Loop: Header=BB27_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_29:                              # %if.end108
                                        #   in Loop: Header=BB27_25 Depth=2
	jmp	.LBB27_30
.LBB27_30:                              # %for.inc109
                                        #   in Loop: Header=BB27_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_25
.LBB27_31:                              # %for.end111
                                        #   in Loop: Header=BB27_23 Depth=1
	jmp	.LBB27_32
.LBB27_32:                              # %for.inc112
                                        #   in Loop: Header=BB27_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_23
.LBB27_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB27_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB27_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB27_34 Depth=1
	movl	$0, -4(%rbp)
.LBB27_36:                              # %for.cond118
                                        #   Parent Loop BB27_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB27_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB27_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB27_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_40
.LBB27_39:                              # %if.else136
                                        #   in Loop: Header=BB27_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_40:                              # %if.end150
                                        #   in Loop: Header=BB27_36 Depth=2
	jmp	.LBB27_41
.LBB27_41:                              # %for.inc151
                                        #   in Loop: Header=BB27_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_36
.LBB27_42:                              # %for.end153
                                        #   in Loop: Header=BB27_34 Depth=1
	jmp	.LBB27_43
.LBB27_43:                              # %for.inc154
                                        #   in Loop: Header=BB27_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_34
.LBB27_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB27_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB27_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB27_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB27_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_49
.LBB27_48:                              # %if.else172
                                        #   in Loop: Header=BB27_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_49:                              # %if.end183
                                        #   in Loop: Header=BB27_45 Depth=1
	jmp	.LBB27_50
.LBB27_50:                              # %for.inc184
                                        #   in Loop: Header=BB27_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_45
.LBB27_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB27_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB27_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB27_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB27_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_56
.LBB27_55:                              # %if.else202
                                        #   in Loop: Header=BB27_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_56:                              # %if.end213
                                        #   in Loop: Header=BB27_52 Depth=1
	jmp	.LBB27_57
.LBB27_57:                              # %for.inc214
                                        #   in Loop: Header=BB27_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_52
.LBB27_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB27_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB27_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB27_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB27_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_63
.LBB27_62:                              # %if.else232
                                        #   in Loop: Header=BB27_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_63:                              # %if.end243
                                        #   in Loop: Header=BB27_59 Depth=1
	jmp	.LBB27_64
.LBB27_64:                              # %for.inc244
                                        #   in Loop: Header=BB27_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_59
.LBB27_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB27_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB27_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB27_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB27_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_70
.LBB27_69:                              # %if.else262
                                        #   in Loop: Header=BB27_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_70:                              # %if.end273
                                        #   in Loop: Header=BB27_66 Depth=1
	jmp	.LBB27_71
.LBB27_71:                              # %for.inc274
                                        #   in Loop: Header=BB27_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_66
.LBB27_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB27_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB27_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB27_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB27_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_77
.LBB27_76:                              # %if.else292
                                        #   in Loop: Header=BB27_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_77:                              # %if.end303
                                        #   in Loop: Header=BB27_73 Depth=1
	jmp	.LBB27_78
.LBB27_78:                              # %for.inc304
                                        #   in Loop: Header=BB27_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_73
.LBB27_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB27_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB27_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB27_80 Depth=1
	movl	$0, -4(%rbp)
.LBB27_82:                              # %for.cond310
                                        #   Parent Loop BB27_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB27_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB27_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB27_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_86
.LBB27_85:                              # %if.else328
                                        #   in Loop: Header=BB27_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_86:                              # %if.end342
                                        #   in Loop: Header=BB27_82 Depth=2
	jmp	.LBB27_87
.LBB27_87:                              # %for.inc343
                                        #   in Loop: Header=BB27_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_82
.LBB27_88:                              # %for.end345
                                        #   in Loop: Header=BB27_80 Depth=1
	jmp	.LBB27_89
.LBB27_89:                              # %for.inc346
                                        #   in Loop: Header=BB27_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_80
.LBB27_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB27_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB27_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB27_91 Depth=1
	movl	$0, -4(%rbp)
.LBB27_93:                              # %for.cond352
                                        #   Parent Loop BB27_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB27_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB27_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB27_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_97
.LBB27_96:                              # %if.else370
                                        #   in Loop: Header=BB27_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_97:                              # %if.end384
                                        #   in Loop: Header=BB27_93 Depth=2
	jmp	.LBB27_98
.LBB27_98:                              # %for.inc385
                                        #   in Loop: Header=BB27_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_93
.LBB27_99:                              # %for.end387
                                        #   in Loop: Header=BB27_91 Depth=1
	jmp	.LBB27_100
.LBB27_100:                             # %for.inc388
                                        #   in Loop: Header=BB27_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_91
.LBB27_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB27_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB27_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB27_102 Depth=1
	movl	$0, -4(%rbp)
.LBB27_104:                             # %for.cond394
                                        #   Parent Loop BB27_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB27_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB27_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB27_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_108
.LBB27_107:                             # %if.else412
                                        #   in Loop: Header=BB27_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_108:                             # %if.end426
                                        #   in Loop: Header=BB27_104 Depth=2
	jmp	.LBB27_109
.LBB27_109:                             # %for.inc427
                                        #   in Loop: Header=BB27_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_104
.LBB27_110:                             # %for.end429
                                        #   in Loop: Header=BB27_102 Depth=1
	jmp	.LBB27_111
.LBB27_111:                             # %for.inc430
                                        #   in Loop: Header=BB27_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_102
.LBB27_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB27_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB27_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB27_113 Depth=1
	movl	$0, -4(%rbp)
.LBB27_115:                             # %for.cond436
                                        #   Parent Loop BB27_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB27_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB27_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB27_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_119
.LBB27_118:                             # %if.else454
                                        #   in Loop: Header=BB27_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_119:                             # %if.end468
                                        #   in Loop: Header=BB27_115 Depth=2
	jmp	.LBB27_120
.LBB27_120:                             # %for.inc469
                                        #   in Loop: Header=BB27_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_115
.LBB27_121:                             # %for.end471
                                        #   in Loop: Header=BB27_113 Depth=1
	jmp	.LBB27_122
.LBB27_122:                             # %for.inc472
                                        #   in Loop: Header=BB27_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_113
.LBB27_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB27_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB27_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB27_124 Depth=1
	movl	$0, -4(%rbp)
.LBB27_126:                             # %for.cond478
                                        #   Parent Loop BB27_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB27_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB27_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB27_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_130
.LBB27_129:                             # %if.else496
                                        #   in Loop: Header=BB27_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_130:                             # %if.end510
                                        #   in Loop: Header=BB27_126 Depth=2
	jmp	.LBB27_131
.LBB27_131:                             # %for.inc511
                                        #   in Loop: Header=BB27_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_126
.LBB27_132:                             # %for.end513
                                        #   in Loop: Header=BB27_124 Depth=1
	jmp	.LBB27_133
.LBB27_133:                             # %for.inc514
                                        #   in Loop: Header=BB27_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_124
.LBB27_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB27_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB27_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB27_135 Depth=1
	movl	$0, -4(%rbp)
.LBB27_137:                             # %for.cond520
                                        #   Parent Loop BB27_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB27_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB27_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB27_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_141
.LBB27_140:                             # %if.else538
                                        #   in Loop: Header=BB27_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_141:                             # %if.end552
                                        #   in Loop: Header=BB27_137 Depth=2
	jmp	.LBB27_142
.LBB27_142:                             # %for.inc553
                                        #   in Loop: Header=BB27_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_137
.LBB27_143:                             # %for.end555
                                        #   in Loop: Header=BB27_135 Depth=1
	jmp	.LBB27_144
.LBB27_144:                             # %for.inc556
                                        #   in Loop: Header=BB27_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_135
.LBB27_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB27_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB27_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB27_146 Depth=1
	movl	$0, -4(%rbp)
.LBB27_148:                             # %for.cond562
                                        #   Parent Loop BB27_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB27_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB27_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB27_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_152
.LBB27_151:                             # %if.else580
                                        #   in Loop: Header=BB27_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_152:                             # %if.end594
                                        #   in Loop: Header=BB27_148 Depth=2
	jmp	.LBB27_153
.LBB27_153:                             # %for.inc595
                                        #   in Loop: Header=BB27_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_148
.LBB27_154:                             # %for.end597
                                        #   in Loop: Header=BB27_146 Depth=1
	jmp	.LBB27_155
.LBB27_155:                             # %for.inc598
                                        #   in Loop: Header=BB27_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_146
.LBB27_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB27_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB27_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB27_157 Depth=1
	movl	$0, -4(%rbp)
.LBB27_159:                             # %for.cond604
                                        #   Parent Loop BB27_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB27_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB27_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB27_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_163
.LBB27_162:                             # %if.else622
                                        #   in Loop: Header=BB27_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_163:                             # %if.end636
                                        #   in Loop: Header=BB27_159 Depth=2
	jmp	.LBB27_164
.LBB27_164:                             # %for.inc637
                                        #   in Loop: Header=BB27_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_159
.LBB27_165:                             # %for.end639
                                        #   in Loop: Header=BB27_157 Depth=1
	jmp	.LBB27_166
.LBB27_166:                             # %for.inc640
                                        #   in Loop: Header=BB27_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_157
.LBB27_167:                             # %for.end642
	cmpl	$839960758, -28(%rbp)   # imm = 0x3210C8B6
	jne	.LBB27_169
.LBB27_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_168
.Lfunc_end27:
	.size	init_contexts.20, .Lfunc_end27-init_contexts.20
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.21    # -- Begin function SetCtxModelNumber.21
	.p2align	4, 0x90
	.type	SetCtxModelNumber.21,@function
SetCtxModelNumber.21:                   # @SetCtxModelNumber.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$828690729, -16(%rbp)   # imm = 0x3164D129
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB28_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB28_11
.LBB28_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB28_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB28_11
.LBB28_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB28_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB28_11
.LBB28_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB28_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB28_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB28_10
.LBB28_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB28_10:                              # %if.end38
	jmp	.LBB28_11
.LBB28_11:                              # %if.end39
	cmpl	$828690729, -16(%rbp)   # imm = 0x3164D129
	jne	.LBB28_13
.LBB28_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_12
.Lfunc_end28:
	.size	SetCtxModelNumber.21, .Lfunc_end28-SetCtxModelNumber.21
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.22        # -- Begin function init_contexts.22
	.p2align	4, 0x90
	.type	init_contexts.22,@function
init_contexts.22:                       # @init_contexts.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$778332494, -28(%rbp)   # imm = 0x2E64694E
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB29_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB29_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -4(%rbp)
.LBB29_3:                               # %for.cond2
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB29_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB29_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB29_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_7
.LBB29_6:                               # %if.else
                                        #   in Loop: Header=BB29_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_7:                               # %if.end
                                        #   in Loop: Header=BB29_3 Depth=2
	jmp	.LBB29_8
.LBB29_8:                               # %for.inc
                                        #   in Loop: Header=BB29_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_3
.LBB29_9:                               # %for.end
                                        #   in Loop: Header=BB29_1 Depth=1
	jmp	.LBB29_10
.LBB29_10:                              # %for.inc28
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_1
.LBB29_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB29_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB29_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB29_12 Depth=1
	movl	$0, -4(%rbp)
.LBB29_14:                              # %for.cond34
                                        #   Parent Loop BB29_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB29_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB29_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB29_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_18
.LBB29_17:                              # %if.else52
                                        #   in Loop: Header=BB29_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_18:                              # %if.end66
                                        #   in Loop: Header=BB29_14 Depth=2
	jmp	.LBB29_19
.LBB29_19:                              # %for.inc67
                                        #   in Loop: Header=BB29_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_14
.LBB29_20:                              # %for.end69
                                        #   in Loop: Header=BB29_12 Depth=1
	jmp	.LBB29_21
.LBB29_21:                              # %for.inc70
                                        #   in Loop: Header=BB29_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_12
.LBB29_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB29_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB29_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB29_23 Depth=1
	movl	$0, -4(%rbp)
.LBB29_25:                              # %for.cond76
                                        #   Parent Loop BB29_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB29_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB29_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB29_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_29
.LBB29_28:                              # %if.else94
                                        #   in Loop: Header=BB29_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_29:                              # %if.end108
                                        #   in Loop: Header=BB29_25 Depth=2
	jmp	.LBB29_30
.LBB29_30:                              # %for.inc109
                                        #   in Loop: Header=BB29_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_25
.LBB29_31:                              # %for.end111
                                        #   in Loop: Header=BB29_23 Depth=1
	jmp	.LBB29_32
.LBB29_32:                              # %for.inc112
                                        #   in Loop: Header=BB29_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_23
.LBB29_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB29_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB29_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB29_34 Depth=1
	movl	$0, -4(%rbp)
.LBB29_36:                              # %for.cond118
                                        #   Parent Loop BB29_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB29_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB29_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB29_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_40
.LBB29_39:                              # %if.else136
                                        #   in Loop: Header=BB29_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_40:                              # %if.end150
                                        #   in Loop: Header=BB29_36 Depth=2
	jmp	.LBB29_41
.LBB29_41:                              # %for.inc151
                                        #   in Loop: Header=BB29_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_36
.LBB29_42:                              # %for.end153
                                        #   in Loop: Header=BB29_34 Depth=1
	jmp	.LBB29_43
.LBB29_43:                              # %for.inc154
                                        #   in Loop: Header=BB29_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_34
.LBB29_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB29_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB29_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB29_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB29_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_49
.LBB29_48:                              # %if.else172
                                        #   in Loop: Header=BB29_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_49:                              # %if.end183
                                        #   in Loop: Header=BB29_45 Depth=1
	jmp	.LBB29_50
.LBB29_50:                              # %for.inc184
                                        #   in Loop: Header=BB29_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_45
.LBB29_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB29_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB29_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB29_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB29_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_56
.LBB29_55:                              # %if.else202
                                        #   in Loop: Header=BB29_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_56:                              # %if.end213
                                        #   in Loop: Header=BB29_52 Depth=1
	jmp	.LBB29_57
.LBB29_57:                              # %for.inc214
                                        #   in Loop: Header=BB29_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_52
.LBB29_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB29_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB29_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB29_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB29_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_63
.LBB29_62:                              # %if.else232
                                        #   in Loop: Header=BB29_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_63:                              # %if.end243
                                        #   in Loop: Header=BB29_59 Depth=1
	jmp	.LBB29_64
.LBB29_64:                              # %for.inc244
                                        #   in Loop: Header=BB29_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_59
.LBB29_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB29_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB29_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB29_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB29_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_70
.LBB29_69:                              # %if.else262
                                        #   in Loop: Header=BB29_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_70:                              # %if.end273
                                        #   in Loop: Header=BB29_66 Depth=1
	jmp	.LBB29_71
.LBB29_71:                              # %for.inc274
                                        #   in Loop: Header=BB29_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_66
.LBB29_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB29_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB29_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB29_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB29_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_77
.LBB29_76:                              # %if.else292
                                        #   in Loop: Header=BB29_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_77:                              # %if.end303
                                        #   in Loop: Header=BB29_73 Depth=1
	jmp	.LBB29_78
.LBB29_78:                              # %for.inc304
                                        #   in Loop: Header=BB29_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_73
.LBB29_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB29_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB29_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB29_80 Depth=1
	movl	$0, -4(%rbp)
.LBB29_82:                              # %for.cond310
                                        #   Parent Loop BB29_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB29_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB29_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB29_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_86
.LBB29_85:                              # %if.else328
                                        #   in Loop: Header=BB29_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_86:                              # %if.end342
                                        #   in Loop: Header=BB29_82 Depth=2
	jmp	.LBB29_87
.LBB29_87:                              # %for.inc343
                                        #   in Loop: Header=BB29_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_82
.LBB29_88:                              # %for.end345
                                        #   in Loop: Header=BB29_80 Depth=1
	jmp	.LBB29_89
.LBB29_89:                              # %for.inc346
                                        #   in Loop: Header=BB29_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_80
.LBB29_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB29_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB29_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB29_91 Depth=1
	movl	$0, -4(%rbp)
.LBB29_93:                              # %for.cond352
                                        #   Parent Loop BB29_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB29_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB29_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB29_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_97
.LBB29_96:                              # %if.else370
                                        #   in Loop: Header=BB29_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_97:                              # %if.end384
                                        #   in Loop: Header=BB29_93 Depth=2
	jmp	.LBB29_98
.LBB29_98:                              # %for.inc385
                                        #   in Loop: Header=BB29_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_93
.LBB29_99:                              # %for.end387
                                        #   in Loop: Header=BB29_91 Depth=1
	jmp	.LBB29_100
.LBB29_100:                             # %for.inc388
                                        #   in Loop: Header=BB29_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_91
.LBB29_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB29_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB29_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB29_102 Depth=1
	movl	$0, -4(%rbp)
.LBB29_104:                             # %for.cond394
                                        #   Parent Loop BB29_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB29_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB29_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB29_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_108
.LBB29_107:                             # %if.else412
                                        #   in Loop: Header=BB29_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_108:                             # %if.end426
                                        #   in Loop: Header=BB29_104 Depth=2
	jmp	.LBB29_109
.LBB29_109:                             # %for.inc427
                                        #   in Loop: Header=BB29_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_104
.LBB29_110:                             # %for.end429
                                        #   in Loop: Header=BB29_102 Depth=1
	jmp	.LBB29_111
.LBB29_111:                             # %for.inc430
                                        #   in Loop: Header=BB29_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_102
.LBB29_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB29_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB29_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB29_113 Depth=1
	movl	$0, -4(%rbp)
.LBB29_115:                             # %for.cond436
                                        #   Parent Loop BB29_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB29_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB29_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB29_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_119
.LBB29_118:                             # %if.else454
                                        #   in Loop: Header=BB29_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_119:                             # %if.end468
                                        #   in Loop: Header=BB29_115 Depth=2
	jmp	.LBB29_120
.LBB29_120:                             # %for.inc469
                                        #   in Loop: Header=BB29_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_115
.LBB29_121:                             # %for.end471
                                        #   in Loop: Header=BB29_113 Depth=1
	jmp	.LBB29_122
.LBB29_122:                             # %for.inc472
                                        #   in Loop: Header=BB29_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_113
.LBB29_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB29_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB29_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB29_124 Depth=1
	movl	$0, -4(%rbp)
.LBB29_126:                             # %for.cond478
                                        #   Parent Loop BB29_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB29_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB29_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB29_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_130
.LBB29_129:                             # %if.else496
                                        #   in Loop: Header=BB29_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_130:                             # %if.end510
                                        #   in Loop: Header=BB29_126 Depth=2
	jmp	.LBB29_131
.LBB29_131:                             # %for.inc511
                                        #   in Loop: Header=BB29_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_126
.LBB29_132:                             # %for.end513
                                        #   in Loop: Header=BB29_124 Depth=1
	jmp	.LBB29_133
.LBB29_133:                             # %for.inc514
                                        #   in Loop: Header=BB29_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_124
.LBB29_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB29_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB29_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB29_135 Depth=1
	movl	$0, -4(%rbp)
.LBB29_137:                             # %for.cond520
                                        #   Parent Loop BB29_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB29_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB29_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB29_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_141
.LBB29_140:                             # %if.else538
                                        #   in Loop: Header=BB29_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_141:                             # %if.end552
                                        #   in Loop: Header=BB29_137 Depth=2
	jmp	.LBB29_142
.LBB29_142:                             # %for.inc553
                                        #   in Loop: Header=BB29_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_137
.LBB29_143:                             # %for.end555
                                        #   in Loop: Header=BB29_135 Depth=1
	jmp	.LBB29_144
.LBB29_144:                             # %for.inc556
                                        #   in Loop: Header=BB29_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_135
.LBB29_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB29_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB29_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB29_146 Depth=1
	movl	$0, -4(%rbp)
.LBB29_148:                             # %for.cond562
                                        #   Parent Loop BB29_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB29_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB29_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB29_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_152
.LBB29_151:                             # %if.else580
                                        #   in Loop: Header=BB29_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_152:                             # %if.end594
                                        #   in Loop: Header=BB29_148 Depth=2
	jmp	.LBB29_153
.LBB29_153:                             # %for.inc595
                                        #   in Loop: Header=BB29_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_148
.LBB29_154:                             # %for.end597
                                        #   in Loop: Header=BB29_146 Depth=1
	jmp	.LBB29_155
.LBB29_155:                             # %for.inc598
                                        #   in Loop: Header=BB29_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_146
.LBB29_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB29_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB29_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB29_157 Depth=1
	movl	$0, -4(%rbp)
.LBB29_159:                             # %for.cond604
                                        #   Parent Loop BB29_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB29_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB29_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB29_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_163
.LBB29_162:                             # %if.else622
                                        #   in Loop: Header=BB29_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_163:                             # %if.end636
                                        #   in Loop: Header=BB29_159 Depth=2
	jmp	.LBB29_164
.LBB29_164:                             # %for.inc637
                                        #   in Loop: Header=BB29_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_159
.LBB29_165:                             # %for.end639
                                        #   in Loop: Header=BB29_157 Depth=1
	jmp	.LBB29_166
.LBB29_166:                             # %for.inc640
                                        #   in Loop: Header=BB29_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_157
.LBB29_167:                             # %for.end642
	cmpl	$778332494, -28(%rbp)   # imm = 0x2E64694E
	jne	.LBB29_169
.LBB29_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_168
.Lfunc_end29:
	.size	init_contexts.22, .Lfunc_end29-init_contexts.22
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.23 # -- Begin function update_field_frame_contexts.23
	.p2align	4, 0x90
	.type	update_field_frame_contexts.23,@function
update_field_frame_contexts.23:         # @update_field_frame_contexts.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1813616353, -16(%rbp)  # imm = 0x6C1996E1
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB30_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB30_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB30_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB30_2 Depth=1
	movl	$0, -4(%rbp)
.LBB30_4:                               # %for.cond1
                                        #   Parent Loop BB30_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB30_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB30_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB30_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_4
.LBB30_7:                               # %for.end
                                        #   in Loop: Header=BB30_2 Depth=1
	jmp	.LBB30_8
.LBB30_8:                               # %for.inc23
                                        #   in Loop: Header=BB30_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_2
.LBB30_9:                               # %for.end25
	jmp	.LBB30_19
.LBB30_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB30_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB30_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB30_11 Depth=1
	movl	$0, -4(%rbp)
.LBB30_13:                              # %for.cond29
                                        #   Parent Loop BB30_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB30_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB30_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_13
.LBB30_16:                              # %for.end56
                                        #   in Loop: Header=BB30_11 Depth=1
	jmp	.LBB30_17
.LBB30_17:                              # %for.inc57
                                        #   in Loop: Header=BB30_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_11
.LBB30_18:                              # %for.end59
	jmp	.LBB30_19
.LBB30_19:                              # %if.end
	cmpl	$1813616353, -16(%rbp)  # imm = 0x6C1996E1
	jne	.LBB30_21
.LBB30_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_20
.Lfunc_end30:
	.size	update_field_frame_contexts.23, .Lfunc_end30-update_field_frame_contexts.23
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.24
.LCPI31_0:
	.quad	4607182418800017408     # double 1
.LCPI31_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI31_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI31_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.24
	.p2align	4, 0x90
	.type	XRate.24,@function
XRate.24:                               # @XRate.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1629260037, -36(%rbp)  # imm = 0x611C8905
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB31_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB31_3
.LBB31_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB31_3:                               # %cond.end
	vmovsd	.LCPI31_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI31_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI31_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI31_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB31_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI31_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB31_6
.LBB31_5:                               # %cond.false6
	vmovsd	.LCPI31_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI31_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI31_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB31_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB31_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB31_9
.LBB31_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB31_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB31_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB31_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB31_13
.LBB31_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB31_13:                              # %cond.end26
	jmp	.LBB31_15
.LBB31_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB31_15
.LBB31_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB31_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB31_18
.LBB31_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB31_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1629260037, -36(%rbp)  # imm = 0x611C8905
	jne	.LBB31_20
.LBB31_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB31_19
.Lfunc_end31:
	.size	XRate.24, .Lfunc_end31-XRate.24
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.25    # -- Begin function SetCtxModelNumber.25
	.p2align	4, 0x90
	.type	SetCtxModelNumber.25,@function
SetCtxModelNumber.25:                   # @SetCtxModelNumber.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2070316220, -16(%rbp)  # imm = 0x7B6684BC
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB32_11
.LBB32_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB32_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB32_11
.LBB32_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB32_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB32_11
.LBB32_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB32_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB32_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB32_10
.LBB32_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB32_10:                              # %if.end38
	jmp	.LBB32_11
.LBB32_11:                              # %if.end39
	cmpl	$2070316220, -16(%rbp)  # imm = 0x7B6684BC
	jne	.LBB32_13
.LBB32_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_12
.Lfunc_end32:
	.size	SetCtxModelNumber.25, .Lfunc_end32-SetCtxModelNumber.25
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.26
.LCPI33_0:
	.quad	4611686018427387904     # double 2
.LCPI33_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.26
	.p2align	4, 0x90
	.type	create_context_memory.26,@function
create_context_memory.26:               # @create_context_memory.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$782393943, -20(%rbp)   # imm = 0x2EA26257
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB33_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB33_3
.LBB33_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB33_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB33_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB33_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB33_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB33_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB33_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB33_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB33_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB33_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB33_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB33_11:                              # %if.end10
                                        #   in Loop: Header=BB33_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB33_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB33_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB33_13:                              # %if.end16
                                        #   in Loop: Header=BB33_8 Depth=1
	movl	$0, -8(%rbp)
.LBB33_14:                              # %for.cond17
                                        #   Parent Loop BB33_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB33_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB33_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB33_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB33_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB33_17:                              # %if.end28
                                        #   in Loop: Header=BB33_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB33_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB33_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB33_19:                              # %if.end39
                                        #   in Loop: Header=BB33_14 Depth=2
	jmp	.LBB33_20
.LBB33_20:                              # %for.inc
                                        #   in Loop: Header=BB33_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_14
.LBB33_21:                              # %for.end
                                        #   in Loop: Header=BB33_8 Depth=1
	jmp	.LBB33_22
.LBB33_22:                              # %for.inc40
                                        #   in Loop: Header=BB33_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_8
.LBB33_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB33_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_26 Depth 2
                                        #       Child Loop BB33_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB33_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB33_24 Depth=1
	movl	$0, -8(%rbp)
.LBB33_26:                              # %for.cond47
                                        #   Parent Loop BB33_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB33_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB33_26 Depth=2
	movl	$0, -12(%rbp)
.LBB33_28:                              # %for.cond51
                                        #   Parent Loop BB33_24 Depth=1
                                        #     Parent Loop BB33_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB33_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB33_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB33_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_28
.LBB33_31:                              # %for.end63
                                        #   in Loop: Header=BB33_26 Depth=2
	jmp	.LBB33_32
.LBB33_32:                              # %for.inc64
                                        #   in Loop: Header=BB33_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_26
.LBB33_33:                              # %for.end66
                                        #   in Loop: Header=BB33_24 Depth=1
	jmp	.LBB33_34
.LBB33_34:                              # %for.inc67
                                        #   in Loop: Header=BB33_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_24
.LBB33_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB33_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB33_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB33_36 Depth=1
	vmovsd	.LCPI33_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI33_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI33_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB33_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_36
.LBB33_39:                              # %for.end98
	cmpl	$782393943, -20(%rbp)   # imm = 0x2EA26257
	jne	.LBB33_41
.LBB33_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_40
.Lfunc_end33:
	.size	create_context_memory.26, .Lfunc_end33-create_context_memory.26
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.27       # -- Begin function store_contexts.27
	.p2align	4, 0x90
	.type	store_contexts.27,@function
store_contexts.27:                      # @store_contexts.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$146115102, -16(%rbp)   # imm = 0x8B58A1E
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB34_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB34_3
.LBB34_2:                               # %if.else
	jmp	.LBB34_3
.LBB34_3:                               # %if.end
	cmpl	$146115102, -16(%rbp)   # imm = 0x8B58A1E
	jne	.LBB34_5
.LBB34_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_4
.Lfunc_end34:
	.size	store_contexts.27, .Lfunc_end34-store_contexts.27
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.28 # -- Begin function update_field_frame_contexts.28
	.p2align	4, 0x90
	.type	update_field_frame_contexts.28,@function
update_field_frame_contexts.28:         # @update_field_frame_contexts.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1592595689, -12(%rbp)  # imm = 0x5EED14E9
	movl	%edi, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB35_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB35_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB35_2 Depth=1
	movl	$0, -8(%rbp)
.LBB35_4:                               # %for.cond1
                                        #   Parent Loop BB35_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB35_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB35_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB35_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_4
.LBB35_7:                               # %for.end
                                        #   in Loop: Header=BB35_2 Depth=1
	jmp	.LBB35_8
.LBB35_8:                               # %for.inc23
                                        #   in Loop: Header=BB35_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_2
.LBB35_9:                               # %for.end25
	jmp	.LBB35_19
.LBB35_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB35_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB35_11 Depth=1
	movl	$0, -8(%rbp)
.LBB35_13:                              # %for.cond29
                                        #   Parent Loop BB35_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB35_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB35_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_13
.LBB35_16:                              # %for.end56
                                        #   in Loop: Header=BB35_11 Depth=1
	jmp	.LBB35_17
.LBB35_17:                              # %for.inc57
                                        #   in Loop: Header=BB35_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_11
.LBB35_18:                              # %for.end59
	jmp	.LBB35_19
.LBB35_19:                              # %if.end
	cmpl	$1592595689, -12(%rbp)  # imm = 0x5EED14E9
	jne	.LBB35_21
.LBB35_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_20
.Lfunc_end35:
	.size	update_field_frame_contexts.28, .Lfunc_end35-update_field_frame_contexts.28
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.29
.LCPI36_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.29
	.p2align	4, 0x90
	.type	GetCtxModelNumber.29,@function
GetCtxModelNumber.29:                   # @GetCtxModelNumber.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI36_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$434498273, -48(%rbp)   # imm = 0x19E5EAE1
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB36_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_3 Depth 2
                                        #       Child Loop BB36_5 Depth 3
                                        #     Child Loop BB36_14 Depth 2
                                        #       Child Loop BB36_16 Depth 3
                                        #     Child Loop BB36_25 Depth 2
                                        #       Child Loop BB36_27 Depth 3
                                        #     Child Loop BB36_36 Depth 2
                                        #       Child Loop BB36_38 Depth 3
                                        #     Child Loop BB36_47 Depth 2
                                        #     Child Loop BB36_54 Depth 2
                                        #     Child Loop BB36_61 Depth 2
                                        #     Child Loop BB36_68 Depth 2
                                        #     Child Loop BB36_75 Depth 2
                                        #     Child Loop BB36_82 Depth 2
                                        #       Child Loop BB36_84 Depth 3
                                        #     Child Loop BB36_93 Depth 2
                                        #       Child Loop BB36_95 Depth 3
                                        #     Child Loop BB36_104 Depth 2
                                        #       Child Loop BB36_106 Depth 3
                                        #     Child Loop BB36_115 Depth 2
                                        #       Child Loop BB36_117 Depth 3
                                        #     Child Loop BB36_126 Depth 2
                                        #       Child Loop BB36_128 Depth 3
                                        #     Child Loop BB36_137 Depth 2
                                        #       Child Loop BB36_139 Depth 3
                                        #     Child Loop BB36_148 Depth 2
                                        #       Child Loop BB36_150 Depth 3
                                        #     Child Loop BB36_159 Depth 2
                                        #       Child Loop BB36_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB36_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB36_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB36_3:                               # %for.cond2
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB36_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB36_3 Depth=2
	movl	$0, -4(%rbp)
.LBB36_5:                               # %for.cond5
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB36_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB36_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB36_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_9
.LBB36_8:                               # %if.else
                                        #   in Loop: Header=BB36_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_9:                               # %if.end
                                        #   in Loop: Header=BB36_5 Depth=3
	jmp	.LBB36_10
.LBB36_10:                              # %for.inc
                                        #   in Loop: Header=BB36_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_5
.LBB36_11:                              # %for.end
                                        #   in Loop: Header=BB36_3 Depth=2
	jmp	.LBB36_12
.LBB36_12:                              # %for.inc33
                                        #   in Loop: Header=BB36_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_3
.LBB36_13:                              # %for.end35
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_14:                              # %for.cond36
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB36_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB36_14 Depth=2
	movl	$0, -4(%rbp)
.LBB36_16:                              # %for.cond39
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB36_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB36_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB36_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_20
.LBB36_19:                              # %if.else58
                                        #   in Loop: Header=BB36_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_20:                              # %if.end73
                                        #   in Loop: Header=BB36_16 Depth=3
	jmp	.LBB36_21
.LBB36_21:                              # %for.inc74
                                        #   in Loop: Header=BB36_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_16
.LBB36_22:                              # %for.end76
                                        #   in Loop: Header=BB36_14 Depth=2
	jmp	.LBB36_23
.LBB36_23:                              # %for.inc77
                                        #   in Loop: Header=BB36_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_14
.LBB36_24:                              # %for.end79
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_25:                              # %for.cond80
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB36_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB36_25 Depth=2
	movl	$0, -4(%rbp)
.LBB36_27:                              # %for.cond83
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB36_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB36_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB36_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_31
.LBB36_30:                              # %if.else102
                                        #   in Loop: Header=BB36_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_31:                              # %if.end117
                                        #   in Loop: Header=BB36_27 Depth=3
	jmp	.LBB36_32
.LBB36_32:                              # %for.inc118
                                        #   in Loop: Header=BB36_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_27
.LBB36_33:                              # %for.end120
                                        #   in Loop: Header=BB36_25 Depth=2
	jmp	.LBB36_34
.LBB36_34:                              # %for.inc121
                                        #   in Loop: Header=BB36_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_25
.LBB36_35:                              # %for.end123
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_36:                              # %for.cond124
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB36_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB36_36 Depth=2
	movl	$0, -4(%rbp)
.LBB36_38:                              # %for.cond127
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB36_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB36_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB36_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_42
.LBB36_41:                              # %if.else146
                                        #   in Loop: Header=BB36_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_42:                              # %if.end161
                                        #   in Loop: Header=BB36_38 Depth=3
	jmp	.LBB36_43
.LBB36_43:                              # %for.inc162
                                        #   in Loop: Header=BB36_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_38
.LBB36_44:                              # %for.end164
                                        #   in Loop: Header=BB36_36 Depth=2
	jmp	.LBB36_45
.LBB36_45:                              # %for.inc165
                                        #   in Loop: Header=BB36_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_36
.LBB36_46:                              # %for.end167
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -4(%rbp)
.LBB36_47:                              # %for.cond168
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB36_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB36_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_51
.LBB36_50:                              # %if.else184
                                        #   in Loop: Header=BB36_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_51:                              # %if.end196
                                        #   in Loop: Header=BB36_47 Depth=2
	jmp	.LBB36_52
.LBB36_52:                              # %for.inc197
                                        #   in Loop: Header=BB36_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_47
.LBB36_53:                              # %for.end199
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -4(%rbp)
.LBB36_54:                              # %for.cond200
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB36_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB36_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_58
.LBB36_57:                              # %if.else216
                                        #   in Loop: Header=BB36_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_58:                              # %if.end228
                                        #   in Loop: Header=BB36_54 Depth=2
	jmp	.LBB36_59
.LBB36_59:                              # %for.inc229
                                        #   in Loop: Header=BB36_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_54
.LBB36_60:                              # %for.end231
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -4(%rbp)
.LBB36_61:                              # %for.cond232
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB36_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB36_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB36_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_65
.LBB36_64:                              # %if.else248
                                        #   in Loop: Header=BB36_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_65:                              # %if.end260
                                        #   in Loop: Header=BB36_61 Depth=2
	jmp	.LBB36_66
.LBB36_66:                              # %for.inc261
                                        #   in Loop: Header=BB36_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_61
.LBB36_67:                              # %for.end263
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -4(%rbp)
.LBB36_68:                              # %for.cond264
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB36_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB36_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB36_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_72
.LBB36_71:                              # %if.else280
                                        #   in Loop: Header=BB36_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_72:                              # %if.end292
                                        #   in Loop: Header=BB36_68 Depth=2
	jmp	.LBB36_73
.LBB36_73:                              # %for.inc293
                                        #   in Loop: Header=BB36_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_68
.LBB36_74:                              # %for.end295
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -4(%rbp)
.LBB36_75:                              # %for.cond296
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB36_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB36_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_79
.LBB36_78:                              # %if.else312
                                        #   in Loop: Header=BB36_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_79:                              # %if.end324
                                        #   in Loop: Header=BB36_75 Depth=2
	jmp	.LBB36_80
.LBB36_80:                              # %for.inc325
                                        #   in Loop: Header=BB36_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_75
.LBB36_81:                              # %for.end327
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_82:                              # %for.cond328
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB36_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB36_82 Depth=2
	movl	$0, -4(%rbp)
.LBB36_84:                              # %for.cond331
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB36_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB36_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB36_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_88
.LBB36_87:                              # %if.else350
                                        #   in Loop: Header=BB36_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_88:                              # %if.end365
                                        #   in Loop: Header=BB36_84 Depth=3
	jmp	.LBB36_89
.LBB36_89:                              # %for.inc366
                                        #   in Loop: Header=BB36_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_84
.LBB36_90:                              # %for.end368
                                        #   in Loop: Header=BB36_82 Depth=2
	jmp	.LBB36_91
.LBB36_91:                              # %for.inc369
                                        #   in Loop: Header=BB36_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_82
.LBB36_92:                              # %for.end371
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_93:                              # %for.cond372
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB36_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB36_93 Depth=2
	movl	$0, -4(%rbp)
.LBB36_95:                              # %for.cond375
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB36_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB36_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB36_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_99
.LBB36_98:                              # %if.else394
                                        #   in Loop: Header=BB36_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_99:                              # %if.end409
                                        #   in Loop: Header=BB36_95 Depth=3
	jmp	.LBB36_100
.LBB36_100:                             # %for.inc410
                                        #   in Loop: Header=BB36_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_95
.LBB36_101:                             # %for.end412
                                        #   in Loop: Header=BB36_93 Depth=2
	jmp	.LBB36_102
.LBB36_102:                             # %for.inc413
                                        #   in Loop: Header=BB36_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_93
.LBB36_103:                             # %for.end415
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_104:                             # %for.cond416
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB36_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB36_104 Depth=2
	movl	$0, -4(%rbp)
.LBB36_106:                             # %for.cond419
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB36_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB36_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB36_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_110
.LBB36_109:                             # %if.else438
                                        #   in Loop: Header=BB36_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_110:                             # %if.end453
                                        #   in Loop: Header=BB36_106 Depth=3
	jmp	.LBB36_111
.LBB36_111:                             # %for.inc454
                                        #   in Loop: Header=BB36_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_106
.LBB36_112:                             # %for.end456
                                        #   in Loop: Header=BB36_104 Depth=2
	jmp	.LBB36_113
.LBB36_113:                             # %for.inc457
                                        #   in Loop: Header=BB36_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_104
.LBB36_114:                             # %for.end459
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_115:                             # %for.cond460
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB36_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB36_115 Depth=2
	movl	$0, -4(%rbp)
.LBB36_117:                             # %for.cond463
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB36_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB36_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB36_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_121
.LBB36_120:                             # %if.else482
                                        #   in Loop: Header=BB36_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_121:                             # %if.end497
                                        #   in Loop: Header=BB36_117 Depth=3
	jmp	.LBB36_122
.LBB36_122:                             # %for.inc498
                                        #   in Loop: Header=BB36_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_117
.LBB36_123:                             # %for.end500
                                        #   in Loop: Header=BB36_115 Depth=2
	jmp	.LBB36_124
.LBB36_124:                             # %for.inc501
                                        #   in Loop: Header=BB36_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_115
.LBB36_125:                             # %for.end503
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_126:                             # %for.cond504
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB36_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB36_126 Depth=2
	movl	$0, -4(%rbp)
.LBB36_128:                             # %for.cond507
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB36_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB36_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB36_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_132
.LBB36_131:                             # %if.else526
                                        #   in Loop: Header=BB36_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_132:                             # %if.end541
                                        #   in Loop: Header=BB36_128 Depth=3
	jmp	.LBB36_133
.LBB36_133:                             # %for.inc542
                                        #   in Loop: Header=BB36_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_128
.LBB36_134:                             # %for.end544
                                        #   in Loop: Header=BB36_126 Depth=2
	jmp	.LBB36_135
.LBB36_135:                             # %for.inc545
                                        #   in Loop: Header=BB36_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_126
.LBB36_136:                             # %for.end547
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_137:                             # %for.cond548
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB36_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB36_137 Depth=2
	movl	$0, -4(%rbp)
.LBB36_139:                             # %for.cond551
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB36_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB36_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB36_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_143
.LBB36_142:                             # %if.else570
                                        #   in Loop: Header=BB36_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_143:                             # %if.end585
                                        #   in Loop: Header=BB36_139 Depth=3
	jmp	.LBB36_144
.LBB36_144:                             # %for.inc586
                                        #   in Loop: Header=BB36_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_139
.LBB36_145:                             # %for.end588
                                        #   in Loop: Header=BB36_137 Depth=2
	jmp	.LBB36_146
.LBB36_146:                             # %for.inc589
                                        #   in Loop: Header=BB36_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_137
.LBB36_147:                             # %for.end591
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_148:                             # %for.cond592
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB36_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB36_148 Depth=2
	movl	$0, -4(%rbp)
.LBB36_150:                             # %for.cond595
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB36_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB36_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB36_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_154
.LBB36_153:                             # %if.else614
                                        #   in Loop: Header=BB36_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_154:                             # %if.end629
                                        #   in Loop: Header=BB36_150 Depth=3
	jmp	.LBB36_155
.LBB36_155:                             # %for.inc630
                                        #   in Loop: Header=BB36_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_150
.LBB36_156:                             # %for.end632
                                        #   in Loop: Header=BB36_148 Depth=2
	jmp	.LBB36_157
.LBB36_157:                             # %for.inc633
                                        #   in Loop: Header=BB36_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_148
.LBB36_158:                             # %for.end635
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_159:                             # %for.cond636
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB36_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB36_159 Depth=2
	movl	$0, -4(%rbp)
.LBB36_161:                             # %for.cond639
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB36_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB36_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB36_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_165
.LBB36_164:                             # %if.else658
                                        #   in Loop: Header=BB36_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_165:                             # %if.end673
                                        #   in Loop: Header=BB36_161 Depth=3
	jmp	.LBB36_166
.LBB36_166:                             # %for.inc674
                                        #   in Loop: Header=BB36_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_161
.LBB36_167:                             # %for.end676
                                        #   in Loop: Header=BB36_159 Depth=2
	jmp	.LBB36_168
.LBB36_168:                             # %for.inc677
                                        #   in Loop: Header=BB36_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_159
.LBB36_169:                             # %for.end679
                                        #   in Loop: Header=BB36_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB36_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB36_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB36_171:                             # %if.end682
                                        #   in Loop: Header=BB36_1 Depth=1
	jmp	.LBB36_172
.LBB36_172:                             # %for.inc683
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_1
.LBB36_173:                             # %for.end685
	cmpl	$434498273, -48(%rbp)   # imm = 0x19E5EAE1
	jne	.LBB36_175
.LBB36_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_174
.Lfunc_end36:
	.size	GetCtxModelNumber.29, .Lfunc_end36-GetCtxModelNumber.29
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.30 # -- Begin function update_field_frame_contexts.30
	.p2align	4, 0x90
	.type	update_field_frame_contexts.30,@function
update_field_frame_contexts.30:         # @update_field_frame_contexts.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1349965325, -12(%rbp)  # imm = 0x5076D60D
	movl	%edi, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB37_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB37_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB37_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB37_2 Depth=1
	movl	$0, -4(%rbp)
.LBB37_4:                               # %for.cond1
                                        #   Parent Loop BB37_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB37_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB37_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB37_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_4
.LBB37_7:                               # %for.end
                                        #   in Loop: Header=BB37_2 Depth=1
	jmp	.LBB37_8
.LBB37_8:                               # %for.inc23
                                        #   in Loop: Header=BB37_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_2
.LBB37_9:                               # %for.end25
	jmp	.LBB37_19
.LBB37_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB37_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB37_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB37_11 Depth=1
	movl	$0, -4(%rbp)
.LBB37_13:                              # %for.cond29
                                        #   Parent Loop BB37_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB37_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB37_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_13
.LBB37_16:                              # %for.end56
                                        #   in Loop: Header=BB37_11 Depth=1
	jmp	.LBB37_17
.LBB37_17:                              # %for.inc57
                                        #   in Loop: Header=BB37_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_11
.LBB37_18:                              # %for.end59
	jmp	.LBB37_19
.LBB37_19:                              # %if.end
	cmpl	$1349965325, -12(%rbp)  # imm = 0x5076D60D
	jne	.LBB37_21
.LBB37_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_20
.Lfunc_end37:
	.size	update_field_frame_contexts.30, .Lfunc_end37-update_field_frame_contexts.30
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.31
.LCPI38_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.31
	.p2align	4, 0x90
	.type	GetCtxModelNumber.31,@function
GetCtxModelNumber.31:                   # @GetCtxModelNumber.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI38_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$854181995, -44(%rbp)   # imm = 0x32E9C86B
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB38_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_3 Depth 2
                                        #       Child Loop BB38_5 Depth 3
                                        #     Child Loop BB38_14 Depth 2
                                        #       Child Loop BB38_16 Depth 3
                                        #     Child Loop BB38_25 Depth 2
                                        #       Child Loop BB38_27 Depth 3
                                        #     Child Loop BB38_36 Depth 2
                                        #       Child Loop BB38_38 Depth 3
                                        #     Child Loop BB38_47 Depth 2
                                        #     Child Loop BB38_54 Depth 2
                                        #     Child Loop BB38_61 Depth 2
                                        #     Child Loop BB38_68 Depth 2
                                        #     Child Loop BB38_75 Depth 2
                                        #     Child Loop BB38_82 Depth 2
                                        #       Child Loop BB38_84 Depth 3
                                        #     Child Loop BB38_93 Depth 2
                                        #       Child Loop BB38_95 Depth 3
                                        #     Child Loop BB38_104 Depth 2
                                        #       Child Loop BB38_106 Depth 3
                                        #     Child Loop BB38_115 Depth 2
                                        #       Child Loop BB38_117 Depth 3
                                        #     Child Loop BB38_126 Depth 2
                                        #       Child Loop BB38_128 Depth 3
                                        #     Child Loop BB38_137 Depth 2
                                        #       Child Loop BB38_139 Depth 3
                                        #     Child Loop BB38_148 Depth 2
                                        #       Child Loop BB38_150 Depth 3
                                        #     Child Loop BB38_159 Depth 2
                                        #       Child Loop BB38_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB38_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB38_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB38_3:                               # %for.cond2
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB38_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB38_3 Depth=2
	movl	$0, -4(%rbp)
.LBB38_5:                               # %for.cond5
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB38_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB38_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB38_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_9
.LBB38_8:                               # %if.else
                                        #   in Loop: Header=BB38_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_9:                               # %if.end
                                        #   in Loop: Header=BB38_5 Depth=3
	jmp	.LBB38_10
.LBB38_10:                              # %for.inc
                                        #   in Loop: Header=BB38_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_5
.LBB38_11:                              # %for.end
                                        #   in Loop: Header=BB38_3 Depth=2
	jmp	.LBB38_12
.LBB38_12:                              # %for.inc33
                                        #   in Loop: Header=BB38_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_3
.LBB38_13:                              # %for.end35
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -8(%rbp)
.LBB38_14:                              # %for.cond36
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB38_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB38_14 Depth=2
	movl	$0, -4(%rbp)
.LBB38_16:                              # %for.cond39
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB38_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB38_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB38_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_20
.LBB38_19:                              # %if.else58
                                        #   in Loop: Header=BB38_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_20:                              # %if.end73
                                        #   in Loop: Header=BB38_16 Depth=3
	jmp	.LBB38_21
.LBB38_21:                              # %for.inc74
                                        #   in Loop: Header=BB38_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_16
.LBB38_22:                              # %for.end76
                                        #   in Loop: Header=BB38_14 Depth=2
	jmp	.LBB38_23
.LBB38_23:                              # %for.inc77
                                        #   in Loop: Header=BB38_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_14
.LBB38_24:                              # %for.end79
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -8(%rbp)
.LBB38_25:                              # %for.cond80
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB38_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB38_25 Depth=2
	movl	$0, -4(%rbp)
.LBB38_27:                              # %for.cond83
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB38_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB38_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB38_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_31
.LBB38_30:                              # %if.else102
                                        #   in Loop: Header=BB38_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_31:                              # %if.end117
                                        #   in Loop: Header=BB38_27 Depth=3
	jmp	.LBB38_32
.LBB38_32:                              # %for.inc118
                                        #   in Loop: Header=BB38_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_27
.LBB38_33:                              # %for.end120
                                        #   in Loop: Header=BB38_25 Depth=2
	jmp	.LBB38_34
.LBB38_34:                              # %for.inc121
                                        #   in Loop: Header=BB38_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_25
.LBB38_35:                              # %for.end123
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -8(%rbp)
.LBB38_36:                              # %for.cond124
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB38_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB38_36 Depth=2
	movl	$0, -4(%rbp)
.LBB38_38:                              # %for.cond127
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB38_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB38_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB38_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_42
.LBB38_41:                              # %if.else146
                                        #   in Loop: Header=BB38_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_42:                              # %if.end161
                                        #   in Loop: Header=BB38_38 Depth=3
	jmp	.LBB38_43
.LBB38_43:                              # %for.inc162
                                        #   in Loop: Header=BB38_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_38
.LBB38_44:                              # %for.end164
                                        #   in Loop: Header=BB38_36 Depth=2
	jmp	.LBB38_45
.LBB38_45:                              # %for.inc165
                                        #   in Loop: Header=BB38_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_36
.LBB38_46:                              # %for.end167
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -4(%rbp)
.LBB38_47:                              # %for.cond168
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB38_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB38_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB38_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_51
.LBB38_50:                              # %if.else184
                                        #   in Loop: Header=BB38_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_51:                              # %if.end196
                                        #   in Loop: Header=BB38_47 Depth=2
	jmp	.LBB38_52
.LBB38_52:                              # %for.inc197
                                        #   in Loop: Header=BB38_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_47
.LBB38_53:                              # %for.end199
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -4(%rbp)
.LBB38_54:                              # %for.cond200
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB38_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB38_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB38_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_58
.LBB38_57:                              # %if.else216
                                        #   in Loop: Header=BB38_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_58:                              # %if.end228
                                        #   in Loop: Header=BB38_54 Depth=2
	jmp	.LBB38_59
.LBB38_59:                              # %for.inc229
                                        #   in Loop: Header=BB38_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_54
.LBB38_60:                              # %for.end231
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -4(%rbp)
.LBB38_61:                              # %for.cond232
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB38_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB38_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB38_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_65
.LBB38_64:                              # %if.else248
                                        #   in Loop: Header=BB38_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_65:                              # %if.end260
                                        #   in Loop: Header=BB38_61 Depth=2
	jmp	.LBB38_66
.LBB38_66:                              # %for.inc261
                                        #   in Loop: Header=BB38_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_61
.LBB38_67:                              # %for.end263
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -4(%rbp)
.LBB38_68:                              # %for.cond264
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB38_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB38_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB38_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_72
.LBB38_71:                              # %if.else280
                                        #   in Loop: Header=BB38_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_72:                              # %if.end292
                                        #   in Loop: Header=BB38_68 Depth=2
	jmp	.LBB38_73
.LBB38_73:                              # %for.inc293
                                        #   in Loop: Header=BB38_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_68
.LBB38_74:                              # %for.end295
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -4(%rbp)
.LBB38_75:                              # %for.cond296
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB38_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB38_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB38_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_79
.LBB38_78:                              # %if.else312
                                        #   in Loop: Header=BB38_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_79:                              # %if.end324
                                        #   in Loop: Header=BB38_75 Depth=2
	jmp	.LBB38_80
.LBB38_80:                              # %for.inc325
                                        #   in Loop: Header=BB38_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_75
.LBB38_81:                              # %for.end327
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -8(%rbp)
.LBB38_82:                              # %for.cond328
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB38_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB38_82 Depth=2
	movl	$0, -4(%rbp)
.LBB38_84:                              # %for.cond331
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB38_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB38_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB38_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_88
.LBB38_87:                              # %if.else350
                                        #   in Loop: Header=BB38_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_88:                              # %if.end365
                                        #   in Loop: Header=BB38_84 Depth=3
	jmp	.LBB38_89
.LBB38_89:                              # %for.inc366
                                        #   in Loop: Header=BB38_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_84
.LBB38_90:                              # %for.end368
                                        #   in Loop: Header=BB38_82 Depth=2
	jmp	.LBB38_91
.LBB38_91:                              # %for.inc369
                                        #   in Loop: Header=BB38_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_82
.LBB38_92:                              # %for.end371
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -8(%rbp)
.LBB38_93:                              # %for.cond372
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB38_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB38_93 Depth=2
	movl	$0, -4(%rbp)
.LBB38_95:                              # %for.cond375
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB38_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB38_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB38_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_99
.LBB38_98:                              # %if.else394
                                        #   in Loop: Header=BB38_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_99:                              # %if.end409
                                        #   in Loop: Header=BB38_95 Depth=3
	jmp	.LBB38_100
.LBB38_100:                             # %for.inc410
                                        #   in Loop: Header=BB38_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_95
.LBB38_101:                             # %for.end412
                                        #   in Loop: Header=BB38_93 Depth=2
	jmp	.LBB38_102
.LBB38_102:                             # %for.inc413
                                        #   in Loop: Header=BB38_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_93
.LBB38_103:                             # %for.end415
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -8(%rbp)
.LBB38_104:                             # %for.cond416
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB38_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB38_104 Depth=2
	movl	$0, -4(%rbp)
.LBB38_106:                             # %for.cond419
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB38_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB38_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB38_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_110
.LBB38_109:                             # %if.else438
                                        #   in Loop: Header=BB38_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_110:                             # %if.end453
                                        #   in Loop: Header=BB38_106 Depth=3
	jmp	.LBB38_111
.LBB38_111:                             # %for.inc454
                                        #   in Loop: Header=BB38_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_106
.LBB38_112:                             # %for.end456
                                        #   in Loop: Header=BB38_104 Depth=2
	jmp	.LBB38_113
.LBB38_113:                             # %for.inc457
                                        #   in Loop: Header=BB38_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_104
.LBB38_114:                             # %for.end459
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -8(%rbp)
.LBB38_115:                             # %for.cond460
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB38_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB38_115 Depth=2
	movl	$0, -4(%rbp)
.LBB38_117:                             # %for.cond463
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB38_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB38_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB38_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_121
.LBB38_120:                             # %if.else482
                                        #   in Loop: Header=BB38_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_121:                             # %if.end497
                                        #   in Loop: Header=BB38_117 Depth=3
	jmp	.LBB38_122
.LBB38_122:                             # %for.inc498
                                        #   in Loop: Header=BB38_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_117
.LBB38_123:                             # %for.end500
                                        #   in Loop: Header=BB38_115 Depth=2
	jmp	.LBB38_124
.LBB38_124:                             # %for.inc501
                                        #   in Loop: Header=BB38_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_115
.LBB38_125:                             # %for.end503
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -8(%rbp)
.LBB38_126:                             # %for.cond504
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB38_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB38_126 Depth=2
	movl	$0, -4(%rbp)
.LBB38_128:                             # %for.cond507
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB38_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB38_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB38_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_132
.LBB38_131:                             # %if.else526
                                        #   in Loop: Header=BB38_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_132:                             # %if.end541
                                        #   in Loop: Header=BB38_128 Depth=3
	jmp	.LBB38_133
.LBB38_133:                             # %for.inc542
                                        #   in Loop: Header=BB38_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_128
.LBB38_134:                             # %for.end544
                                        #   in Loop: Header=BB38_126 Depth=2
	jmp	.LBB38_135
.LBB38_135:                             # %for.inc545
                                        #   in Loop: Header=BB38_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_126
.LBB38_136:                             # %for.end547
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -8(%rbp)
.LBB38_137:                             # %for.cond548
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB38_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB38_137 Depth=2
	movl	$0, -4(%rbp)
.LBB38_139:                             # %for.cond551
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB38_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB38_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB38_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_143
.LBB38_142:                             # %if.else570
                                        #   in Loop: Header=BB38_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_143:                             # %if.end585
                                        #   in Loop: Header=BB38_139 Depth=3
	jmp	.LBB38_144
.LBB38_144:                             # %for.inc586
                                        #   in Loop: Header=BB38_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_139
.LBB38_145:                             # %for.end588
                                        #   in Loop: Header=BB38_137 Depth=2
	jmp	.LBB38_146
.LBB38_146:                             # %for.inc589
                                        #   in Loop: Header=BB38_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_137
.LBB38_147:                             # %for.end591
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -8(%rbp)
.LBB38_148:                             # %for.cond592
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB38_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB38_148 Depth=2
	movl	$0, -4(%rbp)
.LBB38_150:                             # %for.cond595
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB38_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB38_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB38_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_154
.LBB38_153:                             # %if.else614
                                        #   in Loop: Header=BB38_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_154:                             # %if.end629
                                        #   in Loop: Header=BB38_150 Depth=3
	jmp	.LBB38_155
.LBB38_155:                             # %for.inc630
                                        #   in Loop: Header=BB38_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_150
.LBB38_156:                             # %for.end632
                                        #   in Loop: Header=BB38_148 Depth=2
	jmp	.LBB38_157
.LBB38_157:                             # %for.inc633
                                        #   in Loop: Header=BB38_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_148
.LBB38_158:                             # %for.end635
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -8(%rbp)
.LBB38_159:                             # %for.cond636
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB38_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB38_159 Depth=2
	movl	$0, -4(%rbp)
.LBB38_161:                             # %for.cond639
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB38_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB38_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB38_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_165
.LBB38_164:                             # %if.else658
                                        #   in Loop: Header=BB38_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_165:                             # %if.end673
                                        #   in Loop: Header=BB38_161 Depth=3
	jmp	.LBB38_166
.LBB38_166:                             # %for.inc674
                                        #   in Loop: Header=BB38_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_161
.LBB38_167:                             # %for.end676
                                        #   in Loop: Header=BB38_159 Depth=2
	jmp	.LBB38_168
.LBB38_168:                             # %for.inc677
                                        #   in Loop: Header=BB38_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_159
.LBB38_169:                             # %for.end679
                                        #   in Loop: Header=BB38_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB38_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB38_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB38_171:                             # %if.end682
                                        #   in Loop: Header=BB38_1 Depth=1
	jmp	.LBB38_172
.LBB38_172:                             # %for.inc683
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_1
.LBB38_173:                             # %for.end685
	cmpl	$854181995, -44(%rbp)   # imm = 0x32E9C86B
	jne	.LBB38_175
.LBB38_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_174
.Lfunc_end38:
	.size	GetCtxModelNumber.31, .Lfunc_end38-GetCtxModelNumber.31
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.32       # -- Begin function store_contexts.32
	.p2align	4, 0x90
	.type	store_contexts.32,@function
store_contexts.32:                      # @store_contexts.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$797779597, -16(%rbp)   # imm = 0x2F8D268D
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -12(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB39_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-12(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB39_3
.LBB39_2:                               # %if.else
	jmp	.LBB39_3
.LBB39_3:                               # %if.end
	cmpl	$797779597, -16(%rbp)   # imm = 0x2F8D268D
	jne	.LBB39_5
.LBB39_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_4
.Lfunc_end39:
	.size	store_contexts.32, .Lfunc_end39-store_contexts.32
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.33
.LCPI40_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.33
	.p2align	4, 0x90
	.type	GetCtxModelNumber.33,@function
GetCtxModelNumber.33:                   # @GetCtxModelNumber.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI40_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$872311738, -44(%rbp)   # imm = 0x33FE6BBA
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB40_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_3 Depth 2
                                        #       Child Loop BB40_5 Depth 3
                                        #     Child Loop BB40_14 Depth 2
                                        #       Child Loop BB40_16 Depth 3
                                        #     Child Loop BB40_25 Depth 2
                                        #       Child Loop BB40_27 Depth 3
                                        #     Child Loop BB40_36 Depth 2
                                        #       Child Loop BB40_38 Depth 3
                                        #     Child Loop BB40_47 Depth 2
                                        #     Child Loop BB40_54 Depth 2
                                        #     Child Loop BB40_61 Depth 2
                                        #     Child Loop BB40_68 Depth 2
                                        #     Child Loop BB40_75 Depth 2
                                        #     Child Loop BB40_82 Depth 2
                                        #       Child Loop BB40_84 Depth 3
                                        #     Child Loop BB40_93 Depth 2
                                        #       Child Loop BB40_95 Depth 3
                                        #     Child Loop BB40_104 Depth 2
                                        #       Child Loop BB40_106 Depth 3
                                        #     Child Loop BB40_115 Depth 2
                                        #       Child Loop BB40_117 Depth 3
                                        #     Child Loop BB40_126 Depth 2
                                        #       Child Loop BB40_128 Depth 3
                                        #     Child Loop BB40_137 Depth 2
                                        #       Child Loop BB40_139 Depth 3
                                        #     Child Loop BB40_148 Depth 2
                                        #       Child Loop BB40_150 Depth 3
                                        #     Child Loop BB40_159 Depth 2
                                        #       Child Loop BB40_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB40_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB40_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB40_3:                               # %for.cond2
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB40_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB40_3 Depth=2
	movl	$0, -4(%rbp)
.LBB40_5:                               # %for.cond5
                                        #   Parent Loop BB40_1 Depth=1
                                        #     Parent Loop BB40_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB40_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB40_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB40_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB40_9
.LBB40_8:                               # %if.else
                                        #   in Loop: Header=BB40_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB40_9:                               # %if.end
                                        #   in Loop: Header=BB40_5 Depth=3
	jmp	.LBB40_10
.LBB40_10:                              # %for.inc
                                        #   in Loop: Header=BB40_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_5
.LBB40_11:                              # %for.end
                                        #   in Loop: Header=BB40_3 Depth=2
	jmp	.LBB40_12
.LBB40_12:                              # %for.inc33
                                        #   in Loop: Header=BB40_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_3
.LBB40_13:                              # %for.end35
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -8(%rbp)
.LBB40_14:                              # %for.cond36
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB40_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB40_14 Depth=2
	movl	$0, -4(%rbp)
.LBB40_16:                              # %for.cond39
                                        #   Parent Loop BB40_1 Depth=1
                                        #     Parent Loop BB40_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB40_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB40_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB40_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB40_20
.LBB40_19:                              # %if.else58
                                        #   in Loop: Header=BB40_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB40_20:                              # %if.end73
                                        #   in Loop: Header=BB40_16 Depth=3
	jmp	.LBB40_21
.LBB40_21:                              # %for.inc74
                                        #   in Loop: Header=BB40_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_16
.LBB40_22:                              # %for.end76
                                        #   in Loop: Header=BB40_14 Depth=2
	jmp	.LBB40_23
.LBB40_23:                              # %for.inc77
                                        #   in Loop: Header=BB40_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_14
.LBB40_24:                              # %for.end79
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -8(%rbp)
.LBB40_25:                              # %for.cond80
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB40_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB40_25 Depth=2
	movl	$0, -4(%rbp)
.LBB40_27:                              # %for.cond83
                                        #   Parent Loop BB40_1 Depth=1
                                        #     Parent Loop BB40_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB40_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB40_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB40_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB40_31
.LBB40_30:                              # %if.else102
                                        #   in Loop: Header=BB40_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB40_31:                              # %if.end117
                                        #   in Loop: Header=BB40_27 Depth=3
	jmp	.LBB40_32
.LBB40_32:                              # %for.inc118
                                        #   in Loop: Header=BB40_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_27
.LBB40_33:                              # %for.end120
                                        #   in Loop: Header=BB40_25 Depth=2
	jmp	.LBB40_34
.LBB40_34:                              # %for.inc121
                                        #   in Loop: Header=BB40_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_25
.LBB40_35:                              # %for.end123
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -8(%rbp)
.LBB40_36:                              # %for.cond124
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB40_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB40_36 Depth=2
	movl	$0, -4(%rbp)
.LBB40_38:                              # %for.cond127
                                        #   Parent Loop BB40_1 Depth=1
                                        #     Parent Loop BB40_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB40_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB40_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB40_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB40_42
.LBB40_41:                              # %if.else146
                                        #   in Loop: Header=BB40_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB40_42:                              # %if.end161
                                        #   in Loop: Header=BB40_38 Depth=3
	jmp	.LBB40_43
.LBB40_43:                              # %for.inc162
                                        #   in Loop: Header=BB40_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_38
.LBB40_44:                              # %for.end164
                                        #   in Loop: Header=BB40_36 Depth=2
	jmp	.LBB40_45
.LBB40_45:                              # %for.inc165
                                        #   in Loop: Header=BB40_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_36
.LBB40_46:                              # %for.end167
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -4(%rbp)
.LBB40_47:                              # %for.cond168
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB40_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB40_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB40_51
.LBB40_50:                              # %if.else184
                                        #   in Loop: Header=BB40_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB40_51:                              # %if.end196
                                        #   in Loop: Header=BB40_47 Depth=2
	jmp	.LBB40_52
.LBB40_52:                              # %for.inc197
                                        #   in Loop: Header=BB40_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_47
.LBB40_53:                              # %for.end199
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -4(%rbp)
.LBB40_54:                              # %for.cond200
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB40_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB40_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB40_58
.LBB40_57:                              # %if.else216
                                        #   in Loop: Header=BB40_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB40_58:                              # %if.end228
                                        #   in Loop: Header=BB40_54 Depth=2
	jmp	.LBB40_59
.LBB40_59:                              # %for.inc229
                                        #   in Loop: Header=BB40_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_54
.LBB40_60:                              # %for.end231
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -4(%rbp)
.LBB40_61:                              # %for.cond232
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB40_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB40_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB40_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB40_65
.LBB40_64:                              # %if.else248
                                        #   in Loop: Header=BB40_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB40_65:                              # %if.end260
                                        #   in Loop: Header=BB40_61 Depth=2
	jmp	.LBB40_66
.LBB40_66:                              # %for.inc261
                                        #   in Loop: Header=BB40_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_61
.LBB40_67:                              # %for.end263
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -4(%rbp)
.LBB40_68:                              # %for.cond264
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB40_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB40_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB40_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB40_72
.LBB40_71:                              # %if.else280
                                        #   in Loop: Header=BB40_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB40_72:                              # %if.end292
                                        #   in Loop: Header=BB40_68 Depth=2
	jmp	.LBB40_73
.LBB40_73:                              # %for.inc293
                                        #   in Loop: Header=BB40_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_68
.LBB40_74:                              # %for.end295
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -4(%rbp)
.LBB40_75:                              # %for.cond296
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB40_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB40_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB40_79
.LBB40_78:                              # %if.else312
                                        #   in Loop: Header=BB40_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB40_79:                              # %if.end324
                                        #   in Loop: Header=BB40_75 Depth=2
	jmp	.LBB40_80
.LBB40_80:                              # %for.inc325
                                        #   in Loop: Header=BB40_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_75
.LBB40_81:                              # %for.end327
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -8(%rbp)
.LBB40_82:                              # %for.cond328
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB40_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB40_82 Depth=2
	movl	$0, -4(%rbp)
.LBB40_84:                              # %for.cond331
                                        #   Parent Loop BB40_1 Depth=1
                                        #     Parent Loop BB40_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB40_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB40_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB40_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB40_88
.LBB40_87:                              # %if.else350
                                        #   in Loop: Header=BB40_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB40_88:                              # %if.end365
                                        #   in Loop: Header=BB40_84 Depth=3
	jmp	.LBB40_89
.LBB40_89:                              # %for.inc366
                                        #   in Loop: Header=BB40_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_84
.LBB40_90:                              # %for.end368
                                        #   in Loop: Header=BB40_82 Depth=2
	jmp	.LBB40_91
.LBB40_91:                              # %for.inc369
                                        #   in Loop: Header=BB40_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_82
.LBB40_92:                              # %for.end371
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -8(%rbp)
.LBB40_93:                              # %for.cond372
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB40_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB40_93 Depth=2
	movl	$0, -4(%rbp)
.LBB40_95:                              # %for.cond375
                                        #   Parent Loop BB40_1 Depth=1
                                        #     Parent Loop BB40_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB40_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB40_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB40_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB40_99
.LBB40_98:                              # %if.else394
                                        #   in Loop: Header=BB40_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB40_99:                              # %if.end409
                                        #   in Loop: Header=BB40_95 Depth=3
	jmp	.LBB40_100
.LBB40_100:                             # %for.inc410
                                        #   in Loop: Header=BB40_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_95
.LBB40_101:                             # %for.end412
                                        #   in Loop: Header=BB40_93 Depth=2
	jmp	.LBB40_102
.LBB40_102:                             # %for.inc413
                                        #   in Loop: Header=BB40_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_93
.LBB40_103:                             # %for.end415
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -8(%rbp)
.LBB40_104:                             # %for.cond416
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB40_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB40_104 Depth=2
	movl	$0, -4(%rbp)
.LBB40_106:                             # %for.cond419
                                        #   Parent Loop BB40_1 Depth=1
                                        #     Parent Loop BB40_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB40_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB40_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB40_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB40_110
.LBB40_109:                             # %if.else438
                                        #   in Loop: Header=BB40_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB40_110:                             # %if.end453
                                        #   in Loop: Header=BB40_106 Depth=3
	jmp	.LBB40_111
.LBB40_111:                             # %for.inc454
                                        #   in Loop: Header=BB40_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_106
.LBB40_112:                             # %for.end456
                                        #   in Loop: Header=BB40_104 Depth=2
	jmp	.LBB40_113
.LBB40_113:                             # %for.inc457
                                        #   in Loop: Header=BB40_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_104
.LBB40_114:                             # %for.end459
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -8(%rbp)
.LBB40_115:                             # %for.cond460
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB40_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB40_115 Depth=2
	movl	$0, -4(%rbp)
.LBB40_117:                             # %for.cond463
                                        #   Parent Loop BB40_1 Depth=1
                                        #     Parent Loop BB40_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB40_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB40_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB40_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB40_121
.LBB40_120:                             # %if.else482
                                        #   in Loop: Header=BB40_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB40_121:                             # %if.end497
                                        #   in Loop: Header=BB40_117 Depth=3
	jmp	.LBB40_122
.LBB40_122:                             # %for.inc498
                                        #   in Loop: Header=BB40_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_117
.LBB40_123:                             # %for.end500
                                        #   in Loop: Header=BB40_115 Depth=2
	jmp	.LBB40_124
.LBB40_124:                             # %for.inc501
                                        #   in Loop: Header=BB40_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_115
.LBB40_125:                             # %for.end503
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -8(%rbp)
.LBB40_126:                             # %for.cond504
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB40_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB40_126 Depth=2
	movl	$0, -4(%rbp)
.LBB40_128:                             # %for.cond507
                                        #   Parent Loop BB40_1 Depth=1
                                        #     Parent Loop BB40_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB40_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB40_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB40_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB40_132
.LBB40_131:                             # %if.else526
                                        #   in Loop: Header=BB40_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB40_132:                             # %if.end541
                                        #   in Loop: Header=BB40_128 Depth=3
	jmp	.LBB40_133
.LBB40_133:                             # %for.inc542
                                        #   in Loop: Header=BB40_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_128
.LBB40_134:                             # %for.end544
                                        #   in Loop: Header=BB40_126 Depth=2
	jmp	.LBB40_135
.LBB40_135:                             # %for.inc545
                                        #   in Loop: Header=BB40_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_126
.LBB40_136:                             # %for.end547
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -8(%rbp)
.LBB40_137:                             # %for.cond548
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB40_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB40_137 Depth=2
	movl	$0, -4(%rbp)
.LBB40_139:                             # %for.cond551
                                        #   Parent Loop BB40_1 Depth=1
                                        #     Parent Loop BB40_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB40_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB40_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB40_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB40_143
.LBB40_142:                             # %if.else570
                                        #   in Loop: Header=BB40_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB40_143:                             # %if.end585
                                        #   in Loop: Header=BB40_139 Depth=3
	jmp	.LBB40_144
.LBB40_144:                             # %for.inc586
                                        #   in Loop: Header=BB40_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_139
.LBB40_145:                             # %for.end588
                                        #   in Loop: Header=BB40_137 Depth=2
	jmp	.LBB40_146
.LBB40_146:                             # %for.inc589
                                        #   in Loop: Header=BB40_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_137
.LBB40_147:                             # %for.end591
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -8(%rbp)
.LBB40_148:                             # %for.cond592
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB40_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB40_148 Depth=2
	movl	$0, -4(%rbp)
.LBB40_150:                             # %for.cond595
                                        #   Parent Loop BB40_1 Depth=1
                                        #     Parent Loop BB40_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB40_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB40_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB40_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB40_154
.LBB40_153:                             # %if.else614
                                        #   in Loop: Header=BB40_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB40_154:                             # %if.end629
                                        #   in Loop: Header=BB40_150 Depth=3
	jmp	.LBB40_155
.LBB40_155:                             # %for.inc630
                                        #   in Loop: Header=BB40_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_150
.LBB40_156:                             # %for.end632
                                        #   in Loop: Header=BB40_148 Depth=2
	jmp	.LBB40_157
.LBB40_157:                             # %for.inc633
                                        #   in Loop: Header=BB40_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_148
.LBB40_158:                             # %for.end635
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -8(%rbp)
.LBB40_159:                             # %for.cond636
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB40_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB40_159 Depth=2
	movl	$0, -4(%rbp)
.LBB40_161:                             # %for.cond639
                                        #   Parent Loop BB40_1 Depth=1
                                        #     Parent Loop BB40_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB40_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB40_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB40_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB40_165
.LBB40_164:                             # %if.else658
                                        #   in Loop: Header=BB40_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB40_165:                             # %if.end673
                                        #   in Loop: Header=BB40_161 Depth=3
	jmp	.LBB40_166
.LBB40_166:                             # %for.inc674
                                        #   in Loop: Header=BB40_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_161
.LBB40_167:                             # %for.end676
                                        #   in Loop: Header=BB40_159 Depth=2
	jmp	.LBB40_168
.LBB40_168:                             # %for.inc677
                                        #   in Loop: Header=BB40_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_159
.LBB40_169:                             # %for.end679
                                        #   in Loop: Header=BB40_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB40_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB40_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB40_171:                             # %if.end682
                                        #   in Loop: Header=BB40_1 Depth=1
	jmp	.LBB40_172
.LBB40_172:                             # %for.inc683
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB40_1
.LBB40_173:                             # %for.end685
	cmpl	$872311738, -44(%rbp)   # imm = 0x33FE6BBA
	jne	.LBB40_175
.LBB40_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_174
.Lfunc_end40:
	.size	GetCtxModelNumber.33, .Lfunc_end40-GetCtxModelNumber.33
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory.34  # -- Begin function free_context_memory.34
	.p2align	4, 0x90
	.type	free_context_memory.34,@function
free_context_memory.34:                 # @free_context_memory.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$997217135, -12(%rbp)   # imm = 0x3B70536F
	movl	$0, -4(%rbp)
.LBB41_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_3 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB41_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	$0, -8(%rbp)
.LBB41_3:                               # %for.cond1
                                        #   Parent Loop BB41_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB41_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB41_3 Depth=2
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB41_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_3
.LBB41_6:                               # %for.end
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.7:                                # %for.inc14
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_1
.LBB41_8:                               # %for.end16
	movq	initialized, %rdi
	callq	free
	movq	model_number, %rdi
	callq	free
	cmpl	$997217135, -12(%rbp)   # imm = 0x3B70536F
	jne	.LBB41_10
.LBB41_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_9
.Lfunc_end41:
	.size	free_context_memory.34, .Lfunc_end41-free_context_memory.34
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.35
.LCPI42_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.35
	.p2align	4, 0x90
	.type	GetCtxModelNumber.35,@function
GetCtxModelNumber.35:                   # @GetCtxModelNumber.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI42_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$489436139, -48(%rbp)   # imm = 0x1D2C33EB
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB42_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_3 Depth 2
                                        #       Child Loop BB42_5 Depth 3
                                        #     Child Loop BB42_14 Depth 2
                                        #       Child Loop BB42_16 Depth 3
                                        #     Child Loop BB42_25 Depth 2
                                        #       Child Loop BB42_27 Depth 3
                                        #     Child Loop BB42_36 Depth 2
                                        #       Child Loop BB42_38 Depth 3
                                        #     Child Loop BB42_47 Depth 2
                                        #     Child Loop BB42_54 Depth 2
                                        #     Child Loop BB42_61 Depth 2
                                        #     Child Loop BB42_68 Depth 2
                                        #     Child Loop BB42_75 Depth 2
                                        #     Child Loop BB42_82 Depth 2
                                        #       Child Loop BB42_84 Depth 3
                                        #     Child Loop BB42_93 Depth 2
                                        #       Child Loop BB42_95 Depth 3
                                        #     Child Loop BB42_104 Depth 2
                                        #       Child Loop BB42_106 Depth 3
                                        #     Child Loop BB42_115 Depth 2
                                        #       Child Loop BB42_117 Depth 3
                                        #     Child Loop BB42_126 Depth 2
                                        #       Child Loop BB42_128 Depth 3
                                        #     Child Loop BB42_137 Depth 2
                                        #       Child Loop BB42_139 Depth 3
                                        #     Child Loop BB42_148 Depth 2
                                        #       Child Loop BB42_150 Depth 3
                                        #     Child Loop BB42_159 Depth 2
                                        #       Child Loop BB42_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB42_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB42_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB42_3:                               # %for.cond2
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB42_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB42_3 Depth=2
	movl	$0, -4(%rbp)
.LBB42_5:                               # %for.cond5
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB42_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB42_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB42_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_9
.LBB42_8:                               # %if.else
                                        #   in Loop: Header=BB42_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_9:                               # %if.end
                                        #   in Loop: Header=BB42_5 Depth=3
	jmp	.LBB42_10
.LBB42_10:                              # %for.inc
                                        #   in Loop: Header=BB42_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_5
.LBB42_11:                              # %for.end
                                        #   in Loop: Header=BB42_3 Depth=2
	jmp	.LBB42_12
.LBB42_12:                              # %for.inc33
                                        #   in Loop: Header=BB42_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_3
.LBB42_13:                              # %for.end35
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_14:                              # %for.cond36
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB42_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB42_14 Depth=2
	movl	$0, -4(%rbp)
.LBB42_16:                              # %for.cond39
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB42_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB42_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB42_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_20
.LBB42_19:                              # %if.else58
                                        #   in Loop: Header=BB42_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_20:                              # %if.end73
                                        #   in Loop: Header=BB42_16 Depth=3
	jmp	.LBB42_21
.LBB42_21:                              # %for.inc74
                                        #   in Loop: Header=BB42_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_16
.LBB42_22:                              # %for.end76
                                        #   in Loop: Header=BB42_14 Depth=2
	jmp	.LBB42_23
.LBB42_23:                              # %for.inc77
                                        #   in Loop: Header=BB42_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_14
.LBB42_24:                              # %for.end79
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_25:                              # %for.cond80
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB42_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB42_25 Depth=2
	movl	$0, -4(%rbp)
.LBB42_27:                              # %for.cond83
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB42_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB42_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB42_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_31
.LBB42_30:                              # %if.else102
                                        #   in Loop: Header=BB42_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_31:                              # %if.end117
                                        #   in Loop: Header=BB42_27 Depth=3
	jmp	.LBB42_32
.LBB42_32:                              # %for.inc118
                                        #   in Loop: Header=BB42_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_27
.LBB42_33:                              # %for.end120
                                        #   in Loop: Header=BB42_25 Depth=2
	jmp	.LBB42_34
.LBB42_34:                              # %for.inc121
                                        #   in Loop: Header=BB42_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_25
.LBB42_35:                              # %for.end123
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_36:                              # %for.cond124
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB42_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB42_36 Depth=2
	movl	$0, -4(%rbp)
.LBB42_38:                              # %for.cond127
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB42_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB42_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB42_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_42
.LBB42_41:                              # %if.else146
                                        #   in Loop: Header=BB42_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_42:                              # %if.end161
                                        #   in Loop: Header=BB42_38 Depth=3
	jmp	.LBB42_43
.LBB42_43:                              # %for.inc162
                                        #   in Loop: Header=BB42_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_38
.LBB42_44:                              # %for.end164
                                        #   in Loop: Header=BB42_36 Depth=2
	jmp	.LBB42_45
.LBB42_45:                              # %for.inc165
                                        #   in Loop: Header=BB42_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_36
.LBB42_46:                              # %for.end167
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -4(%rbp)
.LBB42_47:                              # %for.cond168
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB42_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB42_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB42_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_51
.LBB42_50:                              # %if.else184
                                        #   in Loop: Header=BB42_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_51:                              # %if.end196
                                        #   in Loop: Header=BB42_47 Depth=2
	jmp	.LBB42_52
.LBB42_52:                              # %for.inc197
                                        #   in Loop: Header=BB42_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_47
.LBB42_53:                              # %for.end199
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -4(%rbp)
.LBB42_54:                              # %for.cond200
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB42_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB42_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB42_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_58
.LBB42_57:                              # %if.else216
                                        #   in Loop: Header=BB42_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_58:                              # %if.end228
                                        #   in Loop: Header=BB42_54 Depth=2
	jmp	.LBB42_59
.LBB42_59:                              # %for.inc229
                                        #   in Loop: Header=BB42_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_54
.LBB42_60:                              # %for.end231
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -4(%rbp)
.LBB42_61:                              # %for.cond232
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB42_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB42_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB42_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_65
.LBB42_64:                              # %if.else248
                                        #   in Loop: Header=BB42_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_65:                              # %if.end260
                                        #   in Loop: Header=BB42_61 Depth=2
	jmp	.LBB42_66
.LBB42_66:                              # %for.inc261
                                        #   in Loop: Header=BB42_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_61
.LBB42_67:                              # %for.end263
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -4(%rbp)
.LBB42_68:                              # %for.cond264
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB42_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB42_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB42_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_72
.LBB42_71:                              # %if.else280
                                        #   in Loop: Header=BB42_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_72:                              # %if.end292
                                        #   in Loop: Header=BB42_68 Depth=2
	jmp	.LBB42_73
.LBB42_73:                              # %for.inc293
                                        #   in Loop: Header=BB42_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_68
.LBB42_74:                              # %for.end295
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -4(%rbp)
.LBB42_75:                              # %for.cond296
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB42_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB42_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB42_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_79
.LBB42_78:                              # %if.else312
                                        #   in Loop: Header=BB42_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_79:                              # %if.end324
                                        #   in Loop: Header=BB42_75 Depth=2
	jmp	.LBB42_80
.LBB42_80:                              # %for.inc325
                                        #   in Loop: Header=BB42_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_75
.LBB42_81:                              # %for.end327
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_82:                              # %for.cond328
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB42_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB42_82 Depth=2
	movl	$0, -4(%rbp)
.LBB42_84:                              # %for.cond331
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB42_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB42_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB42_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_88
.LBB42_87:                              # %if.else350
                                        #   in Loop: Header=BB42_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_88:                              # %if.end365
                                        #   in Loop: Header=BB42_84 Depth=3
	jmp	.LBB42_89
.LBB42_89:                              # %for.inc366
                                        #   in Loop: Header=BB42_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_84
.LBB42_90:                              # %for.end368
                                        #   in Loop: Header=BB42_82 Depth=2
	jmp	.LBB42_91
.LBB42_91:                              # %for.inc369
                                        #   in Loop: Header=BB42_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_82
.LBB42_92:                              # %for.end371
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_93:                              # %for.cond372
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB42_93 Depth=2
	movl	$0, -4(%rbp)
.LBB42_95:                              # %for.cond375
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB42_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB42_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB42_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_99
.LBB42_98:                              # %if.else394
                                        #   in Loop: Header=BB42_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_99:                              # %if.end409
                                        #   in Loop: Header=BB42_95 Depth=3
	jmp	.LBB42_100
.LBB42_100:                             # %for.inc410
                                        #   in Loop: Header=BB42_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_95
.LBB42_101:                             # %for.end412
                                        #   in Loop: Header=BB42_93 Depth=2
	jmp	.LBB42_102
.LBB42_102:                             # %for.inc413
                                        #   in Loop: Header=BB42_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_93
.LBB42_103:                             # %for.end415
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_104:                             # %for.cond416
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB42_104 Depth=2
	movl	$0, -4(%rbp)
.LBB42_106:                             # %for.cond419
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB42_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB42_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB42_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_110
.LBB42_109:                             # %if.else438
                                        #   in Loop: Header=BB42_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_110:                             # %if.end453
                                        #   in Loop: Header=BB42_106 Depth=3
	jmp	.LBB42_111
.LBB42_111:                             # %for.inc454
                                        #   in Loop: Header=BB42_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_106
.LBB42_112:                             # %for.end456
                                        #   in Loop: Header=BB42_104 Depth=2
	jmp	.LBB42_113
.LBB42_113:                             # %for.inc457
                                        #   in Loop: Header=BB42_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_104
.LBB42_114:                             # %for.end459
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_115:                             # %for.cond460
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB42_115 Depth=2
	movl	$0, -4(%rbp)
.LBB42_117:                             # %for.cond463
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB42_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB42_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB42_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_121
.LBB42_120:                             # %if.else482
                                        #   in Loop: Header=BB42_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_121:                             # %if.end497
                                        #   in Loop: Header=BB42_117 Depth=3
	jmp	.LBB42_122
.LBB42_122:                             # %for.inc498
                                        #   in Loop: Header=BB42_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_117
.LBB42_123:                             # %for.end500
                                        #   in Loop: Header=BB42_115 Depth=2
	jmp	.LBB42_124
.LBB42_124:                             # %for.inc501
                                        #   in Loop: Header=BB42_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_115
.LBB42_125:                             # %for.end503
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_126:                             # %for.cond504
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB42_126 Depth=2
	movl	$0, -4(%rbp)
.LBB42_128:                             # %for.cond507
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB42_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB42_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB42_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_132
.LBB42_131:                             # %if.else526
                                        #   in Loop: Header=BB42_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_132:                             # %if.end541
                                        #   in Loop: Header=BB42_128 Depth=3
	jmp	.LBB42_133
.LBB42_133:                             # %for.inc542
                                        #   in Loop: Header=BB42_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_128
.LBB42_134:                             # %for.end544
                                        #   in Loop: Header=BB42_126 Depth=2
	jmp	.LBB42_135
.LBB42_135:                             # %for.inc545
                                        #   in Loop: Header=BB42_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_126
.LBB42_136:                             # %for.end547
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_137:                             # %for.cond548
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB42_137 Depth=2
	movl	$0, -4(%rbp)
.LBB42_139:                             # %for.cond551
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB42_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB42_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB42_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_143
.LBB42_142:                             # %if.else570
                                        #   in Loop: Header=BB42_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_143:                             # %if.end585
                                        #   in Loop: Header=BB42_139 Depth=3
	jmp	.LBB42_144
.LBB42_144:                             # %for.inc586
                                        #   in Loop: Header=BB42_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_139
.LBB42_145:                             # %for.end588
                                        #   in Loop: Header=BB42_137 Depth=2
	jmp	.LBB42_146
.LBB42_146:                             # %for.inc589
                                        #   in Loop: Header=BB42_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_137
.LBB42_147:                             # %for.end591
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_148:                             # %for.cond592
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB42_148 Depth=2
	movl	$0, -4(%rbp)
.LBB42_150:                             # %for.cond595
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB42_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB42_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB42_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_154
.LBB42_153:                             # %if.else614
                                        #   in Loop: Header=BB42_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_154:                             # %if.end629
                                        #   in Loop: Header=BB42_150 Depth=3
	jmp	.LBB42_155
.LBB42_155:                             # %for.inc630
                                        #   in Loop: Header=BB42_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_150
.LBB42_156:                             # %for.end632
                                        #   in Loop: Header=BB42_148 Depth=2
	jmp	.LBB42_157
.LBB42_157:                             # %for.inc633
                                        #   in Loop: Header=BB42_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_148
.LBB42_158:                             # %for.end635
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_159:                             # %for.cond636
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB42_159 Depth=2
	movl	$0, -4(%rbp)
.LBB42_161:                             # %for.cond639
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB42_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB42_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB42_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_165
.LBB42_164:                             # %if.else658
                                        #   in Loop: Header=BB42_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_165:                             # %if.end673
                                        #   in Loop: Header=BB42_161 Depth=3
	jmp	.LBB42_166
.LBB42_166:                             # %for.inc674
                                        #   in Loop: Header=BB42_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_161
.LBB42_167:                             # %for.end676
                                        #   in Loop: Header=BB42_159 Depth=2
	jmp	.LBB42_168
.LBB42_168:                             # %for.inc677
                                        #   in Loop: Header=BB42_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_159
.LBB42_169:                             # %for.end679
                                        #   in Loop: Header=BB42_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB42_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB42_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB42_171:                             # %if.end682
                                        #   in Loop: Header=BB42_1 Depth=1
	jmp	.LBB42_172
.LBB42_172:                             # %for.inc683
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_1
.LBB42_173:                             # %for.end685
	cmpl	$489436139, -48(%rbp)   # imm = 0x1D2C33EB
	jne	.LBB42_175
.LBB42_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_174
.Lfunc_end42:
	.size	GetCtxModelNumber.35, .Lfunc_end42-GetCtxModelNumber.35
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.36        # -- Begin function init_contexts.36
	.p2align	4, 0x90
	.type	init_contexts.36,@function
init_contexts.36:                       # @init_contexts.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2027509056, -28(%rbp)  # imm = 0x78D95540
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB43_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB43_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -4(%rbp)
.LBB43_3:                               # %for.cond2
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB43_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB43_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB43_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_7
.LBB43_6:                               # %if.else
                                        #   in Loop: Header=BB43_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_7:                               # %if.end
                                        #   in Loop: Header=BB43_3 Depth=2
	jmp	.LBB43_8
.LBB43_8:                               # %for.inc
                                        #   in Loop: Header=BB43_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_3
.LBB43_9:                               # %for.end
                                        #   in Loop: Header=BB43_1 Depth=1
	jmp	.LBB43_10
.LBB43_10:                              # %for.inc28
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_1
.LBB43_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB43_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB43_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB43_12 Depth=1
	movl	$0, -4(%rbp)
.LBB43_14:                              # %for.cond34
                                        #   Parent Loop BB43_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB43_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB43_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB43_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_18
.LBB43_17:                              # %if.else52
                                        #   in Loop: Header=BB43_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_18:                              # %if.end66
                                        #   in Loop: Header=BB43_14 Depth=2
	jmp	.LBB43_19
.LBB43_19:                              # %for.inc67
                                        #   in Loop: Header=BB43_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_14
.LBB43_20:                              # %for.end69
                                        #   in Loop: Header=BB43_12 Depth=1
	jmp	.LBB43_21
.LBB43_21:                              # %for.inc70
                                        #   in Loop: Header=BB43_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_12
.LBB43_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB43_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB43_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB43_23 Depth=1
	movl	$0, -4(%rbp)
.LBB43_25:                              # %for.cond76
                                        #   Parent Loop BB43_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB43_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB43_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB43_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_29
.LBB43_28:                              # %if.else94
                                        #   in Loop: Header=BB43_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_29:                              # %if.end108
                                        #   in Loop: Header=BB43_25 Depth=2
	jmp	.LBB43_30
.LBB43_30:                              # %for.inc109
                                        #   in Loop: Header=BB43_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_25
.LBB43_31:                              # %for.end111
                                        #   in Loop: Header=BB43_23 Depth=1
	jmp	.LBB43_32
.LBB43_32:                              # %for.inc112
                                        #   in Loop: Header=BB43_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_23
.LBB43_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB43_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB43_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB43_34 Depth=1
	movl	$0, -4(%rbp)
.LBB43_36:                              # %for.cond118
                                        #   Parent Loop BB43_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB43_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB43_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB43_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_40
.LBB43_39:                              # %if.else136
                                        #   in Loop: Header=BB43_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_40:                              # %if.end150
                                        #   in Loop: Header=BB43_36 Depth=2
	jmp	.LBB43_41
.LBB43_41:                              # %for.inc151
                                        #   in Loop: Header=BB43_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_36
.LBB43_42:                              # %for.end153
                                        #   in Loop: Header=BB43_34 Depth=1
	jmp	.LBB43_43
.LBB43_43:                              # %for.inc154
                                        #   in Loop: Header=BB43_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_34
.LBB43_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB43_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB43_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB43_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB43_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_49
.LBB43_48:                              # %if.else172
                                        #   in Loop: Header=BB43_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_49:                              # %if.end183
                                        #   in Loop: Header=BB43_45 Depth=1
	jmp	.LBB43_50
.LBB43_50:                              # %for.inc184
                                        #   in Loop: Header=BB43_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_45
.LBB43_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB43_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB43_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB43_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB43_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_56
.LBB43_55:                              # %if.else202
                                        #   in Loop: Header=BB43_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_56:                              # %if.end213
                                        #   in Loop: Header=BB43_52 Depth=1
	jmp	.LBB43_57
.LBB43_57:                              # %for.inc214
                                        #   in Loop: Header=BB43_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_52
.LBB43_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB43_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB43_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB43_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB43_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_63
.LBB43_62:                              # %if.else232
                                        #   in Loop: Header=BB43_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_63:                              # %if.end243
                                        #   in Loop: Header=BB43_59 Depth=1
	jmp	.LBB43_64
.LBB43_64:                              # %for.inc244
                                        #   in Loop: Header=BB43_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_59
.LBB43_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB43_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB43_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB43_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB43_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_70
.LBB43_69:                              # %if.else262
                                        #   in Loop: Header=BB43_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_70:                              # %if.end273
                                        #   in Loop: Header=BB43_66 Depth=1
	jmp	.LBB43_71
.LBB43_71:                              # %for.inc274
                                        #   in Loop: Header=BB43_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_66
.LBB43_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB43_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB43_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB43_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB43_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_77
.LBB43_76:                              # %if.else292
                                        #   in Loop: Header=BB43_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_77:                              # %if.end303
                                        #   in Loop: Header=BB43_73 Depth=1
	jmp	.LBB43_78
.LBB43_78:                              # %for.inc304
                                        #   in Loop: Header=BB43_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_73
.LBB43_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB43_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB43_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB43_80 Depth=1
	movl	$0, -4(%rbp)
.LBB43_82:                              # %for.cond310
                                        #   Parent Loop BB43_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB43_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB43_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_86
.LBB43_85:                              # %if.else328
                                        #   in Loop: Header=BB43_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_86:                              # %if.end342
                                        #   in Loop: Header=BB43_82 Depth=2
	jmp	.LBB43_87
.LBB43_87:                              # %for.inc343
                                        #   in Loop: Header=BB43_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_82
.LBB43_88:                              # %for.end345
                                        #   in Loop: Header=BB43_80 Depth=1
	jmp	.LBB43_89
.LBB43_89:                              # %for.inc346
                                        #   in Loop: Header=BB43_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_80
.LBB43_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB43_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB43_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB43_91 Depth=1
	movl	$0, -4(%rbp)
.LBB43_93:                              # %for.cond352
                                        #   Parent Loop BB43_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB43_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB43_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_97
.LBB43_96:                              # %if.else370
                                        #   in Loop: Header=BB43_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_97:                              # %if.end384
                                        #   in Loop: Header=BB43_93 Depth=2
	jmp	.LBB43_98
.LBB43_98:                              # %for.inc385
                                        #   in Loop: Header=BB43_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_93
.LBB43_99:                              # %for.end387
                                        #   in Loop: Header=BB43_91 Depth=1
	jmp	.LBB43_100
.LBB43_100:                             # %for.inc388
                                        #   in Loop: Header=BB43_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_91
.LBB43_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB43_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB43_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB43_102 Depth=1
	movl	$0, -4(%rbp)
.LBB43_104:                             # %for.cond394
                                        #   Parent Loop BB43_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB43_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB43_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB43_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_108
.LBB43_107:                             # %if.else412
                                        #   in Loop: Header=BB43_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_108:                             # %if.end426
                                        #   in Loop: Header=BB43_104 Depth=2
	jmp	.LBB43_109
.LBB43_109:                             # %for.inc427
                                        #   in Loop: Header=BB43_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_104
.LBB43_110:                             # %for.end429
                                        #   in Loop: Header=BB43_102 Depth=1
	jmp	.LBB43_111
.LBB43_111:                             # %for.inc430
                                        #   in Loop: Header=BB43_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_102
.LBB43_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB43_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB43_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB43_113 Depth=1
	movl	$0, -4(%rbp)
.LBB43_115:                             # %for.cond436
                                        #   Parent Loop BB43_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB43_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB43_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB43_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_119
.LBB43_118:                             # %if.else454
                                        #   in Loop: Header=BB43_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_119:                             # %if.end468
                                        #   in Loop: Header=BB43_115 Depth=2
	jmp	.LBB43_120
.LBB43_120:                             # %for.inc469
                                        #   in Loop: Header=BB43_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_115
.LBB43_121:                             # %for.end471
                                        #   in Loop: Header=BB43_113 Depth=1
	jmp	.LBB43_122
.LBB43_122:                             # %for.inc472
                                        #   in Loop: Header=BB43_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_113
.LBB43_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB43_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB43_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB43_124 Depth=1
	movl	$0, -4(%rbp)
.LBB43_126:                             # %for.cond478
                                        #   Parent Loop BB43_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB43_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB43_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB43_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_130
.LBB43_129:                             # %if.else496
                                        #   in Loop: Header=BB43_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_130:                             # %if.end510
                                        #   in Loop: Header=BB43_126 Depth=2
	jmp	.LBB43_131
.LBB43_131:                             # %for.inc511
                                        #   in Loop: Header=BB43_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_126
.LBB43_132:                             # %for.end513
                                        #   in Loop: Header=BB43_124 Depth=1
	jmp	.LBB43_133
.LBB43_133:                             # %for.inc514
                                        #   in Loop: Header=BB43_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_124
.LBB43_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB43_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB43_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	$0, -4(%rbp)
.LBB43_137:                             # %for.cond520
                                        #   Parent Loop BB43_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB43_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB43_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB43_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_141
.LBB43_140:                             # %if.else538
                                        #   in Loop: Header=BB43_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_141:                             # %if.end552
                                        #   in Loop: Header=BB43_137 Depth=2
	jmp	.LBB43_142
.LBB43_142:                             # %for.inc553
                                        #   in Loop: Header=BB43_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_137
.LBB43_143:                             # %for.end555
                                        #   in Loop: Header=BB43_135 Depth=1
	jmp	.LBB43_144
.LBB43_144:                             # %for.inc556
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_135
.LBB43_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB43_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB43_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB43_146 Depth=1
	movl	$0, -4(%rbp)
.LBB43_148:                             # %for.cond562
                                        #   Parent Loop BB43_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB43_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB43_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB43_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_152
.LBB43_151:                             # %if.else580
                                        #   in Loop: Header=BB43_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_152:                             # %if.end594
                                        #   in Loop: Header=BB43_148 Depth=2
	jmp	.LBB43_153
.LBB43_153:                             # %for.inc595
                                        #   in Loop: Header=BB43_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_148
.LBB43_154:                             # %for.end597
                                        #   in Loop: Header=BB43_146 Depth=1
	jmp	.LBB43_155
.LBB43_155:                             # %for.inc598
                                        #   in Loop: Header=BB43_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_146
.LBB43_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB43_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB43_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB43_157 Depth=1
	movl	$0, -4(%rbp)
.LBB43_159:                             # %for.cond604
                                        #   Parent Loop BB43_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB43_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB43_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB43_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_163
.LBB43_162:                             # %if.else622
                                        #   in Loop: Header=BB43_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_163:                             # %if.end636
                                        #   in Loop: Header=BB43_159 Depth=2
	jmp	.LBB43_164
.LBB43_164:                             # %for.inc637
                                        #   in Loop: Header=BB43_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_159
.LBB43_165:                             # %for.end639
                                        #   in Loop: Header=BB43_157 Depth=1
	jmp	.LBB43_166
.LBB43_166:                             # %for.inc640
                                        #   in Loop: Header=BB43_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_157
.LBB43_167:                             # %for.end642
	cmpl	$2027509056, -28(%rbp)  # imm = 0x78D95540
	jne	.LBB43_169
.LBB43_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_168
.Lfunc_end43:
	.size	init_contexts.36, .Lfunc_end43-init_contexts.36
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.37
.LCPI44_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.37
	.p2align	4, 0x90
	.type	GetCtxModelNumber.37,@function
GetCtxModelNumber.37:                   # @GetCtxModelNumber.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI44_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$78546967, -48(%rbp)    # imm = 0x4AE8817
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB44_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_3 Depth 2
                                        #       Child Loop BB44_5 Depth 3
                                        #     Child Loop BB44_14 Depth 2
                                        #       Child Loop BB44_16 Depth 3
                                        #     Child Loop BB44_25 Depth 2
                                        #       Child Loop BB44_27 Depth 3
                                        #     Child Loop BB44_36 Depth 2
                                        #       Child Loop BB44_38 Depth 3
                                        #     Child Loop BB44_47 Depth 2
                                        #     Child Loop BB44_54 Depth 2
                                        #     Child Loop BB44_61 Depth 2
                                        #     Child Loop BB44_68 Depth 2
                                        #     Child Loop BB44_75 Depth 2
                                        #     Child Loop BB44_82 Depth 2
                                        #       Child Loop BB44_84 Depth 3
                                        #     Child Loop BB44_93 Depth 2
                                        #       Child Loop BB44_95 Depth 3
                                        #     Child Loop BB44_104 Depth 2
                                        #       Child Loop BB44_106 Depth 3
                                        #     Child Loop BB44_115 Depth 2
                                        #       Child Loop BB44_117 Depth 3
                                        #     Child Loop BB44_126 Depth 2
                                        #       Child Loop BB44_128 Depth 3
                                        #     Child Loop BB44_137 Depth 2
                                        #       Child Loop BB44_139 Depth 3
                                        #     Child Loop BB44_148 Depth 2
                                        #       Child Loop BB44_150 Depth 3
                                        #     Child Loop BB44_159 Depth 2
                                        #       Child Loop BB44_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB44_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB44_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB44_3:                               # %for.cond2
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB44_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	$0, -4(%rbp)
.LBB44_5:                               # %for.cond5
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB44_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB44_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB44_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_9
.LBB44_8:                               # %if.else
                                        #   in Loop: Header=BB44_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_9:                               # %if.end
                                        #   in Loop: Header=BB44_5 Depth=3
	jmp	.LBB44_10
.LBB44_10:                              # %for.inc
                                        #   in Loop: Header=BB44_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_5
.LBB44_11:                              # %for.end
                                        #   in Loop: Header=BB44_3 Depth=2
	jmp	.LBB44_12
.LBB44_12:                              # %for.inc33
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_3
.LBB44_13:                              # %for.end35
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_14:                              # %for.cond36
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB44_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB44_14 Depth=2
	movl	$0, -4(%rbp)
.LBB44_16:                              # %for.cond39
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB44_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB44_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB44_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_20
.LBB44_19:                              # %if.else58
                                        #   in Loop: Header=BB44_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_20:                              # %if.end73
                                        #   in Loop: Header=BB44_16 Depth=3
	jmp	.LBB44_21
.LBB44_21:                              # %for.inc74
                                        #   in Loop: Header=BB44_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_16
.LBB44_22:                              # %for.end76
                                        #   in Loop: Header=BB44_14 Depth=2
	jmp	.LBB44_23
.LBB44_23:                              # %for.inc77
                                        #   in Loop: Header=BB44_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_14
.LBB44_24:                              # %for.end79
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_25:                              # %for.cond80
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB44_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB44_25 Depth=2
	movl	$0, -4(%rbp)
.LBB44_27:                              # %for.cond83
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB44_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB44_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB44_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_31
.LBB44_30:                              # %if.else102
                                        #   in Loop: Header=BB44_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_31:                              # %if.end117
                                        #   in Loop: Header=BB44_27 Depth=3
	jmp	.LBB44_32
.LBB44_32:                              # %for.inc118
                                        #   in Loop: Header=BB44_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_27
.LBB44_33:                              # %for.end120
                                        #   in Loop: Header=BB44_25 Depth=2
	jmp	.LBB44_34
.LBB44_34:                              # %for.inc121
                                        #   in Loop: Header=BB44_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_25
.LBB44_35:                              # %for.end123
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_36:                              # %for.cond124
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB44_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB44_36 Depth=2
	movl	$0, -4(%rbp)
.LBB44_38:                              # %for.cond127
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB44_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB44_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB44_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_42
.LBB44_41:                              # %if.else146
                                        #   in Loop: Header=BB44_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_42:                              # %if.end161
                                        #   in Loop: Header=BB44_38 Depth=3
	jmp	.LBB44_43
.LBB44_43:                              # %for.inc162
                                        #   in Loop: Header=BB44_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_38
.LBB44_44:                              # %for.end164
                                        #   in Loop: Header=BB44_36 Depth=2
	jmp	.LBB44_45
.LBB44_45:                              # %for.inc165
                                        #   in Loop: Header=BB44_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_36
.LBB44_46:                              # %for.end167
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -4(%rbp)
.LBB44_47:                              # %for.cond168
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB44_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB44_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB44_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_51
.LBB44_50:                              # %if.else184
                                        #   in Loop: Header=BB44_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_51:                              # %if.end196
                                        #   in Loop: Header=BB44_47 Depth=2
	jmp	.LBB44_52
.LBB44_52:                              # %for.inc197
                                        #   in Loop: Header=BB44_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_47
.LBB44_53:                              # %for.end199
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -4(%rbp)
.LBB44_54:                              # %for.cond200
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB44_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB44_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB44_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_58
.LBB44_57:                              # %if.else216
                                        #   in Loop: Header=BB44_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_58:                              # %if.end228
                                        #   in Loop: Header=BB44_54 Depth=2
	jmp	.LBB44_59
.LBB44_59:                              # %for.inc229
                                        #   in Loop: Header=BB44_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_54
.LBB44_60:                              # %for.end231
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -4(%rbp)
.LBB44_61:                              # %for.cond232
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB44_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB44_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB44_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_65
.LBB44_64:                              # %if.else248
                                        #   in Loop: Header=BB44_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_65:                              # %if.end260
                                        #   in Loop: Header=BB44_61 Depth=2
	jmp	.LBB44_66
.LBB44_66:                              # %for.inc261
                                        #   in Loop: Header=BB44_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_61
.LBB44_67:                              # %for.end263
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -4(%rbp)
.LBB44_68:                              # %for.cond264
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB44_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB44_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB44_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_72
.LBB44_71:                              # %if.else280
                                        #   in Loop: Header=BB44_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_72:                              # %if.end292
                                        #   in Loop: Header=BB44_68 Depth=2
	jmp	.LBB44_73
.LBB44_73:                              # %for.inc293
                                        #   in Loop: Header=BB44_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_68
.LBB44_74:                              # %for.end295
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -4(%rbp)
.LBB44_75:                              # %for.cond296
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB44_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB44_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB44_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_79
.LBB44_78:                              # %if.else312
                                        #   in Loop: Header=BB44_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_79:                              # %if.end324
                                        #   in Loop: Header=BB44_75 Depth=2
	jmp	.LBB44_80
.LBB44_80:                              # %for.inc325
                                        #   in Loop: Header=BB44_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_75
.LBB44_81:                              # %for.end327
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_82:                              # %for.cond328
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB44_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB44_82 Depth=2
	movl	$0, -4(%rbp)
.LBB44_84:                              # %for.cond331
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB44_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB44_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB44_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_88
.LBB44_87:                              # %if.else350
                                        #   in Loop: Header=BB44_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_88:                              # %if.end365
                                        #   in Loop: Header=BB44_84 Depth=3
	jmp	.LBB44_89
.LBB44_89:                              # %for.inc366
                                        #   in Loop: Header=BB44_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_84
.LBB44_90:                              # %for.end368
                                        #   in Loop: Header=BB44_82 Depth=2
	jmp	.LBB44_91
.LBB44_91:                              # %for.inc369
                                        #   in Loop: Header=BB44_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_82
.LBB44_92:                              # %for.end371
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_93:                              # %for.cond372
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB44_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB44_93 Depth=2
	movl	$0, -4(%rbp)
.LBB44_95:                              # %for.cond375
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB44_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB44_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB44_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_99
.LBB44_98:                              # %if.else394
                                        #   in Loop: Header=BB44_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_99:                              # %if.end409
                                        #   in Loop: Header=BB44_95 Depth=3
	jmp	.LBB44_100
.LBB44_100:                             # %for.inc410
                                        #   in Loop: Header=BB44_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_95
.LBB44_101:                             # %for.end412
                                        #   in Loop: Header=BB44_93 Depth=2
	jmp	.LBB44_102
.LBB44_102:                             # %for.inc413
                                        #   in Loop: Header=BB44_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_93
.LBB44_103:                             # %for.end415
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_104:                             # %for.cond416
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB44_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB44_104 Depth=2
	movl	$0, -4(%rbp)
.LBB44_106:                             # %for.cond419
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB44_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB44_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB44_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_110
.LBB44_109:                             # %if.else438
                                        #   in Loop: Header=BB44_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_110:                             # %if.end453
                                        #   in Loop: Header=BB44_106 Depth=3
	jmp	.LBB44_111
.LBB44_111:                             # %for.inc454
                                        #   in Loop: Header=BB44_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_106
.LBB44_112:                             # %for.end456
                                        #   in Loop: Header=BB44_104 Depth=2
	jmp	.LBB44_113
.LBB44_113:                             # %for.inc457
                                        #   in Loop: Header=BB44_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_104
.LBB44_114:                             # %for.end459
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_115:                             # %for.cond460
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB44_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB44_115 Depth=2
	movl	$0, -4(%rbp)
.LBB44_117:                             # %for.cond463
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB44_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB44_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB44_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_121
.LBB44_120:                             # %if.else482
                                        #   in Loop: Header=BB44_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_121:                             # %if.end497
                                        #   in Loop: Header=BB44_117 Depth=3
	jmp	.LBB44_122
.LBB44_122:                             # %for.inc498
                                        #   in Loop: Header=BB44_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_117
.LBB44_123:                             # %for.end500
                                        #   in Loop: Header=BB44_115 Depth=2
	jmp	.LBB44_124
.LBB44_124:                             # %for.inc501
                                        #   in Loop: Header=BB44_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_115
.LBB44_125:                             # %for.end503
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_126:                             # %for.cond504
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB44_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB44_126 Depth=2
	movl	$0, -4(%rbp)
.LBB44_128:                             # %for.cond507
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB44_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB44_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB44_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_132
.LBB44_131:                             # %if.else526
                                        #   in Loop: Header=BB44_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_132:                             # %if.end541
                                        #   in Loop: Header=BB44_128 Depth=3
	jmp	.LBB44_133
.LBB44_133:                             # %for.inc542
                                        #   in Loop: Header=BB44_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_128
.LBB44_134:                             # %for.end544
                                        #   in Loop: Header=BB44_126 Depth=2
	jmp	.LBB44_135
.LBB44_135:                             # %for.inc545
                                        #   in Loop: Header=BB44_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_126
.LBB44_136:                             # %for.end547
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_137:                             # %for.cond548
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB44_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB44_137 Depth=2
	movl	$0, -4(%rbp)
.LBB44_139:                             # %for.cond551
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB44_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB44_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB44_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_143
.LBB44_142:                             # %if.else570
                                        #   in Loop: Header=BB44_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_143:                             # %if.end585
                                        #   in Loop: Header=BB44_139 Depth=3
	jmp	.LBB44_144
.LBB44_144:                             # %for.inc586
                                        #   in Loop: Header=BB44_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_139
.LBB44_145:                             # %for.end588
                                        #   in Loop: Header=BB44_137 Depth=2
	jmp	.LBB44_146
.LBB44_146:                             # %for.inc589
                                        #   in Loop: Header=BB44_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_137
.LBB44_147:                             # %for.end591
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_148:                             # %for.cond592
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB44_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB44_148 Depth=2
	movl	$0, -4(%rbp)
.LBB44_150:                             # %for.cond595
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB44_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB44_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB44_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_154
.LBB44_153:                             # %if.else614
                                        #   in Loop: Header=BB44_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_154:                             # %if.end629
                                        #   in Loop: Header=BB44_150 Depth=3
	jmp	.LBB44_155
.LBB44_155:                             # %for.inc630
                                        #   in Loop: Header=BB44_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_150
.LBB44_156:                             # %for.end632
                                        #   in Loop: Header=BB44_148 Depth=2
	jmp	.LBB44_157
.LBB44_157:                             # %for.inc633
                                        #   in Loop: Header=BB44_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_148
.LBB44_158:                             # %for.end635
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_159:                             # %for.cond636
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB44_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB44_159 Depth=2
	movl	$0, -4(%rbp)
.LBB44_161:                             # %for.cond639
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB44_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB44_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB44_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_165
.LBB44_164:                             # %if.else658
                                        #   in Loop: Header=BB44_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_165:                             # %if.end673
                                        #   in Loop: Header=BB44_161 Depth=3
	jmp	.LBB44_166
.LBB44_166:                             # %for.inc674
                                        #   in Loop: Header=BB44_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_161
.LBB44_167:                             # %for.end676
                                        #   in Loop: Header=BB44_159 Depth=2
	jmp	.LBB44_168
.LBB44_168:                             # %for.inc677
                                        #   in Loop: Header=BB44_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_159
.LBB44_169:                             # %for.end679
                                        #   in Loop: Header=BB44_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB44_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB44_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB44_171:                             # %if.end682
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_172
.LBB44_172:                             # %for.inc683
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_1
.LBB44_173:                             # %for.end685
	cmpl	$78546967, -48(%rbp)    # imm = 0x4AE8817
	jne	.LBB44_175
.LBB44_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_174
.Lfunc_end44:
	.size	GetCtxModelNumber.37, .Lfunc_end44-GetCtxModelNumber.37
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.38 # -- Begin function update_field_frame_contexts.38
	.p2align	4, 0x90
	.type	update_field_frame_contexts.38,@function
update_field_frame_contexts.38:         # @update_field_frame_contexts.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$225842824, -16(%rbp)   # imm = 0xD761688
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB45_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB45_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB45_2 Depth=1
	movl	$0, -8(%rbp)
.LBB45_4:                               # %for.cond1
                                        #   Parent Loop BB45_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB45_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB45_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB45_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_4
.LBB45_7:                               # %for.end
                                        #   in Loop: Header=BB45_2 Depth=1
	jmp	.LBB45_8
.LBB45_8:                               # %for.inc23
                                        #   in Loop: Header=BB45_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_2
.LBB45_9:                               # %for.end25
	jmp	.LBB45_19
.LBB45_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB45_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB45_11 Depth=1
	movl	$0, -8(%rbp)
.LBB45_13:                              # %for.cond29
                                        #   Parent Loop BB45_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB45_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB45_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_13
.LBB45_16:                              # %for.end56
                                        #   in Loop: Header=BB45_11 Depth=1
	jmp	.LBB45_17
.LBB45_17:                              # %for.inc57
                                        #   in Loop: Header=BB45_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_11
.LBB45_18:                              # %for.end59
	jmp	.LBB45_19
.LBB45_19:                              # %if.end
	cmpl	$225842824, -16(%rbp)   # imm = 0xD761688
	jne	.LBB45_21
.LBB45_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_20
.Lfunc_end45:
	.size	update_field_frame_contexts.38, .Lfunc_end45-update_field_frame_contexts.38
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.39       # -- Begin function store_contexts.39
	.p2align	4, 0x90
	.type	store_contexts.39,@function
store_contexts.39:                      # @store_contexts.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1508231460, -16(%rbp)  # imm = 0x59E5C924
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB46_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB46_3
.LBB46_2:                               # %if.else
	jmp	.LBB46_3
.LBB46_3:                               # %if.end
	cmpl	$1508231460, -16(%rbp)  # imm = 0x59E5C924
	jne	.LBB46_5
.LBB46_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_4
.Lfunc_end46:
	.size	store_contexts.39, .Lfunc_end46-store_contexts.39
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.40
.LCPI47_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.40
	.p2align	4, 0x90
	.type	GetCtxModelNumber.40,@function
GetCtxModelNumber.40:                   # @GetCtxModelNumber.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI47_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$2029569656, -44(%rbp)  # imm = 0x78F8C678
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB47_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_3 Depth 2
                                        #       Child Loop BB47_5 Depth 3
                                        #     Child Loop BB47_14 Depth 2
                                        #       Child Loop BB47_16 Depth 3
                                        #     Child Loop BB47_25 Depth 2
                                        #       Child Loop BB47_27 Depth 3
                                        #     Child Loop BB47_36 Depth 2
                                        #       Child Loop BB47_38 Depth 3
                                        #     Child Loop BB47_47 Depth 2
                                        #     Child Loop BB47_54 Depth 2
                                        #     Child Loop BB47_61 Depth 2
                                        #     Child Loop BB47_68 Depth 2
                                        #     Child Loop BB47_75 Depth 2
                                        #     Child Loop BB47_82 Depth 2
                                        #       Child Loop BB47_84 Depth 3
                                        #     Child Loop BB47_93 Depth 2
                                        #       Child Loop BB47_95 Depth 3
                                        #     Child Loop BB47_104 Depth 2
                                        #       Child Loop BB47_106 Depth 3
                                        #     Child Loop BB47_115 Depth 2
                                        #       Child Loop BB47_117 Depth 3
                                        #     Child Loop BB47_126 Depth 2
                                        #       Child Loop BB47_128 Depth 3
                                        #     Child Loop BB47_137 Depth 2
                                        #       Child Loop BB47_139 Depth 3
                                        #     Child Loop BB47_148 Depth 2
                                        #       Child Loop BB47_150 Depth 3
                                        #     Child Loop BB47_159 Depth 2
                                        #       Child Loop BB47_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB47_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB47_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB47_3:                               # %for.cond2
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB47_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	$0, -4(%rbp)
.LBB47_5:                               # %for.cond5
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB47_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB47_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB47_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_9
.LBB47_8:                               # %if.else
                                        #   in Loop: Header=BB47_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_9:                               # %if.end
                                        #   in Loop: Header=BB47_5 Depth=3
	jmp	.LBB47_10
.LBB47_10:                              # %for.inc
                                        #   in Loop: Header=BB47_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_5
.LBB47_11:                              # %for.end
                                        #   in Loop: Header=BB47_3 Depth=2
	jmp	.LBB47_12
.LBB47_12:                              # %for.inc33
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_3
.LBB47_13:                              # %for.end35
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_14:                              # %for.cond36
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB47_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB47_14 Depth=2
	movl	$0, -4(%rbp)
.LBB47_16:                              # %for.cond39
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB47_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB47_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB47_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_20
.LBB47_19:                              # %if.else58
                                        #   in Loop: Header=BB47_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_20:                              # %if.end73
                                        #   in Loop: Header=BB47_16 Depth=3
	jmp	.LBB47_21
.LBB47_21:                              # %for.inc74
                                        #   in Loop: Header=BB47_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_16
.LBB47_22:                              # %for.end76
                                        #   in Loop: Header=BB47_14 Depth=2
	jmp	.LBB47_23
.LBB47_23:                              # %for.inc77
                                        #   in Loop: Header=BB47_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_14
.LBB47_24:                              # %for.end79
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_25:                              # %for.cond80
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB47_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB47_25 Depth=2
	movl	$0, -4(%rbp)
.LBB47_27:                              # %for.cond83
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB47_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB47_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB47_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_31
.LBB47_30:                              # %if.else102
                                        #   in Loop: Header=BB47_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_31:                              # %if.end117
                                        #   in Loop: Header=BB47_27 Depth=3
	jmp	.LBB47_32
.LBB47_32:                              # %for.inc118
                                        #   in Loop: Header=BB47_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_27
.LBB47_33:                              # %for.end120
                                        #   in Loop: Header=BB47_25 Depth=2
	jmp	.LBB47_34
.LBB47_34:                              # %for.inc121
                                        #   in Loop: Header=BB47_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_25
.LBB47_35:                              # %for.end123
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_36:                              # %for.cond124
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB47_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB47_36 Depth=2
	movl	$0, -4(%rbp)
.LBB47_38:                              # %for.cond127
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB47_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB47_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB47_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_42
.LBB47_41:                              # %if.else146
                                        #   in Loop: Header=BB47_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_42:                              # %if.end161
                                        #   in Loop: Header=BB47_38 Depth=3
	jmp	.LBB47_43
.LBB47_43:                              # %for.inc162
                                        #   in Loop: Header=BB47_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_38
.LBB47_44:                              # %for.end164
                                        #   in Loop: Header=BB47_36 Depth=2
	jmp	.LBB47_45
.LBB47_45:                              # %for.inc165
                                        #   in Loop: Header=BB47_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_36
.LBB47_46:                              # %for.end167
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -4(%rbp)
.LBB47_47:                              # %for.cond168
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB47_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB47_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB47_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_51
.LBB47_50:                              # %if.else184
                                        #   in Loop: Header=BB47_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_51:                              # %if.end196
                                        #   in Loop: Header=BB47_47 Depth=2
	jmp	.LBB47_52
.LBB47_52:                              # %for.inc197
                                        #   in Loop: Header=BB47_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_47
.LBB47_53:                              # %for.end199
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -4(%rbp)
.LBB47_54:                              # %for.cond200
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB47_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB47_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB47_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_58
.LBB47_57:                              # %if.else216
                                        #   in Loop: Header=BB47_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_58:                              # %if.end228
                                        #   in Loop: Header=BB47_54 Depth=2
	jmp	.LBB47_59
.LBB47_59:                              # %for.inc229
                                        #   in Loop: Header=BB47_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_54
.LBB47_60:                              # %for.end231
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -4(%rbp)
.LBB47_61:                              # %for.cond232
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB47_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB47_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB47_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_65
.LBB47_64:                              # %if.else248
                                        #   in Loop: Header=BB47_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_65:                              # %if.end260
                                        #   in Loop: Header=BB47_61 Depth=2
	jmp	.LBB47_66
.LBB47_66:                              # %for.inc261
                                        #   in Loop: Header=BB47_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_61
.LBB47_67:                              # %for.end263
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -4(%rbp)
.LBB47_68:                              # %for.cond264
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB47_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB47_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB47_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_72
.LBB47_71:                              # %if.else280
                                        #   in Loop: Header=BB47_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_72:                              # %if.end292
                                        #   in Loop: Header=BB47_68 Depth=2
	jmp	.LBB47_73
.LBB47_73:                              # %for.inc293
                                        #   in Loop: Header=BB47_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_68
.LBB47_74:                              # %for.end295
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -4(%rbp)
.LBB47_75:                              # %for.cond296
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB47_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB47_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB47_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_79
.LBB47_78:                              # %if.else312
                                        #   in Loop: Header=BB47_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_79:                              # %if.end324
                                        #   in Loop: Header=BB47_75 Depth=2
	jmp	.LBB47_80
.LBB47_80:                              # %for.inc325
                                        #   in Loop: Header=BB47_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_75
.LBB47_81:                              # %for.end327
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_82:                              # %for.cond328
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB47_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB47_82 Depth=2
	movl	$0, -4(%rbp)
.LBB47_84:                              # %for.cond331
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB47_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB47_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB47_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_88
.LBB47_87:                              # %if.else350
                                        #   in Loop: Header=BB47_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_88:                              # %if.end365
                                        #   in Loop: Header=BB47_84 Depth=3
	jmp	.LBB47_89
.LBB47_89:                              # %for.inc366
                                        #   in Loop: Header=BB47_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_84
.LBB47_90:                              # %for.end368
                                        #   in Loop: Header=BB47_82 Depth=2
	jmp	.LBB47_91
.LBB47_91:                              # %for.inc369
                                        #   in Loop: Header=BB47_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_82
.LBB47_92:                              # %for.end371
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_93:                              # %for.cond372
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB47_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB47_93 Depth=2
	movl	$0, -4(%rbp)
.LBB47_95:                              # %for.cond375
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB47_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB47_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB47_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_99
.LBB47_98:                              # %if.else394
                                        #   in Loop: Header=BB47_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_99:                              # %if.end409
                                        #   in Loop: Header=BB47_95 Depth=3
	jmp	.LBB47_100
.LBB47_100:                             # %for.inc410
                                        #   in Loop: Header=BB47_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_95
.LBB47_101:                             # %for.end412
                                        #   in Loop: Header=BB47_93 Depth=2
	jmp	.LBB47_102
.LBB47_102:                             # %for.inc413
                                        #   in Loop: Header=BB47_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_93
.LBB47_103:                             # %for.end415
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_104:                             # %for.cond416
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB47_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB47_104 Depth=2
	movl	$0, -4(%rbp)
.LBB47_106:                             # %for.cond419
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB47_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB47_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB47_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_110
.LBB47_109:                             # %if.else438
                                        #   in Loop: Header=BB47_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_110:                             # %if.end453
                                        #   in Loop: Header=BB47_106 Depth=3
	jmp	.LBB47_111
.LBB47_111:                             # %for.inc454
                                        #   in Loop: Header=BB47_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_106
.LBB47_112:                             # %for.end456
                                        #   in Loop: Header=BB47_104 Depth=2
	jmp	.LBB47_113
.LBB47_113:                             # %for.inc457
                                        #   in Loop: Header=BB47_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_104
.LBB47_114:                             # %for.end459
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_115:                             # %for.cond460
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB47_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB47_115 Depth=2
	movl	$0, -4(%rbp)
.LBB47_117:                             # %for.cond463
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB47_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB47_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB47_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_121
.LBB47_120:                             # %if.else482
                                        #   in Loop: Header=BB47_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_121:                             # %if.end497
                                        #   in Loop: Header=BB47_117 Depth=3
	jmp	.LBB47_122
.LBB47_122:                             # %for.inc498
                                        #   in Loop: Header=BB47_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_117
.LBB47_123:                             # %for.end500
                                        #   in Loop: Header=BB47_115 Depth=2
	jmp	.LBB47_124
.LBB47_124:                             # %for.inc501
                                        #   in Loop: Header=BB47_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_115
.LBB47_125:                             # %for.end503
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_126:                             # %for.cond504
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB47_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB47_126 Depth=2
	movl	$0, -4(%rbp)
.LBB47_128:                             # %for.cond507
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB47_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB47_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB47_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_132
.LBB47_131:                             # %if.else526
                                        #   in Loop: Header=BB47_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_132:                             # %if.end541
                                        #   in Loop: Header=BB47_128 Depth=3
	jmp	.LBB47_133
.LBB47_133:                             # %for.inc542
                                        #   in Loop: Header=BB47_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_128
.LBB47_134:                             # %for.end544
                                        #   in Loop: Header=BB47_126 Depth=2
	jmp	.LBB47_135
.LBB47_135:                             # %for.inc545
                                        #   in Loop: Header=BB47_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_126
.LBB47_136:                             # %for.end547
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_137:                             # %for.cond548
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB47_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB47_137 Depth=2
	movl	$0, -4(%rbp)
.LBB47_139:                             # %for.cond551
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB47_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB47_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB47_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_143
.LBB47_142:                             # %if.else570
                                        #   in Loop: Header=BB47_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_143:                             # %if.end585
                                        #   in Loop: Header=BB47_139 Depth=3
	jmp	.LBB47_144
.LBB47_144:                             # %for.inc586
                                        #   in Loop: Header=BB47_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_139
.LBB47_145:                             # %for.end588
                                        #   in Loop: Header=BB47_137 Depth=2
	jmp	.LBB47_146
.LBB47_146:                             # %for.inc589
                                        #   in Loop: Header=BB47_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_137
.LBB47_147:                             # %for.end591
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_148:                             # %for.cond592
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB47_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB47_148 Depth=2
	movl	$0, -4(%rbp)
.LBB47_150:                             # %for.cond595
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB47_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB47_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB47_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_154
.LBB47_153:                             # %if.else614
                                        #   in Loop: Header=BB47_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_154:                             # %if.end629
                                        #   in Loop: Header=BB47_150 Depth=3
	jmp	.LBB47_155
.LBB47_155:                             # %for.inc630
                                        #   in Loop: Header=BB47_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_150
.LBB47_156:                             # %for.end632
                                        #   in Loop: Header=BB47_148 Depth=2
	jmp	.LBB47_157
.LBB47_157:                             # %for.inc633
                                        #   in Loop: Header=BB47_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_148
.LBB47_158:                             # %for.end635
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_159:                             # %for.cond636
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB47_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB47_159 Depth=2
	movl	$0, -4(%rbp)
.LBB47_161:                             # %for.cond639
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB47_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB47_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB47_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_165
.LBB47_164:                             # %if.else658
                                        #   in Loop: Header=BB47_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_165:                             # %if.end673
                                        #   in Loop: Header=BB47_161 Depth=3
	jmp	.LBB47_166
.LBB47_166:                             # %for.inc674
                                        #   in Loop: Header=BB47_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_161
.LBB47_167:                             # %for.end676
                                        #   in Loop: Header=BB47_159 Depth=2
	jmp	.LBB47_168
.LBB47_168:                             # %for.inc677
                                        #   in Loop: Header=BB47_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_159
.LBB47_169:                             # %for.end679
                                        #   in Loop: Header=BB47_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB47_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB47_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB47_171:                             # %if.end682
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_172
.LBB47_172:                             # %for.inc683
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_1
.LBB47_173:                             # %for.end685
	cmpl	$2029569656, -44(%rbp)  # imm = 0x78F8C678
	jne	.LBB47_175
.LBB47_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_174
.Lfunc_end47:
	.size	GetCtxModelNumber.40, .Lfunc_end47-GetCtxModelNumber.40
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.41
.LCPI48_0:
	.quad	4607182418800017408     # double 1
.LCPI48_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI48_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI48_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.41
	.p2align	4, 0x90
	.type	XRate.41,@function
XRate.41:                               # @XRate.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1627859276, -32(%rbp)  # imm = 0x6107294C
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB48_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB48_3
.LBB48_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB48_3:                               # %cond.end
	vmovsd	.LCPI48_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI48_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI48_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI48_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB48_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI48_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB48_6
.LBB48_5:                               # %cond.false6
	vmovsd	.LCPI48_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI48_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI48_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB48_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB48_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB48_9
.LBB48_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB48_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB48_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB48_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB48_13
.LBB48_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB48_13:                              # %cond.end26
	jmp	.LBB48_15
.LBB48_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB48_15
.LBB48_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB48_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB48_18
.LBB48_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB48_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1627859276, -32(%rbp)  # imm = 0x6107294C
	jne	.LBB48_20
.LBB48_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB48_19
.Lfunc_end48:
	.size	XRate.41, .Lfunc_end48-XRate.41
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.42
.LCPI49_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.42
	.p2align	4, 0x90
	.type	GetCtxModelNumber.42,@function
GetCtxModelNumber.42:                   # @GetCtxModelNumber.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI49_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$333990233, -44(%rbp)   # imm = 0x13E84959
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_3 Depth 2
                                        #       Child Loop BB49_5 Depth 3
                                        #     Child Loop BB49_14 Depth 2
                                        #       Child Loop BB49_16 Depth 3
                                        #     Child Loop BB49_25 Depth 2
                                        #       Child Loop BB49_27 Depth 3
                                        #     Child Loop BB49_36 Depth 2
                                        #       Child Loop BB49_38 Depth 3
                                        #     Child Loop BB49_47 Depth 2
                                        #     Child Loop BB49_54 Depth 2
                                        #     Child Loop BB49_61 Depth 2
                                        #     Child Loop BB49_68 Depth 2
                                        #     Child Loop BB49_75 Depth 2
                                        #     Child Loop BB49_82 Depth 2
                                        #       Child Loop BB49_84 Depth 3
                                        #     Child Loop BB49_93 Depth 2
                                        #       Child Loop BB49_95 Depth 3
                                        #     Child Loop BB49_104 Depth 2
                                        #       Child Loop BB49_106 Depth 3
                                        #     Child Loop BB49_115 Depth 2
                                        #       Child Loop BB49_117 Depth 3
                                        #     Child Loop BB49_126 Depth 2
                                        #       Child Loop BB49_128 Depth 3
                                        #     Child Loop BB49_137 Depth 2
                                        #       Child Loop BB49_139 Depth 3
                                        #     Child Loop BB49_148 Depth 2
                                        #       Child Loop BB49_150 Depth 3
                                        #     Child Loop BB49_159 Depth 2
                                        #       Child Loop BB49_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB49_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB49_3:                               # %for.cond2
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB49_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB49_3 Depth=2
	movl	$0, -4(%rbp)
.LBB49_5:                               # %for.cond5
                                        #   Parent Loop BB49_1 Depth=1
                                        #     Parent Loop BB49_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB49_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB49_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB49_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB49_9
.LBB49_8:                               # %if.else
                                        #   in Loop: Header=BB49_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB49_9:                               # %if.end
                                        #   in Loop: Header=BB49_5 Depth=3
	jmp	.LBB49_10
.LBB49_10:                              # %for.inc
                                        #   in Loop: Header=BB49_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_5
.LBB49_11:                              # %for.end
                                        #   in Loop: Header=BB49_3 Depth=2
	jmp	.LBB49_12
.LBB49_12:                              # %for.inc33
                                        #   in Loop: Header=BB49_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_3
.LBB49_13:                              # %for.end35
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -8(%rbp)
.LBB49_14:                              # %for.cond36
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB49_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB49_14 Depth=2
	movl	$0, -4(%rbp)
.LBB49_16:                              # %for.cond39
                                        #   Parent Loop BB49_1 Depth=1
                                        #     Parent Loop BB49_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB49_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB49_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB49_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB49_20
.LBB49_19:                              # %if.else58
                                        #   in Loop: Header=BB49_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB49_20:                              # %if.end73
                                        #   in Loop: Header=BB49_16 Depth=3
	jmp	.LBB49_21
.LBB49_21:                              # %for.inc74
                                        #   in Loop: Header=BB49_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_16
.LBB49_22:                              # %for.end76
                                        #   in Loop: Header=BB49_14 Depth=2
	jmp	.LBB49_23
.LBB49_23:                              # %for.inc77
                                        #   in Loop: Header=BB49_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_14
.LBB49_24:                              # %for.end79
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -8(%rbp)
.LBB49_25:                              # %for.cond80
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB49_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB49_25 Depth=2
	movl	$0, -4(%rbp)
.LBB49_27:                              # %for.cond83
                                        #   Parent Loop BB49_1 Depth=1
                                        #     Parent Loop BB49_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB49_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB49_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB49_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB49_31
.LBB49_30:                              # %if.else102
                                        #   in Loop: Header=BB49_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB49_31:                              # %if.end117
                                        #   in Loop: Header=BB49_27 Depth=3
	jmp	.LBB49_32
.LBB49_32:                              # %for.inc118
                                        #   in Loop: Header=BB49_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_27
.LBB49_33:                              # %for.end120
                                        #   in Loop: Header=BB49_25 Depth=2
	jmp	.LBB49_34
.LBB49_34:                              # %for.inc121
                                        #   in Loop: Header=BB49_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_25
.LBB49_35:                              # %for.end123
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -8(%rbp)
.LBB49_36:                              # %for.cond124
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB49_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB49_36 Depth=2
	movl	$0, -4(%rbp)
.LBB49_38:                              # %for.cond127
                                        #   Parent Loop BB49_1 Depth=1
                                        #     Parent Loop BB49_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB49_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB49_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB49_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB49_42
.LBB49_41:                              # %if.else146
                                        #   in Loop: Header=BB49_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB49_42:                              # %if.end161
                                        #   in Loop: Header=BB49_38 Depth=3
	jmp	.LBB49_43
.LBB49_43:                              # %for.inc162
                                        #   in Loop: Header=BB49_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_38
.LBB49_44:                              # %for.end164
                                        #   in Loop: Header=BB49_36 Depth=2
	jmp	.LBB49_45
.LBB49_45:                              # %for.inc165
                                        #   in Loop: Header=BB49_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_36
.LBB49_46:                              # %for.end167
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -4(%rbp)
.LBB49_47:                              # %for.cond168
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB49_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB49_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB49_51
.LBB49_50:                              # %if.else184
                                        #   in Loop: Header=BB49_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB49_51:                              # %if.end196
                                        #   in Loop: Header=BB49_47 Depth=2
	jmp	.LBB49_52
.LBB49_52:                              # %for.inc197
                                        #   in Loop: Header=BB49_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_47
.LBB49_53:                              # %for.end199
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -4(%rbp)
.LBB49_54:                              # %for.cond200
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB49_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB49_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB49_58
.LBB49_57:                              # %if.else216
                                        #   in Loop: Header=BB49_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB49_58:                              # %if.end228
                                        #   in Loop: Header=BB49_54 Depth=2
	jmp	.LBB49_59
.LBB49_59:                              # %for.inc229
                                        #   in Loop: Header=BB49_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_54
.LBB49_60:                              # %for.end231
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -4(%rbp)
.LBB49_61:                              # %for.cond232
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB49_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB49_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB49_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB49_65
.LBB49_64:                              # %if.else248
                                        #   in Loop: Header=BB49_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB49_65:                              # %if.end260
                                        #   in Loop: Header=BB49_61 Depth=2
	jmp	.LBB49_66
.LBB49_66:                              # %for.inc261
                                        #   in Loop: Header=BB49_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_61
.LBB49_67:                              # %for.end263
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -4(%rbp)
.LBB49_68:                              # %for.cond264
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB49_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB49_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB49_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB49_72
.LBB49_71:                              # %if.else280
                                        #   in Loop: Header=BB49_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB49_72:                              # %if.end292
                                        #   in Loop: Header=BB49_68 Depth=2
	jmp	.LBB49_73
.LBB49_73:                              # %for.inc293
                                        #   in Loop: Header=BB49_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_68
.LBB49_74:                              # %for.end295
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -4(%rbp)
.LBB49_75:                              # %for.cond296
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB49_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB49_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB49_79
.LBB49_78:                              # %if.else312
                                        #   in Loop: Header=BB49_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB49_79:                              # %if.end324
                                        #   in Loop: Header=BB49_75 Depth=2
	jmp	.LBB49_80
.LBB49_80:                              # %for.inc325
                                        #   in Loop: Header=BB49_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_75
.LBB49_81:                              # %for.end327
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -8(%rbp)
.LBB49_82:                              # %for.cond328
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB49_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB49_82 Depth=2
	movl	$0, -4(%rbp)
.LBB49_84:                              # %for.cond331
                                        #   Parent Loop BB49_1 Depth=1
                                        #     Parent Loop BB49_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB49_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB49_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB49_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB49_88
.LBB49_87:                              # %if.else350
                                        #   in Loop: Header=BB49_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB49_88:                              # %if.end365
                                        #   in Loop: Header=BB49_84 Depth=3
	jmp	.LBB49_89
.LBB49_89:                              # %for.inc366
                                        #   in Loop: Header=BB49_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_84
.LBB49_90:                              # %for.end368
                                        #   in Loop: Header=BB49_82 Depth=2
	jmp	.LBB49_91
.LBB49_91:                              # %for.inc369
                                        #   in Loop: Header=BB49_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_82
.LBB49_92:                              # %for.end371
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -8(%rbp)
.LBB49_93:                              # %for.cond372
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB49_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB49_93 Depth=2
	movl	$0, -4(%rbp)
.LBB49_95:                              # %for.cond375
                                        #   Parent Loop BB49_1 Depth=1
                                        #     Parent Loop BB49_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB49_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB49_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB49_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB49_99
.LBB49_98:                              # %if.else394
                                        #   in Loop: Header=BB49_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB49_99:                              # %if.end409
                                        #   in Loop: Header=BB49_95 Depth=3
	jmp	.LBB49_100
.LBB49_100:                             # %for.inc410
                                        #   in Loop: Header=BB49_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_95
.LBB49_101:                             # %for.end412
                                        #   in Loop: Header=BB49_93 Depth=2
	jmp	.LBB49_102
.LBB49_102:                             # %for.inc413
                                        #   in Loop: Header=BB49_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_93
.LBB49_103:                             # %for.end415
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -8(%rbp)
.LBB49_104:                             # %for.cond416
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB49_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB49_104 Depth=2
	movl	$0, -4(%rbp)
.LBB49_106:                             # %for.cond419
                                        #   Parent Loop BB49_1 Depth=1
                                        #     Parent Loop BB49_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB49_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB49_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB49_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB49_110
.LBB49_109:                             # %if.else438
                                        #   in Loop: Header=BB49_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB49_110:                             # %if.end453
                                        #   in Loop: Header=BB49_106 Depth=3
	jmp	.LBB49_111
.LBB49_111:                             # %for.inc454
                                        #   in Loop: Header=BB49_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_106
.LBB49_112:                             # %for.end456
                                        #   in Loop: Header=BB49_104 Depth=2
	jmp	.LBB49_113
.LBB49_113:                             # %for.inc457
                                        #   in Loop: Header=BB49_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_104
.LBB49_114:                             # %for.end459
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -8(%rbp)
.LBB49_115:                             # %for.cond460
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB49_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB49_115 Depth=2
	movl	$0, -4(%rbp)
.LBB49_117:                             # %for.cond463
                                        #   Parent Loop BB49_1 Depth=1
                                        #     Parent Loop BB49_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB49_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB49_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB49_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB49_121
.LBB49_120:                             # %if.else482
                                        #   in Loop: Header=BB49_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB49_121:                             # %if.end497
                                        #   in Loop: Header=BB49_117 Depth=3
	jmp	.LBB49_122
.LBB49_122:                             # %for.inc498
                                        #   in Loop: Header=BB49_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_117
.LBB49_123:                             # %for.end500
                                        #   in Loop: Header=BB49_115 Depth=2
	jmp	.LBB49_124
.LBB49_124:                             # %for.inc501
                                        #   in Loop: Header=BB49_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_115
.LBB49_125:                             # %for.end503
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -8(%rbp)
.LBB49_126:                             # %for.cond504
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB49_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB49_126 Depth=2
	movl	$0, -4(%rbp)
.LBB49_128:                             # %for.cond507
                                        #   Parent Loop BB49_1 Depth=1
                                        #     Parent Loop BB49_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB49_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB49_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB49_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB49_132
.LBB49_131:                             # %if.else526
                                        #   in Loop: Header=BB49_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB49_132:                             # %if.end541
                                        #   in Loop: Header=BB49_128 Depth=3
	jmp	.LBB49_133
.LBB49_133:                             # %for.inc542
                                        #   in Loop: Header=BB49_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_128
.LBB49_134:                             # %for.end544
                                        #   in Loop: Header=BB49_126 Depth=2
	jmp	.LBB49_135
.LBB49_135:                             # %for.inc545
                                        #   in Loop: Header=BB49_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_126
.LBB49_136:                             # %for.end547
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -8(%rbp)
.LBB49_137:                             # %for.cond548
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB49_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB49_137 Depth=2
	movl	$0, -4(%rbp)
.LBB49_139:                             # %for.cond551
                                        #   Parent Loop BB49_1 Depth=1
                                        #     Parent Loop BB49_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB49_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB49_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB49_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB49_143
.LBB49_142:                             # %if.else570
                                        #   in Loop: Header=BB49_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB49_143:                             # %if.end585
                                        #   in Loop: Header=BB49_139 Depth=3
	jmp	.LBB49_144
.LBB49_144:                             # %for.inc586
                                        #   in Loop: Header=BB49_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_139
.LBB49_145:                             # %for.end588
                                        #   in Loop: Header=BB49_137 Depth=2
	jmp	.LBB49_146
.LBB49_146:                             # %for.inc589
                                        #   in Loop: Header=BB49_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_137
.LBB49_147:                             # %for.end591
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -8(%rbp)
.LBB49_148:                             # %for.cond592
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB49_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB49_148 Depth=2
	movl	$0, -4(%rbp)
.LBB49_150:                             # %for.cond595
                                        #   Parent Loop BB49_1 Depth=1
                                        #     Parent Loop BB49_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB49_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB49_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB49_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB49_154
.LBB49_153:                             # %if.else614
                                        #   in Loop: Header=BB49_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB49_154:                             # %if.end629
                                        #   in Loop: Header=BB49_150 Depth=3
	jmp	.LBB49_155
.LBB49_155:                             # %for.inc630
                                        #   in Loop: Header=BB49_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_150
.LBB49_156:                             # %for.end632
                                        #   in Loop: Header=BB49_148 Depth=2
	jmp	.LBB49_157
.LBB49_157:                             # %for.inc633
                                        #   in Loop: Header=BB49_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_148
.LBB49_158:                             # %for.end635
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -8(%rbp)
.LBB49_159:                             # %for.cond636
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB49_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB49_159 Depth=2
	movl	$0, -4(%rbp)
.LBB49_161:                             # %for.cond639
                                        #   Parent Loop BB49_1 Depth=1
                                        #     Parent Loop BB49_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB49_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB49_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB49_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB49_165
.LBB49_164:                             # %if.else658
                                        #   in Loop: Header=BB49_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB49_165:                             # %if.end673
                                        #   in Loop: Header=BB49_161 Depth=3
	jmp	.LBB49_166
.LBB49_166:                             # %for.inc674
                                        #   in Loop: Header=BB49_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_161
.LBB49_167:                             # %for.end676
                                        #   in Loop: Header=BB49_159 Depth=2
	jmp	.LBB49_168
.LBB49_168:                             # %for.inc677
                                        #   in Loop: Header=BB49_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_159
.LBB49_169:                             # %for.end679
                                        #   in Loop: Header=BB49_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB49_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB49_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB49_171:                             # %if.end682
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_172
.LBB49_172:                             # %for.inc683
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_1
.LBB49_173:                             # %for.end685
	cmpl	$333990233, -44(%rbp)   # imm = 0x13E84959
	jne	.LBB49_175
.LBB49_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_174
.Lfunc_end49:
	.size	GetCtxModelNumber.42, .Lfunc_end49-GetCtxModelNumber.42
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.43
.LCPI50_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.43
	.p2align	4, 0x90
	.type	GetCtxModelNumber.43,@function
GetCtxModelNumber.43:                   # @GetCtxModelNumber.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI50_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1089840691, -48(%rbp)  # imm = 0x40F5A633
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB50_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_3 Depth 2
                                        #       Child Loop BB50_5 Depth 3
                                        #     Child Loop BB50_14 Depth 2
                                        #       Child Loop BB50_16 Depth 3
                                        #     Child Loop BB50_25 Depth 2
                                        #       Child Loop BB50_27 Depth 3
                                        #     Child Loop BB50_36 Depth 2
                                        #       Child Loop BB50_38 Depth 3
                                        #     Child Loop BB50_47 Depth 2
                                        #     Child Loop BB50_54 Depth 2
                                        #     Child Loop BB50_61 Depth 2
                                        #     Child Loop BB50_68 Depth 2
                                        #     Child Loop BB50_75 Depth 2
                                        #     Child Loop BB50_82 Depth 2
                                        #       Child Loop BB50_84 Depth 3
                                        #     Child Loop BB50_93 Depth 2
                                        #       Child Loop BB50_95 Depth 3
                                        #     Child Loop BB50_104 Depth 2
                                        #       Child Loop BB50_106 Depth 3
                                        #     Child Loop BB50_115 Depth 2
                                        #       Child Loop BB50_117 Depth 3
                                        #     Child Loop BB50_126 Depth 2
                                        #       Child Loop BB50_128 Depth 3
                                        #     Child Loop BB50_137 Depth 2
                                        #       Child Loop BB50_139 Depth 3
                                        #     Child Loop BB50_148 Depth 2
                                        #       Child Loop BB50_150 Depth 3
                                        #     Child Loop BB50_159 Depth 2
                                        #       Child Loop BB50_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB50_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB50_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB50_3:                               # %for.cond2
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB50_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB50_3 Depth=2
	movl	$0, -4(%rbp)
.LBB50_5:                               # %for.cond5
                                        #   Parent Loop BB50_1 Depth=1
                                        #     Parent Loop BB50_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB50_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB50_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB50_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB50_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB50_9
.LBB50_8:                               # %if.else
                                        #   in Loop: Header=BB50_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB50_9:                               # %if.end
                                        #   in Loop: Header=BB50_5 Depth=3
	jmp	.LBB50_10
.LBB50_10:                              # %for.inc
                                        #   in Loop: Header=BB50_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_5
.LBB50_11:                              # %for.end
                                        #   in Loop: Header=BB50_3 Depth=2
	jmp	.LBB50_12
.LBB50_12:                              # %for.inc33
                                        #   in Loop: Header=BB50_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_3
.LBB50_13:                              # %for.end35
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$0, -8(%rbp)
.LBB50_14:                              # %for.cond36
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB50_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB50_14 Depth=2
	movl	$0, -4(%rbp)
.LBB50_16:                              # %for.cond39
                                        #   Parent Loop BB50_1 Depth=1
                                        #     Parent Loop BB50_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB50_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB50_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB50_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB50_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB50_20
.LBB50_19:                              # %if.else58
                                        #   in Loop: Header=BB50_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB50_20:                              # %if.end73
                                        #   in Loop: Header=BB50_16 Depth=3
	jmp	.LBB50_21
.LBB50_21:                              # %for.inc74
                                        #   in Loop: Header=BB50_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_16
.LBB50_22:                              # %for.end76
                                        #   in Loop: Header=BB50_14 Depth=2
	jmp	.LBB50_23
.LBB50_23:                              # %for.inc77
                                        #   in Loop: Header=BB50_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_14
.LBB50_24:                              # %for.end79
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$0, -8(%rbp)
.LBB50_25:                              # %for.cond80
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB50_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB50_25 Depth=2
	movl	$0, -4(%rbp)
.LBB50_27:                              # %for.cond83
                                        #   Parent Loop BB50_1 Depth=1
                                        #     Parent Loop BB50_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB50_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB50_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB50_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB50_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB50_31
.LBB50_30:                              # %if.else102
                                        #   in Loop: Header=BB50_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB50_31:                              # %if.end117
                                        #   in Loop: Header=BB50_27 Depth=3
	jmp	.LBB50_32
.LBB50_32:                              # %for.inc118
                                        #   in Loop: Header=BB50_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_27
.LBB50_33:                              # %for.end120
                                        #   in Loop: Header=BB50_25 Depth=2
	jmp	.LBB50_34
.LBB50_34:                              # %for.inc121
                                        #   in Loop: Header=BB50_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_25
.LBB50_35:                              # %for.end123
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$0, -8(%rbp)
.LBB50_36:                              # %for.cond124
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB50_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB50_36 Depth=2
	movl	$0, -4(%rbp)
.LBB50_38:                              # %for.cond127
                                        #   Parent Loop BB50_1 Depth=1
                                        #     Parent Loop BB50_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB50_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB50_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB50_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB50_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB50_42
.LBB50_41:                              # %if.else146
                                        #   in Loop: Header=BB50_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB50_42:                              # %if.end161
                                        #   in Loop: Header=BB50_38 Depth=3
	jmp	.LBB50_43
.LBB50_43:                              # %for.inc162
                                        #   in Loop: Header=BB50_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_38
.LBB50_44:                              # %for.end164
                                        #   in Loop: Header=BB50_36 Depth=2
	jmp	.LBB50_45
.LBB50_45:                              # %for.inc165
                                        #   in Loop: Header=BB50_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_36
.LBB50_46:                              # %for.end167
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$0, -4(%rbp)
.LBB50_47:                              # %for.cond168
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB50_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB50_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB50_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB50_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB50_51
.LBB50_50:                              # %if.else184
                                        #   in Loop: Header=BB50_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB50_51:                              # %if.end196
                                        #   in Loop: Header=BB50_47 Depth=2
	jmp	.LBB50_52
.LBB50_52:                              # %for.inc197
                                        #   in Loop: Header=BB50_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_47
.LBB50_53:                              # %for.end199
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$0, -4(%rbp)
.LBB50_54:                              # %for.cond200
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB50_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB50_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB50_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB50_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB50_58
.LBB50_57:                              # %if.else216
                                        #   in Loop: Header=BB50_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB50_58:                              # %if.end228
                                        #   in Loop: Header=BB50_54 Depth=2
	jmp	.LBB50_59
.LBB50_59:                              # %for.inc229
                                        #   in Loop: Header=BB50_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_54
.LBB50_60:                              # %for.end231
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$0, -4(%rbp)
.LBB50_61:                              # %for.cond232
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB50_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB50_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB50_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB50_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB50_65
.LBB50_64:                              # %if.else248
                                        #   in Loop: Header=BB50_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB50_65:                              # %if.end260
                                        #   in Loop: Header=BB50_61 Depth=2
	jmp	.LBB50_66
.LBB50_66:                              # %for.inc261
                                        #   in Loop: Header=BB50_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_61
.LBB50_67:                              # %for.end263
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$0, -4(%rbp)
.LBB50_68:                              # %for.cond264
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB50_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB50_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB50_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB50_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB50_72
.LBB50_71:                              # %if.else280
                                        #   in Loop: Header=BB50_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB50_72:                              # %if.end292
                                        #   in Loop: Header=BB50_68 Depth=2
	jmp	.LBB50_73
.LBB50_73:                              # %for.inc293
                                        #   in Loop: Header=BB50_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_68
.LBB50_74:                              # %for.end295
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$0, -4(%rbp)
.LBB50_75:                              # %for.cond296
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB50_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB50_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB50_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB50_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB50_79
.LBB50_78:                              # %if.else312
                                        #   in Loop: Header=BB50_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB50_79:                              # %if.end324
                                        #   in Loop: Header=BB50_75 Depth=2
	jmp	.LBB50_80
.LBB50_80:                              # %for.inc325
                                        #   in Loop: Header=BB50_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_75
.LBB50_81:                              # %for.end327
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$0, -8(%rbp)
.LBB50_82:                              # %for.cond328
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB50_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB50_82 Depth=2
	movl	$0, -4(%rbp)
.LBB50_84:                              # %for.cond331
                                        #   Parent Loop BB50_1 Depth=1
                                        #     Parent Loop BB50_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB50_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB50_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB50_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB50_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB50_88
.LBB50_87:                              # %if.else350
                                        #   in Loop: Header=BB50_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB50_88:                              # %if.end365
                                        #   in Loop: Header=BB50_84 Depth=3
	jmp	.LBB50_89
.LBB50_89:                              # %for.inc366
                                        #   in Loop: Header=BB50_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_84
.LBB50_90:                              # %for.end368
                                        #   in Loop: Header=BB50_82 Depth=2
	jmp	.LBB50_91
.LBB50_91:                              # %for.inc369
                                        #   in Loop: Header=BB50_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_82
.LBB50_92:                              # %for.end371
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$0, -8(%rbp)
.LBB50_93:                              # %for.cond372
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB50_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB50_93 Depth=2
	movl	$0, -4(%rbp)
.LBB50_95:                              # %for.cond375
                                        #   Parent Loop BB50_1 Depth=1
                                        #     Parent Loop BB50_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB50_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB50_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB50_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB50_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB50_99
.LBB50_98:                              # %if.else394
                                        #   in Loop: Header=BB50_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB50_99:                              # %if.end409
                                        #   in Loop: Header=BB50_95 Depth=3
	jmp	.LBB50_100
.LBB50_100:                             # %for.inc410
                                        #   in Loop: Header=BB50_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_95
.LBB50_101:                             # %for.end412
                                        #   in Loop: Header=BB50_93 Depth=2
	jmp	.LBB50_102
.LBB50_102:                             # %for.inc413
                                        #   in Loop: Header=BB50_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_93
.LBB50_103:                             # %for.end415
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$0, -8(%rbp)
.LBB50_104:                             # %for.cond416
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB50_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB50_104 Depth=2
	movl	$0, -4(%rbp)
.LBB50_106:                             # %for.cond419
                                        #   Parent Loop BB50_1 Depth=1
                                        #     Parent Loop BB50_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB50_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB50_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB50_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB50_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB50_110
.LBB50_109:                             # %if.else438
                                        #   in Loop: Header=BB50_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB50_110:                             # %if.end453
                                        #   in Loop: Header=BB50_106 Depth=3
	jmp	.LBB50_111
.LBB50_111:                             # %for.inc454
                                        #   in Loop: Header=BB50_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_106
.LBB50_112:                             # %for.end456
                                        #   in Loop: Header=BB50_104 Depth=2
	jmp	.LBB50_113
.LBB50_113:                             # %for.inc457
                                        #   in Loop: Header=BB50_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_104
.LBB50_114:                             # %for.end459
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$0, -8(%rbp)
.LBB50_115:                             # %for.cond460
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB50_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB50_115 Depth=2
	movl	$0, -4(%rbp)
.LBB50_117:                             # %for.cond463
                                        #   Parent Loop BB50_1 Depth=1
                                        #     Parent Loop BB50_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB50_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB50_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB50_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB50_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB50_121
.LBB50_120:                             # %if.else482
                                        #   in Loop: Header=BB50_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB50_121:                             # %if.end497
                                        #   in Loop: Header=BB50_117 Depth=3
	jmp	.LBB50_122
.LBB50_122:                             # %for.inc498
                                        #   in Loop: Header=BB50_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_117
.LBB50_123:                             # %for.end500
                                        #   in Loop: Header=BB50_115 Depth=2
	jmp	.LBB50_124
.LBB50_124:                             # %for.inc501
                                        #   in Loop: Header=BB50_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_115
.LBB50_125:                             # %for.end503
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$0, -8(%rbp)
.LBB50_126:                             # %for.cond504
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB50_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB50_126 Depth=2
	movl	$0, -4(%rbp)
.LBB50_128:                             # %for.cond507
                                        #   Parent Loop BB50_1 Depth=1
                                        #     Parent Loop BB50_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB50_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB50_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB50_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB50_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB50_132
.LBB50_131:                             # %if.else526
                                        #   in Loop: Header=BB50_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB50_132:                             # %if.end541
                                        #   in Loop: Header=BB50_128 Depth=3
	jmp	.LBB50_133
.LBB50_133:                             # %for.inc542
                                        #   in Loop: Header=BB50_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_128
.LBB50_134:                             # %for.end544
                                        #   in Loop: Header=BB50_126 Depth=2
	jmp	.LBB50_135
.LBB50_135:                             # %for.inc545
                                        #   in Loop: Header=BB50_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_126
.LBB50_136:                             # %for.end547
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$0, -8(%rbp)
.LBB50_137:                             # %for.cond548
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB50_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB50_137 Depth=2
	movl	$0, -4(%rbp)
.LBB50_139:                             # %for.cond551
                                        #   Parent Loop BB50_1 Depth=1
                                        #     Parent Loop BB50_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB50_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB50_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB50_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB50_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB50_143
.LBB50_142:                             # %if.else570
                                        #   in Loop: Header=BB50_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB50_143:                             # %if.end585
                                        #   in Loop: Header=BB50_139 Depth=3
	jmp	.LBB50_144
.LBB50_144:                             # %for.inc586
                                        #   in Loop: Header=BB50_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_139
.LBB50_145:                             # %for.end588
                                        #   in Loop: Header=BB50_137 Depth=2
	jmp	.LBB50_146
.LBB50_146:                             # %for.inc589
                                        #   in Loop: Header=BB50_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_137
.LBB50_147:                             # %for.end591
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$0, -8(%rbp)
.LBB50_148:                             # %for.cond592
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB50_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB50_148 Depth=2
	movl	$0, -4(%rbp)
.LBB50_150:                             # %for.cond595
                                        #   Parent Loop BB50_1 Depth=1
                                        #     Parent Loop BB50_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB50_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB50_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB50_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB50_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB50_154
.LBB50_153:                             # %if.else614
                                        #   in Loop: Header=BB50_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB50_154:                             # %if.end629
                                        #   in Loop: Header=BB50_150 Depth=3
	jmp	.LBB50_155
.LBB50_155:                             # %for.inc630
                                        #   in Loop: Header=BB50_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_150
.LBB50_156:                             # %for.end632
                                        #   in Loop: Header=BB50_148 Depth=2
	jmp	.LBB50_157
.LBB50_157:                             # %for.inc633
                                        #   in Loop: Header=BB50_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_148
.LBB50_158:                             # %for.end635
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$0, -8(%rbp)
.LBB50_159:                             # %for.cond636
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB50_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB50_159 Depth=2
	movl	$0, -4(%rbp)
.LBB50_161:                             # %for.cond639
                                        #   Parent Loop BB50_1 Depth=1
                                        #     Parent Loop BB50_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB50_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB50_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB50_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB50_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB50_165
.LBB50_164:                             # %if.else658
                                        #   in Loop: Header=BB50_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB50_165:                             # %if.end673
                                        #   in Loop: Header=BB50_161 Depth=3
	jmp	.LBB50_166
.LBB50_166:                             # %for.inc674
                                        #   in Loop: Header=BB50_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_161
.LBB50_167:                             # %for.end676
                                        #   in Loop: Header=BB50_159 Depth=2
	jmp	.LBB50_168
.LBB50_168:                             # %for.inc677
                                        #   in Loop: Header=BB50_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_159
.LBB50_169:                             # %for.end679
                                        #   in Loop: Header=BB50_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB50_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB50_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB50_171:                             # %if.end682
                                        #   in Loop: Header=BB50_1 Depth=1
	jmp	.LBB50_172
.LBB50_172:                             # %for.inc683
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_1
.LBB50_173:                             # %for.end685
	cmpl	$1089840691, -48(%rbp)  # imm = 0x40F5A633
	jne	.LBB50_175
.LBB50_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_174
.Lfunc_end50:
	.size	GetCtxModelNumber.43, .Lfunc_end50-GetCtxModelNumber.43
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.44
.LCPI51_0:
	.quad	4607182418800017408     # double 1
.LCPI51_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI51_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI51_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.44
	.p2align	4, 0x90
	.type	XRate.44,@function
XRate.44:                               # @XRate.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1441116818, -32(%rbp)  # imm = 0x55E5B292
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB51_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB51_3
.LBB51_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB51_3:                               # %cond.end
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI51_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI51_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI51_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB51_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB51_6
.LBB51_5:                               # %cond.false6
	vmovsd	.LCPI51_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI51_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI51_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB51_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB51_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB51_9
.LBB51_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB51_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB51_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB51_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB51_13
.LBB51_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB51_13:                              # %cond.end26
	jmp	.LBB51_15
.LBB51_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB51_15
.LBB51_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB51_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB51_18
.LBB51_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB51_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1441116818, -32(%rbp)  # imm = 0x55E5B292
	jne	.LBB51_20
.LBB51_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB51_19
.Lfunc_end51:
	.size	XRate.44, .Lfunc_end51-XRate.44
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.45
.LCPI52_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.45
	.p2align	4, 0x90
	.type	GetCtxModelNumber.45,@function
GetCtxModelNumber.45:                   # @GetCtxModelNumber.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI52_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1767163442, -48(%rbp)  # imm = 0x6954C632
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB52_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_3 Depth 2
                                        #       Child Loop BB52_5 Depth 3
                                        #     Child Loop BB52_14 Depth 2
                                        #       Child Loop BB52_16 Depth 3
                                        #     Child Loop BB52_25 Depth 2
                                        #       Child Loop BB52_27 Depth 3
                                        #     Child Loop BB52_36 Depth 2
                                        #       Child Loop BB52_38 Depth 3
                                        #     Child Loop BB52_47 Depth 2
                                        #     Child Loop BB52_54 Depth 2
                                        #     Child Loop BB52_61 Depth 2
                                        #     Child Loop BB52_68 Depth 2
                                        #     Child Loop BB52_75 Depth 2
                                        #     Child Loop BB52_82 Depth 2
                                        #       Child Loop BB52_84 Depth 3
                                        #     Child Loop BB52_93 Depth 2
                                        #       Child Loop BB52_95 Depth 3
                                        #     Child Loop BB52_104 Depth 2
                                        #       Child Loop BB52_106 Depth 3
                                        #     Child Loop BB52_115 Depth 2
                                        #       Child Loop BB52_117 Depth 3
                                        #     Child Loop BB52_126 Depth 2
                                        #       Child Loop BB52_128 Depth 3
                                        #     Child Loop BB52_137 Depth 2
                                        #       Child Loop BB52_139 Depth 3
                                        #     Child Loop BB52_148 Depth 2
                                        #       Child Loop BB52_150 Depth 3
                                        #     Child Loop BB52_159 Depth 2
                                        #       Child Loop BB52_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB52_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB52_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB52_3:                               # %for.cond2
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB52_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB52_3 Depth=2
	movl	$0, -4(%rbp)
.LBB52_5:                               # %for.cond5
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB52_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB52_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB52_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_9
.LBB52_8:                               # %if.else
                                        #   in Loop: Header=BB52_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_9:                               # %if.end
                                        #   in Loop: Header=BB52_5 Depth=3
	jmp	.LBB52_10
.LBB52_10:                              # %for.inc
                                        #   in Loop: Header=BB52_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_5
.LBB52_11:                              # %for.end
                                        #   in Loop: Header=BB52_3 Depth=2
	jmp	.LBB52_12
.LBB52_12:                              # %for.inc33
                                        #   in Loop: Header=BB52_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_3
.LBB52_13:                              # %for.end35
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_14:                              # %for.cond36
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB52_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB52_14 Depth=2
	movl	$0, -4(%rbp)
.LBB52_16:                              # %for.cond39
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB52_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB52_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB52_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_20
.LBB52_19:                              # %if.else58
                                        #   in Loop: Header=BB52_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_20:                              # %if.end73
                                        #   in Loop: Header=BB52_16 Depth=3
	jmp	.LBB52_21
.LBB52_21:                              # %for.inc74
                                        #   in Loop: Header=BB52_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_16
.LBB52_22:                              # %for.end76
                                        #   in Loop: Header=BB52_14 Depth=2
	jmp	.LBB52_23
.LBB52_23:                              # %for.inc77
                                        #   in Loop: Header=BB52_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_14
.LBB52_24:                              # %for.end79
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_25:                              # %for.cond80
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB52_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB52_25 Depth=2
	movl	$0, -4(%rbp)
.LBB52_27:                              # %for.cond83
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB52_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB52_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB52_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_31
.LBB52_30:                              # %if.else102
                                        #   in Loop: Header=BB52_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_31:                              # %if.end117
                                        #   in Loop: Header=BB52_27 Depth=3
	jmp	.LBB52_32
.LBB52_32:                              # %for.inc118
                                        #   in Loop: Header=BB52_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_27
.LBB52_33:                              # %for.end120
                                        #   in Loop: Header=BB52_25 Depth=2
	jmp	.LBB52_34
.LBB52_34:                              # %for.inc121
                                        #   in Loop: Header=BB52_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_25
.LBB52_35:                              # %for.end123
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_36:                              # %for.cond124
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB52_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB52_36 Depth=2
	movl	$0, -4(%rbp)
.LBB52_38:                              # %for.cond127
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB52_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB52_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB52_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_42
.LBB52_41:                              # %if.else146
                                        #   in Loop: Header=BB52_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_42:                              # %if.end161
                                        #   in Loop: Header=BB52_38 Depth=3
	jmp	.LBB52_43
.LBB52_43:                              # %for.inc162
                                        #   in Loop: Header=BB52_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_38
.LBB52_44:                              # %for.end164
                                        #   in Loop: Header=BB52_36 Depth=2
	jmp	.LBB52_45
.LBB52_45:                              # %for.inc165
                                        #   in Loop: Header=BB52_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_36
.LBB52_46:                              # %for.end167
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -4(%rbp)
.LBB52_47:                              # %for.cond168
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB52_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB52_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB52_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_51
.LBB52_50:                              # %if.else184
                                        #   in Loop: Header=BB52_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_51:                              # %if.end196
                                        #   in Loop: Header=BB52_47 Depth=2
	jmp	.LBB52_52
.LBB52_52:                              # %for.inc197
                                        #   in Loop: Header=BB52_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_47
.LBB52_53:                              # %for.end199
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -4(%rbp)
.LBB52_54:                              # %for.cond200
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB52_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB52_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB52_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_58
.LBB52_57:                              # %if.else216
                                        #   in Loop: Header=BB52_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_58:                              # %if.end228
                                        #   in Loop: Header=BB52_54 Depth=2
	jmp	.LBB52_59
.LBB52_59:                              # %for.inc229
                                        #   in Loop: Header=BB52_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_54
.LBB52_60:                              # %for.end231
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -4(%rbp)
.LBB52_61:                              # %for.cond232
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB52_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB52_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB52_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_65
.LBB52_64:                              # %if.else248
                                        #   in Loop: Header=BB52_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_65:                              # %if.end260
                                        #   in Loop: Header=BB52_61 Depth=2
	jmp	.LBB52_66
.LBB52_66:                              # %for.inc261
                                        #   in Loop: Header=BB52_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_61
.LBB52_67:                              # %for.end263
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -4(%rbp)
.LBB52_68:                              # %for.cond264
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB52_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB52_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB52_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_72
.LBB52_71:                              # %if.else280
                                        #   in Loop: Header=BB52_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_72:                              # %if.end292
                                        #   in Loop: Header=BB52_68 Depth=2
	jmp	.LBB52_73
.LBB52_73:                              # %for.inc293
                                        #   in Loop: Header=BB52_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_68
.LBB52_74:                              # %for.end295
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -4(%rbp)
.LBB52_75:                              # %for.cond296
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB52_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB52_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB52_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_79
.LBB52_78:                              # %if.else312
                                        #   in Loop: Header=BB52_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_79:                              # %if.end324
                                        #   in Loop: Header=BB52_75 Depth=2
	jmp	.LBB52_80
.LBB52_80:                              # %for.inc325
                                        #   in Loop: Header=BB52_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_75
.LBB52_81:                              # %for.end327
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_82:                              # %for.cond328
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB52_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB52_82 Depth=2
	movl	$0, -4(%rbp)
.LBB52_84:                              # %for.cond331
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB52_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB52_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB52_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_88
.LBB52_87:                              # %if.else350
                                        #   in Loop: Header=BB52_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_88:                              # %if.end365
                                        #   in Loop: Header=BB52_84 Depth=3
	jmp	.LBB52_89
.LBB52_89:                              # %for.inc366
                                        #   in Loop: Header=BB52_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_84
.LBB52_90:                              # %for.end368
                                        #   in Loop: Header=BB52_82 Depth=2
	jmp	.LBB52_91
.LBB52_91:                              # %for.inc369
                                        #   in Loop: Header=BB52_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_82
.LBB52_92:                              # %for.end371
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_93:                              # %for.cond372
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB52_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB52_93 Depth=2
	movl	$0, -4(%rbp)
.LBB52_95:                              # %for.cond375
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB52_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB52_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB52_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_99
.LBB52_98:                              # %if.else394
                                        #   in Loop: Header=BB52_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_99:                              # %if.end409
                                        #   in Loop: Header=BB52_95 Depth=3
	jmp	.LBB52_100
.LBB52_100:                             # %for.inc410
                                        #   in Loop: Header=BB52_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_95
.LBB52_101:                             # %for.end412
                                        #   in Loop: Header=BB52_93 Depth=2
	jmp	.LBB52_102
.LBB52_102:                             # %for.inc413
                                        #   in Loop: Header=BB52_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_93
.LBB52_103:                             # %for.end415
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_104:                             # %for.cond416
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB52_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB52_104 Depth=2
	movl	$0, -4(%rbp)
.LBB52_106:                             # %for.cond419
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB52_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB52_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB52_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_110
.LBB52_109:                             # %if.else438
                                        #   in Loop: Header=BB52_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_110:                             # %if.end453
                                        #   in Loop: Header=BB52_106 Depth=3
	jmp	.LBB52_111
.LBB52_111:                             # %for.inc454
                                        #   in Loop: Header=BB52_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_106
.LBB52_112:                             # %for.end456
                                        #   in Loop: Header=BB52_104 Depth=2
	jmp	.LBB52_113
.LBB52_113:                             # %for.inc457
                                        #   in Loop: Header=BB52_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_104
.LBB52_114:                             # %for.end459
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_115:                             # %for.cond460
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB52_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB52_115 Depth=2
	movl	$0, -4(%rbp)
.LBB52_117:                             # %for.cond463
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB52_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB52_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB52_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_121
.LBB52_120:                             # %if.else482
                                        #   in Loop: Header=BB52_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_121:                             # %if.end497
                                        #   in Loop: Header=BB52_117 Depth=3
	jmp	.LBB52_122
.LBB52_122:                             # %for.inc498
                                        #   in Loop: Header=BB52_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_117
.LBB52_123:                             # %for.end500
                                        #   in Loop: Header=BB52_115 Depth=2
	jmp	.LBB52_124
.LBB52_124:                             # %for.inc501
                                        #   in Loop: Header=BB52_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_115
.LBB52_125:                             # %for.end503
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_126:                             # %for.cond504
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB52_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB52_126 Depth=2
	movl	$0, -4(%rbp)
.LBB52_128:                             # %for.cond507
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB52_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB52_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB52_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_132
.LBB52_131:                             # %if.else526
                                        #   in Loop: Header=BB52_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_132:                             # %if.end541
                                        #   in Loop: Header=BB52_128 Depth=3
	jmp	.LBB52_133
.LBB52_133:                             # %for.inc542
                                        #   in Loop: Header=BB52_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_128
.LBB52_134:                             # %for.end544
                                        #   in Loop: Header=BB52_126 Depth=2
	jmp	.LBB52_135
.LBB52_135:                             # %for.inc545
                                        #   in Loop: Header=BB52_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_126
.LBB52_136:                             # %for.end547
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_137:                             # %for.cond548
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB52_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB52_137 Depth=2
	movl	$0, -4(%rbp)
.LBB52_139:                             # %for.cond551
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB52_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB52_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB52_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_143
.LBB52_142:                             # %if.else570
                                        #   in Loop: Header=BB52_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_143:                             # %if.end585
                                        #   in Loop: Header=BB52_139 Depth=3
	jmp	.LBB52_144
.LBB52_144:                             # %for.inc586
                                        #   in Loop: Header=BB52_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_139
.LBB52_145:                             # %for.end588
                                        #   in Loop: Header=BB52_137 Depth=2
	jmp	.LBB52_146
.LBB52_146:                             # %for.inc589
                                        #   in Loop: Header=BB52_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_137
.LBB52_147:                             # %for.end591
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_148:                             # %for.cond592
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB52_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB52_148 Depth=2
	movl	$0, -4(%rbp)
.LBB52_150:                             # %for.cond595
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB52_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB52_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB52_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_154
.LBB52_153:                             # %if.else614
                                        #   in Loop: Header=BB52_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_154:                             # %if.end629
                                        #   in Loop: Header=BB52_150 Depth=3
	jmp	.LBB52_155
.LBB52_155:                             # %for.inc630
                                        #   in Loop: Header=BB52_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_150
.LBB52_156:                             # %for.end632
                                        #   in Loop: Header=BB52_148 Depth=2
	jmp	.LBB52_157
.LBB52_157:                             # %for.inc633
                                        #   in Loop: Header=BB52_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_148
.LBB52_158:                             # %for.end635
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_159:                             # %for.cond636
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB52_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB52_159 Depth=2
	movl	$0, -4(%rbp)
.LBB52_161:                             # %for.cond639
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB52_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB52_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB52_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_165
.LBB52_164:                             # %if.else658
                                        #   in Loop: Header=BB52_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_165:                             # %if.end673
                                        #   in Loop: Header=BB52_161 Depth=3
	jmp	.LBB52_166
.LBB52_166:                             # %for.inc674
                                        #   in Loop: Header=BB52_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_161
.LBB52_167:                             # %for.end676
                                        #   in Loop: Header=BB52_159 Depth=2
	jmp	.LBB52_168
.LBB52_168:                             # %for.inc677
                                        #   in Loop: Header=BB52_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_159
.LBB52_169:                             # %for.end679
                                        #   in Loop: Header=BB52_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB52_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB52_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB52_171:                             # %if.end682
                                        #   in Loop: Header=BB52_1 Depth=1
	jmp	.LBB52_172
.LBB52_172:                             # %for.inc683
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_1
.LBB52_173:                             # %for.end685
	cmpl	$1767163442, -48(%rbp)  # imm = 0x6954C632
	jne	.LBB52_175
.LBB52_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_174
.Lfunc_end52:
	.size	GetCtxModelNumber.45, .Lfunc_end52-GetCtxModelNumber.45
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.46        # -- Begin function init_contexts.46
	.p2align	4, 0x90
	.type	init_contexts.46,@function
init_contexts.46:                       # @init_contexts.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1537048066, -28(%rbp)  # imm = 0x5B9D7E02
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB53_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB53_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -4(%rbp)
.LBB53_3:                               # %for.cond2
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB53_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_7
.LBB53_6:                               # %if.else
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_7:                               # %if.end
                                        #   in Loop: Header=BB53_3 Depth=2
	jmp	.LBB53_8
.LBB53_8:                               # %for.inc
                                        #   in Loop: Header=BB53_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_3
.LBB53_9:                               # %for.end
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_10
.LBB53_10:                              # %for.inc28
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_1
.LBB53_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB53_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB53_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB53_12 Depth=1
	movl	$0, -4(%rbp)
.LBB53_14:                              # %for.cond34
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB53_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB53_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB53_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_18
.LBB53_17:                              # %if.else52
                                        #   in Loop: Header=BB53_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_18:                              # %if.end66
                                        #   in Loop: Header=BB53_14 Depth=2
	jmp	.LBB53_19
.LBB53_19:                              # %for.inc67
                                        #   in Loop: Header=BB53_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_14
.LBB53_20:                              # %for.end69
                                        #   in Loop: Header=BB53_12 Depth=1
	jmp	.LBB53_21
.LBB53_21:                              # %for.inc70
                                        #   in Loop: Header=BB53_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_12
.LBB53_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB53_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB53_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB53_23 Depth=1
	movl	$0, -4(%rbp)
.LBB53_25:                              # %for.cond76
                                        #   Parent Loop BB53_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB53_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB53_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB53_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_29
.LBB53_28:                              # %if.else94
                                        #   in Loop: Header=BB53_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_29:                              # %if.end108
                                        #   in Loop: Header=BB53_25 Depth=2
	jmp	.LBB53_30
.LBB53_30:                              # %for.inc109
                                        #   in Loop: Header=BB53_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_25
.LBB53_31:                              # %for.end111
                                        #   in Loop: Header=BB53_23 Depth=1
	jmp	.LBB53_32
.LBB53_32:                              # %for.inc112
                                        #   in Loop: Header=BB53_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_23
.LBB53_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB53_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB53_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB53_34 Depth=1
	movl	$0, -4(%rbp)
.LBB53_36:                              # %for.cond118
                                        #   Parent Loop BB53_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB53_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB53_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB53_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_40
.LBB53_39:                              # %if.else136
                                        #   in Loop: Header=BB53_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_40:                              # %if.end150
                                        #   in Loop: Header=BB53_36 Depth=2
	jmp	.LBB53_41
.LBB53_41:                              # %for.inc151
                                        #   in Loop: Header=BB53_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_36
.LBB53_42:                              # %for.end153
                                        #   in Loop: Header=BB53_34 Depth=1
	jmp	.LBB53_43
.LBB53_43:                              # %for.inc154
                                        #   in Loop: Header=BB53_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_34
.LBB53_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB53_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB53_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB53_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB53_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_49
.LBB53_48:                              # %if.else172
                                        #   in Loop: Header=BB53_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_49:                              # %if.end183
                                        #   in Loop: Header=BB53_45 Depth=1
	jmp	.LBB53_50
.LBB53_50:                              # %for.inc184
                                        #   in Loop: Header=BB53_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_45
.LBB53_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB53_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB53_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB53_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB53_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_56
.LBB53_55:                              # %if.else202
                                        #   in Loop: Header=BB53_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_56:                              # %if.end213
                                        #   in Loop: Header=BB53_52 Depth=1
	jmp	.LBB53_57
.LBB53_57:                              # %for.inc214
                                        #   in Loop: Header=BB53_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_52
.LBB53_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB53_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB53_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB53_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB53_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_63
.LBB53_62:                              # %if.else232
                                        #   in Loop: Header=BB53_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_63:                              # %if.end243
                                        #   in Loop: Header=BB53_59 Depth=1
	jmp	.LBB53_64
.LBB53_64:                              # %for.inc244
                                        #   in Loop: Header=BB53_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_59
.LBB53_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB53_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB53_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB53_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB53_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_70
.LBB53_69:                              # %if.else262
                                        #   in Loop: Header=BB53_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_70:                              # %if.end273
                                        #   in Loop: Header=BB53_66 Depth=1
	jmp	.LBB53_71
.LBB53_71:                              # %for.inc274
                                        #   in Loop: Header=BB53_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_66
.LBB53_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB53_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB53_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB53_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB53_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_77
.LBB53_76:                              # %if.else292
                                        #   in Loop: Header=BB53_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_77:                              # %if.end303
                                        #   in Loop: Header=BB53_73 Depth=1
	jmp	.LBB53_78
.LBB53_78:                              # %for.inc304
                                        #   in Loop: Header=BB53_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_73
.LBB53_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB53_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB53_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB53_80 Depth=1
	movl	$0, -4(%rbp)
.LBB53_82:                              # %for.cond310
                                        #   Parent Loop BB53_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB53_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB53_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_86
.LBB53_85:                              # %if.else328
                                        #   in Loop: Header=BB53_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_86:                              # %if.end342
                                        #   in Loop: Header=BB53_82 Depth=2
	jmp	.LBB53_87
.LBB53_87:                              # %for.inc343
                                        #   in Loop: Header=BB53_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_82
.LBB53_88:                              # %for.end345
                                        #   in Loop: Header=BB53_80 Depth=1
	jmp	.LBB53_89
.LBB53_89:                              # %for.inc346
                                        #   in Loop: Header=BB53_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_80
.LBB53_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB53_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB53_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB53_91 Depth=1
	movl	$0, -4(%rbp)
.LBB53_93:                              # %for.cond352
                                        #   Parent Loop BB53_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB53_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB53_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_97
.LBB53_96:                              # %if.else370
                                        #   in Loop: Header=BB53_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_97:                              # %if.end384
                                        #   in Loop: Header=BB53_93 Depth=2
	jmp	.LBB53_98
.LBB53_98:                              # %for.inc385
                                        #   in Loop: Header=BB53_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_93
.LBB53_99:                              # %for.end387
                                        #   in Loop: Header=BB53_91 Depth=1
	jmp	.LBB53_100
.LBB53_100:                             # %for.inc388
                                        #   in Loop: Header=BB53_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_91
.LBB53_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB53_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB53_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB53_102 Depth=1
	movl	$0, -4(%rbp)
.LBB53_104:                             # %for.cond394
                                        #   Parent Loop BB53_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB53_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB53_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB53_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_108
.LBB53_107:                             # %if.else412
                                        #   in Loop: Header=BB53_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_108:                             # %if.end426
                                        #   in Loop: Header=BB53_104 Depth=2
	jmp	.LBB53_109
.LBB53_109:                             # %for.inc427
                                        #   in Loop: Header=BB53_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_104
.LBB53_110:                             # %for.end429
                                        #   in Loop: Header=BB53_102 Depth=1
	jmp	.LBB53_111
.LBB53_111:                             # %for.inc430
                                        #   in Loop: Header=BB53_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_102
.LBB53_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB53_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB53_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB53_113 Depth=1
	movl	$0, -4(%rbp)
.LBB53_115:                             # %for.cond436
                                        #   Parent Loop BB53_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB53_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB53_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB53_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_119
.LBB53_118:                             # %if.else454
                                        #   in Loop: Header=BB53_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_119:                             # %if.end468
                                        #   in Loop: Header=BB53_115 Depth=2
	jmp	.LBB53_120
.LBB53_120:                             # %for.inc469
                                        #   in Loop: Header=BB53_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_115
.LBB53_121:                             # %for.end471
                                        #   in Loop: Header=BB53_113 Depth=1
	jmp	.LBB53_122
.LBB53_122:                             # %for.inc472
                                        #   in Loop: Header=BB53_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_113
.LBB53_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB53_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB53_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB53_124 Depth=1
	movl	$0, -4(%rbp)
.LBB53_126:                             # %for.cond478
                                        #   Parent Loop BB53_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB53_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB53_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB53_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_130
.LBB53_129:                             # %if.else496
                                        #   in Loop: Header=BB53_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_130:                             # %if.end510
                                        #   in Loop: Header=BB53_126 Depth=2
	jmp	.LBB53_131
.LBB53_131:                             # %for.inc511
                                        #   in Loop: Header=BB53_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_126
.LBB53_132:                             # %for.end513
                                        #   in Loop: Header=BB53_124 Depth=1
	jmp	.LBB53_133
.LBB53_133:                             # %for.inc514
                                        #   in Loop: Header=BB53_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_124
.LBB53_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB53_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB53_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB53_135 Depth=1
	movl	$0, -4(%rbp)
.LBB53_137:                             # %for.cond520
                                        #   Parent Loop BB53_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB53_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB53_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB53_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_141
.LBB53_140:                             # %if.else538
                                        #   in Loop: Header=BB53_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_141:                             # %if.end552
                                        #   in Loop: Header=BB53_137 Depth=2
	jmp	.LBB53_142
.LBB53_142:                             # %for.inc553
                                        #   in Loop: Header=BB53_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_137
.LBB53_143:                             # %for.end555
                                        #   in Loop: Header=BB53_135 Depth=1
	jmp	.LBB53_144
.LBB53_144:                             # %for.inc556
                                        #   in Loop: Header=BB53_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_135
.LBB53_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB53_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB53_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB53_146 Depth=1
	movl	$0, -4(%rbp)
.LBB53_148:                             # %for.cond562
                                        #   Parent Loop BB53_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB53_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB53_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB53_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_152
.LBB53_151:                             # %if.else580
                                        #   in Loop: Header=BB53_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_152:                             # %if.end594
                                        #   in Loop: Header=BB53_148 Depth=2
	jmp	.LBB53_153
.LBB53_153:                             # %for.inc595
                                        #   in Loop: Header=BB53_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_148
.LBB53_154:                             # %for.end597
                                        #   in Loop: Header=BB53_146 Depth=1
	jmp	.LBB53_155
.LBB53_155:                             # %for.inc598
                                        #   in Loop: Header=BB53_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_146
.LBB53_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB53_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB53_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB53_157 Depth=1
	movl	$0, -4(%rbp)
.LBB53_159:                             # %for.cond604
                                        #   Parent Loop BB53_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB53_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB53_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB53_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_163
.LBB53_162:                             # %if.else622
                                        #   in Loop: Header=BB53_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_163:                             # %if.end636
                                        #   in Loop: Header=BB53_159 Depth=2
	jmp	.LBB53_164
.LBB53_164:                             # %for.inc637
                                        #   in Loop: Header=BB53_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_159
.LBB53_165:                             # %for.end639
                                        #   in Loop: Header=BB53_157 Depth=1
	jmp	.LBB53_166
.LBB53_166:                             # %for.inc640
                                        #   in Loop: Header=BB53_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_157
.LBB53_167:                             # %for.end642
	cmpl	$1537048066, -28(%rbp)  # imm = 0x5B9D7E02
	jne	.LBB53_169
.LBB53_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_168
.Lfunc_end53:
	.size	init_contexts.46, .Lfunc_end53-init_contexts.46
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.47        # -- Begin function init_contexts.47
	.p2align	4, 0x90
	.type	init_contexts.47,@function
init_contexts.47:                       # @init_contexts.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2110587469, -28(%rbp)  # imm = 0x7DCD024D
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB54_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB54_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -4(%rbp)
.LBB54_3:                               # %for.cond2
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB54_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_7
.LBB54_6:                               # %if.else
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_7:                               # %if.end
                                        #   in Loop: Header=BB54_3 Depth=2
	jmp	.LBB54_8
.LBB54_8:                               # %for.inc
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_3
.LBB54_9:                               # %for.end
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_10
.LBB54_10:                              # %for.inc28
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_1
.LBB54_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB54_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB54_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB54_12 Depth=1
	movl	$0, -4(%rbp)
.LBB54_14:                              # %for.cond34
                                        #   Parent Loop BB54_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB54_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB54_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB54_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_18
.LBB54_17:                              # %if.else52
                                        #   in Loop: Header=BB54_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_18:                              # %if.end66
                                        #   in Loop: Header=BB54_14 Depth=2
	jmp	.LBB54_19
.LBB54_19:                              # %for.inc67
                                        #   in Loop: Header=BB54_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_14
.LBB54_20:                              # %for.end69
                                        #   in Loop: Header=BB54_12 Depth=1
	jmp	.LBB54_21
.LBB54_21:                              # %for.inc70
                                        #   in Loop: Header=BB54_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_12
.LBB54_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB54_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB54_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB54_23 Depth=1
	movl	$0, -4(%rbp)
.LBB54_25:                              # %for.cond76
                                        #   Parent Loop BB54_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB54_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB54_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB54_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_29
.LBB54_28:                              # %if.else94
                                        #   in Loop: Header=BB54_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_29:                              # %if.end108
                                        #   in Loop: Header=BB54_25 Depth=2
	jmp	.LBB54_30
.LBB54_30:                              # %for.inc109
                                        #   in Loop: Header=BB54_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_25
.LBB54_31:                              # %for.end111
                                        #   in Loop: Header=BB54_23 Depth=1
	jmp	.LBB54_32
.LBB54_32:                              # %for.inc112
                                        #   in Loop: Header=BB54_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_23
.LBB54_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB54_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB54_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB54_34 Depth=1
	movl	$0, -4(%rbp)
.LBB54_36:                              # %for.cond118
                                        #   Parent Loop BB54_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB54_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB54_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB54_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_40
.LBB54_39:                              # %if.else136
                                        #   in Loop: Header=BB54_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_40:                              # %if.end150
                                        #   in Loop: Header=BB54_36 Depth=2
	jmp	.LBB54_41
.LBB54_41:                              # %for.inc151
                                        #   in Loop: Header=BB54_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_36
.LBB54_42:                              # %for.end153
                                        #   in Loop: Header=BB54_34 Depth=1
	jmp	.LBB54_43
.LBB54_43:                              # %for.inc154
                                        #   in Loop: Header=BB54_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_34
.LBB54_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB54_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB54_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB54_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB54_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_49
.LBB54_48:                              # %if.else172
                                        #   in Loop: Header=BB54_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_49:                              # %if.end183
                                        #   in Loop: Header=BB54_45 Depth=1
	jmp	.LBB54_50
.LBB54_50:                              # %for.inc184
                                        #   in Loop: Header=BB54_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_45
.LBB54_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB54_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB54_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB54_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB54_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_56
.LBB54_55:                              # %if.else202
                                        #   in Loop: Header=BB54_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_56:                              # %if.end213
                                        #   in Loop: Header=BB54_52 Depth=1
	jmp	.LBB54_57
.LBB54_57:                              # %for.inc214
                                        #   in Loop: Header=BB54_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_52
.LBB54_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB54_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB54_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB54_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB54_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_63
.LBB54_62:                              # %if.else232
                                        #   in Loop: Header=BB54_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_63:                              # %if.end243
                                        #   in Loop: Header=BB54_59 Depth=1
	jmp	.LBB54_64
.LBB54_64:                              # %for.inc244
                                        #   in Loop: Header=BB54_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_59
.LBB54_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB54_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB54_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB54_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB54_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_70
.LBB54_69:                              # %if.else262
                                        #   in Loop: Header=BB54_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_70:                              # %if.end273
                                        #   in Loop: Header=BB54_66 Depth=1
	jmp	.LBB54_71
.LBB54_71:                              # %for.inc274
                                        #   in Loop: Header=BB54_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_66
.LBB54_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB54_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB54_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB54_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB54_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_77
.LBB54_76:                              # %if.else292
                                        #   in Loop: Header=BB54_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_77:                              # %if.end303
                                        #   in Loop: Header=BB54_73 Depth=1
	jmp	.LBB54_78
.LBB54_78:                              # %for.inc304
                                        #   in Loop: Header=BB54_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_73
.LBB54_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB54_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB54_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB54_80 Depth=1
	movl	$0, -4(%rbp)
.LBB54_82:                              # %for.cond310
                                        #   Parent Loop BB54_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB54_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB54_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB54_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_86
.LBB54_85:                              # %if.else328
                                        #   in Loop: Header=BB54_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_86:                              # %if.end342
                                        #   in Loop: Header=BB54_82 Depth=2
	jmp	.LBB54_87
.LBB54_87:                              # %for.inc343
                                        #   in Loop: Header=BB54_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_82
.LBB54_88:                              # %for.end345
                                        #   in Loop: Header=BB54_80 Depth=1
	jmp	.LBB54_89
.LBB54_89:                              # %for.inc346
                                        #   in Loop: Header=BB54_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_80
.LBB54_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB54_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB54_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB54_91 Depth=1
	movl	$0, -4(%rbp)
.LBB54_93:                              # %for.cond352
                                        #   Parent Loop BB54_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB54_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB54_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB54_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_97
.LBB54_96:                              # %if.else370
                                        #   in Loop: Header=BB54_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_97:                              # %if.end384
                                        #   in Loop: Header=BB54_93 Depth=2
	jmp	.LBB54_98
.LBB54_98:                              # %for.inc385
                                        #   in Loop: Header=BB54_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_93
.LBB54_99:                              # %for.end387
                                        #   in Loop: Header=BB54_91 Depth=1
	jmp	.LBB54_100
.LBB54_100:                             # %for.inc388
                                        #   in Loop: Header=BB54_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_91
.LBB54_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB54_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB54_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB54_102 Depth=1
	movl	$0, -4(%rbp)
.LBB54_104:                             # %for.cond394
                                        #   Parent Loop BB54_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB54_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB54_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB54_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_108
.LBB54_107:                             # %if.else412
                                        #   in Loop: Header=BB54_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_108:                             # %if.end426
                                        #   in Loop: Header=BB54_104 Depth=2
	jmp	.LBB54_109
.LBB54_109:                             # %for.inc427
                                        #   in Loop: Header=BB54_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_104
.LBB54_110:                             # %for.end429
                                        #   in Loop: Header=BB54_102 Depth=1
	jmp	.LBB54_111
.LBB54_111:                             # %for.inc430
                                        #   in Loop: Header=BB54_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_102
.LBB54_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB54_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB54_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB54_113 Depth=1
	movl	$0, -4(%rbp)
.LBB54_115:                             # %for.cond436
                                        #   Parent Loop BB54_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB54_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB54_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB54_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_119
.LBB54_118:                             # %if.else454
                                        #   in Loop: Header=BB54_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_119:                             # %if.end468
                                        #   in Loop: Header=BB54_115 Depth=2
	jmp	.LBB54_120
.LBB54_120:                             # %for.inc469
                                        #   in Loop: Header=BB54_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_115
.LBB54_121:                             # %for.end471
                                        #   in Loop: Header=BB54_113 Depth=1
	jmp	.LBB54_122
.LBB54_122:                             # %for.inc472
                                        #   in Loop: Header=BB54_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_113
.LBB54_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB54_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB54_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB54_124 Depth=1
	movl	$0, -4(%rbp)
.LBB54_126:                             # %for.cond478
                                        #   Parent Loop BB54_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB54_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB54_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB54_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_130
.LBB54_129:                             # %if.else496
                                        #   in Loop: Header=BB54_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_130:                             # %if.end510
                                        #   in Loop: Header=BB54_126 Depth=2
	jmp	.LBB54_131
.LBB54_131:                             # %for.inc511
                                        #   in Loop: Header=BB54_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_126
.LBB54_132:                             # %for.end513
                                        #   in Loop: Header=BB54_124 Depth=1
	jmp	.LBB54_133
.LBB54_133:                             # %for.inc514
                                        #   in Loop: Header=BB54_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_124
.LBB54_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB54_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB54_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB54_135 Depth=1
	movl	$0, -4(%rbp)
.LBB54_137:                             # %for.cond520
                                        #   Parent Loop BB54_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB54_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB54_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB54_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_141
.LBB54_140:                             # %if.else538
                                        #   in Loop: Header=BB54_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_141:                             # %if.end552
                                        #   in Loop: Header=BB54_137 Depth=2
	jmp	.LBB54_142
.LBB54_142:                             # %for.inc553
                                        #   in Loop: Header=BB54_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_137
.LBB54_143:                             # %for.end555
                                        #   in Loop: Header=BB54_135 Depth=1
	jmp	.LBB54_144
.LBB54_144:                             # %for.inc556
                                        #   in Loop: Header=BB54_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_135
.LBB54_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB54_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB54_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB54_146 Depth=1
	movl	$0, -4(%rbp)
.LBB54_148:                             # %for.cond562
                                        #   Parent Loop BB54_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB54_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB54_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB54_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_152
.LBB54_151:                             # %if.else580
                                        #   in Loop: Header=BB54_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_152:                             # %if.end594
                                        #   in Loop: Header=BB54_148 Depth=2
	jmp	.LBB54_153
.LBB54_153:                             # %for.inc595
                                        #   in Loop: Header=BB54_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_148
.LBB54_154:                             # %for.end597
                                        #   in Loop: Header=BB54_146 Depth=1
	jmp	.LBB54_155
.LBB54_155:                             # %for.inc598
                                        #   in Loop: Header=BB54_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_146
.LBB54_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB54_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB54_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB54_157 Depth=1
	movl	$0, -4(%rbp)
.LBB54_159:                             # %for.cond604
                                        #   Parent Loop BB54_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB54_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB54_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB54_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB54_163
.LBB54_162:                             # %if.else622
                                        #   in Loop: Header=BB54_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB54_163:                             # %if.end636
                                        #   in Loop: Header=BB54_159 Depth=2
	jmp	.LBB54_164
.LBB54_164:                             # %for.inc637
                                        #   in Loop: Header=BB54_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_159
.LBB54_165:                             # %for.end639
                                        #   in Loop: Header=BB54_157 Depth=1
	jmp	.LBB54_166
.LBB54_166:                             # %for.inc640
                                        #   in Loop: Header=BB54_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_157
.LBB54_167:                             # %for.end642
	cmpl	$2110587469, -28(%rbp)  # imm = 0x7DCD024D
	jne	.LBB54_169
.LBB54_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_168
.Lfunc_end54:
	.size	init_contexts.47, .Lfunc_end54-init_contexts.47
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.48        # -- Begin function init_contexts.48
	.p2align	4, 0x90
	.type	init_contexts.48,@function
init_contexts.48:                       # @init_contexts.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$784092622, -28(%rbp)   # imm = 0x2EBC4DCE
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB55_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB55_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -4(%rbp)
.LBB55_3:                               # %for.cond2
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB55_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB55_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB55_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB55_7
.LBB55_6:                               # %if.else
                                        #   in Loop: Header=BB55_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB55_7:                               # %if.end
                                        #   in Loop: Header=BB55_3 Depth=2
	jmp	.LBB55_8
.LBB55_8:                               # %for.inc
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_3
.LBB55_9:                               # %for.end
                                        #   in Loop: Header=BB55_1 Depth=1
	jmp	.LBB55_10
.LBB55_10:                              # %for.inc28
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_1
.LBB55_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB55_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB55_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB55_12 Depth=1
	movl	$0, -4(%rbp)
.LBB55_14:                              # %for.cond34
                                        #   Parent Loop BB55_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB55_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB55_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB55_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB55_18
.LBB55_17:                              # %if.else52
                                        #   in Loop: Header=BB55_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB55_18:                              # %if.end66
                                        #   in Loop: Header=BB55_14 Depth=2
	jmp	.LBB55_19
.LBB55_19:                              # %for.inc67
                                        #   in Loop: Header=BB55_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_14
.LBB55_20:                              # %for.end69
                                        #   in Loop: Header=BB55_12 Depth=1
	jmp	.LBB55_21
.LBB55_21:                              # %for.inc70
                                        #   in Loop: Header=BB55_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_12
.LBB55_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB55_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB55_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB55_23 Depth=1
	movl	$0, -4(%rbp)
.LBB55_25:                              # %for.cond76
                                        #   Parent Loop BB55_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB55_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB55_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB55_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB55_29
.LBB55_28:                              # %if.else94
                                        #   in Loop: Header=BB55_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB55_29:                              # %if.end108
                                        #   in Loop: Header=BB55_25 Depth=2
	jmp	.LBB55_30
.LBB55_30:                              # %for.inc109
                                        #   in Loop: Header=BB55_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_25
.LBB55_31:                              # %for.end111
                                        #   in Loop: Header=BB55_23 Depth=1
	jmp	.LBB55_32
.LBB55_32:                              # %for.inc112
                                        #   in Loop: Header=BB55_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_23
.LBB55_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB55_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB55_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB55_34 Depth=1
	movl	$0, -4(%rbp)
.LBB55_36:                              # %for.cond118
                                        #   Parent Loop BB55_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB55_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB55_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB55_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB55_40
.LBB55_39:                              # %if.else136
                                        #   in Loop: Header=BB55_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB55_40:                              # %if.end150
                                        #   in Loop: Header=BB55_36 Depth=2
	jmp	.LBB55_41
.LBB55_41:                              # %for.inc151
                                        #   in Loop: Header=BB55_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_36
.LBB55_42:                              # %for.end153
                                        #   in Loop: Header=BB55_34 Depth=1
	jmp	.LBB55_43
.LBB55_43:                              # %for.inc154
                                        #   in Loop: Header=BB55_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_34
.LBB55_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB55_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB55_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB55_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB55_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB55_49
.LBB55_48:                              # %if.else172
                                        #   in Loop: Header=BB55_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB55_49:                              # %if.end183
                                        #   in Loop: Header=BB55_45 Depth=1
	jmp	.LBB55_50
.LBB55_50:                              # %for.inc184
                                        #   in Loop: Header=BB55_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_45
.LBB55_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB55_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB55_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB55_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB55_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB55_56
.LBB55_55:                              # %if.else202
                                        #   in Loop: Header=BB55_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB55_56:                              # %if.end213
                                        #   in Loop: Header=BB55_52 Depth=1
	jmp	.LBB55_57
.LBB55_57:                              # %for.inc214
                                        #   in Loop: Header=BB55_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_52
.LBB55_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB55_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB55_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB55_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB55_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB55_63
.LBB55_62:                              # %if.else232
                                        #   in Loop: Header=BB55_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB55_63:                              # %if.end243
                                        #   in Loop: Header=BB55_59 Depth=1
	jmp	.LBB55_64
.LBB55_64:                              # %for.inc244
                                        #   in Loop: Header=BB55_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_59
.LBB55_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB55_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB55_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB55_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB55_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB55_70
.LBB55_69:                              # %if.else262
                                        #   in Loop: Header=BB55_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB55_70:                              # %if.end273
                                        #   in Loop: Header=BB55_66 Depth=1
	jmp	.LBB55_71
.LBB55_71:                              # %for.inc274
                                        #   in Loop: Header=BB55_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_66
.LBB55_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB55_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB55_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB55_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB55_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB55_77
.LBB55_76:                              # %if.else292
                                        #   in Loop: Header=BB55_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB55_77:                              # %if.end303
                                        #   in Loop: Header=BB55_73 Depth=1
	jmp	.LBB55_78
.LBB55_78:                              # %for.inc304
                                        #   in Loop: Header=BB55_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_73
.LBB55_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB55_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB55_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB55_80 Depth=1
	movl	$0, -4(%rbp)
.LBB55_82:                              # %for.cond310
                                        #   Parent Loop BB55_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB55_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB55_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB55_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB55_86
.LBB55_85:                              # %if.else328
                                        #   in Loop: Header=BB55_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB55_86:                              # %if.end342
                                        #   in Loop: Header=BB55_82 Depth=2
	jmp	.LBB55_87
.LBB55_87:                              # %for.inc343
                                        #   in Loop: Header=BB55_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_82
.LBB55_88:                              # %for.end345
                                        #   in Loop: Header=BB55_80 Depth=1
	jmp	.LBB55_89
.LBB55_89:                              # %for.inc346
                                        #   in Loop: Header=BB55_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_80
.LBB55_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB55_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB55_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB55_91 Depth=1
	movl	$0, -4(%rbp)
.LBB55_93:                              # %for.cond352
                                        #   Parent Loop BB55_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB55_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB55_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB55_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB55_97
.LBB55_96:                              # %if.else370
                                        #   in Loop: Header=BB55_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB55_97:                              # %if.end384
                                        #   in Loop: Header=BB55_93 Depth=2
	jmp	.LBB55_98
.LBB55_98:                              # %for.inc385
                                        #   in Loop: Header=BB55_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_93
.LBB55_99:                              # %for.end387
                                        #   in Loop: Header=BB55_91 Depth=1
	jmp	.LBB55_100
.LBB55_100:                             # %for.inc388
                                        #   in Loop: Header=BB55_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_91
.LBB55_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB55_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB55_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB55_102 Depth=1
	movl	$0, -4(%rbp)
.LBB55_104:                             # %for.cond394
                                        #   Parent Loop BB55_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB55_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB55_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB55_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB55_108
.LBB55_107:                             # %if.else412
                                        #   in Loop: Header=BB55_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB55_108:                             # %if.end426
                                        #   in Loop: Header=BB55_104 Depth=2
	jmp	.LBB55_109
.LBB55_109:                             # %for.inc427
                                        #   in Loop: Header=BB55_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_104
.LBB55_110:                             # %for.end429
                                        #   in Loop: Header=BB55_102 Depth=1
	jmp	.LBB55_111
.LBB55_111:                             # %for.inc430
                                        #   in Loop: Header=BB55_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_102
.LBB55_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB55_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB55_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB55_113 Depth=1
	movl	$0, -4(%rbp)
.LBB55_115:                             # %for.cond436
                                        #   Parent Loop BB55_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB55_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB55_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB55_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB55_119
.LBB55_118:                             # %if.else454
                                        #   in Loop: Header=BB55_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB55_119:                             # %if.end468
                                        #   in Loop: Header=BB55_115 Depth=2
	jmp	.LBB55_120
.LBB55_120:                             # %for.inc469
                                        #   in Loop: Header=BB55_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_115
.LBB55_121:                             # %for.end471
                                        #   in Loop: Header=BB55_113 Depth=1
	jmp	.LBB55_122
.LBB55_122:                             # %for.inc472
                                        #   in Loop: Header=BB55_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_113
.LBB55_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB55_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB55_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB55_124 Depth=1
	movl	$0, -4(%rbp)
.LBB55_126:                             # %for.cond478
                                        #   Parent Loop BB55_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB55_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB55_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB55_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB55_130
.LBB55_129:                             # %if.else496
                                        #   in Loop: Header=BB55_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB55_130:                             # %if.end510
                                        #   in Loop: Header=BB55_126 Depth=2
	jmp	.LBB55_131
.LBB55_131:                             # %for.inc511
                                        #   in Loop: Header=BB55_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_126
.LBB55_132:                             # %for.end513
                                        #   in Loop: Header=BB55_124 Depth=1
	jmp	.LBB55_133
.LBB55_133:                             # %for.inc514
                                        #   in Loop: Header=BB55_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_124
.LBB55_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB55_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB55_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB55_135 Depth=1
	movl	$0, -4(%rbp)
.LBB55_137:                             # %for.cond520
                                        #   Parent Loop BB55_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB55_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB55_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB55_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB55_141
.LBB55_140:                             # %if.else538
                                        #   in Loop: Header=BB55_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB55_141:                             # %if.end552
                                        #   in Loop: Header=BB55_137 Depth=2
	jmp	.LBB55_142
.LBB55_142:                             # %for.inc553
                                        #   in Loop: Header=BB55_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_137
.LBB55_143:                             # %for.end555
                                        #   in Loop: Header=BB55_135 Depth=1
	jmp	.LBB55_144
.LBB55_144:                             # %for.inc556
                                        #   in Loop: Header=BB55_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_135
.LBB55_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB55_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB55_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB55_146 Depth=1
	movl	$0, -4(%rbp)
.LBB55_148:                             # %for.cond562
                                        #   Parent Loop BB55_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB55_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB55_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB55_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB55_152
.LBB55_151:                             # %if.else580
                                        #   in Loop: Header=BB55_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB55_152:                             # %if.end594
                                        #   in Loop: Header=BB55_148 Depth=2
	jmp	.LBB55_153
.LBB55_153:                             # %for.inc595
                                        #   in Loop: Header=BB55_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_148
.LBB55_154:                             # %for.end597
                                        #   in Loop: Header=BB55_146 Depth=1
	jmp	.LBB55_155
.LBB55_155:                             # %for.inc598
                                        #   in Loop: Header=BB55_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_146
.LBB55_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB55_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB55_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB55_157 Depth=1
	movl	$0, -4(%rbp)
.LBB55_159:                             # %for.cond604
                                        #   Parent Loop BB55_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB55_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB55_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB55_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB55_163
.LBB55_162:                             # %if.else622
                                        #   in Loop: Header=BB55_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB55_163:                             # %if.end636
                                        #   in Loop: Header=BB55_159 Depth=2
	jmp	.LBB55_164
.LBB55_164:                             # %for.inc637
                                        #   in Loop: Header=BB55_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_159
.LBB55_165:                             # %for.end639
                                        #   in Loop: Header=BB55_157 Depth=1
	jmp	.LBB55_166
.LBB55_166:                             # %for.inc640
                                        #   in Loop: Header=BB55_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_157
.LBB55_167:                             # %for.end642
	cmpl	$784092622, -28(%rbp)   # imm = 0x2EBC4DCE
	jne	.LBB55_169
.LBB55_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_168
.Lfunc_end55:
	.size	init_contexts.48, .Lfunc_end55-init_contexts.48
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.49
.LCPI56_0:
	.quad	4611686018427387904     # double 2
.LCPI56_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.49
	.p2align	4, 0x90
	.type	create_context_memory.49,@function
create_context_memory.49:               # @create_context_memory.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1366588802, -20(%rbp)  # imm = 0x51747D82
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB56_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB56_3
.LBB56_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB56_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB56_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB56_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB56_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB56_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB56_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB56_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB56_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB56_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB56_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB56_11:                              # %if.end10
                                        #   in Loop: Header=BB56_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB56_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB56_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB56_13:                              # %if.end16
                                        #   in Loop: Header=BB56_8 Depth=1
	movl	$0, -8(%rbp)
.LBB56_14:                              # %for.cond17
                                        #   Parent Loop BB56_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB56_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB56_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB56_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB56_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB56_17:                              # %if.end28
                                        #   in Loop: Header=BB56_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB56_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB56_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB56_19:                              # %if.end39
                                        #   in Loop: Header=BB56_14 Depth=2
	jmp	.LBB56_20
.LBB56_20:                              # %for.inc
                                        #   in Loop: Header=BB56_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_14
.LBB56_21:                              # %for.end
                                        #   in Loop: Header=BB56_8 Depth=1
	jmp	.LBB56_22
.LBB56_22:                              # %for.inc40
                                        #   in Loop: Header=BB56_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_8
.LBB56_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB56_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_26 Depth 2
                                        #       Child Loop BB56_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB56_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB56_24 Depth=1
	movl	$0, -8(%rbp)
.LBB56_26:                              # %for.cond47
                                        #   Parent Loop BB56_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB56_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB56_26 Depth=2
	movl	$0, -12(%rbp)
.LBB56_28:                              # %for.cond51
                                        #   Parent Loop BB56_24 Depth=1
                                        #     Parent Loop BB56_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB56_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB56_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB56_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_28
.LBB56_31:                              # %for.end63
                                        #   in Loop: Header=BB56_26 Depth=2
	jmp	.LBB56_32
.LBB56_32:                              # %for.inc64
                                        #   in Loop: Header=BB56_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_26
.LBB56_33:                              # %for.end66
                                        #   in Loop: Header=BB56_24 Depth=1
	jmp	.LBB56_34
.LBB56_34:                              # %for.inc67
                                        #   in Loop: Header=BB56_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_24
.LBB56_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB56_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB56_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB56_36 Depth=1
	vmovsd	.LCPI56_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB56_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_36
.LBB56_39:                              # %for.end98
	cmpl	$1366588802, -20(%rbp)  # imm = 0x51747D82
	jne	.LBB56_41
.LBB56_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_40
.Lfunc_end56:
	.size	create_context_memory.49, .Lfunc_end56-create_context_memory.49
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.50
.LCPI57_0:
	.quad	4607182418800017408     # double 1
.LCPI57_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI57_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI57_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.50
	.p2align	4, 0x90
	.type	XRate.50,@function
XRate.50:                               # @XRate.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$104719606, -32(%rbp)   # imm = 0x63DE4F6
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB57_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB57_3
.LBB57_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB57_3:                               # %cond.end
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI57_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI57_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI57_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB57_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB57_6
.LBB57_5:                               # %cond.false6
	vmovsd	.LCPI57_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI57_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI57_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB57_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB57_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB57_9
.LBB57_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB57_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB57_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB57_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB57_13
.LBB57_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB57_13:                              # %cond.end26
	jmp	.LBB57_15
.LBB57_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB57_15
.LBB57_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB57_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB57_18
.LBB57_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB57_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$104719606, -32(%rbp)   # imm = 0x63DE4F6
	jne	.LBB57_20
.LBB57_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB57_19
.Lfunc_end57:
	.size	XRate.50, .Lfunc_end57-XRate.50
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.51       # -- Begin function store_contexts.51
	.p2align	4, 0x90
	.type	store_contexts.51,@function
store_contexts.51:                      # @store_contexts.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1364240745, -16(%rbp)  # imm = 0x5150A969
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -8(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB58_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB58_3
.LBB58_2:                               # %if.else
	jmp	.LBB58_3
.LBB58_3:                               # %if.end
	cmpl	$1364240745, -16(%rbp)  # imm = 0x5150A969
	jne	.LBB58_5
.LBB58_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_4
.Lfunc_end58:
	.size	store_contexts.51, .Lfunc_end58-store_contexts.51
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.52
.LCPI59_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.52
	.p2align	4, 0x90
	.type	GetCtxModelNumber.52,@function
GetCtxModelNumber.52:                   # @GetCtxModelNumber.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI59_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$943487453, -44(%rbp)   # imm = 0x383C79DD
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB59_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_3 Depth 2
                                        #       Child Loop BB59_5 Depth 3
                                        #     Child Loop BB59_14 Depth 2
                                        #       Child Loop BB59_16 Depth 3
                                        #     Child Loop BB59_25 Depth 2
                                        #       Child Loop BB59_27 Depth 3
                                        #     Child Loop BB59_36 Depth 2
                                        #       Child Loop BB59_38 Depth 3
                                        #     Child Loop BB59_47 Depth 2
                                        #     Child Loop BB59_54 Depth 2
                                        #     Child Loop BB59_61 Depth 2
                                        #     Child Loop BB59_68 Depth 2
                                        #     Child Loop BB59_75 Depth 2
                                        #     Child Loop BB59_82 Depth 2
                                        #       Child Loop BB59_84 Depth 3
                                        #     Child Loop BB59_93 Depth 2
                                        #       Child Loop BB59_95 Depth 3
                                        #     Child Loop BB59_104 Depth 2
                                        #       Child Loop BB59_106 Depth 3
                                        #     Child Loop BB59_115 Depth 2
                                        #       Child Loop BB59_117 Depth 3
                                        #     Child Loop BB59_126 Depth 2
                                        #       Child Loop BB59_128 Depth 3
                                        #     Child Loop BB59_137 Depth 2
                                        #       Child Loop BB59_139 Depth 3
                                        #     Child Loop BB59_148 Depth 2
                                        #       Child Loop BB59_150 Depth 3
                                        #     Child Loop BB59_159 Depth 2
                                        #       Child Loop BB59_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB59_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB59_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB59_3:                               # %for.cond2
                                        #   Parent Loop BB59_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB59_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB59_3 Depth=2
	movl	$0, -4(%rbp)
.LBB59_5:                               # %for.cond5
                                        #   Parent Loop BB59_1 Depth=1
                                        #     Parent Loop BB59_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB59_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB59_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB59_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB59_9
.LBB59_8:                               # %if.else
                                        #   in Loop: Header=BB59_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB59_9:                               # %if.end
                                        #   in Loop: Header=BB59_5 Depth=3
	jmp	.LBB59_10
.LBB59_10:                              # %for.inc
                                        #   in Loop: Header=BB59_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_5
.LBB59_11:                              # %for.end
                                        #   in Loop: Header=BB59_3 Depth=2
	jmp	.LBB59_12
.LBB59_12:                              # %for.inc33
                                        #   in Loop: Header=BB59_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_3
.LBB59_13:                              # %for.end35
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	$0, -8(%rbp)
.LBB59_14:                              # %for.cond36
                                        #   Parent Loop BB59_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB59_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB59_14 Depth=2
	movl	$0, -4(%rbp)
.LBB59_16:                              # %for.cond39
                                        #   Parent Loop BB59_1 Depth=1
                                        #     Parent Loop BB59_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB59_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB59_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB59_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB59_20
.LBB59_19:                              # %if.else58
                                        #   in Loop: Header=BB59_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB59_20:                              # %if.end73
                                        #   in Loop: Header=BB59_16 Depth=3
	jmp	.LBB59_21
.LBB59_21:                              # %for.inc74
                                        #   in Loop: Header=BB59_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_16
.LBB59_22:                              # %for.end76
                                        #   in Loop: Header=BB59_14 Depth=2
	jmp	.LBB59_23
.LBB59_23:                              # %for.inc77
                                        #   in Loop: Header=BB59_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_14
.LBB59_24:                              # %for.end79
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	$0, -8(%rbp)
.LBB59_25:                              # %for.cond80
                                        #   Parent Loop BB59_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB59_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB59_25 Depth=2
	movl	$0, -4(%rbp)
.LBB59_27:                              # %for.cond83
                                        #   Parent Loop BB59_1 Depth=1
                                        #     Parent Loop BB59_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB59_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB59_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB59_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB59_31
.LBB59_30:                              # %if.else102
                                        #   in Loop: Header=BB59_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB59_31:                              # %if.end117
                                        #   in Loop: Header=BB59_27 Depth=3
	jmp	.LBB59_32
.LBB59_32:                              # %for.inc118
                                        #   in Loop: Header=BB59_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_27
.LBB59_33:                              # %for.end120
                                        #   in Loop: Header=BB59_25 Depth=2
	jmp	.LBB59_34
.LBB59_34:                              # %for.inc121
                                        #   in Loop: Header=BB59_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_25
.LBB59_35:                              # %for.end123
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	$0, -8(%rbp)
.LBB59_36:                              # %for.cond124
                                        #   Parent Loop BB59_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB59_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB59_36 Depth=2
	movl	$0, -4(%rbp)
.LBB59_38:                              # %for.cond127
                                        #   Parent Loop BB59_1 Depth=1
                                        #     Parent Loop BB59_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB59_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB59_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB59_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB59_42
.LBB59_41:                              # %if.else146
                                        #   in Loop: Header=BB59_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB59_42:                              # %if.end161
                                        #   in Loop: Header=BB59_38 Depth=3
	jmp	.LBB59_43
.LBB59_43:                              # %for.inc162
                                        #   in Loop: Header=BB59_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_38
.LBB59_44:                              # %for.end164
                                        #   in Loop: Header=BB59_36 Depth=2
	jmp	.LBB59_45
.LBB59_45:                              # %for.inc165
                                        #   in Loop: Header=BB59_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_36
.LBB59_46:                              # %for.end167
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	$0, -4(%rbp)
.LBB59_47:                              # %for.cond168
                                        #   Parent Loop BB59_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB59_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB59_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB59_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB59_51
.LBB59_50:                              # %if.else184
                                        #   in Loop: Header=BB59_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB59_51:                              # %if.end196
                                        #   in Loop: Header=BB59_47 Depth=2
	jmp	.LBB59_52
.LBB59_52:                              # %for.inc197
                                        #   in Loop: Header=BB59_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_47
.LBB59_53:                              # %for.end199
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	$0, -4(%rbp)
.LBB59_54:                              # %for.cond200
                                        #   Parent Loop BB59_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB59_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB59_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB59_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB59_58
.LBB59_57:                              # %if.else216
                                        #   in Loop: Header=BB59_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB59_58:                              # %if.end228
                                        #   in Loop: Header=BB59_54 Depth=2
	jmp	.LBB59_59
.LBB59_59:                              # %for.inc229
                                        #   in Loop: Header=BB59_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_54
.LBB59_60:                              # %for.end231
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	$0, -4(%rbp)
.LBB59_61:                              # %for.cond232
                                        #   Parent Loop BB59_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB59_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB59_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB59_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB59_65
.LBB59_64:                              # %if.else248
                                        #   in Loop: Header=BB59_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB59_65:                              # %if.end260
                                        #   in Loop: Header=BB59_61 Depth=2
	jmp	.LBB59_66
.LBB59_66:                              # %for.inc261
                                        #   in Loop: Header=BB59_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_61
.LBB59_67:                              # %for.end263
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	$0, -4(%rbp)
.LBB59_68:                              # %for.cond264
                                        #   Parent Loop BB59_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB59_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB59_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB59_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB59_72
.LBB59_71:                              # %if.else280
                                        #   in Loop: Header=BB59_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB59_72:                              # %if.end292
                                        #   in Loop: Header=BB59_68 Depth=2
	jmp	.LBB59_73
.LBB59_73:                              # %for.inc293
                                        #   in Loop: Header=BB59_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_68
.LBB59_74:                              # %for.end295
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	$0, -4(%rbp)
.LBB59_75:                              # %for.cond296
                                        #   Parent Loop BB59_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB59_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB59_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB59_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB59_79
.LBB59_78:                              # %if.else312
                                        #   in Loop: Header=BB59_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB59_79:                              # %if.end324
                                        #   in Loop: Header=BB59_75 Depth=2
	jmp	.LBB59_80
.LBB59_80:                              # %for.inc325
                                        #   in Loop: Header=BB59_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_75
.LBB59_81:                              # %for.end327
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	$0, -8(%rbp)
.LBB59_82:                              # %for.cond328
                                        #   Parent Loop BB59_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB59_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB59_82 Depth=2
	movl	$0, -4(%rbp)
.LBB59_84:                              # %for.cond331
                                        #   Parent Loop BB59_1 Depth=1
                                        #     Parent Loop BB59_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB59_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB59_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB59_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB59_88
.LBB59_87:                              # %if.else350
                                        #   in Loop: Header=BB59_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB59_88:                              # %if.end365
                                        #   in Loop: Header=BB59_84 Depth=3
	jmp	.LBB59_89
.LBB59_89:                              # %for.inc366
                                        #   in Loop: Header=BB59_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_84
.LBB59_90:                              # %for.end368
                                        #   in Loop: Header=BB59_82 Depth=2
	jmp	.LBB59_91
.LBB59_91:                              # %for.inc369
                                        #   in Loop: Header=BB59_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_82
.LBB59_92:                              # %for.end371
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	$0, -8(%rbp)
.LBB59_93:                              # %for.cond372
                                        #   Parent Loop BB59_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB59_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB59_93 Depth=2
	movl	$0, -4(%rbp)
.LBB59_95:                              # %for.cond375
                                        #   Parent Loop BB59_1 Depth=1
                                        #     Parent Loop BB59_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB59_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB59_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB59_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB59_99
.LBB59_98:                              # %if.else394
                                        #   in Loop: Header=BB59_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB59_99:                              # %if.end409
                                        #   in Loop: Header=BB59_95 Depth=3
	jmp	.LBB59_100
.LBB59_100:                             # %for.inc410
                                        #   in Loop: Header=BB59_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_95
.LBB59_101:                             # %for.end412
                                        #   in Loop: Header=BB59_93 Depth=2
	jmp	.LBB59_102
.LBB59_102:                             # %for.inc413
                                        #   in Loop: Header=BB59_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_93
.LBB59_103:                             # %for.end415
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	$0, -8(%rbp)
.LBB59_104:                             # %for.cond416
                                        #   Parent Loop BB59_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB59_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB59_104 Depth=2
	movl	$0, -4(%rbp)
.LBB59_106:                             # %for.cond419
                                        #   Parent Loop BB59_1 Depth=1
                                        #     Parent Loop BB59_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB59_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB59_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB59_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB59_110
.LBB59_109:                             # %if.else438
                                        #   in Loop: Header=BB59_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB59_110:                             # %if.end453
                                        #   in Loop: Header=BB59_106 Depth=3
	jmp	.LBB59_111
.LBB59_111:                             # %for.inc454
                                        #   in Loop: Header=BB59_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_106
.LBB59_112:                             # %for.end456
                                        #   in Loop: Header=BB59_104 Depth=2
	jmp	.LBB59_113
.LBB59_113:                             # %for.inc457
                                        #   in Loop: Header=BB59_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_104
.LBB59_114:                             # %for.end459
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	$0, -8(%rbp)
.LBB59_115:                             # %for.cond460
                                        #   Parent Loop BB59_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB59_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB59_115 Depth=2
	movl	$0, -4(%rbp)
.LBB59_117:                             # %for.cond463
                                        #   Parent Loop BB59_1 Depth=1
                                        #     Parent Loop BB59_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB59_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB59_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB59_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB59_121
.LBB59_120:                             # %if.else482
                                        #   in Loop: Header=BB59_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB59_121:                             # %if.end497
                                        #   in Loop: Header=BB59_117 Depth=3
	jmp	.LBB59_122
.LBB59_122:                             # %for.inc498
                                        #   in Loop: Header=BB59_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_117
.LBB59_123:                             # %for.end500
                                        #   in Loop: Header=BB59_115 Depth=2
	jmp	.LBB59_124
.LBB59_124:                             # %for.inc501
                                        #   in Loop: Header=BB59_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_115
.LBB59_125:                             # %for.end503
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	$0, -8(%rbp)
.LBB59_126:                             # %for.cond504
                                        #   Parent Loop BB59_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB59_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB59_126 Depth=2
	movl	$0, -4(%rbp)
.LBB59_128:                             # %for.cond507
                                        #   Parent Loop BB59_1 Depth=1
                                        #     Parent Loop BB59_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB59_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB59_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB59_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB59_132
.LBB59_131:                             # %if.else526
                                        #   in Loop: Header=BB59_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB59_132:                             # %if.end541
                                        #   in Loop: Header=BB59_128 Depth=3
	jmp	.LBB59_133
.LBB59_133:                             # %for.inc542
                                        #   in Loop: Header=BB59_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_128
.LBB59_134:                             # %for.end544
                                        #   in Loop: Header=BB59_126 Depth=2
	jmp	.LBB59_135
.LBB59_135:                             # %for.inc545
                                        #   in Loop: Header=BB59_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_126
.LBB59_136:                             # %for.end547
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	$0, -8(%rbp)
.LBB59_137:                             # %for.cond548
                                        #   Parent Loop BB59_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB59_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB59_137 Depth=2
	movl	$0, -4(%rbp)
.LBB59_139:                             # %for.cond551
                                        #   Parent Loop BB59_1 Depth=1
                                        #     Parent Loop BB59_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB59_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB59_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB59_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB59_143
.LBB59_142:                             # %if.else570
                                        #   in Loop: Header=BB59_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB59_143:                             # %if.end585
                                        #   in Loop: Header=BB59_139 Depth=3
	jmp	.LBB59_144
.LBB59_144:                             # %for.inc586
                                        #   in Loop: Header=BB59_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_139
.LBB59_145:                             # %for.end588
                                        #   in Loop: Header=BB59_137 Depth=2
	jmp	.LBB59_146
.LBB59_146:                             # %for.inc589
                                        #   in Loop: Header=BB59_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_137
.LBB59_147:                             # %for.end591
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	$0, -8(%rbp)
.LBB59_148:                             # %for.cond592
                                        #   Parent Loop BB59_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB59_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB59_148 Depth=2
	movl	$0, -4(%rbp)
.LBB59_150:                             # %for.cond595
                                        #   Parent Loop BB59_1 Depth=1
                                        #     Parent Loop BB59_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB59_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB59_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB59_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB59_154
.LBB59_153:                             # %if.else614
                                        #   in Loop: Header=BB59_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB59_154:                             # %if.end629
                                        #   in Loop: Header=BB59_150 Depth=3
	jmp	.LBB59_155
.LBB59_155:                             # %for.inc630
                                        #   in Loop: Header=BB59_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_150
.LBB59_156:                             # %for.end632
                                        #   in Loop: Header=BB59_148 Depth=2
	jmp	.LBB59_157
.LBB59_157:                             # %for.inc633
                                        #   in Loop: Header=BB59_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_148
.LBB59_158:                             # %for.end635
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	$0, -8(%rbp)
.LBB59_159:                             # %for.cond636
                                        #   Parent Loop BB59_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB59_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB59_159 Depth=2
	movl	$0, -4(%rbp)
.LBB59_161:                             # %for.cond639
                                        #   Parent Loop BB59_1 Depth=1
                                        #     Parent Loop BB59_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB59_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB59_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB59_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB59_165
.LBB59_164:                             # %if.else658
                                        #   in Loop: Header=BB59_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB59_165:                             # %if.end673
                                        #   in Loop: Header=BB59_161 Depth=3
	jmp	.LBB59_166
.LBB59_166:                             # %for.inc674
                                        #   in Loop: Header=BB59_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_161
.LBB59_167:                             # %for.end676
                                        #   in Loop: Header=BB59_159 Depth=2
	jmp	.LBB59_168
.LBB59_168:                             # %for.inc677
                                        #   in Loop: Header=BB59_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_159
.LBB59_169:                             # %for.end679
                                        #   in Loop: Header=BB59_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB59_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB59_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB59_171:                             # %if.end682
                                        #   in Loop: Header=BB59_1 Depth=1
	jmp	.LBB59_172
.LBB59_172:                             # %for.inc683
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_1
.LBB59_173:                             # %for.end685
	cmpl	$943487453, -44(%rbp)   # imm = 0x383C79DD
	jne	.LBB59_175
.LBB59_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_174
.Lfunc_end59:
	.size	GetCtxModelNumber.52, .Lfunc_end59-GetCtxModelNumber.52
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.53        # -- Begin function init_contexts.53
	.p2align	4, 0x90
	.type	init_contexts.53,@function
init_contexts.53:                       # @init_contexts.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$46923012, -28(%rbp)    # imm = 0x2CBFD04
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB60_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB60_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -4(%rbp)
.LBB60_3:                               # %for.cond2
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB60_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB60_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB60_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_7
.LBB60_6:                               # %if.else
                                        #   in Loop: Header=BB60_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_7:                               # %if.end
                                        #   in Loop: Header=BB60_3 Depth=2
	jmp	.LBB60_8
.LBB60_8:                               # %for.inc
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_3
.LBB60_9:                               # %for.end
                                        #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_10
.LBB60_10:                              # %for.inc28
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_1
.LBB60_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB60_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB60_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB60_12 Depth=1
	movl	$0, -4(%rbp)
.LBB60_14:                              # %for.cond34
                                        #   Parent Loop BB60_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB60_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_18
.LBB60_17:                              # %if.else52
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_18:                              # %if.end66
                                        #   in Loop: Header=BB60_14 Depth=2
	jmp	.LBB60_19
.LBB60_19:                              # %for.inc67
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_14
.LBB60_20:                              # %for.end69
                                        #   in Loop: Header=BB60_12 Depth=1
	jmp	.LBB60_21
.LBB60_21:                              # %for.inc70
                                        #   in Loop: Header=BB60_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_12
.LBB60_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB60_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB60_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB60_23 Depth=1
	movl	$0, -4(%rbp)
.LBB60_25:                              # %for.cond76
                                        #   Parent Loop BB60_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB60_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB60_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB60_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_29
.LBB60_28:                              # %if.else94
                                        #   in Loop: Header=BB60_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_29:                              # %if.end108
                                        #   in Loop: Header=BB60_25 Depth=2
	jmp	.LBB60_30
.LBB60_30:                              # %for.inc109
                                        #   in Loop: Header=BB60_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_25
.LBB60_31:                              # %for.end111
                                        #   in Loop: Header=BB60_23 Depth=1
	jmp	.LBB60_32
.LBB60_32:                              # %for.inc112
                                        #   in Loop: Header=BB60_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_23
.LBB60_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB60_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB60_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB60_34 Depth=1
	movl	$0, -4(%rbp)
.LBB60_36:                              # %for.cond118
                                        #   Parent Loop BB60_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB60_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB60_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB60_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_40
.LBB60_39:                              # %if.else136
                                        #   in Loop: Header=BB60_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_40:                              # %if.end150
                                        #   in Loop: Header=BB60_36 Depth=2
	jmp	.LBB60_41
.LBB60_41:                              # %for.inc151
                                        #   in Loop: Header=BB60_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_36
.LBB60_42:                              # %for.end153
                                        #   in Loop: Header=BB60_34 Depth=1
	jmp	.LBB60_43
.LBB60_43:                              # %for.inc154
                                        #   in Loop: Header=BB60_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_34
.LBB60_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB60_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB60_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB60_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB60_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_49
.LBB60_48:                              # %if.else172
                                        #   in Loop: Header=BB60_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_49:                              # %if.end183
                                        #   in Loop: Header=BB60_45 Depth=1
	jmp	.LBB60_50
.LBB60_50:                              # %for.inc184
                                        #   in Loop: Header=BB60_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_45
.LBB60_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB60_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB60_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB60_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB60_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_56
.LBB60_55:                              # %if.else202
                                        #   in Loop: Header=BB60_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_56:                              # %if.end213
                                        #   in Loop: Header=BB60_52 Depth=1
	jmp	.LBB60_57
.LBB60_57:                              # %for.inc214
                                        #   in Loop: Header=BB60_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_52
.LBB60_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB60_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB60_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB60_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB60_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_63
.LBB60_62:                              # %if.else232
                                        #   in Loop: Header=BB60_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_63:                              # %if.end243
                                        #   in Loop: Header=BB60_59 Depth=1
	jmp	.LBB60_64
.LBB60_64:                              # %for.inc244
                                        #   in Loop: Header=BB60_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_59
.LBB60_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB60_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB60_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB60_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB60_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_70
.LBB60_69:                              # %if.else262
                                        #   in Loop: Header=BB60_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_70:                              # %if.end273
                                        #   in Loop: Header=BB60_66 Depth=1
	jmp	.LBB60_71
.LBB60_71:                              # %for.inc274
                                        #   in Loop: Header=BB60_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_66
.LBB60_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB60_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB60_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB60_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB60_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_77
.LBB60_76:                              # %if.else292
                                        #   in Loop: Header=BB60_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_77:                              # %if.end303
                                        #   in Loop: Header=BB60_73 Depth=1
	jmp	.LBB60_78
.LBB60_78:                              # %for.inc304
                                        #   in Loop: Header=BB60_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_73
.LBB60_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB60_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB60_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB60_80 Depth=1
	movl	$0, -4(%rbp)
.LBB60_82:                              # %for.cond310
                                        #   Parent Loop BB60_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB60_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB60_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB60_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_86
.LBB60_85:                              # %if.else328
                                        #   in Loop: Header=BB60_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_86:                              # %if.end342
                                        #   in Loop: Header=BB60_82 Depth=2
	jmp	.LBB60_87
.LBB60_87:                              # %for.inc343
                                        #   in Loop: Header=BB60_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_82
.LBB60_88:                              # %for.end345
                                        #   in Loop: Header=BB60_80 Depth=1
	jmp	.LBB60_89
.LBB60_89:                              # %for.inc346
                                        #   in Loop: Header=BB60_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_80
.LBB60_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB60_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB60_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB60_91 Depth=1
	movl	$0, -4(%rbp)
.LBB60_93:                              # %for.cond352
                                        #   Parent Loop BB60_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB60_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB60_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB60_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_97
.LBB60_96:                              # %if.else370
                                        #   in Loop: Header=BB60_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_97:                              # %if.end384
                                        #   in Loop: Header=BB60_93 Depth=2
	jmp	.LBB60_98
.LBB60_98:                              # %for.inc385
                                        #   in Loop: Header=BB60_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_93
.LBB60_99:                              # %for.end387
                                        #   in Loop: Header=BB60_91 Depth=1
	jmp	.LBB60_100
.LBB60_100:                             # %for.inc388
                                        #   in Loop: Header=BB60_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_91
.LBB60_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB60_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB60_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB60_102 Depth=1
	movl	$0, -4(%rbp)
.LBB60_104:                             # %for.cond394
                                        #   Parent Loop BB60_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB60_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB60_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB60_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_108
.LBB60_107:                             # %if.else412
                                        #   in Loop: Header=BB60_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_108:                             # %if.end426
                                        #   in Loop: Header=BB60_104 Depth=2
	jmp	.LBB60_109
.LBB60_109:                             # %for.inc427
                                        #   in Loop: Header=BB60_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_104
.LBB60_110:                             # %for.end429
                                        #   in Loop: Header=BB60_102 Depth=1
	jmp	.LBB60_111
.LBB60_111:                             # %for.inc430
                                        #   in Loop: Header=BB60_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_102
.LBB60_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB60_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB60_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB60_113 Depth=1
	movl	$0, -4(%rbp)
.LBB60_115:                             # %for.cond436
                                        #   Parent Loop BB60_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB60_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB60_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB60_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_119
.LBB60_118:                             # %if.else454
                                        #   in Loop: Header=BB60_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_119:                             # %if.end468
                                        #   in Loop: Header=BB60_115 Depth=2
	jmp	.LBB60_120
.LBB60_120:                             # %for.inc469
                                        #   in Loop: Header=BB60_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_115
.LBB60_121:                             # %for.end471
                                        #   in Loop: Header=BB60_113 Depth=1
	jmp	.LBB60_122
.LBB60_122:                             # %for.inc472
                                        #   in Loop: Header=BB60_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_113
.LBB60_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB60_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB60_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB60_124 Depth=1
	movl	$0, -4(%rbp)
.LBB60_126:                             # %for.cond478
                                        #   Parent Loop BB60_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB60_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB60_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB60_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_130
.LBB60_129:                             # %if.else496
                                        #   in Loop: Header=BB60_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_130:                             # %if.end510
                                        #   in Loop: Header=BB60_126 Depth=2
	jmp	.LBB60_131
.LBB60_131:                             # %for.inc511
                                        #   in Loop: Header=BB60_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_126
.LBB60_132:                             # %for.end513
                                        #   in Loop: Header=BB60_124 Depth=1
	jmp	.LBB60_133
.LBB60_133:                             # %for.inc514
                                        #   in Loop: Header=BB60_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_124
.LBB60_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB60_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB60_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB60_135 Depth=1
	movl	$0, -4(%rbp)
.LBB60_137:                             # %for.cond520
                                        #   Parent Loop BB60_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB60_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB60_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB60_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_141
.LBB60_140:                             # %if.else538
                                        #   in Loop: Header=BB60_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_141:                             # %if.end552
                                        #   in Loop: Header=BB60_137 Depth=2
	jmp	.LBB60_142
.LBB60_142:                             # %for.inc553
                                        #   in Loop: Header=BB60_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_137
.LBB60_143:                             # %for.end555
                                        #   in Loop: Header=BB60_135 Depth=1
	jmp	.LBB60_144
.LBB60_144:                             # %for.inc556
                                        #   in Loop: Header=BB60_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_135
.LBB60_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB60_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB60_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB60_146 Depth=1
	movl	$0, -4(%rbp)
.LBB60_148:                             # %for.cond562
                                        #   Parent Loop BB60_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB60_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB60_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB60_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_152
.LBB60_151:                             # %if.else580
                                        #   in Loop: Header=BB60_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_152:                             # %if.end594
                                        #   in Loop: Header=BB60_148 Depth=2
	jmp	.LBB60_153
.LBB60_153:                             # %for.inc595
                                        #   in Loop: Header=BB60_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_148
.LBB60_154:                             # %for.end597
                                        #   in Loop: Header=BB60_146 Depth=1
	jmp	.LBB60_155
.LBB60_155:                             # %for.inc598
                                        #   in Loop: Header=BB60_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_146
.LBB60_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB60_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB60_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB60_157 Depth=1
	movl	$0, -4(%rbp)
.LBB60_159:                             # %for.cond604
                                        #   Parent Loop BB60_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB60_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB60_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB60_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_163
.LBB60_162:                             # %if.else622
                                        #   in Loop: Header=BB60_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_163:                             # %if.end636
                                        #   in Loop: Header=BB60_159 Depth=2
	jmp	.LBB60_164
.LBB60_164:                             # %for.inc637
                                        #   in Loop: Header=BB60_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_159
.LBB60_165:                             # %for.end639
                                        #   in Loop: Header=BB60_157 Depth=1
	jmp	.LBB60_166
.LBB60_166:                             # %for.inc640
                                        #   in Loop: Header=BB60_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_157
.LBB60_167:                             # %for.end642
	cmpl	$46923012, -28(%rbp)    # imm = 0x2CBFD04
	jne	.LBB60_169
.LBB60_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_168
.Lfunc_end60:
	.size	init_contexts.53, .Lfunc_end60-init_contexts.53
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.54
.LCPI61_0:
	.quad	4611686018427387904     # double 2
.LCPI61_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.54
	.p2align	4, 0x90
	.type	create_context_memory.54,@function
create_context_memory.54:               # @create_context_memory.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1460240285, -20(%rbp)  # imm = 0x57097F9D
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB61_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB61_3
.LBB61_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB61_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB61_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB61_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB61_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB61_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB61_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB61_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB61_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB61_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB61_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB61_11:                              # %if.end10
                                        #   in Loop: Header=BB61_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB61_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB61_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB61_13:                              # %if.end16
                                        #   in Loop: Header=BB61_8 Depth=1
	movl	$0, -8(%rbp)
.LBB61_14:                              # %for.cond17
                                        #   Parent Loop BB61_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB61_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB61_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB61_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB61_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB61_17:                              # %if.end28
                                        #   in Loop: Header=BB61_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB61_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB61_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB61_19:                              # %if.end39
                                        #   in Loop: Header=BB61_14 Depth=2
	jmp	.LBB61_20
.LBB61_20:                              # %for.inc
                                        #   in Loop: Header=BB61_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_14
.LBB61_21:                              # %for.end
                                        #   in Loop: Header=BB61_8 Depth=1
	jmp	.LBB61_22
.LBB61_22:                              # %for.inc40
                                        #   in Loop: Header=BB61_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_8
.LBB61_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB61_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_26 Depth 2
                                        #       Child Loop BB61_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB61_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB61_24 Depth=1
	movl	$0, -8(%rbp)
.LBB61_26:                              # %for.cond47
                                        #   Parent Loop BB61_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB61_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB61_26 Depth=2
	movl	$0, -12(%rbp)
.LBB61_28:                              # %for.cond51
                                        #   Parent Loop BB61_24 Depth=1
                                        #     Parent Loop BB61_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB61_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB61_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB61_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_28
.LBB61_31:                              # %for.end63
                                        #   in Loop: Header=BB61_26 Depth=2
	jmp	.LBB61_32
.LBB61_32:                              # %for.inc64
                                        #   in Loop: Header=BB61_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_26
.LBB61_33:                              # %for.end66
                                        #   in Loop: Header=BB61_24 Depth=1
	jmp	.LBB61_34
.LBB61_34:                              # %for.inc67
                                        #   in Loop: Header=BB61_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_24
.LBB61_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB61_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB61_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB61_36 Depth=1
	vmovsd	.LCPI61_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB61_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_36
.LBB61_39:                              # %for.end98
	cmpl	$1460240285, -20(%rbp)  # imm = 0x57097F9D
	jne	.LBB61_41
.LBB61_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_40
.Lfunc_end61:
	.size	create_context_memory.54, .Lfunc_end61-create_context_memory.54
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.55
.LCPI62_0:
	.quad	4611686018427387904     # double 2
.LCPI62_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.55
	.p2align	4, 0x90
	.type	create_context_memory.55,@function
create_context_memory.55:               # @create_context_memory.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1120941973, -20(%rbp)  # imm = 0x42D03795
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB62_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB62_3
.LBB62_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB62_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB62_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB62_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB62_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB62_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB62_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB62_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB62_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB62_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB62_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB62_11:                              # %if.end10
                                        #   in Loop: Header=BB62_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB62_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB62_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB62_13:                              # %if.end16
                                        #   in Loop: Header=BB62_8 Depth=1
	movl	$0, -8(%rbp)
.LBB62_14:                              # %for.cond17
                                        #   Parent Loop BB62_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB62_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB62_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB62_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB62_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB62_17:                              # %if.end28
                                        #   in Loop: Header=BB62_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB62_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB62_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB62_19:                              # %if.end39
                                        #   in Loop: Header=BB62_14 Depth=2
	jmp	.LBB62_20
.LBB62_20:                              # %for.inc
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_14
.LBB62_21:                              # %for.end
                                        #   in Loop: Header=BB62_8 Depth=1
	jmp	.LBB62_22
.LBB62_22:                              # %for.inc40
                                        #   in Loop: Header=BB62_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_8
.LBB62_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB62_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_26 Depth 2
                                        #       Child Loop BB62_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB62_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB62_24 Depth=1
	movl	$0, -8(%rbp)
.LBB62_26:                              # %for.cond47
                                        #   Parent Loop BB62_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB62_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB62_26 Depth=2
	movl	$0, -12(%rbp)
.LBB62_28:                              # %for.cond51
                                        #   Parent Loop BB62_24 Depth=1
                                        #     Parent Loop BB62_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB62_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB62_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB62_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_28
.LBB62_31:                              # %for.end63
                                        #   in Loop: Header=BB62_26 Depth=2
	jmp	.LBB62_32
.LBB62_32:                              # %for.inc64
                                        #   in Loop: Header=BB62_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_26
.LBB62_33:                              # %for.end66
                                        #   in Loop: Header=BB62_24 Depth=1
	jmp	.LBB62_34
.LBB62_34:                              # %for.inc67
                                        #   in Loop: Header=BB62_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_24
.LBB62_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB62_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB62_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB62_36 Depth=1
	vmovsd	.LCPI62_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI62_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI62_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB62_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_36
.LBB62_39:                              # %for.end98
	cmpl	$1120941973, -20(%rbp)  # imm = 0x42D03795
	jne	.LBB62_41
.LBB62_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_40
.Lfunc_end62:
	.size	create_context_memory.55, .Lfunc_end62-create_context_memory.55
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.56
.LCPI63_0:
	.quad	4611686018427387904     # double 2
.LCPI63_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.56
	.p2align	4, 0x90
	.type	create_context_memory.56,@function
create_context_memory.56:               # @create_context_memory.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$789009377, -20(%rbp)   # imm = 0x2F0753E1
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB63_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB63_3
.LBB63_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB63_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB63_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB63_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB63_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB63_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB63_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB63_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB63_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB63_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB63_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB63_11:                              # %if.end10
                                        #   in Loop: Header=BB63_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB63_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB63_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB63_13:                              # %if.end16
                                        #   in Loop: Header=BB63_8 Depth=1
	movl	$0, -8(%rbp)
.LBB63_14:                              # %for.cond17
                                        #   Parent Loop BB63_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB63_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB63_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB63_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB63_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB63_17:                              # %if.end28
                                        #   in Loop: Header=BB63_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB63_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB63_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB63_19:                              # %if.end39
                                        #   in Loop: Header=BB63_14 Depth=2
	jmp	.LBB63_20
.LBB63_20:                              # %for.inc
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_14
.LBB63_21:                              # %for.end
                                        #   in Loop: Header=BB63_8 Depth=1
	jmp	.LBB63_22
.LBB63_22:                              # %for.inc40
                                        #   in Loop: Header=BB63_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_8
.LBB63_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB63_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_26 Depth 2
                                        #       Child Loop BB63_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB63_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB63_24 Depth=1
	movl	$0, -8(%rbp)
.LBB63_26:                              # %for.cond47
                                        #   Parent Loop BB63_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB63_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB63_26 Depth=2
	movl	$0, -12(%rbp)
.LBB63_28:                              # %for.cond51
                                        #   Parent Loop BB63_24 Depth=1
                                        #     Parent Loop BB63_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB63_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB63_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB63_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_28
.LBB63_31:                              # %for.end63
                                        #   in Loop: Header=BB63_26 Depth=2
	jmp	.LBB63_32
.LBB63_32:                              # %for.inc64
                                        #   in Loop: Header=BB63_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_26
.LBB63_33:                              # %for.end66
                                        #   in Loop: Header=BB63_24 Depth=1
	jmp	.LBB63_34
.LBB63_34:                              # %for.inc67
                                        #   in Loop: Header=BB63_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_24
.LBB63_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB63_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB63_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB63_36 Depth=1
	vmovsd	.LCPI63_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI63_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI63_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB63_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_36
.LBB63_39:                              # %for.end98
	cmpl	$789009377, -20(%rbp)   # imm = 0x2F0753E1
	jne	.LBB63_41
.LBB63_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_40
.Lfunc_end63:
	.size	create_context_memory.56, .Lfunc_end63-create_context_memory.56
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.57
.LCPI64_0:
	.quad	4607182418800017408     # double 1
.LCPI64_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI64_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI64_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.57
	.p2align	4, 0x90
	.type	XRate.57,@function
XRate.57:                               # @XRate.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1165837749, -32(%rbp)  # imm = 0x457D45B5
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB64_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB64_3
.LBB64_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB64_3:                               # %cond.end
	vmovsd	.LCPI64_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI64_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI64_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI64_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB64_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI64_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB64_6
.LBB64_5:                               # %cond.false6
	vmovsd	.LCPI64_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI64_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI64_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB64_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB64_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB64_9
.LBB64_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB64_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB64_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB64_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB64_13
.LBB64_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB64_13:                              # %cond.end26
	jmp	.LBB64_15
.LBB64_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB64_15
.LBB64_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB64_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB64_18
.LBB64_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB64_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1165837749, -32(%rbp)  # imm = 0x457D45B5
	jne	.LBB64_20
.LBB64_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB64_19
.Lfunc_end64:
	.size	XRate.57, .Lfunc_end64-XRate.57
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.58        # -- Begin function init_contexts.58
	.p2align	4, 0x90
	.type	init_contexts.58,@function
init_contexts.58:                       # @init_contexts.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$378616944, -28(%rbp)   # imm = 0x16913C70
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB65_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB65_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_3:                               # %for.cond2
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB65_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB65_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB65_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_7
.LBB65_6:                               # %if.else
                                        #   in Loop: Header=BB65_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_7:                               # %if.end
                                        #   in Loop: Header=BB65_3 Depth=2
	jmp	.LBB65_8
.LBB65_8:                               # %for.inc
                                        #   in Loop: Header=BB65_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_3
.LBB65_9:                               # %for.end
                                        #   in Loop: Header=BB65_1 Depth=1
	jmp	.LBB65_10
.LBB65_10:                              # %for.inc28
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_1
.LBB65_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB65_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB65_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB65_12 Depth=1
	movl	$0, -4(%rbp)
.LBB65_14:                              # %for.cond34
                                        #   Parent Loop BB65_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB65_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_18
.LBB65_17:                              # %if.else52
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_18:                              # %if.end66
                                        #   in Loop: Header=BB65_14 Depth=2
	jmp	.LBB65_19
.LBB65_19:                              # %for.inc67
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_14
.LBB65_20:                              # %for.end69
                                        #   in Loop: Header=BB65_12 Depth=1
	jmp	.LBB65_21
.LBB65_21:                              # %for.inc70
                                        #   in Loop: Header=BB65_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_12
.LBB65_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB65_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB65_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	$0, -4(%rbp)
.LBB65_25:                              # %for.cond76
                                        #   Parent Loop BB65_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB65_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB65_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB65_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_29
.LBB65_28:                              # %if.else94
                                        #   in Loop: Header=BB65_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_29:                              # %if.end108
                                        #   in Loop: Header=BB65_25 Depth=2
	jmp	.LBB65_30
.LBB65_30:                              # %for.inc109
                                        #   in Loop: Header=BB65_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_25
.LBB65_31:                              # %for.end111
                                        #   in Loop: Header=BB65_23 Depth=1
	jmp	.LBB65_32
.LBB65_32:                              # %for.inc112
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_23
.LBB65_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB65_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB65_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB65_34 Depth=1
	movl	$0, -4(%rbp)
.LBB65_36:                              # %for.cond118
                                        #   Parent Loop BB65_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB65_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB65_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB65_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_40
.LBB65_39:                              # %if.else136
                                        #   in Loop: Header=BB65_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_40:                              # %if.end150
                                        #   in Loop: Header=BB65_36 Depth=2
	jmp	.LBB65_41
.LBB65_41:                              # %for.inc151
                                        #   in Loop: Header=BB65_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_36
.LBB65_42:                              # %for.end153
                                        #   in Loop: Header=BB65_34 Depth=1
	jmp	.LBB65_43
.LBB65_43:                              # %for.inc154
                                        #   in Loop: Header=BB65_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_34
.LBB65_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB65_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB65_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB65_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB65_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_49
.LBB65_48:                              # %if.else172
                                        #   in Loop: Header=BB65_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_49:                              # %if.end183
                                        #   in Loop: Header=BB65_45 Depth=1
	jmp	.LBB65_50
.LBB65_50:                              # %for.inc184
                                        #   in Loop: Header=BB65_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_45
.LBB65_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB65_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB65_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB65_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB65_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_56
.LBB65_55:                              # %if.else202
                                        #   in Loop: Header=BB65_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_56:                              # %if.end213
                                        #   in Loop: Header=BB65_52 Depth=1
	jmp	.LBB65_57
.LBB65_57:                              # %for.inc214
                                        #   in Loop: Header=BB65_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_52
.LBB65_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB65_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB65_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB65_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB65_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_63
.LBB65_62:                              # %if.else232
                                        #   in Loop: Header=BB65_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_63:                              # %if.end243
                                        #   in Loop: Header=BB65_59 Depth=1
	jmp	.LBB65_64
.LBB65_64:                              # %for.inc244
                                        #   in Loop: Header=BB65_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_59
.LBB65_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB65_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB65_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB65_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB65_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_70
.LBB65_69:                              # %if.else262
                                        #   in Loop: Header=BB65_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_70:                              # %if.end273
                                        #   in Loop: Header=BB65_66 Depth=1
	jmp	.LBB65_71
.LBB65_71:                              # %for.inc274
                                        #   in Loop: Header=BB65_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_66
.LBB65_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB65_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB65_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB65_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB65_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_77
.LBB65_76:                              # %if.else292
                                        #   in Loop: Header=BB65_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_77:                              # %if.end303
                                        #   in Loop: Header=BB65_73 Depth=1
	jmp	.LBB65_78
.LBB65_78:                              # %for.inc304
                                        #   in Loop: Header=BB65_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_73
.LBB65_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB65_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB65_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB65_80 Depth=1
	movl	$0, -4(%rbp)
.LBB65_82:                              # %for.cond310
                                        #   Parent Loop BB65_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB65_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB65_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_86
.LBB65_85:                              # %if.else328
                                        #   in Loop: Header=BB65_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_86:                              # %if.end342
                                        #   in Loop: Header=BB65_82 Depth=2
	jmp	.LBB65_87
.LBB65_87:                              # %for.inc343
                                        #   in Loop: Header=BB65_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_82
.LBB65_88:                              # %for.end345
                                        #   in Loop: Header=BB65_80 Depth=1
	jmp	.LBB65_89
.LBB65_89:                              # %for.inc346
                                        #   in Loop: Header=BB65_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_80
.LBB65_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB65_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB65_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB65_91 Depth=1
	movl	$0, -4(%rbp)
.LBB65_93:                              # %for.cond352
                                        #   Parent Loop BB65_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB65_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB65_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_97
.LBB65_96:                              # %if.else370
                                        #   in Loop: Header=BB65_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_97:                              # %if.end384
                                        #   in Loop: Header=BB65_93 Depth=2
	jmp	.LBB65_98
.LBB65_98:                              # %for.inc385
                                        #   in Loop: Header=BB65_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_93
.LBB65_99:                              # %for.end387
                                        #   in Loop: Header=BB65_91 Depth=1
	jmp	.LBB65_100
.LBB65_100:                             # %for.inc388
                                        #   in Loop: Header=BB65_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_91
.LBB65_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB65_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB65_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB65_102 Depth=1
	movl	$0, -4(%rbp)
.LBB65_104:                             # %for.cond394
                                        #   Parent Loop BB65_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB65_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB65_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB65_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_108
.LBB65_107:                             # %if.else412
                                        #   in Loop: Header=BB65_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_108:                             # %if.end426
                                        #   in Loop: Header=BB65_104 Depth=2
	jmp	.LBB65_109
.LBB65_109:                             # %for.inc427
                                        #   in Loop: Header=BB65_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_104
.LBB65_110:                             # %for.end429
                                        #   in Loop: Header=BB65_102 Depth=1
	jmp	.LBB65_111
.LBB65_111:                             # %for.inc430
                                        #   in Loop: Header=BB65_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_102
.LBB65_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB65_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB65_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB65_113 Depth=1
	movl	$0, -4(%rbp)
.LBB65_115:                             # %for.cond436
                                        #   Parent Loop BB65_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB65_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB65_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB65_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_119
.LBB65_118:                             # %if.else454
                                        #   in Loop: Header=BB65_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_119:                             # %if.end468
                                        #   in Loop: Header=BB65_115 Depth=2
	jmp	.LBB65_120
.LBB65_120:                             # %for.inc469
                                        #   in Loop: Header=BB65_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_115
.LBB65_121:                             # %for.end471
                                        #   in Loop: Header=BB65_113 Depth=1
	jmp	.LBB65_122
.LBB65_122:                             # %for.inc472
                                        #   in Loop: Header=BB65_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_113
.LBB65_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB65_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB65_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB65_124 Depth=1
	movl	$0, -4(%rbp)
.LBB65_126:                             # %for.cond478
                                        #   Parent Loop BB65_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB65_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB65_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB65_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_130
.LBB65_129:                             # %if.else496
                                        #   in Loop: Header=BB65_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_130:                             # %if.end510
                                        #   in Loop: Header=BB65_126 Depth=2
	jmp	.LBB65_131
.LBB65_131:                             # %for.inc511
                                        #   in Loop: Header=BB65_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_126
.LBB65_132:                             # %for.end513
                                        #   in Loop: Header=BB65_124 Depth=1
	jmp	.LBB65_133
.LBB65_133:                             # %for.inc514
                                        #   in Loop: Header=BB65_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_124
.LBB65_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB65_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB65_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB65_135 Depth=1
	movl	$0, -4(%rbp)
.LBB65_137:                             # %for.cond520
                                        #   Parent Loop BB65_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB65_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB65_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB65_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_141
.LBB65_140:                             # %if.else538
                                        #   in Loop: Header=BB65_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_141:                             # %if.end552
                                        #   in Loop: Header=BB65_137 Depth=2
	jmp	.LBB65_142
.LBB65_142:                             # %for.inc553
                                        #   in Loop: Header=BB65_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_137
.LBB65_143:                             # %for.end555
                                        #   in Loop: Header=BB65_135 Depth=1
	jmp	.LBB65_144
.LBB65_144:                             # %for.inc556
                                        #   in Loop: Header=BB65_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_135
.LBB65_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB65_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB65_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB65_146 Depth=1
	movl	$0, -4(%rbp)
.LBB65_148:                             # %for.cond562
                                        #   Parent Loop BB65_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB65_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB65_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB65_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_152
.LBB65_151:                             # %if.else580
                                        #   in Loop: Header=BB65_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_152:                             # %if.end594
                                        #   in Loop: Header=BB65_148 Depth=2
	jmp	.LBB65_153
.LBB65_153:                             # %for.inc595
                                        #   in Loop: Header=BB65_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_148
.LBB65_154:                             # %for.end597
                                        #   in Loop: Header=BB65_146 Depth=1
	jmp	.LBB65_155
.LBB65_155:                             # %for.inc598
                                        #   in Loop: Header=BB65_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_146
.LBB65_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB65_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB65_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB65_157 Depth=1
	movl	$0, -4(%rbp)
.LBB65_159:                             # %for.cond604
                                        #   Parent Loop BB65_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB65_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB65_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB65_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_163
.LBB65_162:                             # %if.else622
                                        #   in Loop: Header=BB65_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_163:                             # %if.end636
                                        #   in Loop: Header=BB65_159 Depth=2
	jmp	.LBB65_164
.LBB65_164:                             # %for.inc637
                                        #   in Loop: Header=BB65_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_159
.LBB65_165:                             # %for.end639
                                        #   in Loop: Header=BB65_157 Depth=1
	jmp	.LBB65_166
.LBB65_166:                             # %for.inc640
                                        #   in Loop: Header=BB65_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_157
.LBB65_167:                             # %for.end642
	cmpl	$378616944, -28(%rbp)   # imm = 0x16913C70
	jne	.LBB65_169
.LBB65_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_168
.Lfunc_end65:
	.size	init_contexts.58, .Lfunc_end65-init_contexts.58
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.59        # -- Begin function init_contexts.59
	.p2align	4, 0x90
	.type	init_contexts.59,@function
init_contexts.59:                       # @init_contexts.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$537389904, -28(%rbp)   # imm = 0x2007EB50
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB66_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB66_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -4(%rbp)
.LBB66_3:                               # %for.cond2
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB66_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB66_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB66_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_7
.LBB66_6:                               # %if.else
                                        #   in Loop: Header=BB66_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_7:                               # %if.end
                                        #   in Loop: Header=BB66_3 Depth=2
	jmp	.LBB66_8
.LBB66_8:                               # %for.inc
                                        #   in Loop: Header=BB66_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_3
.LBB66_9:                               # %for.end
                                        #   in Loop: Header=BB66_1 Depth=1
	jmp	.LBB66_10
.LBB66_10:                              # %for.inc28
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_1
.LBB66_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB66_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB66_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB66_12 Depth=1
	movl	$0, -4(%rbp)
.LBB66_14:                              # %for.cond34
                                        #   Parent Loop BB66_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB66_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB66_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB66_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_18
.LBB66_17:                              # %if.else52
                                        #   in Loop: Header=BB66_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_18:                              # %if.end66
                                        #   in Loop: Header=BB66_14 Depth=2
	jmp	.LBB66_19
.LBB66_19:                              # %for.inc67
                                        #   in Loop: Header=BB66_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_14
.LBB66_20:                              # %for.end69
                                        #   in Loop: Header=BB66_12 Depth=1
	jmp	.LBB66_21
.LBB66_21:                              # %for.inc70
                                        #   in Loop: Header=BB66_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_12
.LBB66_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB66_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB66_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB66_23 Depth=1
	movl	$0, -4(%rbp)
.LBB66_25:                              # %for.cond76
                                        #   Parent Loop BB66_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB66_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB66_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB66_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_29
.LBB66_28:                              # %if.else94
                                        #   in Loop: Header=BB66_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_29:                              # %if.end108
                                        #   in Loop: Header=BB66_25 Depth=2
	jmp	.LBB66_30
.LBB66_30:                              # %for.inc109
                                        #   in Loop: Header=BB66_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_25
.LBB66_31:                              # %for.end111
                                        #   in Loop: Header=BB66_23 Depth=1
	jmp	.LBB66_32
.LBB66_32:                              # %for.inc112
                                        #   in Loop: Header=BB66_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_23
.LBB66_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB66_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB66_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB66_34 Depth=1
	movl	$0, -4(%rbp)
.LBB66_36:                              # %for.cond118
                                        #   Parent Loop BB66_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB66_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB66_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB66_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_40
.LBB66_39:                              # %if.else136
                                        #   in Loop: Header=BB66_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_40:                              # %if.end150
                                        #   in Loop: Header=BB66_36 Depth=2
	jmp	.LBB66_41
.LBB66_41:                              # %for.inc151
                                        #   in Loop: Header=BB66_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_36
.LBB66_42:                              # %for.end153
                                        #   in Loop: Header=BB66_34 Depth=1
	jmp	.LBB66_43
.LBB66_43:                              # %for.inc154
                                        #   in Loop: Header=BB66_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_34
.LBB66_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB66_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB66_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB66_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB66_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_49
.LBB66_48:                              # %if.else172
                                        #   in Loop: Header=BB66_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_49:                              # %if.end183
                                        #   in Loop: Header=BB66_45 Depth=1
	jmp	.LBB66_50
.LBB66_50:                              # %for.inc184
                                        #   in Loop: Header=BB66_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_45
.LBB66_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB66_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB66_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB66_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB66_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_56
.LBB66_55:                              # %if.else202
                                        #   in Loop: Header=BB66_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_56:                              # %if.end213
                                        #   in Loop: Header=BB66_52 Depth=1
	jmp	.LBB66_57
.LBB66_57:                              # %for.inc214
                                        #   in Loop: Header=BB66_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_52
.LBB66_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB66_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB66_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB66_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB66_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_63
.LBB66_62:                              # %if.else232
                                        #   in Loop: Header=BB66_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_63:                              # %if.end243
                                        #   in Loop: Header=BB66_59 Depth=1
	jmp	.LBB66_64
.LBB66_64:                              # %for.inc244
                                        #   in Loop: Header=BB66_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_59
.LBB66_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB66_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB66_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB66_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB66_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_70
.LBB66_69:                              # %if.else262
                                        #   in Loop: Header=BB66_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_70:                              # %if.end273
                                        #   in Loop: Header=BB66_66 Depth=1
	jmp	.LBB66_71
.LBB66_71:                              # %for.inc274
                                        #   in Loop: Header=BB66_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_66
.LBB66_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB66_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB66_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB66_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB66_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_77
.LBB66_76:                              # %if.else292
                                        #   in Loop: Header=BB66_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_77:                              # %if.end303
                                        #   in Loop: Header=BB66_73 Depth=1
	jmp	.LBB66_78
.LBB66_78:                              # %for.inc304
                                        #   in Loop: Header=BB66_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_73
.LBB66_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB66_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB66_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB66_80 Depth=1
	movl	$0, -4(%rbp)
.LBB66_82:                              # %for.cond310
                                        #   Parent Loop BB66_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB66_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB66_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB66_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_86
.LBB66_85:                              # %if.else328
                                        #   in Loop: Header=BB66_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_86:                              # %if.end342
                                        #   in Loop: Header=BB66_82 Depth=2
	jmp	.LBB66_87
.LBB66_87:                              # %for.inc343
                                        #   in Loop: Header=BB66_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_82
.LBB66_88:                              # %for.end345
                                        #   in Loop: Header=BB66_80 Depth=1
	jmp	.LBB66_89
.LBB66_89:                              # %for.inc346
                                        #   in Loop: Header=BB66_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_80
.LBB66_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB66_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB66_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB66_91 Depth=1
	movl	$0, -4(%rbp)
.LBB66_93:                              # %for.cond352
                                        #   Parent Loop BB66_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB66_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB66_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB66_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_97
.LBB66_96:                              # %if.else370
                                        #   in Loop: Header=BB66_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_97:                              # %if.end384
                                        #   in Loop: Header=BB66_93 Depth=2
	jmp	.LBB66_98
.LBB66_98:                              # %for.inc385
                                        #   in Loop: Header=BB66_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_93
.LBB66_99:                              # %for.end387
                                        #   in Loop: Header=BB66_91 Depth=1
	jmp	.LBB66_100
.LBB66_100:                             # %for.inc388
                                        #   in Loop: Header=BB66_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_91
.LBB66_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB66_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB66_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB66_102 Depth=1
	movl	$0, -4(%rbp)
.LBB66_104:                             # %for.cond394
                                        #   Parent Loop BB66_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB66_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB66_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB66_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_108
.LBB66_107:                             # %if.else412
                                        #   in Loop: Header=BB66_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_108:                             # %if.end426
                                        #   in Loop: Header=BB66_104 Depth=2
	jmp	.LBB66_109
.LBB66_109:                             # %for.inc427
                                        #   in Loop: Header=BB66_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_104
.LBB66_110:                             # %for.end429
                                        #   in Loop: Header=BB66_102 Depth=1
	jmp	.LBB66_111
.LBB66_111:                             # %for.inc430
                                        #   in Loop: Header=BB66_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_102
.LBB66_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB66_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB66_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB66_113 Depth=1
	movl	$0, -4(%rbp)
.LBB66_115:                             # %for.cond436
                                        #   Parent Loop BB66_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB66_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB66_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB66_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_119
.LBB66_118:                             # %if.else454
                                        #   in Loop: Header=BB66_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_119:                             # %if.end468
                                        #   in Loop: Header=BB66_115 Depth=2
	jmp	.LBB66_120
.LBB66_120:                             # %for.inc469
                                        #   in Loop: Header=BB66_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_115
.LBB66_121:                             # %for.end471
                                        #   in Loop: Header=BB66_113 Depth=1
	jmp	.LBB66_122
.LBB66_122:                             # %for.inc472
                                        #   in Loop: Header=BB66_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_113
.LBB66_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB66_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB66_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB66_124 Depth=1
	movl	$0, -4(%rbp)
.LBB66_126:                             # %for.cond478
                                        #   Parent Loop BB66_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB66_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB66_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB66_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_130
.LBB66_129:                             # %if.else496
                                        #   in Loop: Header=BB66_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_130:                             # %if.end510
                                        #   in Loop: Header=BB66_126 Depth=2
	jmp	.LBB66_131
.LBB66_131:                             # %for.inc511
                                        #   in Loop: Header=BB66_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_126
.LBB66_132:                             # %for.end513
                                        #   in Loop: Header=BB66_124 Depth=1
	jmp	.LBB66_133
.LBB66_133:                             # %for.inc514
                                        #   in Loop: Header=BB66_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_124
.LBB66_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB66_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB66_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	$0, -4(%rbp)
.LBB66_137:                             # %for.cond520
                                        #   Parent Loop BB66_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB66_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB66_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB66_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_141
.LBB66_140:                             # %if.else538
                                        #   in Loop: Header=BB66_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_141:                             # %if.end552
                                        #   in Loop: Header=BB66_137 Depth=2
	jmp	.LBB66_142
.LBB66_142:                             # %for.inc553
                                        #   in Loop: Header=BB66_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_137
.LBB66_143:                             # %for.end555
                                        #   in Loop: Header=BB66_135 Depth=1
	jmp	.LBB66_144
.LBB66_144:                             # %for.inc556
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_135
.LBB66_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB66_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB66_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB66_146 Depth=1
	movl	$0, -4(%rbp)
.LBB66_148:                             # %for.cond562
                                        #   Parent Loop BB66_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB66_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB66_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB66_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_152
.LBB66_151:                             # %if.else580
                                        #   in Loop: Header=BB66_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_152:                             # %if.end594
                                        #   in Loop: Header=BB66_148 Depth=2
	jmp	.LBB66_153
.LBB66_153:                             # %for.inc595
                                        #   in Loop: Header=BB66_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_148
.LBB66_154:                             # %for.end597
                                        #   in Loop: Header=BB66_146 Depth=1
	jmp	.LBB66_155
.LBB66_155:                             # %for.inc598
                                        #   in Loop: Header=BB66_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_146
.LBB66_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB66_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB66_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB66_157 Depth=1
	movl	$0, -4(%rbp)
.LBB66_159:                             # %for.cond604
                                        #   Parent Loop BB66_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB66_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB66_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB66_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_163
.LBB66_162:                             # %if.else622
                                        #   in Loop: Header=BB66_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_163:                             # %if.end636
                                        #   in Loop: Header=BB66_159 Depth=2
	jmp	.LBB66_164
.LBB66_164:                             # %for.inc637
                                        #   in Loop: Header=BB66_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_159
.LBB66_165:                             # %for.end639
                                        #   in Loop: Header=BB66_157 Depth=1
	jmp	.LBB66_166
.LBB66_166:                             # %for.inc640
                                        #   in Loop: Header=BB66_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_157
.LBB66_167:                             # %for.end642
	cmpl	$537389904, -28(%rbp)   # imm = 0x2007EB50
	jne	.LBB66_169
.LBB66_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_168
.Lfunc_end66:
	.size	init_contexts.59, .Lfunc_end66-init_contexts.59
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.60        # -- Begin function init_contexts.60
	.p2align	4, 0x90
	.type	init_contexts.60,@function
init_contexts.60:                       # @init_contexts.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$676749191, -28(%rbp)   # imm = 0x28565F87
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB67_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB67_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -4(%rbp)
.LBB67_3:                               # %for.cond2
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB67_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_7
.LBB67_6:                               # %if.else
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_7:                               # %if.end
                                        #   in Loop: Header=BB67_3 Depth=2
	jmp	.LBB67_8
.LBB67_8:                               # %for.inc
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_3
.LBB67_9:                               # %for.end
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_10
.LBB67_10:                              # %for.inc28
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_1
.LBB67_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB67_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB67_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB67_12 Depth=1
	movl	$0, -4(%rbp)
.LBB67_14:                              # %for.cond34
                                        #   Parent Loop BB67_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB67_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB67_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB67_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_18
.LBB67_17:                              # %if.else52
                                        #   in Loop: Header=BB67_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_18:                              # %if.end66
                                        #   in Loop: Header=BB67_14 Depth=2
	jmp	.LBB67_19
.LBB67_19:                              # %for.inc67
                                        #   in Loop: Header=BB67_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_14
.LBB67_20:                              # %for.end69
                                        #   in Loop: Header=BB67_12 Depth=1
	jmp	.LBB67_21
.LBB67_21:                              # %for.inc70
                                        #   in Loop: Header=BB67_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_12
.LBB67_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB67_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB67_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB67_23 Depth=1
	movl	$0, -4(%rbp)
.LBB67_25:                              # %for.cond76
                                        #   Parent Loop BB67_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB67_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB67_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB67_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_29
.LBB67_28:                              # %if.else94
                                        #   in Loop: Header=BB67_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_29:                              # %if.end108
                                        #   in Loop: Header=BB67_25 Depth=2
	jmp	.LBB67_30
.LBB67_30:                              # %for.inc109
                                        #   in Loop: Header=BB67_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_25
.LBB67_31:                              # %for.end111
                                        #   in Loop: Header=BB67_23 Depth=1
	jmp	.LBB67_32
.LBB67_32:                              # %for.inc112
                                        #   in Loop: Header=BB67_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_23
.LBB67_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB67_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB67_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB67_34 Depth=1
	movl	$0, -4(%rbp)
.LBB67_36:                              # %for.cond118
                                        #   Parent Loop BB67_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB67_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB67_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB67_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_40
.LBB67_39:                              # %if.else136
                                        #   in Loop: Header=BB67_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_40:                              # %if.end150
                                        #   in Loop: Header=BB67_36 Depth=2
	jmp	.LBB67_41
.LBB67_41:                              # %for.inc151
                                        #   in Loop: Header=BB67_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_36
.LBB67_42:                              # %for.end153
                                        #   in Loop: Header=BB67_34 Depth=1
	jmp	.LBB67_43
.LBB67_43:                              # %for.inc154
                                        #   in Loop: Header=BB67_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_34
.LBB67_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB67_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB67_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB67_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB67_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_49
.LBB67_48:                              # %if.else172
                                        #   in Loop: Header=BB67_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_49:                              # %if.end183
                                        #   in Loop: Header=BB67_45 Depth=1
	jmp	.LBB67_50
.LBB67_50:                              # %for.inc184
                                        #   in Loop: Header=BB67_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_45
.LBB67_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB67_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB67_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB67_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB67_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_56
.LBB67_55:                              # %if.else202
                                        #   in Loop: Header=BB67_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_56:                              # %if.end213
                                        #   in Loop: Header=BB67_52 Depth=1
	jmp	.LBB67_57
.LBB67_57:                              # %for.inc214
                                        #   in Loop: Header=BB67_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_52
.LBB67_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB67_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB67_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB67_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB67_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_63
.LBB67_62:                              # %if.else232
                                        #   in Loop: Header=BB67_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_63:                              # %if.end243
                                        #   in Loop: Header=BB67_59 Depth=1
	jmp	.LBB67_64
.LBB67_64:                              # %for.inc244
                                        #   in Loop: Header=BB67_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_59
.LBB67_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB67_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB67_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB67_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB67_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_70
.LBB67_69:                              # %if.else262
                                        #   in Loop: Header=BB67_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_70:                              # %if.end273
                                        #   in Loop: Header=BB67_66 Depth=1
	jmp	.LBB67_71
.LBB67_71:                              # %for.inc274
                                        #   in Loop: Header=BB67_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_66
.LBB67_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB67_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB67_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB67_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB67_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_77
.LBB67_76:                              # %if.else292
                                        #   in Loop: Header=BB67_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_77:                              # %if.end303
                                        #   in Loop: Header=BB67_73 Depth=1
	jmp	.LBB67_78
.LBB67_78:                              # %for.inc304
                                        #   in Loop: Header=BB67_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_73
.LBB67_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB67_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB67_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB67_80 Depth=1
	movl	$0, -4(%rbp)
.LBB67_82:                              # %for.cond310
                                        #   Parent Loop BB67_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB67_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB67_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB67_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_86
.LBB67_85:                              # %if.else328
                                        #   in Loop: Header=BB67_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_86:                              # %if.end342
                                        #   in Loop: Header=BB67_82 Depth=2
	jmp	.LBB67_87
.LBB67_87:                              # %for.inc343
                                        #   in Loop: Header=BB67_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_82
.LBB67_88:                              # %for.end345
                                        #   in Loop: Header=BB67_80 Depth=1
	jmp	.LBB67_89
.LBB67_89:                              # %for.inc346
                                        #   in Loop: Header=BB67_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_80
.LBB67_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB67_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB67_91 Depth=1
	movl	$0, -4(%rbp)
.LBB67_93:                              # %for.cond352
                                        #   Parent Loop BB67_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB67_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB67_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB67_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_97
.LBB67_96:                              # %if.else370
                                        #   in Loop: Header=BB67_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_97:                              # %if.end384
                                        #   in Loop: Header=BB67_93 Depth=2
	jmp	.LBB67_98
.LBB67_98:                              # %for.inc385
                                        #   in Loop: Header=BB67_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_93
.LBB67_99:                              # %for.end387
                                        #   in Loop: Header=BB67_91 Depth=1
	jmp	.LBB67_100
.LBB67_100:                             # %for.inc388
                                        #   in Loop: Header=BB67_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_91
.LBB67_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB67_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB67_102 Depth=1
	movl	$0, -4(%rbp)
.LBB67_104:                             # %for.cond394
                                        #   Parent Loop BB67_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB67_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB67_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB67_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_108
.LBB67_107:                             # %if.else412
                                        #   in Loop: Header=BB67_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_108:                             # %if.end426
                                        #   in Loop: Header=BB67_104 Depth=2
	jmp	.LBB67_109
.LBB67_109:                             # %for.inc427
                                        #   in Loop: Header=BB67_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_104
.LBB67_110:                             # %for.end429
                                        #   in Loop: Header=BB67_102 Depth=1
	jmp	.LBB67_111
.LBB67_111:                             # %for.inc430
                                        #   in Loop: Header=BB67_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_102
.LBB67_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB67_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB67_113 Depth=1
	movl	$0, -4(%rbp)
.LBB67_115:                             # %for.cond436
                                        #   Parent Loop BB67_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB67_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB67_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB67_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_119
.LBB67_118:                             # %if.else454
                                        #   in Loop: Header=BB67_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_119:                             # %if.end468
                                        #   in Loop: Header=BB67_115 Depth=2
	jmp	.LBB67_120
.LBB67_120:                             # %for.inc469
                                        #   in Loop: Header=BB67_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_115
.LBB67_121:                             # %for.end471
                                        #   in Loop: Header=BB67_113 Depth=1
	jmp	.LBB67_122
.LBB67_122:                             # %for.inc472
                                        #   in Loop: Header=BB67_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_113
.LBB67_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB67_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB67_124 Depth=1
	movl	$0, -4(%rbp)
.LBB67_126:                             # %for.cond478
                                        #   Parent Loop BB67_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB67_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB67_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB67_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_130
.LBB67_129:                             # %if.else496
                                        #   in Loop: Header=BB67_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_130:                             # %if.end510
                                        #   in Loop: Header=BB67_126 Depth=2
	jmp	.LBB67_131
.LBB67_131:                             # %for.inc511
                                        #   in Loop: Header=BB67_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_126
.LBB67_132:                             # %for.end513
                                        #   in Loop: Header=BB67_124 Depth=1
	jmp	.LBB67_133
.LBB67_133:                             # %for.inc514
                                        #   in Loop: Header=BB67_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_124
.LBB67_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB67_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	$0, -4(%rbp)
.LBB67_137:                             # %for.cond520
                                        #   Parent Loop BB67_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB67_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB67_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB67_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_141
.LBB67_140:                             # %if.else538
                                        #   in Loop: Header=BB67_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_141:                             # %if.end552
                                        #   in Loop: Header=BB67_137 Depth=2
	jmp	.LBB67_142
.LBB67_142:                             # %for.inc553
                                        #   in Loop: Header=BB67_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_137
.LBB67_143:                             # %for.end555
                                        #   in Loop: Header=BB67_135 Depth=1
	jmp	.LBB67_144
.LBB67_144:                             # %for.inc556
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_135
.LBB67_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB67_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB67_146 Depth=1
	movl	$0, -4(%rbp)
.LBB67_148:                             # %for.cond562
                                        #   Parent Loop BB67_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB67_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB67_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB67_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_152
.LBB67_151:                             # %if.else580
                                        #   in Loop: Header=BB67_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_152:                             # %if.end594
                                        #   in Loop: Header=BB67_148 Depth=2
	jmp	.LBB67_153
.LBB67_153:                             # %for.inc595
                                        #   in Loop: Header=BB67_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_148
.LBB67_154:                             # %for.end597
                                        #   in Loop: Header=BB67_146 Depth=1
	jmp	.LBB67_155
.LBB67_155:                             # %for.inc598
                                        #   in Loop: Header=BB67_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_146
.LBB67_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB67_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB67_157 Depth=1
	movl	$0, -4(%rbp)
.LBB67_159:                             # %for.cond604
                                        #   Parent Loop BB67_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB67_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB67_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB67_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_163
.LBB67_162:                             # %if.else622
                                        #   in Loop: Header=BB67_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_163:                             # %if.end636
                                        #   in Loop: Header=BB67_159 Depth=2
	jmp	.LBB67_164
.LBB67_164:                             # %for.inc637
                                        #   in Loop: Header=BB67_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_159
.LBB67_165:                             # %for.end639
                                        #   in Loop: Header=BB67_157 Depth=1
	jmp	.LBB67_166
.LBB67_166:                             # %for.inc640
                                        #   in Loop: Header=BB67_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_157
.LBB67_167:                             # %for.end642
	cmpl	$676749191, -28(%rbp)   # imm = 0x28565F87
	jne	.LBB67_169
.LBB67_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_168
.Lfunc_end67:
	.size	init_contexts.60, .Lfunc_end67-init_contexts.60
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.61
.LCPI68_0:
	.quad	4611686018427387904     # double 2
.LCPI68_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.61
	.p2align	4, 0x90
	.type	create_context_memory.61,@function
create_context_memory.61:               # @create_context_memory.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$153282313, -20(%rbp)   # imm = 0x922E709
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB68_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB68_3
.LBB68_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB68_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB68_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB68_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB68_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB68_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB68_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB68_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB68_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB68_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB68_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB68_11:                              # %if.end10
                                        #   in Loop: Header=BB68_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB68_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB68_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB68_13:                              # %if.end16
                                        #   in Loop: Header=BB68_8 Depth=1
	movl	$0, -8(%rbp)
.LBB68_14:                              # %for.cond17
                                        #   Parent Loop BB68_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB68_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB68_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB68_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB68_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB68_17:                              # %if.end28
                                        #   in Loop: Header=BB68_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB68_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB68_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB68_19:                              # %if.end39
                                        #   in Loop: Header=BB68_14 Depth=2
	jmp	.LBB68_20
.LBB68_20:                              # %for.inc
                                        #   in Loop: Header=BB68_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_14
.LBB68_21:                              # %for.end
                                        #   in Loop: Header=BB68_8 Depth=1
	jmp	.LBB68_22
.LBB68_22:                              # %for.inc40
                                        #   in Loop: Header=BB68_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_8
.LBB68_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB68_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_26 Depth 2
                                        #       Child Loop BB68_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB68_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB68_24 Depth=1
	movl	$0, -8(%rbp)
.LBB68_26:                              # %for.cond47
                                        #   Parent Loop BB68_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB68_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB68_26 Depth=2
	movl	$0, -12(%rbp)
.LBB68_28:                              # %for.cond51
                                        #   Parent Loop BB68_24 Depth=1
                                        #     Parent Loop BB68_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB68_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB68_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB68_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_28
.LBB68_31:                              # %for.end63
                                        #   in Loop: Header=BB68_26 Depth=2
	jmp	.LBB68_32
.LBB68_32:                              # %for.inc64
                                        #   in Loop: Header=BB68_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_26
.LBB68_33:                              # %for.end66
                                        #   in Loop: Header=BB68_24 Depth=1
	jmp	.LBB68_34
.LBB68_34:                              # %for.inc67
                                        #   in Loop: Header=BB68_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_24
.LBB68_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB68_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB68_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB68_36 Depth=1
	vmovsd	.LCPI68_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI68_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI68_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB68_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_36
.LBB68_39:                              # %for.end98
	cmpl	$153282313, -20(%rbp)   # imm = 0x922E709
	jne	.LBB68_41
.LBB68_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_40
.Lfunc_end68:
	.size	create_context_memory.61, .Lfunc_end68-create_context_memory.61
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.62
.LCPI69_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.62
	.p2align	4, 0x90
	.type	GetCtxModelNumber.62,@function
GetCtxModelNumber.62:                   # @GetCtxModelNumber.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI69_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$785192390, -44(%rbp)   # imm = 0x2ECD15C6
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB69_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_3 Depth 2
                                        #       Child Loop BB69_5 Depth 3
                                        #     Child Loop BB69_14 Depth 2
                                        #       Child Loop BB69_16 Depth 3
                                        #     Child Loop BB69_25 Depth 2
                                        #       Child Loop BB69_27 Depth 3
                                        #     Child Loop BB69_36 Depth 2
                                        #       Child Loop BB69_38 Depth 3
                                        #     Child Loop BB69_47 Depth 2
                                        #     Child Loop BB69_54 Depth 2
                                        #     Child Loop BB69_61 Depth 2
                                        #     Child Loop BB69_68 Depth 2
                                        #     Child Loop BB69_75 Depth 2
                                        #     Child Loop BB69_82 Depth 2
                                        #       Child Loop BB69_84 Depth 3
                                        #     Child Loop BB69_93 Depth 2
                                        #       Child Loop BB69_95 Depth 3
                                        #     Child Loop BB69_104 Depth 2
                                        #       Child Loop BB69_106 Depth 3
                                        #     Child Loop BB69_115 Depth 2
                                        #       Child Loop BB69_117 Depth 3
                                        #     Child Loop BB69_126 Depth 2
                                        #       Child Loop BB69_128 Depth 3
                                        #     Child Loop BB69_137 Depth 2
                                        #       Child Loop BB69_139 Depth 3
                                        #     Child Loop BB69_148 Depth 2
                                        #       Child Loop BB69_150 Depth 3
                                        #     Child Loop BB69_159 Depth 2
                                        #       Child Loop BB69_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB69_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB69_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB69_3:                               # %for.cond2
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB69_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	$0, -4(%rbp)
.LBB69_5:                               # %for.cond5
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB69_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB69_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB69_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_9
.LBB69_8:                               # %if.else
                                        #   in Loop: Header=BB69_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_9:                               # %if.end
                                        #   in Loop: Header=BB69_5 Depth=3
	jmp	.LBB69_10
.LBB69_10:                              # %for.inc
                                        #   in Loop: Header=BB69_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_5
.LBB69_11:                              # %for.end
                                        #   in Loop: Header=BB69_3 Depth=2
	jmp	.LBB69_12
.LBB69_12:                              # %for.inc33
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_3
.LBB69_13:                              # %for.end35
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_14:                              # %for.cond36
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB69_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB69_14 Depth=2
	movl	$0, -4(%rbp)
.LBB69_16:                              # %for.cond39
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB69_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB69_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB69_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_20
.LBB69_19:                              # %if.else58
                                        #   in Loop: Header=BB69_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_20:                              # %if.end73
                                        #   in Loop: Header=BB69_16 Depth=3
	jmp	.LBB69_21
.LBB69_21:                              # %for.inc74
                                        #   in Loop: Header=BB69_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_16
.LBB69_22:                              # %for.end76
                                        #   in Loop: Header=BB69_14 Depth=2
	jmp	.LBB69_23
.LBB69_23:                              # %for.inc77
                                        #   in Loop: Header=BB69_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_14
.LBB69_24:                              # %for.end79
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_25:                              # %for.cond80
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB69_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB69_25 Depth=2
	movl	$0, -4(%rbp)
.LBB69_27:                              # %for.cond83
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB69_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB69_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB69_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_31
.LBB69_30:                              # %if.else102
                                        #   in Loop: Header=BB69_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_31:                              # %if.end117
                                        #   in Loop: Header=BB69_27 Depth=3
	jmp	.LBB69_32
.LBB69_32:                              # %for.inc118
                                        #   in Loop: Header=BB69_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_27
.LBB69_33:                              # %for.end120
                                        #   in Loop: Header=BB69_25 Depth=2
	jmp	.LBB69_34
.LBB69_34:                              # %for.inc121
                                        #   in Loop: Header=BB69_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_25
.LBB69_35:                              # %for.end123
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_36:                              # %for.cond124
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB69_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB69_36 Depth=2
	movl	$0, -4(%rbp)
.LBB69_38:                              # %for.cond127
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB69_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB69_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB69_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_42
.LBB69_41:                              # %if.else146
                                        #   in Loop: Header=BB69_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_42:                              # %if.end161
                                        #   in Loop: Header=BB69_38 Depth=3
	jmp	.LBB69_43
.LBB69_43:                              # %for.inc162
                                        #   in Loop: Header=BB69_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_38
.LBB69_44:                              # %for.end164
                                        #   in Loop: Header=BB69_36 Depth=2
	jmp	.LBB69_45
.LBB69_45:                              # %for.inc165
                                        #   in Loop: Header=BB69_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_36
.LBB69_46:                              # %for.end167
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -4(%rbp)
.LBB69_47:                              # %for.cond168
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB69_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB69_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB69_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_51
.LBB69_50:                              # %if.else184
                                        #   in Loop: Header=BB69_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_51:                              # %if.end196
                                        #   in Loop: Header=BB69_47 Depth=2
	jmp	.LBB69_52
.LBB69_52:                              # %for.inc197
                                        #   in Loop: Header=BB69_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_47
.LBB69_53:                              # %for.end199
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -4(%rbp)
.LBB69_54:                              # %for.cond200
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB69_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB69_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB69_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_58
.LBB69_57:                              # %if.else216
                                        #   in Loop: Header=BB69_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_58:                              # %if.end228
                                        #   in Loop: Header=BB69_54 Depth=2
	jmp	.LBB69_59
.LBB69_59:                              # %for.inc229
                                        #   in Loop: Header=BB69_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_54
.LBB69_60:                              # %for.end231
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -4(%rbp)
.LBB69_61:                              # %for.cond232
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB69_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB69_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB69_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_65
.LBB69_64:                              # %if.else248
                                        #   in Loop: Header=BB69_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_65:                              # %if.end260
                                        #   in Loop: Header=BB69_61 Depth=2
	jmp	.LBB69_66
.LBB69_66:                              # %for.inc261
                                        #   in Loop: Header=BB69_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_61
.LBB69_67:                              # %for.end263
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -4(%rbp)
.LBB69_68:                              # %for.cond264
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB69_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB69_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB69_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_72
.LBB69_71:                              # %if.else280
                                        #   in Loop: Header=BB69_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_72:                              # %if.end292
                                        #   in Loop: Header=BB69_68 Depth=2
	jmp	.LBB69_73
.LBB69_73:                              # %for.inc293
                                        #   in Loop: Header=BB69_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_68
.LBB69_74:                              # %for.end295
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -4(%rbp)
.LBB69_75:                              # %for.cond296
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB69_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB69_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB69_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_79
.LBB69_78:                              # %if.else312
                                        #   in Loop: Header=BB69_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_79:                              # %if.end324
                                        #   in Loop: Header=BB69_75 Depth=2
	jmp	.LBB69_80
.LBB69_80:                              # %for.inc325
                                        #   in Loop: Header=BB69_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_75
.LBB69_81:                              # %for.end327
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_82:                              # %for.cond328
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB69_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB69_82 Depth=2
	movl	$0, -4(%rbp)
.LBB69_84:                              # %for.cond331
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB69_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB69_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB69_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_88
.LBB69_87:                              # %if.else350
                                        #   in Loop: Header=BB69_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_88:                              # %if.end365
                                        #   in Loop: Header=BB69_84 Depth=3
	jmp	.LBB69_89
.LBB69_89:                              # %for.inc366
                                        #   in Loop: Header=BB69_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_84
.LBB69_90:                              # %for.end368
                                        #   in Loop: Header=BB69_82 Depth=2
	jmp	.LBB69_91
.LBB69_91:                              # %for.inc369
                                        #   in Loop: Header=BB69_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_82
.LBB69_92:                              # %for.end371
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_93:                              # %for.cond372
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB69_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB69_93 Depth=2
	movl	$0, -4(%rbp)
.LBB69_95:                              # %for.cond375
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB69_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB69_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB69_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_99
.LBB69_98:                              # %if.else394
                                        #   in Loop: Header=BB69_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_99:                              # %if.end409
                                        #   in Loop: Header=BB69_95 Depth=3
	jmp	.LBB69_100
.LBB69_100:                             # %for.inc410
                                        #   in Loop: Header=BB69_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_95
.LBB69_101:                             # %for.end412
                                        #   in Loop: Header=BB69_93 Depth=2
	jmp	.LBB69_102
.LBB69_102:                             # %for.inc413
                                        #   in Loop: Header=BB69_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_93
.LBB69_103:                             # %for.end415
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_104:                             # %for.cond416
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB69_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB69_104 Depth=2
	movl	$0, -4(%rbp)
.LBB69_106:                             # %for.cond419
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB69_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB69_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB69_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_110
.LBB69_109:                             # %if.else438
                                        #   in Loop: Header=BB69_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_110:                             # %if.end453
                                        #   in Loop: Header=BB69_106 Depth=3
	jmp	.LBB69_111
.LBB69_111:                             # %for.inc454
                                        #   in Loop: Header=BB69_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_106
.LBB69_112:                             # %for.end456
                                        #   in Loop: Header=BB69_104 Depth=2
	jmp	.LBB69_113
.LBB69_113:                             # %for.inc457
                                        #   in Loop: Header=BB69_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_104
.LBB69_114:                             # %for.end459
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_115:                             # %for.cond460
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB69_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB69_115 Depth=2
	movl	$0, -4(%rbp)
.LBB69_117:                             # %for.cond463
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB69_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB69_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB69_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_121
.LBB69_120:                             # %if.else482
                                        #   in Loop: Header=BB69_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_121:                             # %if.end497
                                        #   in Loop: Header=BB69_117 Depth=3
	jmp	.LBB69_122
.LBB69_122:                             # %for.inc498
                                        #   in Loop: Header=BB69_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_117
.LBB69_123:                             # %for.end500
                                        #   in Loop: Header=BB69_115 Depth=2
	jmp	.LBB69_124
.LBB69_124:                             # %for.inc501
                                        #   in Loop: Header=BB69_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_115
.LBB69_125:                             # %for.end503
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_126:                             # %for.cond504
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB69_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB69_126 Depth=2
	movl	$0, -4(%rbp)
.LBB69_128:                             # %for.cond507
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB69_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB69_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB69_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_132
.LBB69_131:                             # %if.else526
                                        #   in Loop: Header=BB69_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_132:                             # %if.end541
                                        #   in Loop: Header=BB69_128 Depth=3
	jmp	.LBB69_133
.LBB69_133:                             # %for.inc542
                                        #   in Loop: Header=BB69_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_128
.LBB69_134:                             # %for.end544
                                        #   in Loop: Header=BB69_126 Depth=2
	jmp	.LBB69_135
.LBB69_135:                             # %for.inc545
                                        #   in Loop: Header=BB69_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_126
.LBB69_136:                             # %for.end547
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_137:                             # %for.cond548
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB69_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB69_137 Depth=2
	movl	$0, -4(%rbp)
.LBB69_139:                             # %for.cond551
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB69_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB69_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB69_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_143
.LBB69_142:                             # %if.else570
                                        #   in Loop: Header=BB69_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_143:                             # %if.end585
                                        #   in Loop: Header=BB69_139 Depth=3
	jmp	.LBB69_144
.LBB69_144:                             # %for.inc586
                                        #   in Loop: Header=BB69_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_139
.LBB69_145:                             # %for.end588
                                        #   in Loop: Header=BB69_137 Depth=2
	jmp	.LBB69_146
.LBB69_146:                             # %for.inc589
                                        #   in Loop: Header=BB69_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_137
.LBB69_147:                             # %for.end591
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_148:                             # %for.cond592
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB69_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB69_148 Depth=2
	movl	$0, -4(%rbp)
.LBB69_150:                             # %for.cond595
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB69_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB69_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB69_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_154
.LBB69_153:                             # %if.else614
                                        #   in Loop: Header=BB69_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_154:                             # %if.end629
                                        #   in Loop: Header=BB69_150 Depth=3
	jmp	.LBB69_155
.LBB69_155:                             # %for.inc630
                                        #   in Loop: Header=BB69_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_150
.LBB69_156:                             # %for.end632
                                        #   in Loop: Header=BB69_148 Depth=2
	jmp	.LBB69_157
.LBB69_157:                             # %for.inc633
                                        #   in Loop: Header=BB69_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_148
.LBB69_158:                             # %for.end635
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_159:                             # %for.cond636
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB69_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB69_159 Depth=2
	movl	$0, -4(%rbp)
.LBB69_161:                             # %for.cond639
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB69_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB69_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB69_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_165
.LBB69_164:                             # %if.else658
                                        #   in Loop: Header=BB69_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_165:                             # %if.end673
                                        #   in Loop: Header=BB69_161 Depth=3
	jmp	.LBB69_166
.LBB69_166:                             # %for.inc674
                                        #   in Loop: Header=BB69_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_161
.LBB69_167:                             # %for.end676
                                        #   in Loop: Header=BB69_159 Depth=2
	jmp	.LBB69_168
.LBB69_168:                             # %for.inc677
                                        #   in Loop: Header=BB69_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_159
.LBB69_169:                             # %for.end679
                                        #   in Loop: Header=BB69_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB69_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB69_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB69_171:                             # %if.end682
                                        #   in Loop: Header=BB69_1 Depth=1
	jmp	.LBB69_172
.LBB69_172:                             # %for.inc683
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_1
.LBB69_173:                             # %for.end685
	cmpl	$785192390, -44(%rbp)   # imm = 0x2ECD15C6
	jne	.LBB69_175
.LBB69_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_174
.Lfunc_end69:
	.size	GetCtxModelNumber.62, .Lfunc_end69-GetCtxModelNumber.62
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.63
.LCPI70_0:
	.quad	4611686018427387904     # double 2
.LCPI70_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.63
	.p2align	4, 0x90
	.type	create_context_memory.63,@function
create_context_memory.63:               # @create_context_memory.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1474055595, -20(%rbp)  # imm = 0x57DC4DAB
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB70_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB70_3
.LBB70_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB70_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB70_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB70_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB70_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB70_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB70_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB70_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB70_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB70_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB70_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB70_11:                              # %if.end10
                                        #   in Loop: Header=BB70_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB70_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB70_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB70_13:                              # %if.end16
                                        #   in Loop: Header=BB70_8 Depth=1
	movl	$0, -8(%rbp)
.LBB70_14:                              # %for.cond17
                                        #   Parent Loop BB70_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB70_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB70_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB70_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB70_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB70_17:                              # %if.end28
                                        #   in Loop: Header=BB70_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB70_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB70_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB70_19:                              # %if.end39
                                        #   in Loop: Header=BB70_14 Depth=2
	jmp	.LBB70_20
.LBB70_20:                              # %for.inc
                                        #   in Loop: Header=BB70_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_14
.LBB70_21:                              # %for.end
                                        #   in Loop: Header=BB70_8 Depth=1
	jmp	.LBB70_22
.LBB70_22:                              # %for.inc40
                                        #   in Loop: Header=BB70_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_8
.LBB70_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB70_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_26 Depth 2
                                        #       Child Loop BB70_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB70_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB70_24 Depth=1
	movl	$0, -8(%rbp)
.LBB70_26:                              # %for.cond47
                                        #   Parent Loop BB70_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB70_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB70_26 Depth=2
	movl	$0, -12(%rbp)
.LBB70_28:                              # %for.cond51
                                        #   Parent Loop BB70_24 Depth=1
                                        #     Parent Loop BB70_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB70_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB70_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB70_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_28
.LBB70_31:                              # %for.end63
                                        #   in Loop: Header=BB70_26 Depth=2
	jmp	.LBB70_32
.LBB70_32:                              # %for.inc64
                                        #   in Loop: Header=BB70_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_26
.LBB70_33:                              # %for.end66
                                        #   in Loop: Header=BB70_24 Depth=1
	jmp	.LBB70_34
.LBB70_34:                              # %for.inc67
                                        #   in Loop: Header=BB70_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_24
.LBB70_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB70_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB70_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB70_36 Depth=1
	vmovsd	.LCPI70_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI70_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI70_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB70_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_36
.LBB70_39:                              # %for.end98
	cmpl	$1474055595, -20(%rbp)  # imm = 0x57DC4DAB
	jne	.LBB70_41
.LBB70_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_40
.Lfunc_end70:
	.size	create_context_memory.63, .Lfunc_end70-create_context_memory.63
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.64
.LCPI71_0:
	.quad	4607182418800017408     # double 1
.LCPI71_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI71_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI71_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.64
	.p2align	4, 0x90
	.type	XRate.64,@function
XRate.64:                               # @XRate.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1029850572, -32(%rbp)  # imm = 0x3D6245CC
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB71_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB71_3
.LBB71_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB71_3:                               # %cond.end
	vmovsd	.LCPI71_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI71_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI71_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI71_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB71_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI71_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB71_6
.LBB71_5:                               # %cond.false6
	vmovsd	.LCPI71_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI71_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI71_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB71_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB71_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB71_9
.LBB71_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB71_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB71_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB71_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB71_13
.LBB71_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB71_13:                              # %cond.end26
	jmp	.LBB71_15
.LBB71_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB71_15
.LBB71_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB71_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB71_18
.LBB71_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB71_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1029850572, -32(%rbp)  # imm = 0x3D6245CC
	jne	.LBB71_20
.LBB71_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB71_19
.Lfunc_end71:
	.size	XRate.64, .Lfunc_end71-XRate.64
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.65
.LCPI72_0:
	.quad	4607182418800017408     # double 1
.LCPI72_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI72_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI72_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.65
	.p2align	4, 0x90
	.type	XRate.65,@function
XRate.65:                               # @XRate.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$544806422, -36(%rbp)   # imm = 0x20791616
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB72_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB72_3
.LBB72_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB72_3:                               # %cond.end
	vmovsd	.LCPI72_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI72_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI72_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI72_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB72_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI72_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB72_6
.LBB72_5:                               # %cond.false6
	vmovsd	.LCPI72_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI72_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI72_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB72_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB72_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB72_9
.LBB72_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB72_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB72_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB72_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB72_13
.LBB72_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB72_13:                              # %cond.end26
	jmp	.LBB72_15
.LBB72_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB72_15
.LBB72_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB72_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB72_18
.LBB72_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB72_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$544806422, -36(%rbp)   # imm = 0x20791616
	jne	.LBB72_20
.LBB72_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB72_19
.Lfunc_end72:
	.size	XRate.65, .Lfunc_end72-XRate.65
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.66
.LCPI73_0:
	.quad	4607182418800017408     # double 1
.LCPI73_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI73_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI73_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.66
	.p2align	4, 0x90
	.type	XRate.66,@function
XRate.66:                               # @XRate.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1451430289, -36(%rbp)  # imm = 0x56831191
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB73_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB73_3
.LBB73_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB73_3:                               # %cond.end
	vmovsd	.LCPI73_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI73_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI73_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI73_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB73_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI73_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB73_6
.LBB73_5:                               # %cond.false6
	vmovsd	.LCPI73_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI73_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI73_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB73_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB73_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB73_9
.LBB73_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB73_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB73_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB73_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB73_13
.LBB73_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB73_13:                              # %cond.end26
	jmp	.LBB73_15
.LBB73_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB73_15
.LBB73_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB73_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB73_18
.LBB73_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB73_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1451430289, -36(%rbp)  # imm = 0x56831191
	jne	.LBB73_20
.LBB73_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB73_19
.Lfunc_end73:
	.size	XRate.66, .Lfunc_end73-XRate.66
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.67        # -- Begin function init_contexts.67
	.p2align	4, 0x90
	.type	init_contexts.67,@function
init_contexts.67:                       # @init_contexts.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1661683056, -28(%rbp)  # imm = 0x630B4570
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB74_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB74_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -4(%rbp)
.LBB74_3:                               # %for.cond2
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB74_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB74_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB74_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_7
.LBB74_6:                               # %if.else
                                        #   in Loop: Header=BB74_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_7:                               # %if.end
                                        #   in Loop: Header=BB74_3 Depth=2
	jmp	.LBB74_8
.LBB74_8:                               # %for.inc
                                        #   in Loop: Header=BB74_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_3
.LBB74_9:                               # %for.end
                                        #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_10
.LBB74_10:                              # %for.inc28
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_1
.LBB74_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB74_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB74_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB74_12 Depth=1
	movl	$0, -4(%rbp)
.LBB74_14:                              # %for.cond34
                                        #   Parent Loop BB74_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB74_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB74_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB74_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_18
.LBB74_17:                              # %if.else52
                                        #   in Loop: Header=BB74_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_18:                              # %if.end66
                                        #   in Loop: Header=BB74_14 Depth=2
	jmp	.LBB74_19
.LBB74_19:                              # %for.inc67
                                        #   in Loop: Header=BB74_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_14
.LBB74_20:                              # %for.end69
                                        #   in Loop: Header=BB74_12 Depth=1
	jmp	.LBB74_21
.LBB74_21:                              # %for.inc70
                                        #   in Loop: Header=BB74_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_12
.LBB74_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB74_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB74_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB74_23 Depth=1
	movl	$0, -4(%rbp)
.LBB74_25:                              # %for.cond76
                                        #   Parent Loop BB74_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB74_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB74_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB74_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_29
.LBB74_28:                              # %if.else94
                                        #   in Loop: Header=BB74_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_29:                              # %if.end108
                                        #   in Loop: Header=BB74_25 Depth=2
	jmp	.LBB74_30
.LBB74_30:                              # %for.inc109
                                        #   in Loop: Header=BB74_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_25
.LBB74_31:                              # %for.end111
                                        #   in Loop: Header=BB74_23 Depth=1
	jmp	.LBB74_32
.LBB74_32:                              # %for.inc112
                                        #   in Loop: Header=BB74_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_23
.LBB74_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB74_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB74_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB74_34 Depth=1
	movl	$0, -4(%rbp)
.LBB74_36:                              # %for.cond118
                                        #   Parent Loop BB74_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB74_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB74_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB74_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_40
.LBB74_39:                              # %if.else136
                                        #   in Loop: Header=BB74_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_40:                              # %if.end150
                                        #   in Loop: Header=BB74_36 Depth=2
	jmp	.LBB74_41
.LBB74_41:                              # %for.inc151
                                        #   in Loop: Header=BB74_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_36
.LBB74_42:                              # %for.end153
                                        #   in Loop: Header=BB74_34 Depth=1
	jmp	.LBB74_43
.LBB74_43:                              # %for.inc154
                                        #   in Loop: Header=BB74_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_34
.LBB74_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB74_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB74_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB74_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB74_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_49
.LBB74_48:                              # %if.else172
                                        #   in Loop: Header=BB74_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_49:                              # %if.end183
                                        #   in Loop: Header=BB74_45 Depth=1
	jmp	.LBB74_50
.LBB74_50:                              # %for.inc184
                                        #   in Loop: Header=BB74_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_45
.LBB74_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB74_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB74_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB74_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB74_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_56
.LBB74_55:                              # %if.else202
                                        #   in Loop: Header=BB74_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_56:                              # %if.end213
                                        #   in Loop: Header=BB74_52 Depth=1
	jmp	.LBB74_57
.LBB74_57:                              # %for.inc214
                                        #   in Loop: Header=BB74_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_52
.LBB74_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB74_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB74_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB74_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB74_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_63
.LBB74_62:                              # %if.else232
                                        #   in Loop: Header=BB74_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_63:                              # %if.end243
                                        #   in Loop: Header=BB74_59 Depth=1
	jmp	.LBB74_64
.LBB74_64:                              # %for.inc244
                                        #   in Loop: Header=BB74_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_59
.LBB74_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB74_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB74_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB74_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB74_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_70
.LBB74_69:                              # %if.else262
                                        #   in Loop: Header=BB74_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_70:                              # %if.end273
                                        #   in Loop: Header=BB74_66 Depth=1
	jmp	.LBB74_71
.LBB74_71:                              # %for.inc274
                                        #   in Loop: Header=BB74_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_66
.LBB74_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB74_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB74_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB74_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB74_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_77
.LBB74_76:                              # %if.else292
                                        #   in Loop: Header=BB74_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_77:                              # %if.end303
                                        #   in Loop: Header=BB74_73 Depth=1
	jmp	.LBB74_78
.LBB74_78:                              # %for.inc304
                                        #   in Loop: Header=BB74_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_73
.LBB74_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB74_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB74_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB74_80 Depth=1
	movl	$0, -4(%rbp)
.LBB74_82:                              # %for.cond310
                                        #   Parent Loop BB74_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB74_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB74_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_86
.LBB74_85:                              # %if.else328
                                        #   in Loop: Header=BB74_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_86:                              # %if.end342
                                        #   in Loop: Header=BB74_82 Depth=2
	jmp	.LBB74_87
.LBB74_87:                              # %for.inc343
                                        #   in Loop: Header=BB74_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_82
.LBB74_88:                              # %for.end345
                                        #   in Loop: Header=BB74_80 Depth=1
	jmp	.LBB74_89
.LBB74_89:                              # %for.inc346
                                        #   in Loop: Header=BB74_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_80
.LBB74_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB74_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB74_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB74_91 Depth=1
	movl	$0, -4(%rbp)
.LBB74_93:                              # %for.cond352
                                        #   Parent Loop BB74_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB74_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB74_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_97
.LBB74_96:                              # %if.else370
                                        #   in Loop: Header=BB74_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_97:                              # %if.end384
                                        #   in Loop: Header=BB74_93 Depth=2
	jmp	.LBB74_98
.LBB74_98:                              # %for.inc385
                                        #   in Loop: Header=BB74_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_93
.LBB74_99:                              # %for.end387
                                        #   in Loop: Header=BB74_91 Depth=1
	jmp	.LBB74_100
.LBB74_100:                             # %for.inc388
                                        #   in Loop: Header=BB74_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_91
.LBB74_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB74_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB74_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB74_102 Depth=1
	movl	$0, -4(%rbp)
.LBB74_104:                             # %for.cond394
                                        #   Parent Loop BB74_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB74_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB74_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB74_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_108
.LBB74_107:                             # %if.else412
                                        #   in Loop: Header=BB74_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_108:                             # %if.end426
                                        #   in Loop: Header=BB74_104 Depth=2
	jmp	.LBB74_109
.LBB74_109:                             # %for.inc427
                                        #   in Loop: Header=BB74_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_104
.LBB74_110:                             # %for.end429
                                        #   in Loop: Header=BB74_102 Depth=1
	jmp	.LBB74_111
.LBB74_111:                             # %for.inc430
                                        #   in Loop: Header=BB74_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_102
.LBB74_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB74_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB74_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB74_113 Depth=1
	movl	$0, -4(%rbp)
.LBB74_115:                             # %for.cond436
                                        #   Parent Loop BB74_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB74_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB74_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB74_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_119
.LBB74_118:                             # %if.else454
                                        #   in Loop: Header=BB74_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_119:                             # %if.end468
                                        #   in Loop: Header=BB74_115 Depth=2
	jmp	.LBB74_120
.LBB74_120:                             # %for.inc469
                                        #   in Loop: Header=BB74_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_115
.LBB74_121:                             # %for.end471
                                        #   in Loop: Header=BB74_113 Depth=1
	jmp	.LBB74_122
.LBB74_122:                             # %for.inc472
                                        #   in Loop: Header=BB74_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_113
.LBB74_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB74_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB74_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB74_124 Depth=1
	movl	$0, -4(%rbp)
.LBB74_126:                             # %for.cond478
                                        #   Parent Loop BB74_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB74_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB74_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB74_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_130
.LBB74_129:                             # %if.else496
                                        #   in Loop: Header=BB74_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_130:                             # %if.end510
                                        #   in Loop: Header=BB74_126 Depth=2
	jmp	.LBB74_131
.LBB74_131:                             # %for.inc511
                                        #   in Loop: Header=BB74_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_126
.LBB74_132:                             # %for.end513
                                        #   in Loop: Header=BB74_124 Depth=1
	jmp	.LBB74_133
.LBB74_133:                             # %for.inc514
                                        #   in Loop: Header=BB74_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_124
.LBB74_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB74_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB74_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	$0, -4(%rbp)
.LBB74_137:                             # %for.cond520
                                        #   Parent Loop BB74_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB74_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB74_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB74_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_141
.LBB74_140:                             # %if.else538
                                        #   in Loop: Header=BB74_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_141:                             # %if.end552
                                        #   in Loop: Header=BB74_137 Depth=2
	jmp	.LBB74_142
.LBB74_142:                             # %for.inc553
                                        #   in Loop: Header=BB74_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_137
.LBB74_143:                             # %for.end555
                                        #   in Loop: Header=BB74_135 Depth=1
	jmp	.LBB74_144
.LBB74_144:                             # %for.inc556
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_135
.LBB74_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB74_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB74_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB74_146 Depth=1
	movl	$0, -4(%rbp)
.LBB74_148:                             # %for.cond562
                                        #   Parent Loop BB74_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB74_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB74_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB74_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_152
.LBB74_151:                             # %if.else580
                                        #   in Loop: Header=BB74_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_152:                             # %if.end594
                                        #   in Loop: Header=BB74_148 Depth=2
	jmp	.LBB74_153
.LBB74_153:                             # %for.inc595
                                        #   in Loop: Header=BB74_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_148
.LBB74_154:                             # %for.end597
                                        #   in Loop: Header=BB74_146 Depth=1
	jmp	.LBB74_155
.LBB74_155:                             # %for.inc598
                                        #   in Loop: Header=BB74_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_146
.LBB74_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB74_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB74_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB74_157 Depth=1
	movl	$0, -4(%rbp)
.LBB74_159:                             # %for.cond604
                                        #   Parent Loop BB74_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB74_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB74_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB74_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_163
.LBB74_162:                             # %if.else622
                                        #   in Loop: Header=BB74_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_163:                             # %if.end636
                                        #   in Loop: Header=BB74_159 Depth=2
	jmp	.LBB74_164
.LBB74_164:                             # %for.inc637
                                        #   in Loop: Header=BB74_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_159
.LBB74_165:                             # %for.end639
                                        #   in Loop: Header=BB74_157 Depth=1
	jmp	.LBB74_166
.LBB74_166:                             # %for.inc640
                                        #   in Loop: Header=BB74_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_157
.LBB74_167:                             # %for.end642
	cmpl	$1661683056, -28(%rbp)  # imm = 0x630B4570
	jne	.LBB74_169
.LBB74_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_168
.Lfunc_end74:
	.size	init_contexts.67, .Lfunc_end74-init_contexts.67
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.68
.LCPI75_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.68
	.p2align	4, 0x90
	.type	GetCtxModelNumber.68,@function
GetCtxModelNumber.68:                   # @GetCtxModelNumber.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI75_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$964360315, -48(%rbp)   # imm = 0x397AF87B
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB75_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_3 Depth 2
                                        #       Child Loop BB75_5 Depth 3
                                        #     Child Loop BB75_14 Depth 2
                                        #       Child Loop BB75_16 Depth 3
                                        #     Child Loop BB75_25 Depth 2
                                        #       Child Loop BB75_27 Depth 3
                                        #     Child Loop BB75_36 Depth 2
                                        #       Child Loop BB75_38 Depth 3
                                        #     Child Loop BB75_47 Depth 2
                                        #     Child Loop BB75_54 Depth 2
                                        #     Child Loop BB75_61 Depth 2
                                        #     Child Loop BB75_68 Depth 2
                                        #     Child Loop BB75_75 Depth 2
                                        #     Child Loop BB75_82 Depth 2
                                        #       Child Loop BB75_84 Depth 3
                                        #     Child Loop BB75_93 Depth 2
                                        #       Child Loop BB75_95 Depth 3
                                        #     Child Loop BB75_104 Depth 2
                                        #       Child Loop BB75_106 Depth 3
                                        #     Child Loop BB75_115 Depth 2
                                        #       Child Loop BB75_117 Depth 3
                                        #     Child Loop BB75_126 Depth 2
                                        #       Child Loop BB75_128 Depth 3
                                        #     Child Loop BB75_137 Depth 2
                                        #       Child Loop BB75_139 Depth 3
                                        #     Child Loop BB75_148 Depth 2
                                        #       Child Loop BB75_150 Depth 3
                                        #     Child Loop BB75_159 Depth 2
                                        #       Child Loop BB75_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB75_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB75_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB75_3:                               # %for.cond2
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB75_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB75_3 Depth=2
	movl	$0, -4(%rbp)
.LBB75_5:                               # %for.cond5
                                        #   Parent Loop BB75_1 Depth=1
                                        #     Parent Loop BB75_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB75_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB75_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB75_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB75_9
.LBB75_8:                               # %if.else
                                        #   in Loop: Header=BB75_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB75_9:                               # %if.end
                                        #   in Loop: Header=BB75_5 Depth=3
	jmp	.LBB75_10
.LBB75_10:                              # %for.inc
                                        #   in Loop: Header=BB75_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_5
.LBB75_11:                              # %for.end
                                        #   in Loop: Header=BB75_3 Depth=2
	jmp	.LBB75_12
.LBB75_12:                              # %for.inc33
                                        #   in Loop: Header=BB75_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_3
.LBB75_13:                              # %for.end35
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -8(%rbp)
.LBB75_14:                              # %for.cond36
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB75_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB75_14 Depth=2
	movl	$0, -4(%rbp)
.LBB75_16:                              # %for.cond39
                                        #   Parent Loop BB75_1 Depth=1
                                        #     Parent Loop BB75_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB75_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB75_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB75_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB75_20
.LBB75_19:                              # %if.else58
                                        #   in Loop: Header=BB75_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB75_20:                              # %if.end73
                                        #   in Loop: Header=BB75_16 Depth=3
	jmp	.LBB75_21
.LBB75_21:                              # %for.inc74
                                        #   in Loop: Header=BB75_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_16
.LBB75_22:                              # %for.end76
                                        #   in Loop: Header=BB75_14 Depth=2
	jmp	.LBB75_23
.LBB75_23:                              # %for.inc77
                                        #   in Loop: Header=BB75_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_14
.LBB75_24:                              # %for.end79
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -8(%rbp)
.LBB75_25:                              # %for.cond80
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB75_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB75_25 Depth=2
	movl	$0, -4(%rbp)
.LBB75_27:                              # %for.cond83
                                        #   Parent Loop BB75_1 Depth=1
                                        #     Parent Loop BB75_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB75_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB75_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB75_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB75_31
.LBB75_30:                              # %if.else102
                                        #   in Loop: Header=BB75_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB75_31:                              # %if.end117
                                        #   in Loop: Header=BB75_27 Depth=3
	jmp	.LBB75_32
.LBB75_32:                              # %for.inc118
                                        #   in Loop: Header=BB75_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_27
.LBB75_33:                              # %for.end120
                                        #   in Loop: Header=BB75_25 Depth=2
	jmp	.LBB75_34
.LBB75_34:                              # %for.inc121
                                        #   in Loop: Header=BB75_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_25
.LBB75_35:                              # %for.end123
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -8(%rbp)
.LBB75_36:                              # %for.cond124
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB75_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB75_36 Depth=2
	movl	$0, -4(%rbp)
.LBB75_38:                              # %for.cond127
                                        #   Parent Loop BB75_1 Depth=1
                                        #     Parent Loop BB75_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB75_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB75_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB75_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB75_42
.LBB75_41:                              # %if.else146
                                        #   in Loop: Header=BB75_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB75_42:                              # %if.end161
                                        #   in Loop: Header=BB75_38 Depth=3
	jmp	.LBB75_43
.LBB75_43:                              # %for.inc162
                                        #   in Loop: Header=BB75_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_38
.LBB75_44:                              # %for.end164
                                        #   in Loop: Header=BB75_36 Depth=2
	jmp	.LBB75_45
.LBB75_45:                              # %for.inc165
                                        #   in Loop: Header=BB75_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_36
.LBB75_46:                              # %for.end167
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -4(%rbp)
.LBB75_47:                              # %for.cond168
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB75_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB75_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB75_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB75_51
.LBB75_50:                              # %if.else184
                                        #   in Loop: Header=BB75_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB75_51:                              # %if.end196
                                        #   in Loop: Header=BB75_47 Depth=2
	jmp	.LBB75_52
.LBB75_52:                              # %for.inc197
                                        #   in Loop: Header=BB75_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_47
.LBB75_53:                              # %for.end199
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -4(%rbp)
.LBB75_54:                              # %for.cond200
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB75_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB75_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB75_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB75_58
.LBB75_57:                              # %if.else216
                                        #   in Loop: Header=BB75_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB75_58:                              # %if.end228
                                        #   in Loop: Header=BB75_54 Depth=2
	jmp	.LBB75_59
.LBB75_59:                              # %for.inc229
                                        #   in Loop: Header=BB75_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_54
.LBB75_60:                              # %for.end231
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -4(%rbp)
.LBB75_61:                              # %for.cond232
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB75_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB75_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB75_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB75_65
.LBB75_64:                              # %if.else248
                                        #   in Loop: Header=BB75_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB75_65:                              # %if.end260
                                        #   in Loop: Header=BB75_61 Depth=2
	jmp	.LBB75_66
.LBB75_66:                              # %for.inc261
                                        #   in Loop: Header=BB75_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_61
.LBB75_67:                              # %for.end263
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -4(%rbp)
.LBB75_68:                              # %for.cond264
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB75_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB75_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB75_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB75_72
.LBB75_71:                              # %if.else280
                                        #   in Loop: Header=BB75_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB75_72:                              # %if.end292
                                        #   in Loop: Header=BB75_68 Depth=2
	jmp	.LBB75_73
.LBB75_73:                              # %for.inc293
                                        #   in Loop: Header=BB75_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_68
.LBB75_74:                              # %for.end295
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -4(%rbp)
.LBB75_75:                              # %for.cond296
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB75_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB75_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB75_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB75_79
.LBB75_78:                              # %if.else312
                                        #   in Loop: Header=BB75_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB75_79:                              # %if.end324
                                        #   in Loop: Header=BB75_75 Depth=2
	jmp	.LBB75_80
.LBB75_80:                              # %for.inc325
                                        #   in Loop: Header=BB75_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_75
.LBB75_81:                              # %for.end327
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -8(%rbp)
.LBB75_82:                              # %for.cond328
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB75_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB75_82 Depth=2
	movl	$0, -4(%rbp)
.LBB75_84:                              # %for.cond331
                                        #   Parent Loop BB75_1 Depth=1
                                        #     Parent Loop BB75_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB75_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB75_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB75_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB75_88
.LBB75_87:                              # %if.else350
                                        #   in Loop: Header=BB75_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB75_88:                              # %if.end365
                                        #   in Loop: Header=BB75_84 Depth=3
	jmp	.LBB75_89
.LBB75_89:                              # %for.inc366
                                        #   in Loop: Header=BB75_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_84
.LBB75_90:                              # %for.end368
                                        #   in Loop: Header=BB75_82 Depth=2
	jmp	.LBB75_91
.LBB75_91:                              # %for.inc369
                                        #   in Loop: Header=BB75_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_82
.LBB75_92:                              # %for.end371
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -8(%rbp)
.LBB75_93:                              # %for.cond372
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB75_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB75_93 Depth=2
	movl	$0, -4(%rbp)
.LBB75_95:                              # %for.cond375
                                        #   Parent Loop BB75_1 Depth=1
                                        #     Parent Loop BB75_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB75_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB75_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB75_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB75_99
.LBB75_98:                              # %if.else394
                                        #   in Loop: Header=BB75_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB75_99:                              # %if.end409
                                        #   in Loop: Header=BB75_95 Depth=3
	jmp	.LBB75_100
.LBB75_100:                             # %for.inc410
                                        #   in Loop: Header=BB75_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_95
.LBB75_101:                             # %for.end412
                                        #   in Loop: Header=BB75_93 Depth=2
	jmp	.LBB75_102
.LBB75_102:                             # %for.inc413
                                        #   in Loop: Header=BB75_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_93
.LBB75_103:                             # %for.end415
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -8(%rbp)
.LBB75_104:                             # %for.cond416
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB75_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB75_104 Depth=2
	movl	$0, -4(%rbp)
.LBB75_106:                             # %for.cond419
                                        #   Parent Loop BB75_1 Depth=1
                                        #     Parent Loop BB75_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB75_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB75_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB75_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB75_110
.LBB75_109:                             # %if.else438
                                        #   in Loop: Header=BB75_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB75_110:                             # %if.end453
                                        #   in Loop: Header=BB75_106 Depth=3
	jmp	.LBB75_111
.LBB75_111:                             # %for.inc454
                                        #   in Loop: Header=BB75_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_106
.LBB75_112:                             # %for.end456
                                        #   in Loop: Header=BB75_104 Depth=2
	jmp	.LBB75_113
.LBB75_113:                             # %for.inc457
                                        #   in Loop: Header=BB75_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_104
.LBB75_114:                             # %for.end459
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -8(%rbp)
.LBB75_115:                             # %for.cond460
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB75_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB75_115 Depth=2
	movl	$0, -4(%rbp)
.LBB75_117:                             # %for.cond463
                                        #   Parent Loop BB75_1 Depth=1
                                        #     Parent Loop BB75_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB75_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB75_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB75_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB75_121
.LBB75_120:                             # %if.else482
                                        #   in Loop: Header=BB75_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB75_121:                             # %if.end497
                                        #   in Loop: Header=BB75_117 Depth=3
	jmp	.LBB75_122
.LBB75_122:                             # %for.inc498
                                        #   in Loop: Header=BB75_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_117
.LBB75_123:                             # %for.end500
                                        #   in Loop: Header=BB75_115 Depth=2
	jmp	.LBB75_124
.LBB75_124:                             # %for.inc501
                                        #   in Loop: Header=BB75_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_115
.LBB75_125:                             # %for.end503
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -8(%rbp)
.LBB75_126:                             # %for.cond504
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB75_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB75_126 Depth=2
	movl	$0, -4(%rbp)
.LBB75_128:                             # %for.cond507
                                        #   Parent Loop BB75_1 Depth=1
                                        #     Parent Loop BB75_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB75_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB75_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB75_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB75_132
.LBB75_131:                             # %if.else526
                                        #   in Loop: Header=BB75_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB75_132:                             # %if.end541
                                        #   in Loop: Header=BB75_128 Depth=3
	jmp	.LBB75_133
.LBB75_133:                             # %for.inc542
                                        #   in Loop: Header=BB75_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_128
.LBB75_134:                             # %for.end544
                                        #   in Loop: Header=BB75_126 Depth=2
	jmp	.LBB75_135
.LBB75_135:                             # %for.inc545
                                        #   in Loop: Header=BB75_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_126
.LBB75_136:                             # %for.end547
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -8(%rbp)
.LBB75_137:                             # %for.cond548
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB75_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB75_137 Depth=2
	movl	$0, -4(%rbp)
.LBB75_139:                             # %for.cond551
                                        #   Parent Loop BB75_1 Depth=1
                                        #     Parent Loop BB75_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB75_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB75_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB75_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB75_143
.LBB75_142:                             # %if.else570
                                        #   in Loop: Header=BB75_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB75_143:                             # %if.end585
                                        #   in Loop: Header=BB75_139 Depth=3
	jmp	.LBB75_144
.LBB75_144:                             # %for.inc586
                                        #   in Loop: Header=BB75_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_139
.LBB75_145:                             # %for.end588
                                        #   in Loop: Header=BB75_137 Depth=2
	jmp	.LBB75_146
.LBB75_146:                             # %for.inc589
                                        #   in Loop: Header=BB75_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_137
.LBB75_147:                             # %for.end591
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -8(%rbp)
.LBB75_148:                             # %for.cond592
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB75_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB75_148 Depth=2
	movl	$0, -4(%rbp)
.LBB75_150:                             # %for.cond595
                                        #   Parent Loop BB75_1 Depth=1
                                        #     Parent Loop BB75_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB75_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB75_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB75_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB75_154
.LBB75_153:                             # %if.else614
                                        #   in Loop: Header=BB75_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB75_154:                             # %if.end629
                                        #   in Loop: Header=BB75_150 Depth=3
	jmp	.LBB75_155
.LBB75_155:                             # %for.inc630
                                        #   in Loop: Header=BB75_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_150
.LBB75_156:                             # %for.end632
                                        #   in Loop: Header=BB75_148 Depth=2
	jmp	.LBB75_157
.LBB75_157:                             # %for.inc633
                                        #   in Loop: Header=BB75_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_148
.LBB75_158:                             # %for.end635
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -8(%rbp)
.LBB75_159:                             # %for.cond636
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB75_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB75_159 Depth=2
	movl	$0, -4(%rbp)
.LBB75_161:                             # %for.cond639
                                        #   Parent Loop BB75_1 Depth=1
                                        #     Parent Loop BB75_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB75_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB75_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB75_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB75_165
.LBB75_164:                             # %if.else658
                                        #   in Loop: Header=BB75_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB75_165:                             # %if.end673
                                        #   in Loop: Header=BB75_161 Depth=3
	jmp	.LBB75_166
.LBB75_166:                             # %for.inc674
                                        #   in Loop: Header=BB75_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_161
.LBB75_167:                             # %for.end676
                                        #   in Loop: Header=BB75_159 Depth=2
	jmp	.LBB75_168
.LBB75_168:                             # %for.inc677
                                        #   in Loop: Header=BB75_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_159
.LBB75_169:                             # %for.end679
                                        #   in Loop: Header=BB75_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB75_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB75_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB75_171:                             # %if.end682
                                        #   in Loop: Header=BB75_1 Depth=1
	jmp	.LBB75_172
.LBB75_172:                             # %for.inc683
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_1
.LBB75_173:                             # %for.end685
	cmpl	$964360315, -48(%rbp)   # imm = 0x397AF87B
	jne	.LBB75_175
.LBB75_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_174
.Lfunc_end75:
	.size	GetCtxModelNumber.68, .Lfunc_end75-GetCtxModelNumber.68
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.69
.LCPI76_0:
	.quad	4611686018427387904     # double 2
.LCPI76_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.69
	.p2align	4, 0x90
	.type	create_context_memory.69,@function
create_context_memory.69:               # @create_context_memory.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2114338411, -20(%rbp)  # imm = 0x7E063E6B
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB76_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB76_3
.LBB76_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB76_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB76_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB76_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB76_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB76_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB76_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB76_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB76_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB76_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB76_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB76_11:                              # %if.end10
                                        #   in Loop: Header=BB76_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB76_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB76_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB76_13:                              # %if.end16
                                        #   in Loop: Header=BB76_8 Depth=1
	movl	$0, -8(%rbp)
.LBB76_14:                              # %for.cond17
                                        #   Parent Loop BB76_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB76_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB76_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB76_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB76_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB76_17:                              # %if.end28
                                        #   in Loop: Header=BB76_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB76_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB76_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB76_19:                              # %if.end39
                                        #   in Loop: Header=BB76_14 Depth=2
	jmp	.LBB76_20
.LBB76_20:                              # %for.inc
                                        #   in Loop: Header=BB76_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_14
.LBB76_21:                              # %for.end
                                        #   in Loop: Header=BB76_8 Depth=1
	jmp	.LBB76_22
.LBB76_22:                              # %for.inc40
                                        #   in Loop: Header=BB76_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_8
.LBB76_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB76_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_26 Depth 2
                                        #       Child Loop BB76_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB76_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB76_24 Depth=1
	movl	$0, -8(%rbp)
.LBB76_26:                              # %for.cond47
                                        #   Parent Loop BB76_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB76_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB76_26 Depth=2
	movl	$0, -12(%rbp)
.LBB76_28:                              # %for.cond51
                                        #   Parent Loop BB76_24 Depth=1
                                        #     Parent Loop BB76_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB76_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB76_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB76_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_28
.LBB76_31:                              # %for.end63
                                        #   in Loop: Header=BB76_26 Depth=2
	jmp	.LBB76_32
.LBB76_32:                              # %for.inc64
                                        #   in Loop: Header=BB76_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_26
.LBB76_33:                              # %for.end66
                                        #   in Loop: Header=BB76_24 Depth=1
	jmp	.LBB76_34
.LBB76_34:                              # %for.inc67
                                        #   in Loop: Header=BB76_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_24
.LBB76_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB76_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB76_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB76_36 Depth=1
	vmovsd	.LCPI76_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI76_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI76_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB76_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_36
.LBB76_39:                              # %for.end98
	cmpl	$2114338411, -20(%rbp)  # imm = 0x7E063E6B
	jne	.LBB76_41
.LBB76_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_40
.Lfunc_end76:
	.size	create_context_memory.69, .Lfunc_end76-create_context_memory.69
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.70
.LCPI77_0:
	.quad	4607182418800017408     # double 1
.LCPI77_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI77_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI77_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.70
	.p2align	4, 0x90
	.type	XRate.70,@function
XRate.70:                               # @XRate.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1345979601, -32(%rbp)  # imm = 0x503A04D1
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB77_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB77_3
.LBB77_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB77_3:                               # %cond.end
	vmovsd	.LCPI77_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI77_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI77_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI77_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB77_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI77_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB77_6
.LBB77_5:                               # %cond.false6
	vmovsd	.LCPI77_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI77_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI77_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB77_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB77_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB77_9
.LBB77_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB77_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB77_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB77_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB77_13
.LBB77_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB77_13:                              # %cond.end26
	jmp	.LBB77_15
.LBB77_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB77_15
.LBB77_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB77_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB77_18
.LBB77_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB77_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1345979601, -32(%rbp)  # imm = 0x503A04D1
	jne	.LBB77_20
.LBB77_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB77_19
.Lfunc_end77:
	.size	XRate.70, .Lfunc_end77-XRate.70
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.71
.LCPI78_0:
	.quad	4611686018427387904     # double 2
.LCPI78_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.71
	.p2align	4, 0x90
	.type	create_context_memory.71,@function
create_context_memory.71:               # @create_context_memory.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2141838387, -20(%rbp)  # imm = 0x7FA9DC33
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB78_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB78_3
.LBB78_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB78_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB78_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB78_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB78_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB78_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB78_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB78_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB78_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB78_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB78_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB78_11:                              # %if.end10
                                        #   in Loop: Header=BB78_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB78_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB78_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB78_13:                              # %if.end16
                                        #   in Loop: Header=BB78_8 Depth=1
	movl	$0, -8(%rbp)
.LBB78_14:                              # %for.cond17
                                        #   Parent Loop BB78_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB78_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB78_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB78_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB78_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB78_17:                              # %if.end28
                                        #   in Loop: Header=BB78_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB78_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB78_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB78_19:                              # %if.end39
                                        #   in Loop: Header=BB78_14 Depth=2
	jmp	.LBB78_20
.LBB78_20:                              # %for.inc
                                        #   in Loop: Header=BB78_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_14
.LBB78_21:                              # %for.end
                                        #   in Loop: Header=BB78_8 Depth=1
	jmp	.LBB78_22
.LBB78_22:                              # %for.inc40
                                        #   in Loop: Header=BB78_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_8
.LBB78_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB78_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_26 Depth 2
                                        #       Child Loop BB78_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB78_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB78_24 Depth=1
	movl	$0, -8(%rbp)
.LBB78_26:                              # %for.cond47
                                        #   Parent Loop BB78_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB78_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB78_26 Depth=2
	movl	$0, -12(%rbp)
.LBB78_28:                              # %for.cond51
                                        #   Parent Loop BB78_24 Depth=1
                                        #     Parent Loop BB78_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB78_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB78_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB78_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB78_28
.LBB78_31:                              # %for.end63
                                        #   in Loop: Header=BB78_26 Depth=2
	jmp	.LBB78_32
.LBB78_32:                              # %for.inc64
                                        #   in Loop: Header=BB78_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_26
.LBB78_33:                              # %for.end66
                                        #   in Loop: Header=BB78_24 Depth=1
	jmp	.LBB78_34
.LBB78_34:                              # %for.inc67
                                        #   in Loop: Header=BB78_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_24
.LBB78_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB78_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB78_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB78_36 Depth=1
	vmovsd	.LCPI78_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI78_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI78_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB78_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_36
.LBB78_39:                              # %for.end98
	cmpl	$2141838387, -20(%rbp)  # imm = 0x7FA9DC33
	jne	.LBB78_41
.LBB78_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_40
.Lfunc_end78:
	.size	create_context_memory.71, .Lfunc_end78-create_context_memory.71
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.72
.LCPI79_0:
	.quad	4607182418800017408     # double 1
.LCPI79_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI79_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI79_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.72
	.p2align	4, 0x90
	.type	XRate.72,@function
XRate.72:                               # @XRate.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$642769373, -36(%rbp)   # imm = 0x264FE1DD
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB79_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB79_3
.LBB79_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB79_3:                               # %cond.end
	vmovsd	.LCPI79_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI79_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI79_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI79_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB79_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI79_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB79_6
.LBB79_5:                               # %cond.false6
	vmovsd	.LCPI79_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI79_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI79_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB79_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB79_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB79_9
.LBB79_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB79_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB79_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB79_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB79_13
.LBB79_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB79_13:                              # %cond.end26
	jmp	.LBB79_15
.LBB79_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB79_15
.LBB79_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB79_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB79_18
.LBB79_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB79_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$642769373, -36(%rbp)   # imm = 0x264FE1DD
	jne	.LBB79_20
.LBB79_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB79_19
.Lfunc_end79:
	.size	XRate.72, .Lfunc_end79-XRate.72
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.73
.LCPI80_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.73
	.p2align	4, 0x90
	.type	GetCtxModelNumber.73,@function
GetCtxModelNumber.73:                   # @GetCtxModelNumber.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI80_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$17128415, -44(%rbp)    # imm = 0x1055BDF
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB80_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_3 Depth 2
                                        #       Child Loop BB80_5 Depth 3
                                        #     Child Loop BB80_14 Depth 2
                                        #       Child Loop BB80_16 Depth 3
                                        #     Child Loop BB80_25 Depth 2
                                        #       Child Loop BB80_27 Depth 3
                                        #     Child Loop BB80_36 Depth 2
                                        #       Child Loop BB80_38 Depth 3
                                        #     Child Loop BB80_47 Depth 2
                                        #     Child Loop BB80_54 Depth 2
                                        #     Child Loop BB80_61 Depth 2
                                        #     Child Loop BB80_68 Depth 2
                                        #     Child Loop BB80_75 Depth 2
                                        #     Child Loop BB80_82 Depth 2
                                        #       Child Loop BB80_84 Depth 3
                                        #     Child Loop BB80_93 Depth 2
                                        #       Child Loop BB80_95 Depth 3
                                        #     Child Loop BB80_104 Depth 2
                                        #       Child Loop BB80_106 Depth 3
                                        #     Child Loop BB80_115 Depth 2
                                        #       Child Loop BB80_117 Depth 3
                                        #     Child Loop BB80_126 Depth 2
                                        #       Child Loop BB80_128 Depth 3
                                        #     Child Loop BB80_137 Depth 2
                                        #       Child Loop BB80_139 Depth 3
                                        #     Child Loop BB80_148 Depth 2
                                        #       Child Loop BB80_150 Depth 3
                                        #     Child Loop BB80_159 Depth 2
                                        #       Child Loop BB80_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB80_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB80_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB80_3:                               # %for.cond2
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB80_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB80_3 Depth=2
	movl	$0, -4(%rbp)
.LBB80_5:                               # %for.cond5
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB80_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB80_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB80_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_9
.LBB80_8:                               # %if.else
                                        #   in Loop: Header=BB80_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_9:                               # %if.end
                                        #   in Loop: Header=BB80_5 Depth=3
	jmp	.LBB80_10
.LBB80_10:                              # %for.inc
                                        #   in Loop: Header=BB80_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_5
.LBB80_11:                              # %for.end
                                        #   in Loop: Header=BB80_3 Depth=2
	jmp	.LBB80_12
.LBB80_12:                              # %for.inc33
                                        #   in Loop: Header=BB80_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_3
.LBB80_13:                              # %for.end35
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_14:                              # %for.cond36
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB80_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB80_14 Depth=2
	movl	$0, -4(%rbp)
.LBB80_16:                              # %for.cond39
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB80_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB80_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB80_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_20
.LBB80_19:                              # %if.else58
                                        #   in Loop: Header=BB80_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_20:                              # %if.end73
                                        #   in Loop: Header=BB80_16 Depth=3
	jmp	.LBB80_21
.LBB80_21:                              # %for.inc74
                                        #   in Loop: Header=BB80_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_16
.LBB80_22:                              # %for.end76
                                        #   in Loop: Header=BB80_14 Depth=2
	jmp	.LBB80_23
.LBB80_23:                              # %for.inc77
                                        #   in Loop: Header=BB80_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_14
.LBB80_24:                              # %for.end79
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_25:                              # %for.cond80
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB80_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB80_25 Depth=2
	movl	$0, -4(%rbp)
.LBB80_27:                              # %for.cond83
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB80_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB80_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB80_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_31
.LBB80_30:                              # %if.else102
                                        #   in Loop: Header=BB80_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_31:                              # %if.end117
                                        #   in Loop: Header=BB80_27 Depth=3
	jmp	.LBB80_32
.LBB80_32:                              # %for.inc118
                                        #   in Loop: Header=BB80_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_27
.LBB80_33:                              # %for.end120
                                        #   in Loop: Header=BB80_25 Depth=2
	jmp	.LBB80_34
.LBB80_34:                              # %for.inc121
                                        #   in Loop: Header=BB80_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_25
.LBB80_35:                              # %for.end123
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_36:                              # %for.cond124
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB80_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB80_36 Depth=2
	movl	$0, -4(%rbp)
.LBB80_38:                              # %for.cond127
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB80_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB80_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB80_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_42
.LBB80_41:                              # %if.else146
                                        #   in Loop: Header=BB80_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_42:                              # %if.end161
                                        #   in Loop: Header=BB80_38 Depth=3
	jmp	.LBB80_43
.LBB80_43:                              # %for.inc162
                                        #   in Loop: Header=BB80_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_38
.LBB80_44:                              # %for.end164
                                        #   in Loop: Header=BB80_36 Depth=2
	jmp	.LBB80_45
.LBB80_45:                              # %for.inc165
                                        #   in Loop: Header=BB80_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_36
.LBB80_46:                              # %for.end167
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -4(%rbp)
.LBB80_47:                              # %for.cond168
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB80_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB80_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB80_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_51
.LBB80_50:                              # %if.else184
                                        #   in Loop: Header=BB80_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_51:                              # %if.end196
                                        #   in Loop: Header=BB80_47 Depth=2
	jmp	.LBB80_52
.LBB80_52:                              # %for.inc197
                                        #   in Loop: Header=BB80_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_47
.LBB80_53:                              # %for.end199
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -4(%rbp)
.LBB80_54:                              # %for.cond200
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB80_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB80_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB80_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_58
.LBB80_57:                              # %if.else216
                                        #   in Loop: Header=BB80_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_58:                              # %if.end228
                                        #   in Loop: Header=BB80_54 Depth=2
	jmp	.LBB80_59
.LBB80_59:                              # %for.inc229
                                        #   in Loop: Header=BB80_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_54
.LBB80_60:                              # %for.end231
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -4(%rbp)
.LBB80_61:                              # %for.cond232
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB80_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB80_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB80_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_65
.LBB80_64:                              # %if.else248
                                        #   in Loop: Header=BB80_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_65:                              # %if.end260
                                        #   in Loop: Header=BB80_61 Depth=2
	jmp	.LBB80_66
.LBB80_66:                              # %for.inc261
                                        #   in Loop: Header=BB80_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_61
.LBB80_67:                              # %for.end263
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -4(%rbp)
.LBB80_68:                              # %for.cond264
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB80_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB80_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB80_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_72
.LBB80_71:                              # %if.else280
                                        #   in Loop: Header=BB80_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_72:                              # %if.end292
                                        #   in Loop: Header=BB80_68 Depth=2
	jmp	.LBB80_73
.LBB80_73:                              # %for.inc293
                                        #   in Loop: Header=BB80_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_68
.LBB80_74:                              # %for.end295
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -4(%rbp)
.LBB80_75:                              # %for.cond296
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB80_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB80_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB80_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_79
.LBB80_78:                              # %if.else312
                                        #   in Loop: Header=BB80_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_79:                              # %if.end324
                                        #   in Loop: Header=BB80_75 Depth=2
	jmp	.LBB80_80
.LBB80_80:                              # %for.inc325
                                        #   in Loop: Header=BB80_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_75
.LBB80_81:                              # %for.end327
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_82:                              # %for.cond328
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB80_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB80_82 Depth=2
	movl	$0, -4(%rbp)
.LBB80_84:                              # %for.cond331
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB80_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB80_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB80_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_88
.LBB80_87:                              # %if.else350
                                        #   in Loop: Header=BB80_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_88:                              # %if.end365
                                        #   in Loop: Header=BB80_84 Depth=3
	jmp	.LBB80_89
.LBB80_89:                              # %for.inc366
                                        #   in Loop: Header=BB80_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_84
.LBB80_90:                              # %for.end368
                                        #   in Loop: Header=BB80_82 Depth=2
	jmp	.LBB80_91
.LBB80_91:                              # %for.inc369
                                        #   in Loop: Header=BB80_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_82
.LBB80_92:                              # %for.end371
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_93:                              # %for.cond372
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB80_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB80_93 Depth=2
	movl	$0, -4(%rbp)
.LBB80_95:                              # %for.cond375
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB80_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB80_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB80_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_99
.LBB80_98:                              # %if.else394
                                        #   in Loop: Header=BB80_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_99:                              # %if.end409
                                        #   in Loop: Header=BB80_95 Depth=3
	jmp	.LBB80_100
.LBB80_100:                             # %for.inc410
                                        #   in Loop: Header=BB80_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_95
.LBB80_101:                             # %for.end412
                                        #   in Loop: Header=BB80_93 Depth=2
	jmp	.LBB80_102
.LBB80_102:                             # %for.inc413
                                        #   in Loop: Header=BB80_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_93
.LBB80_103:                             # %for.end415
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_104:                             # %for.cond416
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB80_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB80_104 Depth=2
	movl	$0, -4(%rbp)
.LBB80_106:                             # %for.cond419
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB80_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB80_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB80_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_110
.LBB80_109:                             # %if.else438
                                        #   in Loop: Header=BB80_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_110:                             # %if.end453
                                        #   in Loop: Header=BB80_106 Depth=3
	jmp	.LBB80_111
.LBB80_111:                             # %for.inc454
                                        #   in Loop: Header=BB80_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_106
.LBB80_112:                             # %for.end456
                                        #   in Loop: Header=BB80_104 Depth=2
	jmp	.LBB80_113
.LBB80_113:                             # %for.inc457
                                        #   in Loop: Header=BB80_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_104
.LBB80_114:                             # %for.end459
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_115:                             # %for.cond460
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB80_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB80_115 Depth=2
	movl	$0, -4(%rbp)
.LBB80_117:                             # %for.cond463
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB80_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB80_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB80_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_121
.LBB80_120:                             # %if.else482
                                        #   in Loop: Header=BB80_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_121:                             # %if.end497
                                        #   in Loop: Header=BB80_117 Depth=3
	jmp	.LBB80_122
.LBB80_122:                             # %for.inc498
                                        #   in Loop: Header=BB80_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_117
.LBB80_123:                             # %for.end500
                                        #   in Loop: Header=BB80_115 Depth=2
	jmp	.LBB80_124
.LBB80_124:                             # %for.inc501
                                        #   in Loop: Header=BB80_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_115
.LBB80_125:                             # %for.end503
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_126:                             # %for.cond504
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB80_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB80_126 Depth=2
	movl	$0, -4(%rbp)
.LBB80_128:                             # %for.cond507
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB80_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB80_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB80_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_132
.LBB80_131:                             # %if.else526
                                        #   in Loop: Header=BB80_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_132:                             # %if.end541
                                        #   in Loop: Header=BB80_128 Depth=3
	jmp	.LBB80_133
.LBB80_133:                             # %for.inc542
                                        #   in Loop: Header=BB80_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_128
.LBB80_134:                             # %for.end544
                                        #   in Loop: Header=BB80_126 Depth=2
	jmp	.LBB80_135
.LBB80_135:                             # %for.inc545
                                        #   in Loop: Header=BB80_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_126
.LBB80_136:                             # %for.end547
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_137:                             # %for.cond548
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB80_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB80_137 Depth=2
	movl	$0, -4(%rbp)
.LBB80_139:                             # %for.cond551
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB80_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB80_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB80_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_143
.LBB80_142:                             # %if.else570
                                        #   in Loop: Header=BB80_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_143:                             # %if.end585
                                        #   in Loop: Header=BB80_139 Depth=3
	jmp	.LBB80_144
.LBB80_144:                             # %for.inc586
                                        #   in Loop: Header=BB80_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_139
.LBB80_145:                             # %for.end588
                                        #   in Loop: Header=BB80_137 Depth=2
	jmp	.LBB80_146
.LBB80_146:                             # %for.inc589
                                        #   in Loop: Header=BB80_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_137
.LBB80_147:                             # %for.end591
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_148:                             # %for.cond592
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB80_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB80_148 Depth=2
	movl	$0, -4(%rbp)
.LBB80_150:                             # %for.cond595
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB80_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB80_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB80_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_154
.LBB80_153:                             # %if.else614
                                        #   in Loop: Header=BB80_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_154:                             # %if.end629
                                        #   in Loop: Header=BB80_150 Depth=3
	jmp	.LBB80_155
.LBB80_155:                             # %for.inc630
                                        #   in Loop: Header=BB80_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_150
.LBB80_156:                             # %for.end632
                                        #   in Loop: Header=BB80_148 Depth=2
	jmp	.LBB80_157
.LBB80_157:                             # %for.inc633
                                        #   in Loop: Header=BB80_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_148
.LBB80_158:                             # %for.end635
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_159:                             # %for.cond636
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB80_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB80_159 Depth=2
	movl	$0, -4(%rbp)
.LBB80_161:                             # %for.cond639
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB80_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB80_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB80_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_165
.LBB80_164:                             # %if.else658
                                        #   in Loop: Header=BB80_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_165:                             # %if.end673
                                        #   in Loop: Header=BB80_161 Depth=3
	jmp	.LBB80_166
.LBB80_166:                             # %for.inc674
                                        #   in Loop: Header=BB80_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_161
.LBB80_167:                             # %for.end676
                                        #   in Loop: Header=BB80_159 Depth=2
	jmp	.LBB80_168
.LBB80_168:                             # %for.inc677
                                        #   in Loop: Header=BB80_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_159
.LBB80_169:                             # %for.end679
                                        #   in Loop: Header=BB80_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB80_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB80_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB80_171:                             # %if.end682
                                        #   in Loop: Header=BB80_1 Depth=1
	jmp	.LBB80_172
.LBB80_172:                             # %for.inc683
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_1
.LBB80_173:                             # %for.end685
	cmpl	$17128415, -44(%rbp)    # imm = 0x1055BDF
	jne	.LBB80_175
.LBB80_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_174
.Lfunc_end80:
	.size	GetCtxModelNumber.73, .Lfunc_end80-GetCtxModelNumber.73
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.74        # -- Begin function init_contexts.74
	.p2align	4, 0x90
	.type	init_contexts.74,@function
init_contexts.74:                       # @init_contexts.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1481264535, -28(%rbp)  # imm = 0x584A4D97
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB81_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB81_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	$0, -4(%rbp)
.LBB81_3:                               # %for.cond2
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB81_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB81_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB81_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_7
.LBB81_6:                               # %if.else
                                        #   in Loop: Header=BB81_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_7:                               # %if.end
                                        #   in Loop: Header=BB81_3 Depth=2
	jmp	.LBB81_8
.LBB81_8:                               # %for.inc
                                        #   in Loop: Header=BB81_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_3
.LBB81_9:                               # %for.end
                                        #   in Loop: Header=BB81_1 Depth=1
	jmp	.LBB81_10
.LBB81_10:                              # %for.inc28
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_1
.LBB81_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB81_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB81_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB81_12 Depth=1
	movl	$0, -4(%rbp)
.LBB81_14:                              # %for.cond34
                                        #   Parent Loop BB81_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB81_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB81_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB81_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_18
.LBB81_17:                              # %if.else52
                                        #   in Loop: Header=BB81_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_18:                              # %if.end66
                                        #   in Loop: Header=BB81_14 Depth=2
	jmp	.LBB81_19
.LBB81_19:                              # %for.inc67
                                        #   in Loop: Header=BB81_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_14
.LBB81_20:                              # %for.end69
                                        #   in Loop: Header=BB81_12 Depth=1
	jmp	.LBB81_21
.LBB81_21:                              # %for.inc70
                                        #   in Loop: Header=BB81_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_12
.LBB81_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB81_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB81_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	$0, -4(%rbp)
.LBB81_25:                              # %for.cond76
                                        #   Parent Loop BB81_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB81_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB81_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB81_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_29
.LBB81_28:                              # %if.else94
                                        #   in Loop: Header=BB81_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_29:                              # %if.end108
                                        #   in Loop: Header=BB81_25 Depth=2
	jmp	.LBB81_30
.LBB81_30:                              # %for.inc109
                                        #   in Loop: Header=BB81_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_25
.LBB81_31:                              # %for.end111
                                        #   in Loop: Header=BB81_23 Depth=1
	jmp	.LBB81_32
.LBB81_32:                              # %for.inc112
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_23
.LBB81_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB81_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB81_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB81_34 Depth=1
	movl	$0, -4(%rbp)
.LBB81_36:                              # %for.cond118
                                        #   Parent Loop BB81_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB81_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_40
.LBB81_39:                              # %if.else136
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_40:                              # %if.end150
                                        #   in Loop: Header=BB81_36 Depth=2
	jmp	.LBB81_41
.LBB81_41:                              # %for.inc151
                                        #   in Loop: Header=BB81_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_36
.LBB81_42:                              # %for.end153
                                        #   in Loop: Header=BB81_34 Depth=1
	jmp	.LBB81_43
.LBB81_43:                              # %for.inc154
                                        #   in Loop: Header=BB81_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_34
.LBB81_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB81_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB81_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB81_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB81_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_49
.LBB81_48:                              # %if.else172
                                        #   in Loop: Header=BB81_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_49:                              # %if.end183
                                        #   in Loop: Header=BB81_45 Depth=1
	jmp	.LBB81_50
.LBB81_50:                              # %for.inc184
                                        #   in Loop: Header=BB81_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_45
.LBB81_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB81_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB81_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB81_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB81_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_56
.LBB81_55:                              # %if.else202
                                        #   in Loop: Header=BB81_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_56:                              # %if.end213
                                        #   in Loop: Header=BB81_52 Depth=1
	jmp	.LBB81_57
.LBB81_57:                              # %for.inc214
                                        #   in Loop: Header=BB81_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_52
.LBB81_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB81_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB81_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB81_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB81_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_63
.LBB81_62:                              # %if.else232
                                        #   in Loop: Header=BB81_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_63:                              # %if.end243
                                        #   in Loop: Header=BB81_59 Depth=1
	jmp	.LBB81_64
.LBB81_64:                              # %for.inc244
                                        #   in Loop: Header=BB81_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_59
.LBB81_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB81_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB81_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB81_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB81_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_70
.LBB81_69:                              # %if.else262
                                        #   in Loop: Header=BB81_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_70:                              # %if.end273
                                        #   in Loop: Header=BB81_66 Depth=1
	jmp	.LBB81_71
.LBB81_71:                              # %for.inc274
                                        #   in Loop: Header=BB81_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_66
.LBB81_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB81_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB81_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB81_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB81_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_77
.LBB81_76:                              # %if.else292
                                        #   in Loop: Header=BB81_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_77:                              # %if.end303
                                        #   in Loop: Header=BB81_73 Depth=1
	jmp	.LBB81_78
.LBB81_78:                              # %for.inc304
                                        #   in Loop: Header=BB81_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_73
.LBB81_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB81_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB81_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB81_80 Depth=1
	movl	$0, -4(%rbp)
.LBB81_82:                              # %for.cond310
                                        #   Parent Loop BB81_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB81_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB81_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB81_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_86
.LBB81_85:                              # %if.else328
                                        #   in Loop: Header=BB81_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_86:                              # %if.end342
                                        #   in Loop: Header=BB81_82 Depth=2
	jmp	.LBB81_87
.LBB81_87:                              # %for.inc343
                                        #   in Loop: Header=BB81_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_82
.LBB81_88:                              # %for.end345
                                        #   in Loop: Header=BB81_80 Depth=1
	jmp	.LBB81_89
.LBB81_89:                              # %for.inc346
                                        #   in Loop: Header=BB81_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_80
.LBB81_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB81_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB81_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB81_91 Depth=1
	movl	$0, -4(%rbp)
.LBB81_93:                              # %for.cond352
                                        #   Parent Loop BB81_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB81_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB81_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB81_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_97
.LBB81_96:                              # %if.else370
                                        #   in Loop: Header=BB81_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_97:                              # %if.end384
                                        #   in Loop: Header=BB81_93 Depth=2
	jmp	.LBB81_98
.LBB81_98:                              # %for.inc385
                                        #   in Loop: Header=BB81_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_93
.LBB81_99:                              # %for.end387
                                        #   in Loop: Header=BB81_91 Depth=1
	jmp	.LBB81_100
.LBB81_100:                             # %for.inc388
                                        #   in Loop: Header=BB81_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_91
.LBB81_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB81_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB81_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB81_102 Depth=1
	movl	$0, -4(%rbp)
.LBB81_104:                             # %for.cond394
                                        #   Parent Loop BB81_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB81_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB81_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB81_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_108
.LBB81_107:                             # %if.else412
                                        #   in Loop: Header=BB81_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_108:                             # %if.end426
                                        #   in Loop: Header=BB81_104 Depth=2
	jmp	.LBB81_109
.LBB81_109:                             # %for.inc427
                                        #   in Loop: Header=BB81_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_104
.LBB81_110:                             # %for.end429
                                        #   in Loop: Header=BB81_102 Depth=1
	jmp	.LBB81_111
.LBB81_111:                             # %for.inc430
                                        #   in Loop: Header=BB81_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_102
.LBB81_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB81_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB81_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB81_113 Depth=1
	movl	$0, -4(%rbp)
.LBB81_115:                             # %for.cond436
                                        #   Parent Loop BB81_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB81_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB81_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB81_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_119
.LBB81_118:                             # %if.else454
                                        #   in Loop: Header=BB81_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_119:                             # %if.end468
                                        #   in Loop: Header=BB81_115 Depth=2
	jmp	.LBB81_120
.LBB81_120:                             # %for.inc469
                                        #   in Loop: Header=BB81_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_115
.LBB81_121:                             # %for.end471
                                        #   in Loop: Header=BB81_113 Depth=1
	jmp	.LBB81_122
.LBB81_122:                             # %for.inc472
                                        #   in Loop: Header=BB81_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_113
.LBB81_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB81_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB81_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB81_124 Depth=1
	movl	$0, -4(%rbp)
.LBB81_126:                             # %for.cond478
                                        #   Parent Loop BB81_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB81_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB81_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB81_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_130
.LBB81_129:                             # %if.else496
                                        #   in Loop: Header=BB81_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_130:                             # %if.end510
                                        #   in Loop: Header=BB81_126 Depth=2
	jmp	.LBB81_131
.LBB81_131:                             # %for.inc511
                                        #   in Loop: Header=BB81_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_126
.LBB81_132:                             # %for.end513
                                        #   in Loop: Header=BB81_124 Depth=1
	jmp	.LBB81_133
.LBB81_133:                             # %for.inc514
                                        #   in Loop: Header=BB81_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_124
.LBB81_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB81_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB81_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB81_135 Depth=1
	movl	$0, -4(%rbp)
.LBB81_137:                             # %for.cond520
                                        #   Parent Loop BB81_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB81_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB81_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB81_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_141
.LBB81_140:                             # %if.else538
                                        #   in Loop: Header=BB81_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_141:                             # %if.end552
                                        #   in Loop: Header=BB81_137 Depth=2
	jmp	.LBB81_142
.LBB81_142:                             # %for.inc553
                                        #   in Loop: Header=BB81_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_137
.LBB81_143:                             # %for.end555
                                        #   in Loop: Header=BB81_135 Depth=1
	jmp	.LBB81_144
.LBB81_144:                             # %for.inc556
                                        #   in Loop: Header=BB81_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_135
.LBB81_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB81_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB81_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB81_146 Depth=1
	movl	$0, -4(%rbp)
.LBB81_148:                             # %for.cond562
                                        #   Parent Loop BB81_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB81_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB81_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB81_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_152
.LBB81_151:                             # %if.else580
                                        #   in Loop: Header=BB81_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_152:                             # %if.end594
                                        #   in Loop: Header=BB81_148 Depth=2
	jmp	.LBB81_153
.LBB81_153:                             # %for.inc595
                                        #   in Loop: Header=BB81_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_148
.LBB81_154:                             # %for.end597
                                        #   in Loop: Header=BB81_146 Depth=1
	jmp	.LBB81_155
.LBB81_155:                             # %for.inc598
                                        #   in Loop: Header=BB81_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_146
.LBB81_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB81_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB81_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB81_157 Depth=1
	movl	$0, -4(%rbp)
.LBB81_159:                             # %for.cond604
                                        #   Parent Loop BB81_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB81_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB81_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB81_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_163
.LBB81_162:                             # %if.else622
                                        #   in Loop: Header=BB81_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_163:                             # %if.end636
                                        #   in Loop: Header=BB81_159 Depth=2
	jmp	.LBB81_164
.LBB81_164:                             # %for.inc637
                                        #   in Loop: Header=BB81_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_159
.LBB81_165:                             # %for.end639
                                        #   in Loop: Header=BB81_157 Depth=1
	jmp	.LBB81_166
.LBB81_166:                             # %for.inc640
                                        #   in Loop: Header=BB81_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_157
.LBB81_167:                             # %for.end642
	cmpl	$1481264535, -28(%rbp)  # imm = 0x584A4D97
	jne	.LBB81_169
.LBB81_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_168
.Lfunc_end81:
	.size	init_contexts.74, .Lfunc_end81-init_contexts.74
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.75
.LCPI82_0:
	.quad	4607182418800017408     # double 1
.LCPI82_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI82_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI82_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.75
	.p2align	4, 0x90
	.type	XRate.75,@function
XRate.75:                               # @XRate.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1517054885, -36(%rbp)  # imm = 0x5A6C6BA5
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB82_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB82_3
.LBB82_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB82_3:                               # %cond.end
	vmovsd	.LCPI82_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI82_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI82_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI82_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB82_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI82_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB82_6
.LBB82_5:                               # %cond.false6
	vmovsd	.LCPI82_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI82_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI82_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB82_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB82_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB82_9
.LBB82_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB82_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB82_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB82_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB82_13
.LBB82_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB82_13:                              # %cond.end26
	jmp	.LBB82_15
.LBB82_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB82_15
.LBB82_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB82_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB82_18
.LBB82_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB82_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1517054885, -36(%rbp)  # imm = 0x5A6C6BA5
	jne	.LBB82_20
.LBB82_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB82_19
.Lfunc_end82:
	.size	XRate.75, .Lfunc_end82-XRate.75
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.76
.LCPI83_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.76
	.p2align	4, 0x90
	.type	GetCtxModelNumber.76,@function
GetCtxModelNumber.76:                   # @GetCtxModelNumber.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI83_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1435660167, -44(%rbp)  # imm = 0x55926F87
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB83_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_3 Depth 2
                                        #       Child Loop BB83_5 Depth 3
                                        #     Child Loop BB83_14 Depth 2
                                        #       Child Loop BB83_16 Depth 3
                                        #     Child Loop BB83_25 Depth 2
                                        #       Child Loop BB83_27 Depth 3
                                        #     Child Loop BB83_36 Depth 2
                                        #       Child Loop BB83_38 Depth 3
                                        #     Child Loop BB83_47 Depth 2
                                        #     Child Loop BB83_54 Depth 2
                                        #     Child Loop BB83_61 Depth 2
                                        #     Child Loop BB83_68 Depth 2
                                        #     Child Loop BB83_75 Depth 2
                                        #     Child Loop BB83_82 Depth 2
                                        #       Child Loop BB83_84 Depth 3
                                        #     Child Loop BB83_93 Depth 2
                                        #       Child Loop BB83_95 Depth 3
                                        #     Child Loop BB83_104 Depth 2
                                        #       Child Loop BB83_106 Depth 3
                                        #     Child Loop BB83_115 Depth 2
                                        #       Child Loop BB83_117 Depth 3
                                        #     Child Loop BB83_126 Depth 2
                                        #       Child Loop BB83_128 Depth 3
                                        #     Child Loop BB83_137 Depth 2
                                        #       Child Loop BB83_139 Depth 3
                                        #     Child Loop BB83_148 Depth 2
                                        #       Child Loop BB83_150 Depth 3
                                        #     Child Loop BB83_159 Depth 2
                                        #       Child Loop BB83_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB83_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB83_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB83_3:                               # %for.cond2
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB83_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	$0, -4(%rbp)
.LBB83_5:                               # %for.cond5
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB83_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB83_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB83_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_9
.LBB83_8:                               # %if.else
                                        #   in Loop: Header=BB83_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_9:                               # %if.end
                                        #   in Loop: Header=BB83_5 Depth=3
	jmp	.LBB83_10
.LBB83_10:                              # %for.inc
                                        #   in Loop: Header=BB83_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_5
.LBB83_11:                              # %for.end
                                        #   in Loop: Header=BB83_3 Depth=2
	jmp	.LBB83_12
.LBB83_12:                              # %for.inc33
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_3
.LBB83_13:                              # %for.end35
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_14:                              # %for.cond36
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB83_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB83_14 Depth=2
	movl	$0, -4(%rbp)
.LBB83_16:                              # %for.cond39
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB83_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB83_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB83_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_20
.LBB83_19:                              # %if.else58
                                        #   in Loop: Header=BB83_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_20:                              # %if.end73
                                        #   in Loop: Header=BB83_16 Depth=3
	jmp	.LBB83_21
.LBB83_21:                              # %for.inc74
                                        #   in Loop: Header=BB83_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_16
.LBB83_22:                              # %for.end76
                                        #   in Loop: Header=BB83_14 Depth=2
	jmp	.LBB83_23
.LBB83_23:                              # %for.inc77
                                        #   in Loop: Header=BB83_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_14
.LBB83_24:                              # %for.end79
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_25:                              # %for.cond80
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB83_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB83_25 Depth=2
	movl	$0, -4(%rbp)
.LBB83_27:                              # %for.cond83
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB83_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB83_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB83_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_31
.LBB83_30:                              # %if.else102
                                        #   in Loop: Header=BB83_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_31:                              # %if.end117
                                        #   in Loop: Header=BB83_27 Depth=3
	jmp	.LBB83_32
.LBB83_32:                              # %for.inc118
                                        #   in Loop: Header=BB83_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_27
.LBB83_33:                              # %for.end120
                                        #   in Loop: Header=BB83_25 Depth=2
	jmp	.LBB83_34
.LBB83_34:                              # %for.inc121
                                        #   in Loop: Header=BB83_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_25
.LBB83_35:                              # %for.end123
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_36:                              # %for.cond124
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB83_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB83_36 Depth=2
	movl	$0, -4(%rbp)
.LBB83_38:                              # %for.cond127
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB83_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB83_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB83_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_42
.LBB83_41:                              # %if.else146
                                        #   in Loop: Header=BB83_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_42:                              # %if.end161
                                        #   in Loop: Header=BB83_38 Depth=3
	jmp	.LBB83_43
.LBB83_43:                              # %for.inc162
                                        #   in Loop: Header=BB83_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_38
.LBB83_44:                              # %for.end164
                                        #   in Loop: Header=BB83_36 Depth=2
	jmp	.LBB83_45
.LBB83_45:                              # %for.inc165
                                        #   in Loop: Header=BB83_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_36
.LBB83_46:                              # %for.end167
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_47:                              # %for.cond168
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB83_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB83_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_51
.LBB83_50:                              # %if.else184
                                        #   in Loop: Header=BB83_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_51:                              # %if.end196
                                        #   in Loop: Header=BB83_47 Depth=2
	jmp	.LBB83_52
.LBB83_52:                              # %for.inc197
                                        #   in Loop: Header=BB83_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_47
.LBB83_53:                              # %for.end199
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_54:                              # %for.cond200
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB83_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB83_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_58
.LBB83_57:                              # %if.else216
                                        #   in Loop: Header=BB83_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_58:                              # %if.end228
                                        #   in Loop: Header=BB83_54 Depth=2
	jmp	.LBB83_59
.LBB83_59:                              # %for.inc229
                                        #   in Loop: Header=BB83_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_54
.LBB83_60:                              # %for.end231
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_61:                              # %for.cond232
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB83_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB83_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB83_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_65
.LBB83_64:                              # %if.else248
                                        #   in Loop: Header=BB83_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_65:                              # %if.end260
                                        #   in Loop: Header=BB83_61 Depth=2
	jmp	.LBB83_66
.LBB83_66:                              # %for.inc261
                                        #   in Loop: Header=BB83_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_61
.LBB83_67:                              # %for.end263
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_68:                              # %for.cond264
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB83_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB83_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB83_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_72
.LBB83_71:                              # %if.else280
                                        #   in Loop: Header=BB83_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_72:                              # %if.end292
                                        #   in Loop: Header=BB83_68 Depth=2
	jmp	.LBB83_73
.LBB83_73:                              # %for.inc293
                                        #   in Loop: Header=BB83_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_68
.LBB83_74:                              # %for.end295
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_75:                              # %for.cond296
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB83_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB83_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_79
.LBB83_78:                              # %if.else312
                                        #   in Loop: Header=BB83_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_79:                              # %if.end324
                                        #   in Loop: Header=BB83_75 Depth=2
	jmp	.LBB83_80
.LBB83_80:                              # %for.inc325
                                        #   in Loop: Header=BB83_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_75
.LBB83_81:                              # %for.end327
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_82:                              # %for.cond328
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB83_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB83_82 Depth=2
	movl	$0, -4(%rbp)
.LBB83_84:                              # %for.cond331
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB83_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB83_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB83_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_88
.LBB83_87:                              # %if.else350
                                        #   in Loop: Header=BB83_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_88:                              # %if.end365
                                        #   in Loop: Header=BB83_84 Depth=3
	jmp	.LBB83_89
.LBB83_89:                              # %for.inc366
                                        #   in Loop: Header=BB83_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_84
.LBB83_90:                              # %for.end368
                                        #   in Loop: Header=BB83_82 Depth=2
	jmp	.LBB83_91
.LBB83_91:                              # %for.inc369
                                        #   in Loop: Header=BB83_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_82
.LBB83_92:                              # %for.end371
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_93:                              # %for.cond372
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB83_93 Depth=2
	movl	$0, -4(%rbp)
.LBB83_95:                              # %for.cond375
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB83_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB83_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB83_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_99
.LBB83_98:                              # %if.else394
                                        #   in Loop: Header=BB83_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_99:                              # %if.end409
                                        #   in Loop: Header=BB83_95 Depth=3
	jmp	.LBB83_100
.LBB83_100:                             # %for.inc410
                                        #   in Loop: Header=BB83_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_95
.LBB83_101:                             # %for.end412
                                        #   in Loop: Header=BB83_93 Depth=2
	jmp	.LBB83_102
.LBB83_102:                             # %for.inc413
                                        #   in Loop: Header=BB83_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_93
.LBB83_103:                             # %for.end415
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_104:                             # %for.cond416
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB83_104 Depth=2
	movl	$0, -4(%rbp)
.LBB83_106:                             # %for.cond419
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB83_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB83_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB83_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_110
.LBB83_109:                             # %if.else438
                                        #   in Loop: Header=BB83_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_110:                             # %if.end453
                                        #   in Loop: Header=BB83_106 Depth=3
	jmp	.LBB83_111
.LBB83_111:                             # %for.inc454
                                        #   in Loop: Header=BB83_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_106
.LBB83_112:                             # %for.end456
                                        #   in Loop: Header=BB83_104 Depth=2
	jmp	.LBB83_113
.LBB83_113:                             # %for.inc457
                                        #   in Loop: Header=BB83_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_104
.LBB83_114:                             # %for.end459
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_115:                             # %for.cond460
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB83_115 Depth=2
	movl	$0, -4(%rbp)
.LBB83_117:                             # %for.cond463
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB83_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB83_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB83_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_121
.LBB83_120:                             # %if.else482
                                        #   in Loop: Header=BB83_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_121:                             # %if.end497
                                        #   in Loop: Header=BB83_117 Depth=3
	jmp	.LBB83_122
.LBB83_122:                             # %for.inc498
                                        #   in Loop: Header=BB83_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_117
.LBB83_123:                             # %for.end500
                                        #   in Loop: Header=BB83_115 Depth=2
	jmp	.LBB83_124
.LBB83_124:                             # %for.inc501
                                        #   in Loop: Header=BB83_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_115
.LBB83_125:                             # %for.end503
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_126:                             # %for.cond504
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB83_126 Depth=2
	movl	$0, -4(%rbp)
.LBB83_128:                             # %for.cond507
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB83_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB83_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB83_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_132
.LBB83_131:                             # %if.else526
                                        #   in Loop: Header=BB83_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_132:                             # %if.end541
                                        #   in Loop: Header=BB83_128 Depth=3
	jmp	.LBB83_133
.LBB83_133:                             # %for.inc542
                                        #   in Loop: Header=BB83_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_128
.LBB83_134:                             # %for.end544
                                        #   in Loop: Header=BB83_126 Depth=2
	jmp	.LBB83_135
.LBB83_135:                             # %for.inc545
                                        #   in Loop: Header=BB83_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_126
.LBB83_136:                             # %for.end547
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_137:                             # %for.cond548
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB83_137 Depth=2
	movl	$0, -4(%rbp)
.LBB83_139:                             # %for.cond551
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB83_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB83_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB83_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_143
.LBB83_142:                             # %if.else570
                                        #   in Loop: Header=BB83_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_143:                             # %if.end585
                                        #   in Loop: Header=BB83_139 Depth=3
	jmp	.LBB83_144
.LBB83_144:                             # %for.inc586
                                        #   in Loop: Header=BB83_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_139
.LBB83_145:                             # %for.end588
                                        #   in Loop: Header=BB83_137 Depth=2
	jmp	.LBB83_146
.LBB83_146:                             # %for.inc589
                                        #   in Loop: Header=BB83_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_137
.LBB83_147:                             # %for.end591
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_148:                             # %for.cond592
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB83_148 Depth=2
	movl	$0, -4(%rbp)
.LBB83_150:                             # %for.cond595
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB83_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB83_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB83_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_154
.LBB83_153:                             # %if.else614
                                        #   in Loop: Header=BB83_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_154:                             # %if.end629
                                        #   in Loop: Header=BB83_150 Depth=3
	jmp	.LBB83_155
.LBB83_155:                             # %for.inc630
                                        #   in Loop: Header=BB83_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_150
.LBB83_156:                             # %for.end632
                                        #   in Loop: Header=BB83_148 Depth=2
	jmp	.LBB83_157
.LBB83_157:                             # %for.inc633
                                        #   in Loop: Header=BB83_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_148
.LBB83_158:                             # %for.end635
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_159:                             # %for.cond636
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB83_159 Depth=2
	movl	$0, -4(%rbp)
.LBB83_161:                             # %for.cond639
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB83_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB83_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB83_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_165
.LBB83_164:                             # %if.else658
                                        #   in Loop: Header=BB83_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_165:                             # %if.end673
                                        #   in Loop: Header=BB83_161 Depth=3
	jmp	.LBB83_166
.LBB83_166:                             # %for.inc674
                                        #   in Loop: Header=BB83_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_161
.LBB83_167:                             # %for.end676
                                        #   in Loop: Header=BB83_159 Depth=2
	jmp	.LBB83_168
.LBB83_168:                             # %for.inc677
                                        #   in Loop: Header=BB83_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_159
.LBB83_169:                             # %for.end679
                                        #   in Loop: Header=BB83_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB83_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB83_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB83_171:                             # %if.end682
                                        #   in Loop: Header=BB83_1 Depth=1
	jmp	.LBB83_172
.LBB83_172:                             # %for.inc683
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_1
.LBB83_173:                             # %for.end685
	cmpl	$1435660167, -44(%rbp)  # imm = 0x55926F87
	jne	.LBB83_175
.LBB83_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_174
.Lfunc_end83:
	.size	GetCtxModelNumber.76, .Lfunc_end83-GetCtxModelNumber.76
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.77
.LCPI84_0:
	.quad	4607182418800017408     # double 1
.LCPI84_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI84_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI84_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.77
	.p2align	4, 0x90
	.type	XRate.77,@function
XRate.77:                               # @XRate.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$270425514, -32(%rbp)   # imm = 0x101E5DAA
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB84_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB84_3
.LBB84_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB84_3:                               # %cond.end
	vmovsd	.LCPI84_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI84_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI84_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI84_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB84_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI84_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB84_6
.LBB84_5:                               # %cond.false6
	vmovsd	.LCPI84_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI84_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI84_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB84_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB84_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB84_9
.LBB84_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB84_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB84_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB84_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB84_13
.LBB84_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB84_13:                              # %cond.end26
	jmp	.LBB84_15
.LBB84_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB84_15
.LBB84_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB84_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB84_18
.LBB84_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB84_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$270425514, -32(%rbp)   # imm = 0x101E5DAA
	jne	.LBB84_20
.LBB84_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB84_19
.Lfunc_end84:
	.size	XRate.77, .Lfunc_end84-XRate.77
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.78
.LCPI85_0:
	.quad	4611686018427387904     # double 2
.LCPI85_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.78
	.p2align	4, 0x90
	.type	create_context_memory.78,@function
create_context_memory.78:               # @create_context_memory.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1578472087, -20(%rbp)  # imm = 0x5E159297
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB85_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB85_3
.LBB85_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB85_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB85_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB85_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB85_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB85_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB85_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB85_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB85_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB85_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB85_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB85_11:                              # %if.end10
                                        #   in Loop: Header=BB85_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB85_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB85_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB85_13:                              # %if.end16
                                        #   in Loop: Header=BB85_8 Depth=1
	movl	$0, -8(%rbp)
.LBB85_14:                              # %for.cond17
                                        #   Parent Loop BB85_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB85_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB85_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB85_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB85_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB85_17:                              # %if.end28
                                        #   in Loop: Header=BB85_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB85_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB85_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB85_19:                              # %if.end39
                                        #   in Loop: Header=BB85_14 Depth=2
	jmp	.LBB85_20
.LBB85_20:                              # %for.inc
                                        #   in Loop: Header=BB85_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_14
.LBB85_21:                              # %for.end
                                        #   in Loop: Header=BB85_8 Depth=1
	jmp	.LBB85_22
.LBB85_22:                              # %for.inc40
                                        #   in Loop: Header=BB85_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_8
.LBB85_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB85_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_26 Depth 2
                                        #       Child Loop BB85_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB85_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB85_24 Depth=1
	movl	$0, -8(%rbp)
.LBB85_26:                              # %for.cond47
                                        #   Parent Loop BB85_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB85_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB85_26 Depth=2
	movl	$0, -12(%rbp)
.LBB85_28:                              # %for.cond51
                                        #   Parent Loop BB85_24 Depth=1
                                        #     Parent Loop BB85_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB85_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB85_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB85_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_28
.LBB85_31:                              # %for.end63
                                        #   in Loop: Header=BB85_26 Depth=2
	jmp	.LBB85_32
.LBB85_32:                              # %for.inc64
                                        #   in Loop: Header=BB85_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_26
.LBB85_33:                              # %for.end66
                                        #   in Loop: Header=BB85_24 Depth=1
	jmp	.LBB85_34
.LBB85_34:                              # %for.inc67
                                        #   in Loop: Header=BB85_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_24
.LBB85_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB85_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB85_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB85_36 Depth=1
	vmovsd	.LCPI85_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI85_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI85_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB85_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_36
.LBB85_39:                              # %for.end98
	cmpl	$1578472087, -20(%rbp)  # imm = 0x5E159297
	jne	.LBB85_41
.LBB85_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_40
.Lfunc_end85:
	.size	create_context_memory.78, .Lfunc_end85-create_context_memory.78
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.79
.LCPI86_0:
	.quad	4611686018427387904     # double 2
.LCPI86_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.79
	.p2align	4, 0x90
	.type	create_context_memory.79,@function
create_context_memory.79:               # @create_context_memory.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$420487153, -20(%rbp)   # imm = 0x19101FF1
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB86_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB86_3
.LBB86_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB86_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB86_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB86_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB86_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB86_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB86_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB86_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB86_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB86_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB86_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB86_11:                              # %if.end10
                                        #   in Loop: Header=BB86_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB86_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB86_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB86_13:                              # %if.end16
                                        #   in Loop: Header=BB86_8 Depth=1
	movl	$0, -8(%rbp)
.LBB86_14:                              # %for.cond17
                                        #   Parent Loop BB86_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB86_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB86_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB86_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB86_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB86_17:                              # %if.end28
                                        #   in Loop: Header=BB86_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB86_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB86_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB86_19:                              # %if.end39
                                        #   in Loop: Header=BB86_14 Depth=2
	jmp	.LBB86_20
.LBB86_20:                              # %for.inc
                                        #   in Loop: Header=BB86_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_14
.LBB86_21:                              # %for.end
                                        #   in Loop: Header=BB86_8 Depth=1
	jmp	.LBB86_22
.LBB86_22:                              # %for.inc40
                                        #   in Loop: Header=BB86_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_8
.LBB86_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB86_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_26 Depth 2
                                        #       Child Loop BB86_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB86_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	$0, -8(%rbp)
.LBB86_26:                              # %for.cond47
                                        #   Parent Loop BB86_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB86_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB86_26 Depth=2
	movl	$0, -12(%rbp)
.LBB86_28:                              # %for.cond51
                                        #   Parent Loop BB86_24 Depth=1
                                        #     Parent Loop BB86_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB86_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB86_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB86_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_28
.LBB86_31:                              # %for.end63
                                        #   in Loop: Header=BB86_26 Depth=2
	jmp	.LBB86_32
.LBB86_32:                              # %for.inc64
                                        #   in Loop: Header=BB86_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_26
.LBB86_33:                              # %for.end66
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_34
.LBB86_34:                              # %for.inc67
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_24
.LBB86_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB86_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB86_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB86_36 Depth=1
	vmovsd	.LCPI86_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI86_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI86_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB86_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_36
.LBB86_39:                              # %for.end98
	cmpl	$420487153, -20(%rbp)   # imm = 0x19101FF1
	jne	.LBB86_41
.LBB86_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_40
.Lfunc_end86:
	.size	create_context_memory.79, .Lfunc_end86-create_context_memory.79
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.80
.LCPI87_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.80
	.p2align	4, 0x90
	.type	GetCtxModelNumber.80,@function
GetCtxModelNumber.80:                   # @GetCtxModelNumber.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI87_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1924887753, -44(%rbp)  # imm = 0x72BB74C9
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB87_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_3 Depth 2
                                        #       Child Loop BB87_5 Depth 3
                                        #     Child Loop BB87_14 Depth 2
                                        #       Child Loop BB87_16 Depth 3
                                        #     Child Loop BB87_25 Depth 2
                                        #       Child Loop BB87_27 Depth 3
                                        #     Child Loop BB87_36 Depth 2
                                        #       Child Loop BB87_38 Depth 3
                                        #     Child Loop BB87_47 Depth 2
                                        #     Child Loop BB87_54 Depth 2
                                        #     Child Loop BB87_61 Depth 2
                                        #     Child Loop BB87_68 Depth 2
                                        #     Child Loop BB87_75 Depth 2
                                        #     Child Loop BB87_82 Depth 2
                                        #       Child Loop BB87_84 Depth 3
                                        #     Child Loop BB87_93 Depth 2
                                        #       Child Loop BB87_95 Depth 3
                                        #     Child Loop BB87_104 Depth 2
                                        #       Child Loop BB87_106 Depth 3
                                        #     Child Loop BB87_115 Depth 2
                                        #       Child Loop BB87_117 Depth 3
                                        #     Child Loop BB87_126 Depth 2
                                        #       Child Loop BB87_128 Depth 3
                                        #     Child Loop BB87_137 Depth 2
                                        #       Child Loop BB87_139 Depth 3
                                        #     Child Loop BB87_148 Depth 2
                                        #       Child Loop BB87_150 Depth 3
                                        #     Child Loop BB87_159 Depth 2
                                        #       Child Loop BB87_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB87_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB87_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB87_3:                               # %for.cond2
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB87_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB87_3 Depth=2
	movl	$0, -4(%rbp)
.LBB87_5:                               # %for.cond5
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB87_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB87_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB87_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_9
.LBB87_8:                               # %if.else
                                        #   in Loop: Header=BB87_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_9:                               # %if.end
                                        #   in Loop: Header=BB87_5 Depth=3
	jmp	.LBB87_10
.LBB87_10:                              # %for.inc
                                        #   in Loop: Header=BB87_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_5
.LBB87_11:                              # %for.end
                                        #   in Loop: Header=BB87_3 Depth=2
	jmp	.LBB87_12
.LBB87_12:                              # %for.inc33
                                        #   in Loop: Header=BB87_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_3
.LBB87_13:                              # %for.end35
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_14:                              # %for.cond36
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB87_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB87_14 Depth=2
	movl	$0, -4(%rbp)
.LBB87_16:                              # %for.cond39
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB87_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB87_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB87_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_20
.LBB87_19:                              # %if.else58
                                        #   in Loop: Header=BB87_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_20:                              # %if.end73
                                        #   in Loop: Header=BB87_16 Depth=3
	jmp	.LBB87_21
.LBB87_21:                              # %for.inc74
                                        #   in Loop: Header=BB87_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_16
.LBB87_22:                              # %for.end76
                                        #   in Loop: Header=BB87_14 Depth=2
	jmp	.LBB87_23
.LBB87_23:                              # %for.inc77
                                        #   in Loop: Header=BB87_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_14
.LBB87_24:                              # %for.end79
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_25:                              # %for.cond80
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB87_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB87_25 Depth=2
	movl	$0, -4(%rbp)
.LBB87_27:                              # %for.cond83
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB87_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB87_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB87_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_31
.LBB87_30:                              # %if.else102
                                        #   in Loop: Header=BB87_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_31:                              # %if.end117
                                        #   in Loop: Header=BB87_27 Depth=3
	jmp	.LBB87_32
.LBB87_32:                              # %for.inc118
                                        #   in Loop: Header=BB87_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_27
.LBB87_33:                              # %for.end120
                                        #   in Loop: Header=BB87_25 Depth=2
	jmp	.LBB87_34
.LBB87_34:                              # %for.inc121
                                        #   in Loop: Header=BB87_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_25
.LBB87_35:                              # %for.end123
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_36:                              # %for.cond124
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB87_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB87_36 Depth=2
	movl	$0, -4(%rbp)
.LBB87_38:                              # %for.cond127
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB87_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB87_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB87_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_42
.LBB87_41:                              # %if.else146
                                        #   in Loop: Header=BB87_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_42:                              # %if.end161
                                        #   in Loop: Header=BB87_38 Depth=3
	jmp	.LBB87_43
.LBB87_43:                              # %for.inc162
                                        #   in Loop: Header=BB87_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_38
.LBB87_44:                              # %for.end164
                                        #   in Loop: Header=BB87_36 Depth=2
	jmp	.LBB87_45
.LBB87_45:                              # %for.inc165
                                        #   in Loop: Header=BB87_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_36
.LBB87_46:                              # %for.end167
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -4(%rbp)
.LBB87_47:                              # %for.cond168
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB87_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB87_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB87_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_51
.LBB87_50:                              # %if.else184
                                        #   in Loop: Header=BB87_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_51:                              # %if.end196
                                        #   in Loop: Header=BB87_47 Depth=2
	jmp	.LBB87_52
.LBB87_52:                              # %for.inc197
                                        #   in Loop: Header=BB87_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_47
.LBB87_53:                              # %for.end199
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -4(%rbp)
.LBB87_54:                              # %for.cond200
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB87_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB87_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB87_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_58
.LBB87_57:                              # %if.else216
                                        #   in Loop: Header=BB87_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_58:                              # %if.end228
                                        #   in Loop: Header=BB87_54 Depth=2
	jmp	.LBB87_59
.LBB87_59:                              # %for.inc229
                                        #   in Loop: Header=BB87_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_54
.LBB87_60:                              # %for.end231
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -4(%rbp)
.LBB87_61:                              # %for.cond232
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB87_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB87_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB87_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_65
.LBB87_64:                              # %if.else248
                                        #   in Loop: Header=BB87_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_65:                              # %if.end260
                                        #   in Loop: Header=BB87_61 Depth=2
	jmp	.LBB87_66
.LBB87_66:                              # %for.inc261
                                        #   in Loop: Header=BB87_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_61
.LBB87_67:                              # %for.end263
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -4(%rbp)
.LBB87_68:                              # %for.cond264
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB87_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB87_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB87_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_72
.LBB87_71:                              # %if.else280
                                        #   in Loop: Header=BB87_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_72:                              # %if.end292
                                        #   in Loop: Header=BB87_68 Depth=2
	jmp	.LBB87_73
.LBB87_73:                              # %for.inc293
                                        #   in Loop: Header=BB87_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_68
.LBB87_74:                              # %for.end295
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -4(%rbp)
.LBB87_75:                              # %for.cond296
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB87_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB87_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB87_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_79
.LBB87_78:                              # %if.else312
                                        #   in Loop: Header=BB87_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_79:                              # %if.end324
                                        #   in Loop: Header=BB87_75 Depth=2
	jmp	.LBB87_80
.LBB87_80:                              # %for.inc325
                                        #   in Loop: Header=BB87_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_75
.LBB87_81:                              # %for.end327
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_82:                              # %for.cond328
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB87_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB87_82 Depth=2
	movl	$0, -4(%rbp)
.LBB87_84:                              # %for.cond331
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB87_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB87_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB87_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_88
.LBB87_87:                              # %if.else350
                                        #   in Loop: Header=BB87_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_88:                              # %if.end365
                                        #   in Loop: Header=BB87_84 Depth=3
	jmp	.LBB87_89
.LBB87_89:                              # %for.inc366
                                        #   in Loop: Header=BB87_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_84
.LBB87_90:                              # %for.end368
                                        #   in Loop: Header=BB87_82 Depth=2
	jmp	.LBB87_91
.LBB87_91:                              # %for.inc369
                                        #   in Loop: Header=BB87_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_82
.LBB87_92:                              # %for.end371
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_93:                              # %for.cond372
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB87_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB87_93 Depth=2
	movl	$0, -4(%rbp)
.LBB87_95:                              # %for.cond375
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB87_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB87_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB87_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_99
.LBB87_98:                              # %if.else394
                                        #   in Loop: Header=BB87_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_99:                              # %if.end409
                                        #   in Loop: Header=BB87_95 Depth=3
	jmp	.LBB87_100
.LBB87_100:                             # %for.inc410
                                        #   in Loop: Header=BB87_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_95
.LBB87_101:                             # %for.end412
                                        #   in Loop: Header=BB87_93 Depth=2
	jmp	.LBB87_102
.LBB87_102:                             # %for.inc413
                                        #   in Loop: Header=BB87_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_93
.LBB87_103:                             # %for.end415
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_104:                             # %for.cond416
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB87_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB87_104 Depth=2
	movl	$0, -4(%rbp)
.LBB87_106:                             # %for.cond419
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB87_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB87_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB87_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_110
.LBB87_109:                             # %if.else438
                                        #   in Loop: Header=BB87_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_110:                             # %if.end453
                                        #   in Loop: Header=BB87_106 Depth=3
	jmp	.LBB87_111
.LBB87_111:                             # %for.inc454
                                        #   in Loop: Header=BB87_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_106
.LBB87_112:                             # %for.end456
                                        #   in Loop: Header=BB87_104 Depth=2
	jmp	.LBB87_113
.LBB87_113:                             # %for.inc457
                                        #   in Loop: Header=BB87_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_104
.LBB87_114:                             # %for.end459
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_115:                             # %for.cond460
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB87_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB87_115 Depth=2
	movl	$0, -4(%rbp)
.LBB87_117:                             # %for.cond463
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB87_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB87_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB87_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_121
.LBB87_120:                             # %if.else482
                                        #   in Loop: Header=BB87_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_121:                             # %if.end497
                                        #   in Loop: Header=BB87_117 Depth=3
	jmp	.LBB87_122
.LBB87_122:                             # %for.inc498
                                        #   in Loop: Header=BB87_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_117
.LBB87_123:                             # %for.end500
                                        #   in Loop: Header=BB87_115 Depth=2
	jmp	.LBB87_124
.LBB87_124:                             # %for.inc501
                                        #   in Loop: Header=BB87_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_115
.LBB87_125:                             # %for.end503
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_126:                             # %for.cond504
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB87_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB87_126 Depth=2
	movl	$0, -4(%rbp)
.LBB87_128:                             # %for.cond507
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB87_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB87_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB87_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_132
.LBB87_131:                             # %if.else526
                                        #   in Loop: Header=BB87_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_132:                             # %if.end541
                                        #   in Loop: Header=BB87_128 Depth=3
	jmp	.LBB87_133
.LBB87_133:                             # %for.inc542
                                        #   in Loop: Header=BB87_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_128
.LBB87_134:                             # %for.end544
                                        #   in Loop: Header=BB87_126 Depth=2
	jmp	.LBB87_135
.LBB87_135:                             # %for.inc545
                                        #   in Loop: Header=BB87_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_126
.LBB87_136:                             # %for.end547
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_137:                             # %for.cond548
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB87_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB87_137 Depth=2
	movl	$0, -4(%rbp)
.LBB87_139:                             # %for.cond551
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB87_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB87_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB87_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_143
.LBB87_142:                             # %if.else570
                                        #   in Loop: Header=BB87_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_143:                             # %if.end585
                                        #   in Loop: Header=BB87_139 Depth=3
	jmp	.LBB87_144
.LBB87_144:                             # %for.inc586
                                        #   in Loop: Header=BB87_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_139
.LBB87_145:                             # %for.end588
                                        #   in Loop: Header=BB87_137 Depth=2
	jmp	.LBB87_146
.LBB87_146:                             # %for.inc589
                                        #   in Loop: Header=BB87_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_137
.LBB87_147:                             # %for.end591
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_148:                             # %for.cond592
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB87_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB87_148 Depth=2
	movl	$0, -4(%rbp)
.LBB87_150:                             # %for.cond595
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB87_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB87_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB87_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_154
.LBB87_153:                             # %if.else614
                                        #   in Loop: Header=BB87_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_154:                             # %if.end629
                                        #   in Loop: Header=BB87_150 Depth=3
	jmp	.LBB87_155
.LBB87_155:                             # %for.inc630
                                        #   in Loop: Header=BB87_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_150
.LBB87_156:                             # %for.end632
                                        #   in Loop: Header=BB87_148 Depth=2
	jmp	.LBB87_157
.LBB87_157:                             # %for.inc633
                                        #   in Loop: Header=BB87_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_148
.LBB87_158:                             # %for.end635
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_159:                             # %for.cond636
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB87_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB87_159 Depth=2
	movl	$0, -4(%rbp)
.LBB87_161:                             # %for.cond639
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB87_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB87_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB87_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_165
.LBB87_164:                             # %if.else658
                                        #   in Loop: Header=BB87_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_165:                             # %if.end673
                                        #   in Loop: Header=BB87_161 Depth=3
	jmp	.LBB87_166
.LBB87_166:                             # %for.inc674
                                        #   in Loop: Header=BB87_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_161
.LBB87_167:                             # %for.end676
                                        #   in Loop: Header=BB87_159 Depth=2
	jmp	.LBB87_168
.LBB87_168:                             # %for.inc677
                                        #   in Loop: Header=BB87_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_159
.LBB87_169:                             # %for.end679
                                        #   in Loop: Header=BB87_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB87_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB87_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB87_171:                             # %if.end682
                                        #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_172
.LBB87_172:                             # %for.inc683
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_1
.LBB87_173:                             # %for.end685
	cmpl	$1924887753, -44(%rbp)  # imm = 0x72BB74C9
	jne	.LBB87_175
.LBB87_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_174
.Lfunc_end87:
	.size	GetCtxModelNumber.80, .Lfunc_end87-GetCtxModelNumber.80
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.81
.LCPI88_0:
	.quad	4611686018427387904     # double 2
.LCPI88_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.81
	.p2align	4, 0x90
	.type	create_context_memory.81,@function
create_context_memory.81:               # @create_context_memory.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$897141829, -20(%rbp)   # imm = 0x35794C45
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB88_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB88_3
.LBB88_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB88_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB88_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB88_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB88_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB88_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB88_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB88_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB88_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB88_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB88_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB88_11:                              # %if.end10
                                        #   in Loop: Header=BB88_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB88_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB88_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB88_13:                              # %if.end16
                                        #   in Loop: Header=BB88_8 Depth=1
	movl	$0, -8(%rbp)
.LBB88_14:                              # %for.cond17
                                        #   Parent Loop BB88_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB88_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB88_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB88_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB88_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB88_17:                              # %if.end28
                                        #   in Loop: Header=BB88_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB88_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB88_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB88_19:                              # %if.end39
                                        #   in Loop: Header=BB88_14 Depth=2
	jmp	.LBB88_20
.LBB88_20:                              # %for.inc
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_14
.LBB88_21:                              # %for.end
                                        #   in Loop: Header=BB88_8 Depth=1
	jmp	.LBB88_22
.LBB88_22:                              # %for.inc40
                                        #   in Loop: Header=BB88_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_8
.LBB88_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB88_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_26 Depth 2
                                        #       Child Loop BB88_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB88_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB88_24 Depth=1
	movl	$0, -8(%rbp)
.LBB88_26:                              # %for.cond47
                                        #   Parent Loop BB88_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB88_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB88_26 Depth=2
	movl	$0, -12(%rbp)
.LBB88_28:                              # %for.cond51
                                        #   Parent Loop BB88_24 Depth=1
                                        #     Parent Loop BB88_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB88_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB88_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB88_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_28
.LBB88_31:                              # %for.end63
                                        #   in Loop: Header=BB88_26 Depth=2
	jmp	.LBB88_32
.LBB88_32:                              # %for.inc64
                                        #   in Loop: Header=BB88_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_26
.LBB88_33:                              # %for.end66
                                        #   in Loop: Header=BB88_24 Depth=1
	jmp	.LBB88_34
.LBB88_34:                              # %for.inc67
                                        #   in Loop: Header=BB88_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_24
.LBB88_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB88_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB88_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB88_36 Depth=1
	vmovsd	.LCPI88_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI88_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI88_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB88_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_36
.LBB88_39:                              # %for.end98
	cmpl	$897141829, -20(%rbp)   # imm = 0x35794C45
	jne	.LBB88_41
.LBB88_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_40
.Lfunc_end88:
	.size	create_context_memory.81, .Lfunc_end88-create_context_memory.81
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.82
.LCPI89_0:
	.quad	4611686018427387904     # double 2
.LCPI89_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.82
	.p2align	4, 0x90
	.type	create_context_memory.82,@function
create_context_memory.82:               # @create_context_memory.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$222073927, -20(%rbp)   # imm = 0xD3C9447
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB89_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB89_3
.LBB89_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB89_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB89_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB89_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB89_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB89_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB89_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB89_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB89_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB89_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB89_11:                              # %if.end10
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB89_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB89_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB89_13:                              # %if.end16
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	$0, -8(%rbp)
.LBB89_14:                              # %for.cond17
                                        #   Parent Loop BB89_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB89_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB89_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB89_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB89_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB89_17:                              # %if.end28
                                        #   in Loop: Header=BB89_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB89_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB89_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB89_19:                              # %if.end39
                                        #   in Loop: Header=BB89_14 Depth=2
	jmp	.LBB89_20
.LBB89_20:                              # %for.inc
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_14
.LBB89_21:                              # %for.end
                                        #   in Loop: Header=BB89_8 Depth=1
	jmp	.LBB89_22
.LBB89_22:                              # %for.inc40
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_8
.LBB89_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB89_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_26 Depth 2
                                        #       Child Loop BB89_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB89_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB89_24 Depth=1
	movl	$0, -8(%rbp)
.LBB89_26:                              # %for.cond47
                                        #   Parent Loop BB89_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB89_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB89_26 Depth=2
	movl	$0, -12(%rbp)
.LBB89_28:                              # %for.cond51
                                        #   Parent Loop BB89_24 Depth=1
                                        #     Parent Loop BB89_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB89_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB89_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB89_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_28
.LBB89_31:                              # %for.end63
                                        #   in Loop: Header=BB89_26 Depth=2
	jmp	.LBB89_32
.LBB89_32:                              # %for.inc64
                                        #   in Loop: Header=BB89_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_26
.LBB89_33:                              # %for.end66
                                        #   in Loop: Header=BB89_24 Depth=1
	jmp	.LBB89_34
.LBB89_34:                              # %for.inc67
                                        #   in Loop: Header=BB89_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_24
.LBB89_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB89_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB89_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB89_36 Depth=1
	vmovsd	.LCPI89_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI89_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI89_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB89_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_36
.LBB89_39:                              # %for.end98
	cmpl	$222073927, -20(%rbp)   # imm = 0xD3C9447
	jne	.LBB89_41
.LBB89_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_40
.Lfunc_end89:
	.size	create_context_memory.82, .Lfunc_end89-create_context_memory.82
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.83
.LCPI90_0:
	.quad	4611686018427387904     # double 2
.LCPI90_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.83
	.p2align	4, 0x90
	.type	create_context_memory.83,@function
create_context_memory.83:               # @create_context_memory.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$756272998, -20(%rbp)   # imm = 0x2D13CF66
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB90_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB90_3
.LBB90_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB90_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB90_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB90_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB90_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB90_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB90_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB90_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB90_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB90_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB90_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB90_11:                              # %if.end10
                                        #   in Loop: Header=BB90_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB90_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB90_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB90_13:                              # %if.end16
                                        #   in Loop: Header=BB90_8 Depth=1
	movl	$0, -8(%rbp)
.LBB90_14:                              # %for.cond17
                                        #   Parent Loop BB90_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB90_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB90_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB90_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB90_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB90_17:                              # %if.end28
                                        #   in Loop: Header=BB90_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB90_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB90_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB90_19:                              # %if.end39
                                        #   in Loop: Header=BB90_14 Depth=2
	jmp	.LBB90_20
.LBB90_20:                              # %for.inc
                                        #   in Loop: Header=BB90_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_14
.LBB90_21:                              # %for.end
                                        #   in Loop: Header=BB90_8 Depth=1
	jmp	.LBB90_22
.LBB90_22:                              # %for.inc40
                                        #   in Loop: Header=BB90_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_8
.LBB90_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB90_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_26 Depth 2
                                        #       Child Loop BB90_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB90_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB90_24 Depth=1
	movl	$0, -8(%rbp)
.LBB90_26:                              # %for.cond47
                                        #   Parent Loop BB90_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB90_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB90_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB90_26 Depth=2
	movl	$0, -12(%rbp)
.LBB90_28:                              # %for.cond51
                                        #   Parent Loop BB90_24 Depth=1
                                        #     Parent Loop BB90_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB90_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB90_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB90_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_28
.LBB90_31:                              # %for.end63
                                        #   in Loop: Header=BB90_26 Depth=2
	jmp	.LBB90_32
.LBB90_32:                              # %for.inc64
                                        #   in Loop: Header=BB90_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_26
.LBB90_33:                              # %for.end66
                                        #   in Loop: Header=BB90_24 Depth=1
	jmp	.LBB90_34
.LBB90_34:                              # %for.inc67
                                        #   in Loop: Header=BB90_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_24
.LBB90_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB90_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB90_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB90_36 Depth=1
	vmovsd	.LCPI90_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI90_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI90_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB90_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_36
.LBB90_39:                              # %for.end98
	cmpl	$756272998, -20(%rbp)   # imm = 0x2D13CF66
	jne	.LBB90_41
.LBB90_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_40
.Lfunc_end90:
	.size	create_context_memory.83, .Lfunc_end90-create_context_memory.83
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.84
.LCPI91_0:
	.quad	4611686018427387904     # double 2
.LCPI91_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.84
	.p2align	4, 0x90
	.type	create_context_memory.84,@function
create_context_memory.84:               # @create_context_memory.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1382125522, -20(%rbp)  # imm = 0x52618FD2
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB91_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB91_3
.LBB91_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB91_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB91_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB91_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB91_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB91_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB91_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB91_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB91_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB91_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB91_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB91_11:                              # %if.end10
                                        #   in Loop: Header=BB91_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB91_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB91_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB91_13:                              # %if.end16
                                        #   in Loop: Header=BB91_8 Depth=1
	movl	$0, -8(%rbp)
.LBB91_14:                              # %for.cond17
                                        #   Parent Loop BB91_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB91_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB91_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB91_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB91_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB91_17:                              # %if.end28
                                        #   in Loop: Header=BB91_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB91_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB91_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB91_19:                              # %if.end39
                                        #   in Loop: Header=BB91_14 Depth=2
	jmp	.LBB91_20
.LBB91_20:                              # %for.inc
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_14
.LBB91_21:                              # %for.end
                                        #   in Loop: Header=BB91_8 Depth=1
	jmp	.LBB91_22
.LBB91_22:                              # %for.inc40
                                        #   in Loop: Header=BB91_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_8
.LBB91_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB91_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_26 Depth 2
                                        #       Child Loop BB91_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB91_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB91_24 Depth=1
	movl	$0, -8(%rbp)
.LBB91_26:                              # %for.cond47
                                        #   Parent Loop BB91_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB91_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB91_26 Depth=2
	movl	$0, -12(%rbp)
.LBB91_28:                              # %for.cond51
                                        #   Parent Loop BB91_24 Depth=1
                                        #     Parent Loop BB91_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB91_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB91_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB91_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_28
.LBB91_31:                              # %for.end63
                                        #   in Loop: Header=BB91_26 Depth=2
	jmp	.LBB91_32
.LBB91_32:                              # %for.inc64
                                        #   in Loop: Header=BB91_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_26
.LBB91_33:                              # %for.end66
                                        #   in Loop: Header=BB91_24 Depth=1
	jmp	.LBB91_34
.LBB91_34:                              # %for.inc67
                                        #   in Loop: Header=BB91_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_24
.LBB91_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB91_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB91_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB91_36 Depth=1
	vmovsd	.LCPI91_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI91_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI91_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB91_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_36
.LBB91_39:                              # %for.end98
	cmpl	$1382125522, -20(%rbp)  # imm = 0x52618FD2
	jne	.LBB91_41
.LBB91_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_40
.Lfunc_end91:
	.size	create_context_memory.84, .Lfunc_end91-create_context_memory.84
	.cfi_endproc
                                        # -- End function
	.type	num_mb_per_slice,@object # @num_mb_per_slice
	.comm	num_mb_per_slice,4,4
	.type	number_of_slices,@object # @number_of_slices
	.comm	number_of_slices,4,4
	.type	initialized,@object     # @initialized
	.comm	initialized,8,8
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"create_context_memory: initialized"
	.size	.L.str, 35

	.type	model_number,@object    # @model_number
	.comm	model_number,8,8
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"create_context_memory: model_number"
	.size	.L.str.1, 36

	.type	probability,@object     # @probability
	.data
	.globl	probability
	.p2align	4
probability:
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	4602678819172646912     # double 0.5
	.quad	4602221415580092655     # double 0.474609
	.quad	4601787232547217120     # double 0.45050699999999999
	.quad	4601375099138117191     # double 0.42762899999999998
	.quad	4600983880445686771     # double 0.405912
	.quad	4600612549649210819     # double 0.385299
	.quad	4600260061913575785     # double 0.365732
	.quad	4599925480490059176     # double 0.347159
	.quad	4599607904658735518     # double 0.32952999999999999
	.quad	4599306433699679337     # double 0.31279499999999999
	.quad	4599020292993754725     # double 0.29691099999999998
	.quad	4598748671893028756     # double 0.281833
	.quad	4598490831807162540     # double 0.26751999999999998
	.quad	4598246106203411228     # double 0.25393500000000002
	.quad	4597852365495189480     # double 0.241039
	.quad	4597411373019677361     # double 0.228799
	.quad	4596992754427114019     # double 0.21718000000000001
	.quad	4596595392824791865     # double 0.206151
	.quad	4596218207348800331     # double 0.19568199999999999
	.quad	4595860153164025867     # double 0.18574399999999999
	.quad	4595520329550542999     # double 0.176312
	.quad	4595197727702035196     # double 0.16735800000000001
	.quad	4594891518956171021     # double 0.158859
	.quad	4594600874650619039     # double 0.15079200000000001
	.quad	4594324966123047813     # double 0.14313400000000001
	.quad	4594063108826313982     # double 0.13586599999999999
	.quad	4593814510126883131     # double 0.128966
	.quad	4593485495152505952     # double 0.122417
	.quad	4593037513090372154     # double 0.1162
	.quad	4592612301227954341     # double 0.11029899999999999
	.quad	4592208706643747907     # double 0.104698
	.quad	4591825576416248244     # double 0.099380999999999997
	.quad	4591461901739138822     # double 0.094334000000000001
	.quad	4591116673806103109     # double 0.089542999999999998
	.quad	4590789027926012651     # double 0.084996000000000002
	.quad	4590478027350144954     # double 0.080680000000000001
	.quad	4590182807387371563     # double 0.076582999999999998
	.quad	4589902575404158061     # double 0.072693999999999995
	.quad	4589636538766970031     # double 0.069001999999999994
	.quad	4589384048957461132     # double 0.065498000000000001
	.quad	4589120750508846543     # double 0.062171999999999998
	.quad	4588665634744902990     # double 0.059013999999999997
	.quad	4588233865641427726     # double 0.056017999999999998
	.quad	4587823857931351916     # double 0.053172999999999998
	.quad	4587434746923547105     # double 0.050472999999999997
	.quad	4587065235581320611     # double 0.047909
	.quad	4586714603328732054     # double 0.045476000000000003
	.quad	4586381841359464902     # double 0.043166999999999997
	.quad	4586065940867202626     # double 0.040974999999999998
	.quad	4585766037160816770     # double 0.038893999999999998
	.quad	4585481409664366955     # double 0.036919
	.quad	4585211193686724725     # double 0.035043999999999999
	.quad	4584954668651949702     # double 0.033264000000000002
	.quad	4584711258099289581     # double 0.031574999999999999
	.quad	4584296062242443040     # double 0.029971999999999999
	.quad	4583857375609940135     # double 0.02845
	.quad	4583440882716400912     # double 0.027005000000000001
	.quad	4583045430640320763     # double 0.025633
	.quad	4582670442920947386     # double 0.024331999999999999
	.quad	4582314190176023870     # double 0.023095999999999998
	.quad	4581976095944797913     # double 0.021923000000000002
	.quad	4581655295536141057     # double 0.020809999999999999
	.quad	4581350636028548698     # double 0.019753
	.quad	4581061540961268531     # double 0.018749999999999999
	.size	probability, 1024

	.type	entropy,@object         # @entropy
	.comm	entropy,1024,16
	.type	INIT_MB_TYPE_I,@object  # @INIT_MB_TYPE_I
	.section	.rodata,"a",@progbits
	.p2align	4
INIT_MB_TYPE_I:
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967268              # 0xffffffe4
	.long	127                     # 0x7f
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	4294967268              # 0xffffffe4
	.long	127                     # 0x7f
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_TYPE_I, 264

	.type	INIT_MB_TYPE_P,@object  # @INIT_MB_TYPE_P
	.p2align	4
INIT_MB_TYPE_P:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	23                      # 0x17
	.long	33                      # 0x21
	.long	23                      # 0x17
	.long	2                       # 0x2
	.long	21                      # 0x15
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	9                       # 0x9
	.long	0                       # 0x0
	.long	49                      # 0x31
	.long	4294967259              # 0xffffffdb
	.long	118                     # 0x76
	.long	5                       # 0x5
	.long	57                      # 0x39
	.long	4294967283              # 0xfffffff3
	.long	78                      # 0x4e
	.long	4294967285              # 0xfffffff5
	.long	65                      # 0x41
	.long	1                       # 0x1
	.long	62                      # 0x3e
	.long	26                      # 0x1a
	.long	67                      # 0x43
	.long	16                      # 0x10
	.long	90                      # 0x5a
	.long	9                       # 0x9
	.long	104                     # 0x68
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967250              # 0xffffffd2
	.long	127                     # 0x7f
	.long	4294967276              # 0xffffffec
	.long	104                     # 0x68
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	18                      # 0x12
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	43                      # 0x2b
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	22                      # 0x16
	.long	25                      # 0x19
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	16                      # 0x10
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	9                       # 0x9
	.long	4                       # 0x4
	.long	41                      # 0x29
	.long	4294967267              # 0xffffffe3
	.long	118                     # 0x76
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	4294967290              # 0xfffffffa
	.long	71                      # 0x47
	.long	4294967283              # 0xfffffff3
	.long	79                      # 0x4f
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	57                      # 0x39
	.long	2                       # 0x2
	.long	41                      # 0x29
	.long	36                      # 0x24
	.long	26                      # 0x1a
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967251              # 0xffffffd3
	.long	127                     # 0x7f
	.long	4294967281              # 0xfffffff1
	.long	101                     # 0x65
	.long	4294967292              # 0xfffffffc
	.long	76                      # 0x4c
	.long	26                      # 0x1a
	.long	34                      # 0x22
	.long	19                      # 0x13
	.long	22                      # 0x16
	.long	40                      # 0x28
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	29                      # 0x1d
	.long	16                      # 0x10
	.long	25                      # 0x19
	.long	0                       # 0x0
	.long	14                      # 0xe
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	51                      # 0x33
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	4294967269              # 0xffffffe5
	.long	99                      # 0x63
	.long	26                      # 0x1a
	.long	16                      # 0x10
	.long	4294967292              # 0xfffffffc
	.long	85                      # 0x55
	.long	4294967272              # 0xffffffe8
	.long	102                     # 0x66
	.long	5                       # 0x5
	.long	57                      # 0x39
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	37                      # 0x25
	.long	42                      # 0x2a
	.long	12                      # 0xc
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967264              # 0xffffffe0
	.long	127                     # 0x7f
	.long	4294967274              # 0xffffffea
	.long	117                     # 0x75
	.long	4294967294              # 0xfffffffe
	.long	74                      # 0x4a
	.long	20                      # 0x14
	.long	40                      # 0x28
	.long	20                      # 0x14
	.long	10                      # 0xa
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_TYPE_P, 792

	.type	INIT_B8_TYPE_I,@object  # @INIT_B8_TYPE_I
	.p2align	4
INIT_B8_TYPE_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_B8_TYPE_I, 144

	.type	INIT_B8_TYPE_P,@object  # @INIT_B8_TYPE_P
	.p2align	4
INIT_B8_TYPE_P:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	49                      # 0x31
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	73                      # 0x49
	.long	17                      # 0x11
	.long	50                      # 0x32
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	86                      # 0x56
	.long	4294967279              # 0xffffffef
	.long	95                      # 0x5f
	.long	4294967290              # 0xfffffffa
	.long	61                      # 0x3d
	.long	9                       # 0x9
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	50                      # 0x32
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	10                      # 0xa
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	69                      # 0x45
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	0                       # 0x0
	.long	52                      # 0x34
	.long	8                       # 0x8
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967279              # 0xffffffef
	.long	73                      # 0x49
	.long	14                      # 0xe
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	93                      # 0x5d
	.long	4294967282              # 0xfffffff2
	.long	88                      # 0x58
	.long	4294967290              # 0xfffffffa
	.long	44                      # 0x2c
	.long	4                       # 0x4
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_B8_TYPE_P, 432

	.type	INIT_MV_RES_I,@object   # @INIT_MV_RES_I
	.p2align	4
INIT_MV_RES_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MV_RES_I, 160

	.type	INIT_MV_RES_P,@object   # @INIT_MV_RES_P
	.p2align	4
INIT_MV_RES_P:
	.long	4294967293              # 0xfffffffd
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967285              # 0xfffffff5
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967286              # 0xfffffff6
	.long	94                      # 0x5e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	55                      # 0x37
	.long	7                       # 0x7
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	2                       # 0x2
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	4                       # 0x4
	.long	69                      # 0x45
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	0                       # 0x0
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967286              # 0xfffffff6
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967290              # 0xfffffffa
	.long	85                      # 0x55
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	87                      # 0x57
	.long	4294967293              # 0xfffffffd
	.long	100                     # 0x64
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967289              # 0xfffffff9
	.long	86                      # 0x56
	.long	4294967291              # 0xfffffffb
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	89                      # 0x59
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967281              # 0xfffffff1
	.long	103                     # 0x67
	.long	4294967275              # 0xffffffeb
	.long	116                     # 0x74
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	19                      # 0x13
	.long	57                      # 0x39
	.long	20                      # 0x14
	.long	58                      # 0x3a
	.long	4                       # 0x4
	.long	84                      # 0x54
	.long	6                       # 0x6
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	63                      # 0x3f
	.long	6                       # 0x6
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	90                      # 0x5a
	.long	4294967295              # 0xffffffff
	.long	101                     # 0x65
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MV_RES_P, 480

	.type	INIT_REF_NO_I,@object   # @INIT_REF_NO_I
	.p2align	4
INIT_REF_NO_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_REF_NO_I, 96

	.type	INIT_REF_NO_P,@object   # @INIT_REF_NO_P
	.p2align	4
INIT_REF_NO_P:
	.long	4294967289              # 0xfffffff9
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	80                      # 0x50
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967295              # 0xffffffff
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	77                      # 0x4d
	.long	1                       # 0x1
	.long	70                      # 0x46
	.long	4294967294              # 0xfffffffe
	.long	86                      # 0x56
	.long	4294967291              # 0xfffffffb
	.long	72                      # 0x48
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967294              # 0xfffffffe
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	50                      # 0x32
	.long	1                       # 0x1
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_REF_NO_P, 288

	.type	INIT_DELTA_QP_I,@object # @INIT_DELTA_QP_I
	.p2align	4
INIT_DELTA_QP_I:
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.size	INIT_DELTA_QP_I, 32

	.type	INIT_DELTA_QP_P,@object # @INIT_DELTA_QP_P
	.p2align	4
INIT_DELTA_QP_P:
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.size	INIT_DELTA_QP_P, 96

	.type	INIT_MB_AFF_I,@object   # @INIT_MB_AFF_I
	.p2align	4
INIT_MB_AFF_I:
	.long	0                       # 0x0
	.long	11                      # 0xb
	.long	1                       # 0x1
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_AFF_I, 32

	.type	INIT_MB_AFF_P,@object   # @INIT_MB_AFF_P
	.p2align	4
INIT_MB_AFF_P:
	.long	0                       # 0x0
	.long	45                      # 0x2d
	.long	4294967292              # 0xfffffffc
	.long	78                      # 0x4e
	.long	4294967293              # 0xfffffffd
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	13                      # 0xd
	.long	15                      # 0xf
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	80                      # 0x50
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	7                       # 0x7
	.long	34                      # 0x22
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	4294967276              # 0xffffffec
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_AFF_P, 96

	.type	INIT_TRANSFORM_SIZE_I,@object # @INIT_TRANSFORM_SIZE_I
	.p2align	4
INIT_TRANSFORM_SIZE_I:
	.long	31                      # 0x1f
	.long	21                      # 0x15
	.long	31                      # 0x1f
	.long	31                      # 0x1f
	.long	25                      # 0x19
	.long	50                      # 0x32
	.size	INIT_TRANSFORM_SIZE_I, 24

	.type	INIT_TRANSFORM_SIZE_P,@object # @INIT_TRANSFORM_SIZE_P
	.p2align	4
INIT_TRANSFORM_SIZE_P:
	.long	12                      # 0xc
	.long	40                      # 0x28
	.long	11                      # 0xb
	.long	51                      # 0x33
	.long	14                      # 0xe
	.long	59                      # 0x3b
	.long	25                      # 0x19
	.long	32                      # 0x20
	.long	21                      # 0x15
	.long	49                      # 0x31
	.long	21                      # 0x15
	.long	54                      # 0x36
	.long	21                      # 0x15
	.long	33                      # 0x21
	.long	19                      # 0x13
	.long	50                      # 0x32
	.long	17                      # 0x11
	.long	61                      # 0x3d
	.size	INIT_TRANSFORM_SIZE_P, 72

	.type	INIT_IPR_I,@object      # @INIT_IPR_I
	.p2align	4
INIT_IPR_I:
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.size	INIT_IPR_I, 16

	.type	INIT_IPR_P,@object      # @INIT_IPR_P
	.p2align	4
INIT_IPR_P:
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.size	INIT_IPR_P, 48

	.type	INIT_CIPR_I,@object     # @INIT_CIPR_I
	.p2align	4
INIT_CIPR_I:
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.size	INIT_CIPR_I, 32

	.type	INIT_CIPR_P,@object     # @INIT_CIPR_P
	.p2align	4
INIT_CIPR_P:
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.size	INIT_CIPR_P, 96

	.type	INIT_CBP_I,@object      # @INIT_CBP_I
	.p2align	4
INIT_CBP_I:
	.long	4294967279              # 0xffffffef
	.long	127                     # 0x7f
	.long	4294967283              # 0xfffffff3
	.long	102                     # 0x66
	.long	0                       # 0x0
	.long	82                      # 0x52
	.long	4294967289              # 0xfffffff9
	.long	74                      # 0x4a
	.long	4294967275              # 0xffffffeb
	.long	107                     # 0x6b
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	4294967272              # 0xffffffe8
	.long	127                     # 0x7f
	.long	4294967278              # 0xffffffee
	.long	95                      # 0x5f
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967275              # 0xffffffeb
	.long	114                     # 0x72
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.size	INIT_CBP_I, 96

	.type	INIT_CBP_P,@object      # @INIT_CBP_P
	.p2align	4
INIT_CBP_P:
	.long	4294967269              # 0xffffffe5
	.long	126                     # 0x7e
	.long	4294967268              # 0xffffffe4
	.long	98                      # 0x62
	.long	4294967271              # 0xffffffe7
	.long	101                     # 0x65
	.long	4294967273              # 0xffffffe9
	.long	67                      # 0x43
	.long	4294967268              # 0xffffffe4
	.long	82                      # 0x52
	.long	4294967276              # 0xffffffec
	.long	94                      # 0x5e
	.long	4294967280              # 0xfffffff0
	.long	83                      # 0x53
	.long	4294967274              # 0xffffffea
	.long	110                     # 0x6e
	.long	4294967275              # 0xffffffeb
	.long	91                      # 0x5b
	.long	4294967278              # 0xffffffee
	.long	102                     # 0x66
	.long	4294967283              # 0xfffffff3
	.long	93                      # 0x5d
	.long	4294967267              # 0xffffffe3
	.long	127                     # 0x7f
	.long	4294967257              # 0xffffffd9
	.long	127                     # 0x7f
	.long	4294967278              # 0xffffffee
	.long	91                      # 0x5b
	.long	4294967279              # 0xffffffef
	.long	96                      # 0x60
	.long	4294967270              # 0xffffffe6
	.long	81                      # 0x51
	.long	4294967261              # 0xffffffdd
	.long	98                      # 0x62
	.long	4294967272              # 0xffffffe8
	.long	102                     # 0x66
	.long	4294967273              # 0xffffffe9
	.long	97                      # 0x61
	.long	4294967269              # 0xffffffe5
	.long	119                     # 0x77
	.long	4294967272              # 0xffffffe8
	.long	99                      # 0x63
	.long	4294967275              # 0xffffffeb
	.long	110                     # 0x6e
	.long	4294967278              # 0xffffffee
	.long	102                     # 0x66
	.long	4294967260              # 0xffffffdc
	.long	127                     # 0x7f
	.long	4294967260              # 0xffffffdc
	.long	127                     # 0x7f
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967282              # 0xfffffff2
	.long	95                      # 0x5f
	.long	4294967271              # 0xffffffe7
	.long	84                      # 0x54
	.long	4294967271              # 0xffffffe7
	.long	86                      # 0x56
	.long	4294967284              # 0xfffffff4
	.long	89                      # 0x59
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	4294967282              # 0xfffffff2
	.long	76                      # 0x4c
	.long	4294967278              # 0xffffffee
	.long	103                     # 0x67
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.size	INIT_CBP_P, 288

	.type	INIT_BCBP_I,@object     # @INIT_BCBP_I
	.p2align	4
INIT_BCBP_I:
	.long	4294967279              # 0xffffffef
	.long	123                     # 0x7b
	.long	4294967284              # 0xfffffff4
	.long	115                     # 0x73
	.long	4294967280              # 0xfffffff0
	.long	122                     # 0x7a
	.long	4294967285              # 0xfffffff5
	.long	115                     # 0x73
	.long	4294967284              # 0xfffffff4
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	68                      # 0x44
	.long	4294967281              # 0xfffffff1
	.long	84                      # 0x54
	.long	4294967283              # 0xfffffff3
	.long	104                     # 0x68
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967288              # 0xfffffff8
	.long	93                      # 0x5d
	.long	4294967286              # 0xfffffff6
	.long	90                      # 0x5a
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	4294967290              # 0xfffffffa
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	91                      # 0x5b
	.long	4294967276              # 0xffffffec
	.long	127                     # 0x7f
	.long	4294967292              # 0xfffffffc
	.long	56                      # 0x38
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967289              # 0xfffffff9
	.long	76                      # 0x4c
	.long	4294967274              # 0xffffffea
	.long	125                     # 0x7d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_BCBP_I, 256

	.type	INIT_BCBP_P,@object     # @INIT_BCBP_P
	.p2align	4
INIT_BCBP_P:
	.long	4294967289              # 0xfffffff9
	.long	92                      # 0x5c
	.long	4294967291              # 0xfffffffb
	.long	89                      # 0x59
	.long	4294967289              # 0xfffffff9
	.long	96                      # 0x60
	.long	4294967283              # 0xfffffff3
	.long	108                     # 0x6c
	.long	4294967293              # 0xfffffffd
	.long	46                      # 0x2e
	.long	4294967295              # 0xffffffff
	.long	65                      # 0x41
	.long	4294967295              # 0xffffffff
	.long	57                      # 0x39
	.long	4294967287              # 0xfffffff7
	.long	93                      # 0x5d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	92                      # 0x5c
	.long	4294967288              # 0xfffffff8
	.long	87                      # 0x57
	.long	4294967273              # 0xffffffe9
	.long	126                     # 0x7e
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	6                       # 0x6
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	59                      # 0x3b
	.long	6                       # 0x6
	.long	69                      # 0x45
	.long	4294967295              # 0xffffffff
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967292              # 0xfffffffc
	.long	69                      # 0x45
	.long	4294967288              # 0xfffffff8
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	80                      # 0x50
	.long	4294967291              # 0xfffffffb
	.long	89                      # 0x59
	.long	4294967289              # 0xfffffff9
	.long	94                      # 0x5e
	.long	4294967292              # 0xfffffffc
	.long	92                      # 0x5c
	.long	0                       # 0x0
	.long	39                      # 0x27
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967281              # 0xfffffff1
	.long	84                      # 0x54
	.long	4294967261              # 0xffffffdd
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	73                      # 0x49
	.long	4294967284              # 0xfffffff4
	.long	104                     # 0x68
	.long	4294967287              # 0xfffffff7
	.long	91                      # 0x5b
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	7                       # 0x7
	.long	56                      # 0x38
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	8                       # 0x8
	.long	61                      # 0x3d
	.long	4294967293              # 0xfffffffd
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967289              # 0xfffffff9
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	11                      # 0xb
	.long	80                      # 0x50
	.long	5                       # 0x5
	.long	76                      # 0x4c
	.long	2                       # 0x2
	.long	84                      # 0x54
	.long	5                       # 0x5
	.long	78                      # 0x4e
	.long	4294967290              # 0xfffffffa
	.long	55                      # 0x37
	.long	4                       # 0x4
	.long	61                      # 0x3d
	.long	4294967282              # 0xfffffff2
	.long	83                      # 0x53
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	79                      # 0x4f
	.long	4294967285              # 0xfffffff5
	.long	104                     # 0x68
	.long	4294967285              # 0xfffffff5
	.long	91                      # 0x5b
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967294              # 0xfffffffe
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	4294967292              # 0xfffffffc
	.long	92                      # 0x5c
	.long	4294967290              # 0xfffffffa
	.long	56                      # 0x38
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	4294967288              # 0xfffffff8
	.long	71                      # 0x47
	.long	4294967283              # 0xfffffff3
	.long	98                      # 0x62
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_BCBP_P, 768

	.type	INIT_MAP_I,@object      # @INIT_MAP_I
	.p2align	4
INIT_MAP_I:
	.long	4294967289              # 0xfffffff9
	.long	93                      # 0x5d
	.long	4294967285              # 0xfffffff5
	.long	87                      # 0x57
	.long	4294967293              # 0xfffffffd
	.long	77                      # 0x4d
	.long	4294967291              # 0xfffffffb
	.long	71                      # 0x47
	.long	4294967292              # 0xfffffffc
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	68                      # 0x44
	.long	4294967284              # 0xfffffff4
	.long	84                      # 0x54
	.long	4294967289              # 0xfffffff9
	.long	62                      # 0x3e
	.long	4294967289              # 0xfffffff9
	.long	65                      # 0x41
	.long	8                       # 0x8
	.long	61                      # 0x3d
	.long	5                       # 0x5
	.long	56                      # 0x38
	.long	4294967294              # 0xfffffffe
	.long	66                      # 0x42
	.long	1                       # 0x1
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	4294967294              # 0xfffffffe
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	50                      # 0x32
	.long	7                       # 0x7
	.long	52                      # 0x34
	.long	10                      # 0xa
	.long	35                      # 0x23
	.long	0                       # 0x0
	.long	44                      # 0x2c
	.long	11                      # 0xb
	.long	38                      # 0x26
	.long	1                       # 0x1
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	31                      # 0x1f
	.long	17                      # 0x11
	.long	1                       # 0x1
	.long	51                      # 0x33
	.long	7                       # 0x7
	.long	50                      # 0x32
	.long	28                      # 0x1c
	.long	19                      # 0x13
	.long	16                      # 0x10
	.long	33                      # 0x21
	.long	14                      # 0xe
	.long	62                      # 0x3e
	.long	4294967279              # 0xffffffef
	.long	120                     # 0x78
	.long	4294967276              # 0xffffffec
	.long	112                     # 0x70
	.long	4294967278              # 0xffffffee
	.long	114                     # 0x72
	.long	4294967285              # 0xfffffff5
	.long	85                      # 0x55
	.long	4294967281              # 0xfffffff1
	.long	92                      # 0x5c
	.long	4294967282              # 0xfffffff2
	.long	89                      # 0x59
	.long	4294967270              # 0xffffffe6
	.long	71                      # 0x47
	.long	4294967281              # 0xfffffff1
	.long	81                      # 0x51
	.long	4294967282              # 0xfffffff2
	.long	80                      # 0x50
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967282              # 0xfffffff2
	.long	70                      # 0x46
	.long	4294967272              # 0xffffffe8
	.long	56                      # 0x38
	.long	4294967273              # 0xffffffe9
	.long	68                      # 0x44
	.long	4294967272              # 0xffffffe8
	.long	50                      # 0x32
	.long	4294967285              # 0xfffffff5
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	108                     # 0x6c
	.long	4294967281              # 0xfffffff1
	.long	100                     # 0x64
	.long	4294967283              # 0xfffffff3
	.long	101                     # 0x65
	.long	4294967283              # 0xfffffff3
	.long	91                      # 0x5b
	.long	4294967284              # 0xfffffff4
	.long	94                      # 0x5e
	.long	4294967286              # 0xfffffff6
	.long	88                      # 0x58
	.long	4294967280              # 0xfffffff0
	.long	84                      # 0x54
	.long	4294967286              # 0xfffffff6
	.long	86                      # 0x56
	.long	4294967289              # 0xfffffff9
	.long	83                      # 0x53
	.long	4294967283              # 0xfffffff3
	.long	87                      # 0x57
	.long	4294967277              # 0xffffffed
	.long	94                      # 0x5e
	.long	1                       # 0x1
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	18                      # 0x12
	.long	59                      # 0x3b
	.long	4294967288              # 0xfffffff8
	.long	102                     # 0x66
	.long	4294967281              # 0xfffffff1
	.long	100                     # 0x64
	.long	0                       # 0x0
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	75                      # 0x4b
	.long	2                       # 0x2
	.long	72                      # 0x48
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	71                      # 0x47
	.long	15                      # 0xf
	.long	46                      # 0x2e
	.long	4294967283              # 0xfffffff3
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	21                      # 0x15
	.long	37                      # 0x25
	.long	4294967281              # 0xfffffff1
	.long	72                      # 0x48
	.long	9                       # 0x9
	.long	57                      # 0x39
	.long	16                      # 0x10
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	12                      # 0xc
	.long	72                      # 0x48
	.size	INIT_MAP_I, 960

	.type	INIT_MAP_P,@object      # @INIT_MAP_P
	.p2align	4
INIT_MAP_P:
	.long	4294967294              # 0xfffffffe
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	78                      # 0x4e
	.long	4294967295              # 0xffffffff
	.long	75                      # 0x4b
	.long	4294967289              # 0xfffffff9
	.long	77                      # 0x4d
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	5                       # 0x5
	.long	50                      # 0x32
	.long	4294967293              # 0xfffffffd
	.long	68                      # 0x44
	.long	1                       # 0x1
	.long	50                      # 0x32
	.long	6                       # 0x6
	.long	42                      # 0x2a
	.long	4294967292              # 0xfffffffc
	.long	81                      # 0x51
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	67                      # 0x43
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	4294967294              # 0xfffffffe
	.long	76                      # 0x4c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	4                       # 0x4
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	61                      # 0x3d
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	25                      # 0x19
	.long	12                      # 0xc
	.long	24                      # 0x18
	.long	13                      # 0xd
	.long	29                      # 0x1d
	.long	13                      # 0xd
	.long	36                      # 0x24
	.long	4294967286              # 0xfffffff6
	.long	93                      # 0x5d
	.long	4294967289              # 0xfffffff9
	.long	73                      # 0x49
	.long	4294967294              # 0xfffffffe
	.long	73                      # 0x49
	.long	13                      # 0xd
	.long	46                      # 0x2e
	.long	9                       # 0x9
	.long	49                      # 0x31
	.long	4294967289              # 0xfffffff9
	.long	100                     # 0x64
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967289              # 0xfffffff9
	.long	71                      # 0x47
	.long	4294967291              # 0xfffffffb
	.long	69                      # 0x45
	.long	4294967287              # 0xfffffff7
	.long	70                      # 0x46
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967286              # 0xfffffff6
	.long	68                      # 0x44
	.long	4294967277              # 0xffffffed
	.long	73                      # 0x49
	.long	4294967284              # 0xfffffff4
	.long	69                      # 0x45
	.long	4294967280              # 0xfffffff0
	.long	70                      # 0x46
	.long	4294967281              # 0xfffffff1
	.long	67                      # 0x43
	.long	4294967276              # 0xffffffec
	.long	62                      # 0x3e
	.long	4294967277              # 0xffffffed
	.long	70                      # 0x46
	.long	4294967280              # 0xfffffff0
	.long	66                      # 0x42
	.long	4294967274              # 0xffffffea
	.long	65                      # 0x41
	.long	4294967276              # 0xffffffec
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	53                      # 0x35
	.long	2                       # 0x2
	.long	53                      # 0x35
	.long	5                       # 0x5
	.long	53                      # 0x35
	.long	4294967294              # 0xfffffffe
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	56                      # 0x38
	.long	4294967283              # 0xfffffff3
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	60                      # 0x3c
	.long	4294967295              # 0xffffffff
	.long	62                      # 0x3e
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	4294967290              # 0xfffffffa
	.long	69                      # 0x45
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	14                      # 0xe
	.long	39                      # 0x27
	.long	4                       # 0x4
	.long	51                      # 0x33
	.long	13                      # 0xd
	.long	68                      # 0x44
	.long	3                       # 0x3
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	61                      # 0x3d
	.long	9                       # 0x9
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	7                       # 0x7
	.long	50                      # 0x32
	.long	16                      # 0x10
	.long	39                      # 0x27
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	4                       # 0x4
	.long	52                      # 0x34
	.long	11                      # 0xb
	.long	48                      # 0x30
	.long	4294967291              # 0xfffffffb
	.long	60                      # 0x3c
	.long	4294967295              # 0xffffffff
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	22                      # 0x16
	.long	33                      # 0x21
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	14                      # 0xe
	.long	43                      # 0x2b
	.long	4294967295              # 0xffffffff
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	60                      # 0x3c
	.long	9                       # 0x9
	.long	69                      # 0x45
	.long	4294967283              # 0xfffffff3
	.long	103                     # 0x67
	.long	4294967283              # 0xfffffff3
	.long	91                      # 0x5b
	.long	4294967287              # 0xfffffff7
	.long	89                      # 0x59
	.long	4294967282              # 0xfffffff2
	.long	92                      # 0x5c
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	4294967284              # 0xfffffff4
	.long	87                      # 0x57
	.long	4294967273              # 0xffffffe9
	.long	110                     # 0x6e
	.long	4294967272              # 0xffffffe8
	.long	105                     # 0x69
	.long	4294967286              # 0xfffffff6
	.long	78                      # 0x4e
	.long	4294967276              # 0xffffffec
	.long	112                     # 0x70
	.long	4294967279              # 0xffffffef
	.long	99                      # 0x63
	.long	4294967218              # 0xffffffb2
	.long	127                     # 0x7f
	.long	4294967226              # 0xffffffba
	.long	127                     # 0x7f
	.long	4294967246              # 0xffffffce
	.long	127                     # 0x7f
	.long	4294967250              # 0xffffffd2
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	66                      # 0x42
	.long	4294967291              # 0xfffffffb
	.long	78                      # 0x4e
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	4294967288              # 0xfffffff8
	.long	72                      # 0x48
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	4294967295              # 0xffffffff
	.long	55                      # 0x37
	.long	4294967289              # 0xfffffff9
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	89                      # 0x59
	.long	4294967262              # 0xffffffde
	.long	119                     # 0x77
	.long	4294967293              # 0xfffffffd
	.long	75                      # 0x4b
	.long	32                      # 0x20
	.long	20                      # 0x14
	.long	30                      # 0x1e
	.long	22                      # 0x16
	.long	4294967252              # 0xffffffd4
	.long	127                     # 0x7f
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	4294967279              # 0xffffffef
	.long	80                      # 0x50
	.long	4294967278              # 0xffffffee
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	83                      # 0x53
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967282              # 0xfffffff2
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	4294967291              # 0xfffffffb
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	60                      # 0x3c
	.long	4294967293              # 0xfffffffd
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	67                      # 0x43
	.long	4294967271              # 0xffffffe7
	.long	84                      # 0x54
	.long	4294967282              # 0xfffffff2
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	65                      # 0x41
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	4294967287              # 0xfffffff7
	.long	69                      # 0x45
	.long	4294967285              # 0xfffffff5
	.long	70                      # 0x46
	.long	18                      # 0x12
	.long	55                      # 0x37
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	7                       # 0x7
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	41                      # 0x29
	.long	18                      # 0x12
	.long	25                      # 0x19
	.long	9                       # 0x9
	.long	32                      # 0x20
	.long	5                       # 0x5
	.long	43                      # 0x2b
	.long	9                       # 0x9
	.long	47                      # 0x2f
	.long	0                       # 0x0
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	46                      # 0x2e
	.long	19                      # 0x13
	.long	38                      # 0x26
	.long	4294967292              # 0xfffffffc
	.long	66                      # 0x42
	.long	15                      # 0xf
	.long	38                      # 0x26
	.long	12                      # 0xc
	.long	42                      # 0x2a
	.long	9                       # 0x9
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	89                      # 0x59
	.long	4294967292              # 0xfffffffc
	.long	86                      # 0x56
	.long	4294967284              # 0xfffffff4
	.long	88                      # 0x58
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967293              # 0xfffffffd
	.long	72                      # 0x48
	.long	4294967292              # 0xfffffffc
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	89                      # 0x59
	.long	4294967287              # 0xfffffff7
	.long	69                      # 0x45
	.long	4294967295              # 0xffffffff
	.long	59                      # 0x3b
	.long	5                       # 0x5
	.long	66                      # 0x42
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	4294967294              # 0xfffffffe
	.long	71                      # 0x47
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	44                      # 0x2c
	.long	4294967295              # 0xffffffff
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	4294967289              # 0xfffffff9
	.long	51                      # 0x33
	.long	4294967292              # 0xfffffffc
	.long	47                      # 0x2f
	.long	4294967290              # 0xfffffffa
	.long	42                      # 0x2a
	.long	4294967293              # 0xfffffffd
	.long	41                      # 0x29
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	8                       # 0x8
	.long	76                      # 0x4c
	.long	4294967287              # 0xfffffff7
	.long	78                      # 0x4e
	.long	4294967285              # 0xfffffff5
	.long	83                      # 0x53
	.long	9                       # 0x9
	.long	52                      # 0x34
	.long	0                       # 0x0
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	90                      # 0x5a
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	4294967286              # 0xfffffff6
	.long	72                      # 0x48
	.long	4294967278              # 0xffffffee
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	71                      # 0x47
	.long	4294967285              # 0xfffffff5
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	70                      # 0x46
	.long	4294967279              # 0xffffffef
	.long	75                      # 0x4b
	.long	4294967282              # 0xfffffff2
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	53                      # 0x35
	.long	4294967282              # 0xfffffff2
	.long	59                      # 0x3b
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967285              # 0xfffffff5
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	4294967281              # 0xfffffff1
	.long	72                      # 0x48
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	80                      # 0x50
	.long	4294967275              # 0xffffffeb
	.long	83                      # 0x53
	.long	4294967275              # 0xffffffeb
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	31                      # 0x1f
	.long	4294967271              # 0xffffffe7
	.long	64                      # 0x40
	.long	4294967267              # 0xffffffe3
	.long	94                      # 0x5e
	.long	9                       # 0x9
	.long	75                      # 0x4b
	.long	17                      # 0x11
	.long	63                      # 0x3f
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	35                      # 0x23
	.long	4294967294              # 0xfffffffe
	.long	27                      # 0x1b
	.long	13                      # 0xd
	.long	91                      # 0x5b
	.long	3                       # 0x3
	.long	65                      # 0x41
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	8                       # 0x8
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	66                      # 0x42
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	4294967293              # 0xfffffffd
	.long	68                      # 0x44
	.long	4294967276              # 0xffffffec
	.long	81                      # 0x51
	.long	0                       # 0x0
	.long	30                      # 0x1e
	.long	1                       # 0x1
	.long	7                       # 0x7
	.long	4294967293              # 0xfffffffd
	.long	23                      # 0x17
	.long	4294967275              # 0xffffffeb
	.long	74                      # 0x4a
	.long	16                      # 0x10
	.long	66                      # 0x42
	.long	4294967273              # 0xffffffe9
	.long	124                     # 0x7c
	.long	17                      # 0x11
	.long	37                      # 0x25
	.long	44                      # 0x2c
	.long	4294967278              # 0xffffffee
	.long	50                      # 0x32
	.long	4294967262              # 0xffffffde
	.long	4294967274              # 0xffffffea
	.long	127                     # 0x7f
	.size	INIT_MAP_P, 2880

	.type	INIT_LAST_I,@object     # @INIT_LAST_I
	.p2align	4
INIT_LAST_I:
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	15                      # 0xf
	.long	9                       # 0x9
	.long	8                       # 0x8
	.long	25                      # 0x19
	.long	13                      # 0xd
	.long	18                      # 0x12
	.long	15                      # 0xf
	.long	9                       # 0x9
	.long	13                      # 0xd
	.long	19                      # 0x13
	.long	10                      # 0xa
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	18                      # 0x12
	.long	6                       # 0x6
	.long	29                      # 0x1d
	.long	20                      # 0x14
	.long	33                      # 0x21
	.long	15                      # 0xf
	.long	30                      # 0x1e
	.long	4                       # 0x4
	.long	45                      # 0x2d
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	7                       # 0x7
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	38                      # 0x26
	.long	11                      # 0xb
	.long	45                      # 0x2d
	.long	15                      # 0xf
	.long	39                      # 0x27
	.long	11                      # 0xb
	.long	42                      # 0x2a
	.long	13                      # 0xd
	.long	44                      # 0x2c
	.long	16                      # 0x10
	.long	45                      # 0x2d
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	49                      # 0x31
	.long	30                      # 0x1e
	.long	34                      # 0x22
	.long	18                      # 0x12
	.long	42                      # 0x2a
	.long	10                      # 0xa
	.long	55                      # 0x37
	.long	17                      # 0x11
	.long	51                      # 0x33
	.long	17                      # 0x11
	.long	46                      # 0x2e
	.long	0                       # 0x0
	.long	89                      # 0x59
	.long	23                      # 0x17
	.long	4294967283              # 0xfffffff3
	.long	26                      # 0x1a
	.long	4294967283              # 0xfffffff3
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	49                      # 0x31
	.long	4294967282              # 0xfffffff2
	.long	44                      # 0x2c
	.long	3                       # 0x3
	.long	45                      # 0x2d
	.long	6                       # 0x6
	.long	44                      # 0x2c
	.long	34                      # 0x22
	.long	33                      # 0x21
	.long	54                      # 0x36
	.long	19                      # 0x13
	.long	82                      # 0x52
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	26                      # 0x1a
	.long	4294967277              # 0xffffffed
	.long	22                      # 0x16
	.long	4294967279              # 0xffffffef
	.long	26                      # 0x1a
	.long	4294967279              # 0xffffffef
	.long	30                      # 0x1e
	.long	4294967271              # 0xffffffe7
	.long	28                      # 0x1c
	.long	4294967276              # 0xffffffec
	.long	33                      # 0x21
	.long	4294967273              # 0xffffffe9
	.long	37                      # 0x25
	.long	4294967269              # 0xffffffe5
	.long	33                      # 0x21
	.long	4294967273              # 0xffffffe9
	.long	40                      # 0x28
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967279              # 0xffffffef
	.long	33                      # 0x21
	.long	4294967285              # 0xfffffff5
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	41                      # 0x29
	.long	4294967290              # 0xfffffffa
	.long	38                      # 0x26
	.long	1                       # 0x1
	.long	41                      # 0x29
	.long	17                      # 0x11
	.long	30                      # 0x1e
	.long	4294967290              # 0xfffffffa
	.long	27                      # 0x1b
	.long	3                       # 0x3
	.long	26                      # 0x1a
	.long	22                      # 0x16
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	37                      # 0x25
	.long	4294967280              # 0xfffffff0
	.long	35                      # 0x23
	.long	4294967292              # 0xfffffffc
	.long	38                      # 0x26
	.long	4294967288              # 0xfffffff8
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	37                      # 0x25
	.long	3                       # 0x3
	.long	38                      # 0x26
	.long	5                       # 0x5
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	35                      # 0x23
	.long	16                      # 0x10
	.long	39                      # 0x27
	.long	22                      # 0x16
	.long	14                      # 0xe
	.long	48                      # 0x30
	.long	27                      # 0x1b
	.long	37                      # 0x25
	.long	21                      # 0x15
	.long	60                      # 0x3c
	.long	12                      # 0xc
	.long	68                      # 0x44
	.long	2                       # 0x2
	.long	97                      # 0x61
	.size	INIT_LAST_I, 960

	.type	INIT_LAST_P,@object     # @INIT_LAST_P
	.p2align	4
INIT_LAST_P:
	.long	11                      # 0xb
	.long	28                      # 0x1c
	.long	2                       # 0x2
	.long	40                      # 0x28
	.long	3                       # 0x3
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	49                      # 0x31
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	2                       # 0x2
	.long	44                      # 0x2c
	.long	2                       # 0x2
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	47                      # 0x2f
	.long	4                       # 0x4
	.long	39                      # 0x27
	.long	2                       # 0x2
	.long	62                      # 0x3e
	.long	6                       # 0x6
	.long	46                      # 0x2e
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	54                      # 0x36
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	4                       # 0x4
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	51                      # 0x33
	.long	6                       # 0x6
	.long	57                      # 0x39
	.long	7                       # 0x7
	.long	53                      # 0x35
	.long	6                       # 0x6
	.long	52                      # 0x34
	.long	6                       # 0x6
	.long	55                      # 0x37
	.long	11                      # 0xb
	.long	45                      # 0x2d
	.long	14                      # 0xe
	.long	36                      # 0x24
	.long	8                       # 0x8
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	82                      # 0x52
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	15                      # 0xf
	.long	46                      # 0x2e
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	4294967295              # 0xffffffff
	.long	84                      # 0x54
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	26                      # 0x1a
	.long	4294967287              # 0xfffffff7
	.long	33                      # 0x21
	.long	4294967287              # 0xfffffff7
	.long	39                      # 0x27
	.long	4294967289              # 0xfffffff9
	.long	41                      # 0x29
	.long	4294967294              # 0xfffffffe
	.long	45                      # 0x2d
	.long	3                       # 0x3
	.long	49                      # 0x31
	.long	9                       # 0x9
	.long	45                      # 0x2d
	.long	27                      # 0x1b
	.long	36                      # 0x24
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	25                      # 0x19
	.long	7                       # 0x7
	.long	30                      # 0x1e
	.long	4294967289              # 0xfffffff9
	.long	28                      # 0x1c
	.long	3                       # 0x3
	.long	28                      # 0x1c
	.long	4                       # 0x4
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	34                      # 0x22
	.long	4294967295              # 0xffffffff
	.long	30                      # 0x1e
	.long	6                       # 0x6
	.long	30                      # 0x1e
	.long	6                       # 0x6
	.long	32                      # 0x20
	.long	9                       # 0x9
	.long	31                      # 0x1f
	.long	19                      # 0x13
	.long	26                      # 0x1a
	.long	27                      # 0x1b
	.long	26                      # 0x1a
	.long	30                      # 0x1e
	.long	37                      # 0x25
	.long	20                      # 0x14
	.long	28                      # 0x1c
	.long	34                      # 0x22
	.long	17                      # 0x11
	.long	70                      # 0x46
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	5                       # 0x5
	.long	59                      # 0x3b
	.long	9                       # 0x9
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	16                      # 0x10
	.long	30                      # 0x1e
	.long	18                      # 0x12
	.long	32                      # 0x20
	.long	18                      # 0x12
	.long	35                      # 0x23
	.long	22                      # 0x16
	.long	29                      # 0x1d
	.long	24                      # 0x18
	.long	31                      # 0x1f
	.long	23                      # 0x17
	.long	38                      # 0x26
	.long	18                      # 0x12
	.long	43                      # 0x2b
	.long	20                      # 0x14
	.long	41                      # 0x29
	.long	11                      # 0xb
	.long	63                      # 0x3f
	.long	9                       # 0x9
	.long	59                      # 0x3b
	.long	9                       # 0x9
	.long	64                      # 0x40
	.long	4294967295              # 0xffffffff
	.long	94                      # 0x5e
	.long	4294967294              # 0xfffffffe
	.long	89                      # 0x59
	.long	4294967287              # 0xfffffff7
	.long	108                     # 0x6c
	.long	4                       # 0x4
	.long	45                      # 0x2d
	.long	10                      # 0xa
	.long	28                      # 0x1c
	.long	10                      # 0xa
	.long	31                      # 0x1f
	.long	33                      # 0x21
	.long	4294967285              # 0xfffffff5
	.long	52                      # 0x34
	.long	4294967253              # 0xffffffd5
	.long	18                      # 0x12
	.long	15                      # 0xf
	.long	28                      # 0x1c
	.long	0                       # 0x0
	.long	35                      # 0x23
	.long	4294967274              # 0xffffffea
	.long	38                      # 0x26
	.long	4294967271              # 0xffffffe7
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	39                      # 0x27
	.long	4294967278              # 0xffffffee
	.long	32                      # 0x20
	.long	4294967284              # 0xfffffff4
	.long	102                     # 0x66
	.long	4294967202              # 0xffffffa2
	.zero	8
	.long	56                      # 0x38
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	33                      # 0x21
	.long	4294967292              # 0xfffffffc
	.long	29                      # 0x1d
	.long	10                      # 0xa
	.long	37                      # 0x25
	.long	4294967291              # 0xfffffffb
	.long	51                      # 0x33
	.long	4294967267              # 0xffffffe3
	.long	39                      # 0x27
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967262              # 0xffffffde
	.long	69                      # 0x45
	.long	4294967238              # 0xffffffc6
	.long	67                      # 0x43
	.long	4294967233              # 0xffffffc1
	.long	44                      # 0x2c
	.long	4294967291              # 0xfffffffb
	.long	32                      # 0x20
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	4294967267              # 0xffffffe3
	.long	32                      # 0x20
	.long	1                       # 0x1
	.zero	8
	.long	27                      # 0x1b
	.long	36                      # 0x24
	.long	17                      # 0x11
	.long	4294967286              # 0xfffffff6
	.long	32                      # 0x20
	.long	4294967283              # 0xfffffff3
	.long	42                      # 0x2a
	.long	4294967287              # 0xfffffff7
	.long	49                      # 0x31
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	10                      # 0xa
	.long	66                      # 0x42
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	34                      # 0x22
	.long	4294967266              # 0xffffffe2
	.long	36                      # 0x24
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967269              # 0xffffffe5
	.long	34                      # 0x22
	.long	4294967278              # 0xffffffee
	.long	35                      # 0x23
	.long	4294967280              # 0xfffffff0
	.long	34                      # 0x22
	.long	4294967282              # 0xfffffff2
	.long	32                      # 0x20
	.long	4294967288              # 0xfffffff8
	.long	37                      # 0x25
	.long	4294967290              # 0xfffffffa
	.long	35                      # 0x23
	.long	0                       # 0x0
	.long	30                      # 0x1e
	.long	10                      # 0xa
	.long	28                      # 0x1c
	.long	18                      # 0x12
	.long	26                      # 0x1a
	.long	25                      # 0x19
	.long	29                      # 0x1d
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	75                      # 0x4b
	.long	2                       # 0x2
	.long	72                      # 0x48
	.long	8                       # 0x8
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	14                      # 0xe
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	17                      # 0x11
	.long	35                      # 0x23
	.long	21                      # 0x15
	.long	30                      # 0x1e
	.long	17                      # 0x11
	.long	45                      # 0x2d
	.long	20                      # 0x14
	.long	42                      # 0x2a
	.long	18                      # 0x12
	.long	45                      # 0x2d
	.long	27                      # 0x1b
	.long	26                      # 0x1a
	.long	16                      # 0x10
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	66                      # 0x42
	.long	16                      # 0x10
	.long	56                      # 0x38
	.long	11                      # 0xb
	.long	73                      # 0x49
	.long	10                      # 0xa
	.long	67                      # 0x43
	.long	4294967286              # 0xfffffff6
	.long	116                     # 0x74
	.long	4                       # 0x4
	.long	39                      # 0x27
	.long	0                       # 0x0
	.long	42                      # 0x2a
	.long	7                       # 0x7
	.long	34                      # 0x22
	.long	11                      # 0xb
	.long	29                      # 0x1d
	.long	8                       # 0x8
	.long	31                      # 0x1f
	.long	6                       # 0x6
	.long	37                      # 0x25
	.long	7                       # 0x7
	.long	42                      # 0x2a
	.long	3                       # 0x3
	.long	40                      # 0x28
	.long	8                       # 0x8
	.long	33                      # 0x21
	.long	13                      # 0xd
	.long	43                      # 0x2b
	.long	13                      # 0xd
	.long	36                      # 0x24
	.long	4                       # 0x4
	.long	47                      # 0x2f
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	6                       # 0x6
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	8                       # 0x8
	.long	44                      # 0x2c
	.long	11                      # 0xb
	.long	44                      # 0x2c
	.long	14                      # 0xe
	.long	42                      # 0x2a
	.long	7                       # 0x7
	.long	48                      # 0x30
	.long	4                       # 0x4
	.long	56                      # 0x38
	.long	4                       # 0x4
	.long	52                      # 0x34
	.long	13                      # 0xd
	.long	37                      # 0x25
	.long	9                       # 0x9
	.long	49                      # 0x31
	.long	19                      # 0x13
	.long	58                      # 0x3a
	.long	10                      # 0xa
	.long	48                      # 0x30
	.long	12                      # 0xc
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	20                      # 0x14
	.long	33                      # 0x21
	.long	8                       # 0x8
	.long	63                      # 0x3f
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	30                      # 0x1e
	.long	4294967286              # 0xfffffff6
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	33                      # 0x21
	.long	4294967295              # 0xffffffff
	.long	33                      # 0x21
	.long	7                       # 0x7
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	37                      # 0x25
	.long	23                      # 0x17
	.long	31                      # 0x1f
	.long	38                      # 0x26
	.long	20                      # 0x14
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	35                      # 0x23
	.long	4294967278              # 0xffffffee
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	28                      # 0x1c
	.long	4294967293              # 0xfffffffd
	.long	24                      # 0x18
	.long	10                      # 0xa
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	34                      # 0x22
	.long	4294967282              # 0xfffffff2
	.long	52                      # 0x34
	.long	4294967252              # 0xffffffd4
	.long	39                      # 0x27
	.long	4294967272              # 0xffffffe8
	.long	19                      # 0x13
	.long	17                      # 0x11
	.long	31                      # 0x1f
	.long	25                      # 0x19
	.long	36                      # 0x24
	.long	29                      # 0x1d
	.long	24                      # 0x18
	.long	33                      # 0x21
	.long	34                      # 0x22
	.long	15                      # 0xf
	.long	30                      # 0x1e
	.long	20                      # 0x14
	.long	22                      # 0x16
	.long	73                      # 0x49
	.long	20                      # 0x14
	.long	34                      # 0x22
	.long	19                      # 0x13
	.long	31                      # 0x1f
	.long	27                      # 0x1b
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	19                      # 0x13
	.long	16                      # 0x10
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	21                      # 0x15
	.long	28                      # 0x1c
	.long	25                      # 0x19
	.long	21                      # 0x15
	.long	30                      # 0x1e
	.long	20                      # 0x14
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	27                      # 0x1b
	.long	16                      # 0x10
	.long	24                      # 0x18
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	93                      # 0x5d
	.long	14                      # 0xe
	.long	56                      # 0x38
	.long	15                      # 0xf
	.long	57                      # 0x39
	.long	26                      # 0x1a
	.long	38                      # 0x26
	.long	4294967272              # 0xffffffe8
	.long	127                     # 0x7f
	.size	INIT_LAST_P, 2880

	.type	INIT_ONE_I,@object      # @INIT_ONE_I
	.p2align	4
INIT_ONE_I:
	.long	4294967293              # 0xfffffffd
	.long	71                      # 0x47
	.long	4294967290              # 0xfffffffa
	.long	42                      # 0x2a
	.long	4294967291              # 0xfffffffb
	.long	50                      # 0x32
	.long	4294967293              # 0xfffffffd
	.long	54                      # 0x36
	.long	4294967294              # 0xfffffffe
	.long	62                      # 0x3e
	.long	4294967291              # 0xfffffffb
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	27                      # 0x1b
	.long	4294967293              # 0xfffffffd
	.long	39                      # 0x27
	.long	4294967294              # 0xfffffffe
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	4294967293              # 0xfffffffd
	.long	75                      # 0x4b
	.long	4294967295              # 0xffffffff
	.long	23                      # 0x17
	.long	1                       # 0x1
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	92                      # 0x5c
	.long	4294967281              # 0xfffffff1
	.long	55                      # 0x37
	.long	4294967286              # 0xfffffff6
	.long	60                      # 0x3c
	.long	4294967290              # 0xfffffffa
	.long	62                      # 0x3e
	.long	4294967292              # 0xfffffffc
	.long	65                      # 0x41
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967276              # 0xffffffec
	.long	84                      # 0x54
	.long	4294967285              # 0xfffffff5
	.long	79                      # 0x4f
	.long	4294967290              # 0xfffffffa
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967288              # 0xfffffff8
	.long	78                      # 0x4e
	.long	4294967291              # 0xfffffffb
	.long	33                      # 0x21
	.long	4294967292              # 0xfffffffc
	.long	48                      # 0x30
	.long	4294967294              # 0xfffffffe
	.long	53                      # 0x35
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ONE_I, 320

	.type	INIT_ONE_P,@object      # @INIT_ONE_P
	.p2align	4
INIT_ONE_P:
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967294              # 0xfffffffe
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	52                      # 0x34
	.long	4294967293              # 0xfffffffd
	.long	64                      # 0x40
	.long	4294967287              # 0xfffffff7
	.long	77                      # 0x4d
	.long	3                       # 0x3
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	55                      # 0x37
	.long	4294967290              # 0xfffffffa
	.long	66                      # 0x42
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967289              # 0xfffffff9
	.long	42                      # 0x2a
	.long	4294967288              # 0xfffffff8
	.long	45                      # 0x2d
	.long	4294967291              # 0xfffffffb
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	29                      # 0x1d
	.long	4294967295              # 0xffffffff
	.long	36                      # 0x24
	.long	1                       # 0x1
	.long	38                      # 0x26
	.long	2                       # 0x2
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	29                      # 0x1d
	.long	5                       # 0x5
	.long	31                      # 0x1f
	.long	7                       # 0x7
	.long	42                      # 0x2a
	.long	1                       # 0x1
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	8                       # 0x8
	.long	5                       # 0x5
	.long	10                      # 0xa
	.long	14                      # 0xe
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	13                      # 0xd
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967273              # 0xffffffe9
	.long	112                     # 0x70
	.long	4294967281              # 0xfffffff1
	.long	71                      # 0x47
	.long	4294967289              # 0xfffffff9
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	53                      # 0x35
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967275              # 0xffffffeb
	.long	101                     # 0x65
	.long	4294967293              # 0xfffffffd
	.long	39                      # 0x27
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	4294967289              # 0xfffffff9
	.long	61                      # 0x3d
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	4294967291              # 0xfffffffb
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	4294967295              # 0xffffffff
	.long	36                      # 0x24
	.long	4294967294              # 0xfffffffe
	.long	42                      # 0x2a
	.long	4294967294              # 0xfffffffe
	.long	52                      # 0x34
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	76                      # 0x4c
	.long	4294967286              # 0xfffffff6
	.long	44                      # 0x2c
	.long	4294967286              # 0xfffffff6
	.long	52                      # 0x34
	.long	4294967286              # 0xfffffff6
	.long	57                      # 0x39
	.long	4294967287              # 0xfffffff7
	.long	58                      # 0x3a
	.long	2                       # 0x2
	.long	66                      # 0x42
	.long	4294967287              # 0xfffffff7
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	31                      # 0x1f
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	3                       # 0x3
	.long	52                      # 0x34
	.long	7                       # 0x7
	.long	4                       # 0x4
	.long	10                      # 0xa
	.long	8                       # 0x8
	.long	17                      # 0x11
	.long	8                       # 0x8
	.long	16                      # 0x10
	.long	19                      # 0x13
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967272              # 0xffffffe8
	.long	115                     # 0x73
	.long	4294967274              # 0xffffffea
	.long	82                      # 0x52
	.long	4294967287              # 0xfffffff7
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	4294967275              # 0xffffffeb
	.long	100                     # 0x64
	.long	4294967282              # 0xfffffff2
	.long	57                      # 0x39
	.long	4294967284              # 0xfffffff4
	.long	67                      # 0x43
	.long	4294967285              # 0xfffffff5
	.long	71                      # 0x47
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967289              # 0xfffffff9
	.long	37                      # 0x25
	.long	4294967288              # 0xfffffff8
	.long	44                      # 0x2c
	.long	4294967285              # 0xfffffff5
	.long	49                      # 0x31
	.long	4294967286              # 0xfffffff6
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	82                      # 0x52
	.long	4294967288              # 0xfffffff8
	.long	48                      # 0x30
	.long	4294967288              # 0xfffffff8
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967289              # 0xfffffff9
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967274              # 0xffffffea
	.long	69                      # 0x45
	.long	4294967280              # 0xfffffff0
	.long	75                      # 0x4b
	.long	4294967294              # 0xfffffffe
	.long	58                      # 0x3a
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	4294967283              # 0xfffffff3
	.long	81                      # 0x51
	.long	4294967290              # 0xfffffffa
	.long	38                      # 0x26
	.long	4294967283              # 0xfffffff3
	.long	62                      # 0x3e
	.long	4294967290              # 0xfffffffa
	.long	58                      # 0x3a
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ONE_P, 960

	.type	INIT_ABS_I,@object      # @INIT_ABS_I
	.p2align	4
INIT_ABS_I:
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	72                      # 0x48
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	91                      # 0x5b
	.long	4294967280              # 0xfffffff0
	.long	64                      # 0x40
	.long	4294967288              # 0xfffffff8
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	78                      # 0x4e
	.long	4294967290              # 0xfffffffa
	.long	77                      # 0x4d
	.long	4294967286              # 0xfffffff6
	.long	86                      # 0x56
	.long	4294967294              # 0xfffffffe
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	1                       # 0x1
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967287              # 0xfffffff7
	.long	92                      # 0x5c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	73                      # 0x49
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	4294967289              # 0xfffffff9
	.long	80                      # 0x50
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	4294967279              # 0xffffffef
	.long	110                     # 0x6e
	.long	4294967283              # 0xfffffff3
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	96                      # 0x60
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967277              # 0xffffffed
	.long	117                     # 0x75
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	71                      # 0x47
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	4294967284              # 0xfffffff4
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	4294967282              # 0xfffffff2
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ABS_I, 320

	.type	INIT_ABS_P,@object      # @INIT_ABS_P
	.p2align	4
INIT_ABS_P:
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	4294967292              # 0xfffffffc
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	82                      # 0x52
	.long	4294967279              # 0xffffffef
	.long	102                     # 0x66
	.long	4294967290              # 0xfffffffa
	.long	59                      # 0x3b
	.long	4294967289              # 0xfffffff9
	.long	71                      # 0x47
	.long	4294967284              # 0xfffffff4
	.long	83                      # 0x53
	.long	4294967285              # 0xfffffff5
	.long	87                      # 0x57
	.long	4294967266              # 0xffffffe2
	.long	119                     # 0x77
	.long	4294967284              # 0xfffffff4
	.long	56                      # 0x38
	.long	4294967290              # 0xfffffffa
	.long	60                      # 0x3c
	.long	4294967291              # 0xfffffffb
	.long	62                      # 0x3e
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	90                      # 0x5a
	.long	4294967294              # 0xfffffffe
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	72                      # 0x48
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	40                      # 0x28
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	79                      # 0x4f
	.long	4294967288              # 0xfffffff8
	.long	85                      # 0x55
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	77                      # 0x4d
	.long	4294967287              # 0xfffffff7
	.long	80                      # 0x50
	.long	4294967287              # 0xfffffff7
	.long	84                      # 0x54
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	4294967262              # 0xffffffde
	.long	127                     # 0x7f
	.long	4294967281              # 0xfffffff1
	.long	77                      # 0x4d
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967271              # 0xffffffe7
	.long	107                     # 0x6b
	.long	4294967271              # 0xffffffe7
	.long	111                     # 0x6f
	.long	4294967268              # 0xffffffe4
	.long	122                     # 0x7a
	.long	4294967287              # 0xfffffff7
	.long	57                      # 0x39
	.long	4294967290              # 0xfffffffa
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	65                      # 0x41
	.long	4294967292              # 0xfffffffc
	.long	67                      # 0x43
	.long	4294967289              # 0xfffffff9
	.long	82                      # 0x52
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967280              # 0xfffffff0
	.long	72                      # 0x48
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	4294967292              # 0xfffffffc
	.long	69                      # 0x45
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	86                      # 0x56
	.long	4294967294              # 0xfffffffe
	.long	55                      # 0x37
	.long	4294967294              # 0xfffffffe
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	73                      # 0x49
	.long	4294967288              # 0xfffffff8
	.long	89                      # 0x59
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	37                      # 0x25
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967291              # 0xfffffffb
	.long	73                      # 0x49
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	89                      # 0x59
	.long	4294967283              # 0xfffffff3
	.long	94                      # 0x5e
	.long	4294967285              # 0xfffffff5
	.long	92                      # 0x5c
	.long	4294967267              # 0xffffffe3
	.long	127                     # 0x7f
	.long	4294967275              # 0xffffffeb
	.long	85                      # 0x55
	.long	4294967280              # 0xfffffff0
	.long	88                      # 0x58
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967281              # 0xfffffff1
	.long	98                      # 0x62
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.long	4294967284              # 0xfffffff4
	.long	59                      # 0x3b
	.long	4294967288              # 0xfffffff8
	.long	63                      # 0x3f
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967290              # 0xfffffffa
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	75                      # 0x4b
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967284              # 0xfffffff4
	.long	92                      # 0x5c
	.long	4294967278              # 0xffffffee
	.long	108                     # 0x6c
	.long	4294967283              # 0xfffffff3
	.long	78                      # 0x4e
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967292              # 0xfffffffc
	.long	81                      # 0x51
	.long	4294967283              # 0xfffffff3
	.long	99                      # 0x63
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967280              # 0xfffffff0
	.long	73                      # 0x49
	.long	4294967286              # 0xfffffff6
	.long	76                      # 0x4c
	.long	4294967283              # 0xfffffff3
	.long	86                      # 0x56
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ABS_P, 960

	.type	INIT_FLD_MAP_I,@object  # @INIT_FLD_MAP_I
	.p2align	4
INIT_FLD_MAP_I:
	.long	4294967290              # 0xfffffffa
	.long	93                      # 0x5d
	.long	4294967290              # 0xfffffffa
	.long	84                      # 0x54
	.long	4294967288              # 0xfffffff8
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	4294967294              # 0xfffffffe
	.long	60                      # 0x3c
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	4294967292              # 0xfffffffc
	.long	58                      # 0x3a
	.long	4294967287              # 0xfffffff7
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	71                      # 0x47
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	4294967289              # 0xfffffff9
	.long	62                      # 0x3e
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	14                      # 0xe
	.long	40                      # 0x28
	.long	16                      # 0x10
	.long	27                      # 0x1b
	.long	12                      # 0xc
	.long	29                      # 0x1d
	.long	1                       # 0x1
	.long	44                      # 0x2c
	.long	20                      # 0x14
	.long	36                      # 0x24
	.long	18                      # 0x12
	.long	32                      # 0x20
	.long	5                       # 0x5
	.long	42                      # 0x2a
	.long	1                       # 0x1
	.long	48                      # 0x30
	.long	10                      # 0xa
	.long	62                      # 0x3e
	.long	17                      # 0x11
	.long	46                      # 0x2e
	.long	9                       # 0x9
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	106                     # 0x6a
	.long	4294967283              # 0xfffffff3
	.long	97                      # 0x61
	.long	4294967281              # 0xfffffff1
	.long	90                      # 0x5a
	.long	4294967284              # 0xfffffff4
	.long	90                      # 0x5a
	.long	4294967278              # 0xffffffee
	.long	88                      # 0x58
	.long	4294967286              # 0xfffffff6
	.long	73                      # 0x49
	.long	4294967287              # 0xfffffff7
	.long	79                      # 0x4f
	.long	4294967282              # 0xfffffff2
	.long	86                      # 0x56
	.long	4294967286              # 0xfffffff6
	.long	73                      # 0x49
	.long	4294967286              # 0xfffffff6
	.long	70                      # 0x46
	.long	4294967286              # 0xfffffff6
	.long	69                      # 0x45
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967287              # 0xfffffff7
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	58                      # 0x3a
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	104                     # 0x68
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967280              # 0xfffffff0
	.long	96                      # 0x60
	.long	4294967289              # 0xfffffff9
	.long	88                      # 0x58
	.long	4294967288              # 0xfffffff8
	.long	85                      # 0x55
	.long	4294967289              # 0xfffffff9
	.long	85                      # 0x55
	.long	4294967287              # 0xfffffff7
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	88                      # 0x58
	.long	4                       # 0x4
	.long	66                      # 0x42
	.long	4294967293              # 0xfffffffd
	.long	77                      # 0x4d
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	10                      # 0xa
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	76                      # 0x4c
	.long	4294967295              # 0xffffffff
	.long	83                      # 0x53
	.long	4294967289              # 0xfffffff9
	.long	99                      # 0x63
	.long	4294967282              # 0xfffffff2
	.long	95                      # 0x5f
	.long	2                       # 0x2
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	76                      # 0x4c
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	70                      # 0x46
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	1                       # 0x1
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967282              # 0xfffffff2
	.long	73                      # 0x49
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	4                       # 0x4
	.long	62                      # 0x3e
	.long	4294967295              # 0xffffffff
	.long	68                      # 0x44
	.long	4294967283              # 0xfffffff3
	.long	75                      # 0x4b
	.long	11                      # 0xb
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	70                      # 0x46
	.size	INIT_FLD_MAP_I, 960

	.type	INIT_FLD_MAP_P,@object  # @INIT_FLD_MAP_P
	.p2align	4
INIT_FLD_MAP_P:
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	4294967280              # 0xfffffff0
	.long	106                     # 0x6a
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	4294967275              # 0xffffffeb
	.long	114                     # 0x72
	.long	4294967278              # 0xffffffee
	.long	110                     # 0x6e
	.long	4294967282              # 0xfffffff2
	.long	98                      # 0x62
	.long	4294967274              # 0xffffffea
	.long	110                     # 0x6e
	.long	4294967275              # 0xffffffeb
	.long	106                     # 0x6a
	.long	4294967278              # 0xffffffee
	.long	103                     # 0x67
	.long	4294967275              # 0xffffffeb
	.long	107                     # 0x6b
	.long	4294967273              # 0xffffffe9
	.long	108                     # 0x6c
	.long	4294967270              # 0xffffffe6
	.long	112                     # 0x70
	.long	4294967286              # 0xfffffff6
	.long	96                      # 0x60
	.long	4294967284              # 0xfffffff4
	.long	95                      # 0x5f
	.long	4294967291              # 0xfffffffb
	.long	91                      # 0x5b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967287              # 0xfffffff7
	.long	93                      # 0x5d
	.long	4294967274              # 0xffffffea
	.long	94                      # 0x5e
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	9                       # 0x9
	.long	67                      # 0x43
	.long	4294967292              # 0xfffffffc
	.long	80                      # 0x50
	.long	4294967286              # 0xfffffff6
	.long	85                      # 0x55
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	7                       # 0x7
	.long	60                      # 0x3c
	.long	9                       # 0x9
	.long	58                      # 0x3a
	.long	5                       # 0x5
	.long	61                      # 0x3d
	.long	12                      # 0xc
	.long	50                      # 0x32
	.long	15                      # 0xf
	.long	50                      # 0x32
	.long	18                      # 0x12
	.long	49                      # 0x31
	.long	17                      # 0x11
	.long	54                      # 0x36
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	4294967279              # 0xffffffef
	.long	80                      # 0x50
	.long	4294967278              # 0xffffffee
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	83                      # 0x53
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967282              # 0xfffffff2
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	41                      # 0x29
	.long	7                       # 0x7
	.long	46                      # 0x2e
	.long	4294967295              # 0xffffffff
	.long	51                      # 0x33
	.long	7                       # 0x7
	.long	49                      # 0x31
	.long	8                       # 0x8
	.long	52                      # 0x34
	.long	9                       # 0x9
	.long	41                      # 0x29
	.long	6                       # 0x6
	.long	47                      # 0x2f
	.long	2                       # 0x2
	.long	55                      # 0x37
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	6                       # 0x6
	.long	50                      # 0x32
	.long	5                       # 0x5
	.long	53                      # 0x35
	.long	13                      # 0xd
	.long	49                      # 0x31
	.long	4                       # 0x4
	.long	63                      # 0x3f
	.long	6                       # 0x6
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	69                      # 0x45
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	6                       # 0x6
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	9                       # 0x9
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	43                      # 0x2b
	.long	3                       # 0x3
	.long	53                      # 0x35
	.long	14                      # 0xe
	.long	34                      # 0x22
	.long	10                      # 0xa
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	52                      # 0x34
	.long	13                      # 0xd
	.long	40                      # 0x28
	.long	17                      # 0x11
	.long	32                      # 0x20
	.long	7                       # 0x7
	.long	44                      # 0x2c
	.long	7                       # 0x7
	.long	38                      # 0x26
	.long	13                      # 0xd
	.long	50                      # 0x32
	.long	10                      # 0xa
	.long	57                      # 0x39
	.long	26                      # 0x1a
	.long	43                      # 0x2b
	.long	4294967275              # 0xffffffeb
	.long	126                     # 0x7e
	.long	4294967273              # 0xffffffe9
	.long	124                     # 0x7c
	.long	4294967276              # 0xffffffec
	.long	110                     # 0x6e
	.long	4294967270              # 0xffffffe6
	.long	126                     # 0x7e
	.long	4294967271              # 0xffffffe7
	.long	124                     # 0x7c
	.long	4294967279              # 0xffffffef
	.long	105                     # 0x69
	.long	4294967269              # 0xffffffe5
	.long	121                     # 0x79
	.long	4294967269              # 0xffffffe5
	.long	117                     # 0x75
	.long	4294967279              # 0xffffffef
	.long	102                     # 0x66
	.long	4294967270              # 0xffffffe6
	.long	117                     # 0x75
	.long	4294967269              # 0xffffffe5
	.long	116                     # 0x74
	.long	4294967263              # 0xffffffdf
	.long	122                     # 0x7a
	.long	4294967286              # 0xfffffff6
	.long	95                      # 0x5f
	.long	4294967282              # 0xfffffff2
	.long	100                     # 0x64
	.long	4294967288              # 0xfffffff8
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967279              # 0xffffffef
	.long	111                     # 0x6f
	.long	4294967268              # 0xffffffe4
	.long	114                     # 0x72
	.long	4294967290              # 0xfffffffa
	.long	89                      # 0x59
	.long	4294967294              # 0xfffffffe
	.long	80                      # 0x50
	.long	4294967292              # 0xfffffffc
	.long	82                      # 0x52
	.long	4294967287              # 0xfffffff7
	.long	85                      # 0x55
	.long	4294967288              # 0xfffffff8
	.long	81                      # 0x51
	.long	4294967295              # 0xffffffff
	.long	72                      # 0x48
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	9                       # 0x9
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	1                       # 0x1
	.long	69                      # 0x45
	.long	7                       # 0x7
	.long	69                      # 0x45
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967290              # 0xfffffffa
	.long	78                      # 0x4e
	.long	4294967284              # 0xfffffff4
	.long	72                      # 0x48
	.long	4294967282              # 0xfffffff2
	.long	68                      # 0x44
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967291              # 0xfffffffb
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	57                      # 0x39
	.long	4294967292              # 0xfffffffc
	.long	61                      # 0x3d
	.long	4294967287              # 0xfffffff7
	.long	60                      # 0x3c
	.long	1                       # 0x1
	.long	54                      # 0x36
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	4294967290              # 0xfffffffa
	.long	67                      # 0x43
	.long	4294967280              # 0xfffffff0
	.long	77                      # 0x4d
	.long	4294967294              # 0xfffffffe
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	61                      # 0x3d
	.long	4294967290              # 0xfffffffa
	.long	67                      # 0x43
	.long	4294967293              # 0xfffffffd
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	4294967293              # 0xfffffffd
	.long	65                      # 0x41
	.long	4294967293              # 0xfffffffd
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	9                       # 0x9
	.long	51                      # 0x33
	.long	4294967295              # 0xffffffff
	.long	66                      # 0x42
	.long	4294967294              # 0xfffffffe
	.long	71                      # 0x47
	.long	4294967294              # 0xfffffffe
	.long	75                      # 0x4b
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	14                      # 0xe
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	16                      # 0x10
	.long	37                      # 0x25
	.long	0                       # 0x0
	.long	47                      # 0x2f
	.long	18                      # 0x12
	.long	35                      # 0x23
	.long	11                      # 0xb
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	41                      # 0x29
	.long	2                       # 0x2
	.long	48                      # 0x30
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	3                       # 0x3
	.long	50                      # 0x32
	.long	19                      # 0x13
	.long	40                      # 0x28
	.long	3                       # 0x3
	.long	66                      # 0x42
	.long	18                      # 0x12
	.long	50                      # 0x32
	.long	4294967274              # 0xffffffea
	.long	127                     # 0x7f
	.long	4294967271              # 0xffffffe7
	.long	127                     # 0x7f
	.long	4294967271              # 0xffffffe7
	.long	120                     # 0x78
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967277              # 0xffffffed
	.long	114                     # 0x72
	.long	4294967273              # 0xffffffe9
	.long	117                     # 0x75
	.long	4294967271              # 0xffffffe7
	.long	118                     # 0x76
	.long	4294967270              # 0xffffffe6
	.long	117                     # 0x75
	.long	4294967272              # 0xffffffe8
	.long	113                     # 0x71
	.long	4294967268              # 0xffffffe4
	.long	118                     # 0x76
	.long	4294967265              # 0xffffffe1
	.long	120                     # 0x78
	.long	4294967259              # 0xffffffdb
	.long	124                     # 0x7c
	.long	4294967286              # 0xfffffff6
	.long	94                      # 0x5e
	.long	4294967281              # 0xfffffff1
	.long	102                     # 0x66
	.long	4294967286              # 0xfffffff6
	.long	99                      # 0x63
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	4294967246              # 0xffffffce
	.long	127                     # 0x7f
	.long	4294967291              # 0xfffffffb
	.long	92                      # 0x5c
	.long	17                      # 0x11
	.long	57                      # 0x39
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	94                      # 0x5e
	.long	4294967284              # 0xfffffff4
	.long	91                      # 0x5b
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	71                      # 0x47
	.long	4294967295              # 0xffffffff
	.long	73                      # 0x49
	.long	4                       # 0x4
	.long	64                      # 0x40
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	15                      # 0xf
	.long	57                      # 0x39
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	4294967286              # 0xfffffff6
	.long	72                      # 0x48
	.long	4294967278              # 0xffffffee
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	71                      # 0x47
	.long	4294967285              # 0xfffffff5
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	70                      # 0x46
	.long	4294967279              # 0xffffffef
	.long	75                      # 0x4b
	.long	4294967282              # 0xfffffff2
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	53                      # 0x35
	.long	4294967282              # 0xfffffff2
	.long	59                      # 0x3b
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967285              # 0xfffffff5
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	67                      # 0x43
	.long	1                       # 0x1
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	77                      # 0x4d
	.long	2                       # 0x2
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967291              # 0xfffffffb
	.long	78                      # 0x4e
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	14                      # 0xe
	.long	54                      # 0x36
	.long	15                      # 0xf
	.long	44                      # 0x2c
	.long	5                       # 0x5
	.long	60                      # 0x3c
	.long	2                       # 0x2
	.long	70                      # 0x46
	.long	4294967294              # 0xfffffffe
	.long	76                      # 0x4c
	.long	4294967278              # 0xffffffee
	.long	86                      # 0x56
	.long	12                      # 0xc
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	70                      # 0x46
	.long	11                      # 0xb
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	4294967290              # 0xfffffffa
	.long	74                      # 0x4a
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	54                      # 0x36
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967285              # 0xfffffff5
	.long	82                      # 0x52
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	25                      # 0x19
	.long	42                      # 0x2a
	.size	INIT_FLD_MAP_P, 2880

	.type	INIT_FLD_LAST_I,@object # @INIT_FLD_LAST_I
	.p2align	4
INIT_FLD_LAST_I:
	.long	15                      # 0xf
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	19                      # 0x13
	.long	7                       # 0x7
	.long	16                      # 0x10
	.long	12                      # 0xc
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	11                      # 0xb
	.long	13                      # 0xd
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	16                      # 0x10
	.long	12                      # 0xc
	.long	23                      # 0x17
	.long	13                      # 0xd
	.long	23                      # 0x17
	.long	15                      # 0xf
	.long	20                      # 0x14
	.long	14                      # 0xe
	.long	26                      # 0x1a
	.long	14                      # 0xe
	.long	44                      # 0x2c
	.long	17                      # 0x11
	.long	40                      # 0x28
	.long	17                      # 0x11
	.long	47                      # 0x2f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	24                      # 0x18
	.long	17                      # 0x11
	.long	21                      # 0x15
	.long	21                      # 0x15
	.long	25                      # 0x19
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	27                      # 0x1b
	.long	22                      # 0x16
	.long	29                      # 0x1d
	.long	19                      # 0x13
	.long	35                      # 0x23
	.long	14                      # 0xe
	.long	50                      # 0x32
	.long	10                      # 0xa
	.long	57                      # 0x39
	.long	7                       # 0x7
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	4294967292              # 0xfffffffc
	.long	82                      # 0x52
	.long	4294967293              # 0xfffffffd
	.long	94                      # 0x5e
	.long	9                       # 0x9
	.long	69                      # 0x45
	.long	4294967284              # 0xfffffff4
	.long	109                     # 0x6d
	.long	21                      # 0x15
	.long	4294967286              # 0xfffffff6
	.long	24                      # 0x18
	.long	4294967285              # 0xfffffff5
	.long	28                      # 0x1c
	.long	4294967288              # 0xfffffff8
	.long	28                      # 0x1c
	.long	4294967295              # 0xffffffff
	.long	29                      # 0x1d
	.long	3                       # 0x3
	.long	29                      # 0x1d
	.long	9                       # 0x9
	.long	35                      # 0x23
	.long	20                      # 0x14
	.long	29                      # 0x1d
	.long	36                      # 0x24
	.long	14                      # 0xe
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	36                      # 0x24
	.long	4294967261              # 0xffffffdd
	.long	36                      # 0x24
	.long	4294967262              # 0xffffffde
	.long	32                      # 0x20
	.long	4294967270              # 0xffffffe6
	.long	37                      # 0x25
	.long	4294967266              # 0xffffffe2
	.long	44                      # 0x2c
	.long	4294967264              # 0xffffffe0
	.long	34                      # 0x22
	.long	4294967278              # 0xffffffee
	.long	34                      # 0x22
	.long	4294967281              # 0xfffffff1
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	33                      # 0x21
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967291              # 0xfffffffb
	.long	33                      # 0x21
	.long	0                       # 0x0
	.long	38                      # 0x26
	.long	2                       # 0x2
	.long	33                      # 0x21
	.long	13                      # 0xd
	.long	23                      # 0x17
	.long	35                      # 0x23
	.long	13                      # 0xd
	.long	58                      # 0x3a
	.long	29                      # 0x1d
	.long	4294967293              # 0xfffffffd
	.long	26                      # 0x1a
	.long	0                       # 0x0
	.long	22                      # 0x16
	.long	30                      # 0x1e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	31                      # 0x1f
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967281              # 0xfffffff1
	.long	34                      # 0x22
	.long	4294967293              # 0xfffffffd
	.long	34                      # 0x22
	.long	3                       # 0x3
	.long	36                      # 0x24
	.long	4294967295              # 0xffffffff
	.long	34                      # 0x22
	.long	5                       # 0x5
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	5                       # 0x5
	.long	34                      # 0x22
	.long	12                      # 0xc
	.long	39                      # 0x27
	.long	11                      # 0xb
	.long	30                      # 0x1e
	.long	29                      # 0x1d
	.long	34                      # 0x22
	.long	26                      # 0x1a
	.long	29                      # 0x1d
	.long	39                      # 0x27
	.long	19                      # 0x13
	.long	66                      # 0x42
	.size	INIT_FLD_LAST_I, 960

	.type	INIT_FLD_LAST_P,@object # @INIT_FLD_LAST_P
	.p2align	4
INIT_FLD_LAST_P:
	.long	14                      # 0xe
	.long	11                      # 0xb
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	9                       # 0x9
	.long	11                      # 0xb
	.long	18                      # 0x12
	.long	11                      # 0xb
	.long	21                      # 0x15
	.long	9                       # 0x9
	.long	23                      # 0x17
	.long	4294967294              # 0xfffffffe
	.long	32                      # 0x20
	.long	4294967281              # 0xfffffff1
	.long	32                      # 0x20
	.long	4294967281              # 0xfffffff1
	.long	34                      # 0x22
	.long	4294967275              # 0xffffffeb
	.long	39                      # 0x27
	.long	4294967273              # 0xffffffe9
	.long	42                      # 0x2a
	.long	4294967263              # 0xffffffdf
	.long	41                      # 0x29
	.long	4294967265              # 0xffffffe1
	.long	46                      # 0x2e
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967284              # 0xfffffff4
	.long	21                      # 0x15
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	45                      # 0x2d
	.long	4294967272              # 0xffffffe8
	.long	53                      # 0x35
	.long	4294967251              # 0xffffffd3
	.long	48                      # 0x30
	.long	4294967270              # 0xffffffe6
	.long	65                      # 0x41
	.long	4294967253              # 0xffffffd5
	.long	43                      # 0x2b
	.long	4294967277              # 0xffffffed
	.long	39                      # 0x27
	.long	4294967286              # 0xfffffff6
	.long	30                      # 0x1e
	.long	9                       # 0x9
	.long	18                      # 0x12
	.long	26                      # 0x1a
	.long	20                      # 0x14
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	57                      # 0x39
	.long	4294967282              # 0xfffffff2
	.long	82                      # 0x52
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967277              # 0xffffffed
	.long	97                      # 0x61
	.long	4294967261              # 0xffffffdd
	.long	125                     # 0x7d
	.long	21                      # 0x15
	.long	4294967283              # 0xfffffff3
	.long	33                      # 0x21
	.long	4294967282              # 0xfffffff2
	.long	39                      # 0x27
	.long	4294967289              # 0xfffffff9
	.long	46                      # 0x2e
	.long	4294967294              # 0xfffffffe
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	61                      # 0x3d
	.long	17                      # 0x11
	.long	55                      # 0x37
	.long	34                      # 0x22
	.long	42                      # 0x2a
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	28                      # 0x1c
	.long	0                       # 0x0
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	27                      # 0x1b
	.long	6                       # 0x6
	.long	34                      # 0x22
	.long	8                       # 0x8
	.long	30                      # 0x1e
	.long	10                      # 0xa
	.long	24                      # 0x18
	.long	22                      # 0x16
	.long	33                      # 0x21
	.long	19                      # 0x13
	.long	22                      # 0x16
	.long	32                      # 0x20
	.long	26                      # 0x1a
	.long	31                      # 0x1f
	.long	21                      # 0x15
	.long	41                      # 0x29
	.long	26                      # 0x1a
	.long	44                      # 0x2c
	.long	23                      # 0x17
	.long	47                      # 0x2f
	.long	16                      # 0x10
	.long	65                      # 0x41
	.long	14                      # 0xe
	.long	71                      # 0x47
	.long	8                       # 0x8
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	63                      # 0x3f
	.long	17                      # 0x11
	.long	65                      # 0x41
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	21                      # 0x15
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	20                      # 0x14
	.long	26                      # 0x1a
	.long	23                      # 0x17
	.long	27                      # 0x1b
	.long	32                      # 0x20
	.long	28                      # 0x1c
	.long	23                      # 0x17
	.long	28                      # 0x1c
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	40                      # 0x28
	.long	24                      # 0x18
	.long	32                      # 0x20
	.long	28                      # 0x1c
	.long	29                      # 0x1d
	.long	23                      # 0x17
	.long	42                      # 0x2a
	.long	19                      # 0x13
	.long	57                      # 0x39
	.long	22                      # 0x16
	.long	53                      # 0x35
	.long	22                      # 0x16
	.long	61                      # 0x3d
	.long	11                      # 0xb
	.long	86                      # 0x56
	.long	19                      # 0x13
	.long	4294967290              # 0xfffffffa
	.long	18                      # 0x12
	.long	4294967290              # 0xfffffffa
	.long	14                      # 0xe
	.long	0                       # 0x0
	.long	26                      # 0x1a
	.long	4294967284              # 0xfffffff4
	.long	31                      # 0x1f
	.long	4294967280              # 0xfffffff0
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	33                      # 0x21
	.long	4294967274              # 0xffffffea
	.long	37                      # 0x25
	.long	4294967268              # 0xffffffe4
	.long	39                      # 0x27
	.long	4294967266              # 0xffffffe2
	.long	42                      # 0x2a
	.long	4294967266              # 0xffffffe2
	.long	47                      # 0x2f
	.long	4294967254              # 0xffffffd6
	.long	45                      # 0x2d
	.long	4294967260              # 0xffffffdc
	.long	49                      # 0x31
	.long	4294967262              # 0xffffffde
	.long	41                      # 0x29
	.long	4294967279              # 0xffffffef
	.long	32                      # 0x20
	.long	9                       # 0x9
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	69                      # 0x45
	.long	4294967225              # 0xffffffb9
	.long	63                      # 0x3f
	.long	4294967233              # 0xffffffc1
	.long	66                      # 0x42
	.long	4294967232              # 0xffffffc0
	.long	77                      # 0x4d
	.long	4294967222              # 0xffffffb6
	.long	54                      # 0x36
	.long	4294967257              # 0xffffffd9
	.long	52                      # 0x34
	.long	4294967261              # 0xffffffdd
	.long	41                      # 0x29
	.long	4294967286              # 0xfffffff6
	.long	36                      # 0x24
	.long	0                       # 0x0
	.long	40                      # 0x28
	.long	4294967295              # 0xffffffff
	.long	30                      # 0x1e
	.long	14                      # 0xe
	.long	28                      # 0x1c
	.long	26                      # 0x1a
	.long	23                      # 0x17
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	55                      # 0x37
	.long	11                      # 0xb
	.long	65                      # 0x41
	.long	17                      # 0x11
	.long	4294967286              # 0xfffffff6
	.long	32                      # 0x20
	.long	4294967283              # 0xfffffff3
	.long	42                      # 0x2a
	.long	4294967287              # 0xfffffff7
	.long	49                      # 0x31
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	10                      # 0xa
	.long	66                      # 0x42
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	37                      # 0x25
	.long	4294967263              # 0xffffffdf
	.long	39                      # 0x27
	.long	4294967260              # 0xffffffdc
	.long	40                      # 0x28
	.long	4294967259              # 0xffffffdb
	.long	38                      # 0x26
	.long	4294967266              # 0xffffffe2
	.long	46                      # 0x2e
	.long	4294967263              # 0xffffffdf
	.long	42                      # 0x2a
	.long	4294967266              # 0xffffffe2
	.long	40                      # 0x28
	.long	4294967272              # 0xffffffe8
	.long	49                      # 0x31
	.long	4294967267              # 0xffffffe3
	.long	38                      # 0x26
	.long	4294967284              # 0xfffffff4
	.long	40                      # 0x28
	.long	4294967286              # 0xfffffff6
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	46                      # 0x2e
	.long	4294967291              # 0xfffffffb
	.long	31                      # 0x1f
	.long	20                      # 0x14
	.long	29                      # 0x1d
	.long	30                      # 0x1e
	.long	25                      # 0x19
	.long	44                      # 0x2c
	.long	12                      # 0xc
	.long	48                      # 0x30
	.long	11                      # 0xb
	.long	49                      # 0x31
	.long	26                      # 0x1a
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	22                      # 0x16
	.long	22                      # 0x16
	.long	23                      # 0x17
	.long	22                      # 0x16
	.long	27                      # 0x1b
	.long	21                      # 0x15
	.long	33                      # 0x21
	.long	20                      # 0x14
	.long	26                      # 0x1a
	.long	28                      # 0x1c
	.long	30                      # 0x1e
	.long	24                      # 0x18
	.long	27                      # 0x1b
	.long	34                      # 0x22
	.long	18                      # 0x12
	.long	42                      # 0x2a
	.long	25                      # 0x19
	.long	39                      # 0x27
	.long	18                      # 0x12
	.long	50                      # 0x32
	.long	12                      # 0xc
	.long	70                      # 0x46
	.long	21                      # 0x15
	.long	54                      # 0x36
	.long	14                      # 0xe
	.long	71                      # 0x47
	.long	11                      # 0xb
	.long	83                      # 0x53
	.long	17                      # 0x11
	.long	4294967283              # 0xfffffff3
	.long	16                      # 0x10
	.long	4294967287              # 0xfffffff7
	.long	17                      # 0x11
	.long	4294967284              # 0xfffffff4
	.long	27                      # 0x1b
	.long	4294967275              # 0xffffffeb
	.long	37                      # 0x25
	.long	4294967266              # 0xffffffe2
	.long	41                      # 0x29
	.long	4294967256              # 0xffffffd8
	.long	42                      # 0x2a
	.long	4294967255              # 0xffffffd7
	.long	48                      # 0x30
	.long	4294967249              # 0xffffffd1
	.long	39                      # 0x27
	.long	4294967264              # 0xffffffe0
	.long	46                      # 0x2e
	.long	4294967256              # 0xffffffd8
	.long	52                      # 0x34
	.long	4294967245              # 0xffffffcd
	.long	46                      # 0x2e
	.long	4294967255              # 0xffffffd7
	.long	52                      # 0x34
	.long	4294967257              # 0xffffffd9
	.long	43                      # 0x2b
	.long	4294967277              # 0xffffffed
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	61                      # 0x3d
	.long	4294967241              # 0xffffffc9
	.long	56                      # 0x38
	.long	4294967250              # 0xffffffd2
	.long	62                      # 0x3e
	.long	4294967246              # 0xffffffce
	.long	81                      # 0x51
	.long	4294967229              # 0xffffffbd
	.long	45                      # 0x2d
	.long	4294967276              # 0xffffffec
	.long	35                      # 0x23
	.long	4294967294              # 0xfffffffe
	.long	28                      # 0x1c
	.long	15                      # 0xf
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	39                      # 0x27
	.long	1                       # 0x1
	.long	30                      # 0x1e
	.long	17                      # 0x11
	.long	20                      # 0x14
	.long	38                      # 0x26
	.long	18                      # 0x12
	.long	45                      # 0x2d
	.long	15                      # 0xf
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	79                      # 0x4f
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	30                      # 0x1e
	.long	4294967286              # 0xfffffff6
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	33                      # 0x21
	.long	4294967295              # 0xffffffff
	.long	33                      # 0x21
	.long	7                       # 0x7
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	37                      # 0x25
	.long	23                      # 0x17
	.long	31                      # 0x1f
	.long	38                      # 0x26
	.long	20                      # 0x14
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	36                      # 0x24
	.long	4294967280              # 0xfffffff0
	.long	37                      # 0x25
	.long	4294967282              # 0xfffffff2
	.long	37                      # 0x25
	.long	4294967279              # 0xffffffef
	.long	32                      # 0x20
	.long	1                       # 0x1
	.long	34                      # 0x22
	.long	15                      # 0xf
	.long	29                      # 0x1d
	.long	15                      # 0xf
	.long	24                      # 0x18
	.long	25                      # 0x19
	.long	34                      # 0x22
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	16                      # 0x10
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	28                      # 0x1c
	.long	33                      # 0x21
	.long	41                      # 0x29
	.long	36                      # 0x24
	.long	28                      # 0x1c
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	21                      # 0x15
	.long	62                      # 0x3e
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	19                      # 0x13
	.long	26                      # 0x1a
	.long	36                      # 0x24
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	27                      # 0x1b
	.long	16                      # 0x10
	.long	24                      # 0x18
	.long	30                      # 0x1e
	.long	31                      # 0x1f
	.long	29                      # 0x1d
	.long	22                      # 0x16
	.long	41                      # 0x29
	.long	22                      # 0x16
	.long	42                      # 0x2a
	.long	16                      # 0x10
	.long	60                      # 0x3c
	.long	15                      # 0xf
	.long	52                      # 0x34
	.long	14                      # 0xe
	.long	60                      # 0x3c
	.long	3                       # 0x3
	.long	78                      # 0x4e
	.long	4294967280              # 0xfffffff0
	.long	123                     # 0x7b
	.long	21                      # 0x15
	.long	53                      # 0x35
	.long	22                      # 0x16
	.long	56                      # 0x38
	.long	25                      # 0x19
	.long	61                      # 0x3d
	.size	INIT_FLD_LAST_P, 2880

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
